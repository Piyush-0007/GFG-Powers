var prettierFormat_formatCode = /******/ (function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/ var installedModules = {}; // The require function
  /******/
  /******/ /******/ function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/ if (installedModules[moduleId]) {
      /******/ return installedModules[moduleId].exports;
      /******/
    } // Create a new module (and put it into the cache)
    /******/ /******/ var module = (installedModules[moduleId] = {
      /******/ i: moduleId,
      /******/ l: false,
      /******/ exports: {},
      /******/
    }); // Execute the module function
    /******/
    /******/ /******/ modules[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    ); // Flag the module as loaded
    /******/
    /******/ /******/ module.l = true; // Return the exports of the module
    /******/
    /******/ /******/ return module.exports;
    /******/
  } // expose the modules object (__webpack_modules__)
  /******/
  /******/
  /******/ /******/ __webpack_require__.m = modules; // expose the module cache
  /******/
  /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
  /******/
  /******/ /******/ __webpack_require__.d = function (exports, name, getter) {
    /******/ if (!__webpack_require__.o(exports, name)) {
      /******/ Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter,
      });
      /******/
    }
    /******/
  }; // define __esModule on exports
  /******/
  /******/ /******/ __webpack_require__.r = function (exports) {
    /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, {
        value: "Module",
      });
      /******/
    }
    /******/ Object.defineProperty(exports, "__esModule", { value: true });
    /******/
  }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
  /******/
  /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t =
    function (value, mode) {
      /******/ if (mode & 1) value = __webpack_require__(value);
      /******/ if (mode & 8) return value;
      /******/ if (
        mode & 4 &&
        typeof value === "object" &&
        value &&
        value.__esModule
      )
        return value;
      /******/ var ns = Object.create(null);
      /******/ __webpack_require__.r(ns);
      /******/ Object.defineProperty(ns, "default", {
        enumerable: true,
        value: value,
      });
      /******/ if (mode & 2 && typeof value != "string")
        for (var key in value)
          __webpack_require__.d(
            ns,
            key,
            function (key) {
              return value[key];
            }.bind(null, key)
          );
      /******/ return ns;
      /******/
    }; // getDefaultExport function for compatibility with non-harmony modules
  /******/
  /******/ /******/ __webpack_require__.n = function (module) {
    /******/ var getter =
      module && module.__esModule
        ? /******/ function getDefault() {
            return module["default"];
          }
        : /******/ function getModuleExports() {
            return module;
          };
    /******/ __webpack_require__.d(getter, "a", getter);
    /******/ return getter;
    /******/
  }; // Object.prototype.hasOwnProperty.call
  /******/
  /******/ /******/ __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }; // __webpack_public_path__
  /******/
  /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
  /******/
  /******/
  /******/ /******/ return __webpack_require__((__webpack_require__.s = 15));
  /******/
})(
  /************************************************************************/
  /******/ [
    /* 0 */
    /***/ function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "A",
        function () {
          return isEmpty;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "G",
        function () {
          return keys;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "U",
        function () {
          return values;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "J",
        function () {
          return mapValues;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "I",
        function () {
          return map;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "t",
        function () {
          return flatten;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "s",
        function () {
          return first;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "H",
        function () {
          return last;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "u",
        function () {
          return forEach;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "E",
        function () {
          return isString;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "F",
        function () {
          return isUndefined;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "B",
        function () {
          return isFunction;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "m",
        function () {
          return drop;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "n",
        function () {
          return dropRight;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "p",
        function () {
          return filter;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "P",
        function () {
          return reject;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "N",
        function () {
          return pick;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "w",
        function () {
          return has;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "j",
        function () {
          return contains;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "g",
        function () {
          return cloneArr;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "h",
        function () {
          return cloneObj;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "q",
        function () {
          return find;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "r",
        function () {
          return findAll;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "O",
        function () {
          return reduce;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "i",
        function () {
          return compact;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "T",
        function () {
          return uniq;
        }
      );
      /* unused harmony export partial */
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "y",
        function () {
          return isArray;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "D",
        function () {
          return isRegExp;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "C",
        function () {
          return isObject;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "o",
        function () {
          return every;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "l",
        function () {
          return difference;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "Q",
        function () {
          return some;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "x",
        function () {
          return indexOf;
        }
      );
      /* unused harmony export sortBy */
      /* unused harmony export zipObject */
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "f",
        function () {
          return assign;
        }
      );
      /* unused harmony export assignNoOverwrite */
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "k",
        function () {
          return defaults;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "v",
        function () {
          return groupBy;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "K",
        function () {
          return merge;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "b",
        function () {
          return NOOP;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "a",
        function () {
          return IDENTITY;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "L",
        function () {
          return packArray;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "c",
        function () {
          return PRINT_ERROR;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "d",
        function () {
          return PRINT_WARNING;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "z",
        function () {
          return isES2015MapSupported;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "e",
        function () {
          return applyMixins;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "S",
        function () {
          return toFastProperties;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "M",
        function () {
          return peek;
        }
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "R",
        function () {
          return timer;
        }
      );
      /*
 Utils using lodash style API. (not necessarily 100% compliant) for functional and other utils.
 These utils should replace usage of lodash in the production code base. not because they are any better...
 but for the purpose of being a dependency free library.

 The hotspots in the code are already written in imperative style for performance reasons.
 so writing several dozen utils which may be slower than the original lodash, does not matter as much
 considering they will not be invoked in hotspots...
 */
      function isEmpty(arr) {
        return arr && arr.length === 0;
      }
      function keys(obj) {
        if (obj === undefined || obj === null) {
          return [];
        }
        return Object.keys(obj);
      }
      function values(obj) {
        var vals = [];
        var keys = Object.keys(obj);
        for (var i = 0; i < keys.length; i++) {
          vals.push(obj[keys[i]]);
        }
        return vals;
      }
      function mapValues(obj, callback) {
        var result = [];
        var objKeys = keys(obj);
        for (var idx = 0; idx < objKeys.length; idx++) {
          var currKey = objKeys[idx];
          result.push(callback.call(null, obj[currKey], currKey));
        }
        return result;
      }
      function map(arr, callback) {
        var result = [];
        for (var idx = 0; idx < arr.length; idx++) {
          result.push(callback.call(null, arr[idx], idx));
        }
        return result;
      }
      function flatten(arr) {
        var result = [];
        for (var idx = 0; idx < arr.length; idx++) {
          var currItem = arr[idx];
          if (Array.isArray(currItem)) {
            result = result.concat(flatten(currItem));
          } else {
            result.push(currItem);
          }
        }
        return result;
      }
      function first(arr) {
        return isEmpty(arr) ? undefined : arr[0];
      }
      function last(arr) {
        var len = arr && arr.length;
        return len ? arr[len - 1] : undefined;
      }
      function forEach(collection, iteratorCallback) {
        /* istanbul ignore else */
        if (Array.isArray(collection)) {
          for (var i = 0; i < collection.length; i++) {
            iteratorCallback.call(null, collection[i], i);
          }
        } else if (isObject(collection)) {
          var colKeys = keys(collection);
          for (var i = 0; i < colKeys.length; i++) {
            var key = colKeys[i];
            var value = collection[key];
            iteratorCallback.call(null, value, key);
          }
        } else {
          throw Error("non exhaustive match");
        }
      }
      function isString(item) {
        return typeof item === "string";
      }
      function isUndefined(item) {
        return item === undefined;
      }
      function isFunction(item) {
        return item instanceof Function;
      }
      function drop(arr, howMuch) {
        if (howMuch === void 0) {
          howMuch = 1;
        }
        return arr.slice(howMuch, arr.length);
      }
      function dropRight(arr, howMuch) {
        if (howMuch === void 0) {
          howMuch = 1;
        }
        return arr.slice(0, arr.length - howMuch);
      }
      function filter(arr, predicate) {
        var result = [];
        if (Array.isArray(arr)) {
          for (var i = 0; i < arr.length; i++) {
            var item = arr[i];
            if (predicate.call(null, item)) {
              result.push(item);
            }
          }
        }
        return result;
      }
      function reject(arr, predicate) {
        return filter(arr, function (item) {
          return !predicate(item);
        });
      }
      function pick(obj, predicate) {
        var keys = Object.keys(obj);
        var result = {};
        for (var i = 0; i < keys.length; i++) {
          var currKey = keys[i];
          var currItem = obj[currKey];
          if (predicate(currItem)) {
            result[currKey] = currItem;
          }
        }
        return result;
      }
      function has(obj, prop) {
        if (isObject(obj)) {
          return obj.hasOwnProperty(prop);
        }
        return false;
      }
      function contains(arr, item) {
        return find(arr, function (currItem) {
          return currItem === item;
        }) !== undefined
          ? true
          : false;
      }
      /**
       * shallow clone
       */
      function cloneArr(arr) {
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
          newArr.push(arr[i]);
        }
        return newArr;
      }
      /**
       * shallow clone
       */
      function cloneObj(obj) {
        var clonedObj = {};
        for (var key in obj) {
          /* istanbul ignore else */
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            clonedObj[key] = obj[key];
          }
        }
        return clonedObj;
      }
      function find(arr, predicate) {
        for (var i = 0; i < arr.length; i++) {
          var item = arr[i];
          if (predicate.call(null, item)) {
            return item;
          }
        }
        return undefined;
      }
      function findAll(arr, predicate) {
        var found = [];
        for (var i = 0; i < arr.length; i++) {
          var item = arr[i];
          if (predicate.call(null, item)) {
            found.push(item);
          }
        }
        return found;
      }
      function reduce(arrOrObj, iterator, initial) {
        var isArr = Array.isArray(arrOrObj);
        var vals = isArr ? arrOrObj : values(arrOrObj);
        var objKeys = isArr ? [] : keys(arrOrObj);
        var accumulator = initial;
        for (var i = 0; i < vals.length; i++) {
          accumulator = iterator.call(
            null,
            accumulator,
            vals[i],
            isArr ? i : objKeys[i]
          );
        }
        return accumulator;
      }
      function compact(arr) {
        return reject(arr, function (item) {
          return item === null || item === undefined;
        });
      }
      function uniq(arr, identity) {
        if (identity === void 0) {
          identity = function (item) {
            return item;
          };
        }
        var identities = [];
        return reduce(
          arr,
          function (result, currItem) {
            var currIdentity = identity(currItem);
            if (contains(identities, currIdentity)) {
              return result;
            } else {
              identities.push(currIdentity);
              return result.concat(currItem);
            }
          },
          []
        );
      }
      function partial(func) {
        var restArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          restArgs[_i - 1] = arguments[_i];
        }
        var firstArg = [null];
        var allArgs = firstArg.concat(restArgs);
        return Function.bind.apply(func, allArgs);
      }
      function isArray(obj) {
        return Array.isArray(obj);
      }
      function isRegExp(obj) {
        return obj instanceof RegExp;
      }
      function isObject(obj) {
        return obj instanceof Object;
      }
      function every(arr, predicate) {
        for (var i = 0; i < arr.length; i++) {
          if (!predicate(arr[i], i)) {
            return false;
          }
        }
        return true;
      }
      function difference(arr, values) {
        return reject(arr, function (item) {
          return contains(values, item);
        });
      }
      function some(arr, predicate) {
        for (var i = 0; i < arr.length; i++) {
          if (predicate(arr[i])) {
            return true;
          }
        }
        return false;
      }
      function indexOf(arr, value) {
        for (var i = 0; i < arr.length; i++) {
          if (arr[i] === value) {
            return i;
          }
        }
        return -1;
      }
      function sortBy(arr, orderFunc) {
        var result = cloneArr(arr);
        result.sort(function (a, b) {
          return orderFunc(a) - orderFunc(b);
        });
        return result;
      }
      function zipObject(keys, values) {
        if (keys.length !== values.length) {
          throw Error(
            "can't zipObject with different number of keys and values!"
          );
        }
        var result = {};
        for (var i = 0; i < keys.length; i++) {
          result[keys[i]] = values[i];
        }
        return result;
      }
      /**
       * mutates! (and returns) target
       */
      function assign(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          sources[_i - 1] = arguments[_i];
        }
        for (var i = 0; i < sources.length; i++) {
          var curSource = sources[i];
          var currSourceKeys = keys(curSource);
          for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            target[currKey] = curSource[currKey];
          }
        }
        return target;
      }
      /**
       * mutates! (and returns) target
       */
      function assignNoOverwrite(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          sources[_i - 1] = arguments[_i];
        }
        for (var i = 0; i < sources.length; i++) {
          var curSource = sources[i];
          if (isUndefined(curSource)) {
            continue;
          }
          var currSourceKeys = keys(curSource);
          for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            if (!has(target, currKey)) {
              target[currKey] = curSource[currKey];
            }
          }
        }
        return target;
      }
      function defaults() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          sources[_i] = arguments[_i];
        }
        return assignNoOverwrite.apply(null, [{}].concat(sources));
      }
      function groupBy(arr, groupKeyFunc) {
        var result = {};
        forEach(arr, function (item) {
          var currGroupKey = groupKeyFunc(item);
          var currGroupArr = result[currGroupKey];
          if (currGroupArr) {
            currGroupArr.push(item);
          } else {
            result[currGroupKey] = [item];
          }
        });
        return result;
      }
      /**
       * Merge obj2 into obj1.
       * Will overwrite existing properties with the same name
       */
      function merge(obj1, obj2) {
        var result = cloneObj(obj1);
        var keys2 = keys(obj2);
        for (var i = 0; i < keys2.length; i++) {
          var key = keys2[i];
          var value = obj2[key];
          result[key] = value;
        }
        return result;
      }
      function NOOP() {}
      function IDENTITY(item) {
        return item;
      }
      /**
       * Will return a new packed array with same values.
       */
      function packArray(holeyArr) {
        var result = [];
        for (var i = 0; i < holeyArr.length; i++) {
          var orgValue = holeyArr[i];
          result.push(orgValue !== undefined ? orgValue : undefined);
        }
        return result;
      }
      function PRINT_ERROR(msg) {
        /* istanbul ignore else - can't override global.console in node.js */
        if (console && console.error) {
          console.error("Error: " + msg);
        }
      }
      function PRINT_WARNING(msg) {
        /* istanbul ignore else - can't override global.console in node.js*/
        if (console && console.warn) {
          // TODO: modify docs accordingly
          console.warn("Warning: " + msg);
        }
      }
      function isES2015MapSupported() {
        return typeof Map === "function";
      }
      function applyMixins(derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
          var baseProto = baseCtor.prototype;
          Object.getOwnPropertyNames(baseProto).forEach(function (propName) {
            if (propName === "constructor") {
              return;
            }
            var basePropDescriptor = Object.getOwnPropertyDescriptor(
              baseProto,
              propName
            );
            // Handle Accessors
            if (
              basePropDescriptor &&
              (basePropDescriptor.get || basePropDescriptor.set)
            ) {
              Object.defineProperty(
                derivedCtor.prototype,
                propName,
                basePropDescriptor
              );
            } else {
              derivedCtor.prototype[propName] = baseCtor.prototype[propName];
            }
          });
        });
      }
      // base on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216
      function toFastProperties(toBecomeFast) {
        function FakeConstructor() {}
        // If our object is used as a constructor it would receive
        FakeConstructor.prototype = toBecomeFast;
        var fakeInstance = new FakeConstructor();
        function fakeAccess() {
          return typeof fakeInstance.bar;
        }
        // help V8 understand this is a "real" prototype by actually using
        // the fake instance.
        fakeAccess();
        fakeAccess();
        return toBecomeFast;
        // Eval prevents optimization of this method (even though this is dead code)
        /* istanbul ignore next */
        // tslint:disable-next-line
        eval(toBecomeFast);
      }
      function peek(arr) {
        return arr[arr.length - 1];
      }
      /* istanbul ignore next - for performance tracing*/
      function timer(func) {
        var start = new Date().getTime();
        var val = func();
        var end = new Date().getTime();
        var total = end - start;
        return { time: total, value: val };
      }
      //# sourceMappingURL=utils.js.map

      /***/
    },
    /* 1 */
    /***/ function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      __webpack_require__.r(__webpack_exports__);

      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/version.js
      // needs a separate module as this is required inside chevrotain productive code
      // and also in the entry point for webpack(api.ts).
      // A separate file avoids cyclic dependencies and webpack errors.
      var VERSION = "6.5.0";
      //# sourceMappingURL=version.js.map
      // EXTERNAL MODULE: ./node_modules/chevrotain/lib_esm/src/utils/utils.js
      var utils = __webpack_require__(0);

      // EXTERNAL MODULE: ./node_modules/regexp-to-ast/lib/regexp-to-ast.js
      var regexp_to_ast = __webpack_require__(5);

      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/scan/reg_exp_parser.js

      var regExpAstCache = {};
      var regExpParser = new regexp_to_ast["RegExpParser"]();
      function getRegExpAst(regExp) {
        var regExpStr = regExp.toString();
        if (regExpAstCache.hasOwnProperty(regExpStr)) {
          return regExpAstCache[regExpStr];
        } else {
          var regExpAst = regExpParser.pattern(regExpStr);
          regExpAstCache[regExpStr] = regExpAst;
          return regExpAst;
        }
      }
      function clearRegExpParserCache() {
        regExpAstCache = {};
      }
      //# sourceMappingURL=reg_exp_parser.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/scan/reg_exp.js
      var __extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      var complementErrorMessage =
        "Complement Sets are not supported for first char optimization";
      var failedOptimizationPrefixMsg =
        'Unable to use "first char" lexer optimizations:\n';
      function getOptimizedStartCodesIndices(regExp, ensureOptimizations) {
        if (ensureOptimizations === void 0) {
          ensureOptimizations = false;
        }
        try {
          var ast = getRegExpAst(regExp);
          var firstChars = firstCharOptimizedIndices(
            ast.value,
            {},
            ast.flags.ignoreCase
          );
          return firstChars;
        } catch (e) {
          /* istanbul ignore next */
          // Testing this relies on the regexp-to-ast library having a bug... */
          // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc
          if (e.message === complementErrorMessage) {
            if (ensureOptimizations) {
              Object(utils["d" /* PRINT_WARNING */])(
                "" +
                  failedOptimizationPrefixMsg +
                  ("\tUnable to optimize: < " + regExp.toString() + " >\n") +
                  "\tComplement Sets cannot be automatically optimized.\n" +
                  "\tThis will disable the lexer's first char optimizations.\n" +
                  "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details."
              );
            }
          } else {
            var msgSuffix = "";
            if (ensureOptimizations) {
              msgSuffix =
                "\n\tThis will disable the lexer's first char optimizations.\n" +
                "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.";
            }
            Object(utils["c" /* PRINT_ERROR */])(
              failedOptimizationPrefixMsg +
                "\n" +
                ("\tFailed parsing: < " + regExp.toString() + " >\n") +
                ("\tUsing the regexp-to-ast library version: " +
                  regexp_to_ast["VERSION"] +
                  "\n") +
                "\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues" +
                msgSuffix
            );
          }
        }
        return [];
      }
      function firstCharOptimizedIndices(ast, result, ignoreCase) {
        switch (ast.type) {
          case "Disjunction":
            for (var i = 0; i < ast.value.length; i++) {
              firstCharOptimizedIndices(ast.value[i], result, ignoreCase);
            }
            break;
          case "Alternative":
            var terms = ast.value;
            for (var i = 0; i < terms.length; i++) {
              var term = terms[i];
              // skip terms that cannot effect the first char results
              switch (term.type) {
                case "EndAnchor":
                // A group back reference cannot affect potential starting char.
                // because if a back reference is the first production than automatically
                // the group being referenced has had to come BEFORE so its codes have already been added
                case "GroupBackReference":
                // assertions do not affect potential starting codes
                case "Lookahead":
                case "NegativeLookahead":
                case "StartAnchor":
                case "WordBoundary":
                case "NonWordBoundary":
                  continue;
              }
              var atom = term;
              switch (atom.type) {
                case "Character":
                  addOptimizedIdxToResult(atom.value, result, ignoreCase);
                  break;
                case "Set":
                  if (atom.complement === true) {
                    throw Error(complementErrorMessage);
                  }
                  Object(utils["u" /* forEach */])(atom.value, function (code) {
                    if (typeof code === "number") {
                      addOptimizedIdxToResult(code, result, ignoreCase);
                    } else {
                      // range
                      var range = code;
                      // cannot optimize when ignoreCase is
                      if (ignoreCase === true) {
                        for (
                          var rangeCode = range.from;
                          rangeCode <= range.to;
                          rangeCode++
                        ) {
                          addOptimizedIdxToResult(
                            rangeCode,
                            result,
                            ignoreCase
                          );
                        }
                      }
                      // Optimization (2 orders of magnitude less work for very large ranges)
                      else {
                        // handle unoptimized values
                        for (
                          var rangeCode = range.from;
                          rangeCode <= range.to &&
                          rangeCode < minOptimizationVal;
                          rangeCode++
                        ) {
                          addOptimizedIdxToResult(
                            rangeCode,
                            result,
                            ignoreCase
                          );
                        }
                        // Less common charCode where we optimize for faster init time, by using larger "buckets"
                        if (range.to >= minOptimizationVal) {
                          var minUnOptVal =
                            range.from >= minOptimizationVal
                              ? range.from
                              : minOptimizationVal;
                          var maxUnOptVal = range.to;
                          var minOptIdx = charCodeToOptimizedIndex(minUnOptVal);
                          var maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);
                          for (
                            var currOptIdx = minOptIdx;
                            currOptIdx <= maxOptIdx;
                            currOptIdx++
                          ) {
                            result[currOptIdx] = currOptIdx;
                          }
                        }
                      }
                    }
                  });
                  break;
                case "Group":
                  firstCharOptimizedIndices(atom.value, result, ignoreCase);
                  break;
                /* istanbul ignore next */
                default:
                  throw Error("Non Exhaustive Match");
              }
              // reached a mandatory production, no more **start** codes can be found on this alternative
              var isOptionalQuantifier =
                atom.quantifier !== undefined && atom.quantifier.atLeast === 0;
              if (
                // A group may be optional due to empty contents /(?:)/
                // or if everything inside it is optional /((a)?)/
                (atom.type === "Group" && isWholeOptional(atom) === false) ||
                // If this term is not a group it may only be optional if it has an optional quantifier
                (atom.type !== "Group" && isOptionalQuantifier === false)
              ) {
                break;
              }
            }
            break;
          /* istanbul ignore next */
          default:
            throw Error("non exhaustive match!");
        }
        // console.log(Object.keys(result).length)
        return Object(utils["U" /* values */])(result);
      }
      function addOptimizedIdxToResult(code, result, ignoreCase) {
        var optimizedCharIdx = charCodeToOptimizedIndex(code);
        result[optimizedCharIdx] = optimizedCharIdx;
        if (ignoreCase === true) {
          handleIgnoreCase(code, result);
        }
      }
      function handleIgnoreCase(code, result) {
        var char = String.fromCharCode(code);
        var upperChar = char.toUpperCase();
        /* istanbul ignore else */
        if (upperChar !== char) {
          var optimizedCharIdx = charCodeToOptimizedIndex(
            upperChar.charCodeAt(0)
          );
          result[optimizedCharIdx] = optimizedCharIdx;
        } else {
          var lowerChar = char.toLowerCase();
          if (lowerChar !== char) {
            var optimizedCharIdx = charCodeToOptimizedIndex(
              lowerChar.charCodeAt(0)
            );
            result[optimizedCharIdx] = optimizedCharIdx;
          }
        }
      }
      function findCode(setNode, targetCharCodes) {
        return Object(utils["q" /* find */])(
          setNode.value,
          function (codeOrRange) {
            if (typeof codeOrRange === "number") {
              return Object(utils["j" /* contains */])(
                targetCharCodes,
                codeOrRange
              );
            } else {
              // range
              var range_1 = codeOrRange;
              return (
                Object(utils["q" /* find */])(
                  targetCharCodes,
                  function (targetCode) {
                    return (
                      range_1.from <= targetCode && targetCode <= range_1.to
                    );
                  }
                ) !== undefined
              );
            }
          }
        );
      }
      function isWholeOptional(ast) {
        if (ast.quantifier && ast.quantifier.atLeast === 0) {
          return true;
        }
        if (!ast.value) {
          return false;
        }
        return Object(utils["y" /* isArray */])(ast.value)
          ? Object(utils["o" /* every */])(ast.value, isWholeOptional)
          : isWholeOptional(ast.value);
      }
      var reg_exp_CharCodeFinder = /** @class */ (function (_super) {
        __extends(CharCodeFinder, _super);
        function CharCodeFinder(targetCharCodes) {
          var _this = _super.call(this) || this;
          _this.targetCharCodes = targetCharCodes;
          _this.found = false;
          return _this;
        }
        CharCodeFinder.prototype.visitChildren = function (node) {
          // No need to keep looking...
          if (this.found === true) {
            return;
          }
          // switch lookaheads as they do not actually consume any characters thus
          // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.
          switch (node.type) {
            case "Lookahead":
              this.visitLookahead(node);
              return;
            case "NegativeLookahead":
              this.visitNegativeLookahead(node);
              return;
          }
          _super.prototype.visitChildren.call(this, node);
        };
        CharCodeFinder.prototype.visitCharacter = function (node) {
          if (
            Object(utils["j" /* contains */])(this.targetCharCodes, node.value)
          ) {
            this.found = true;
          }
        };
        CharCodeFinder.prototype.visitSet = function (node) {
          if (node.complement) {
            if (findCode(node, this.targetCharCodes) === undefined) {
              this.found = true;
            }
          } else {
            if (findCode(node, this.targetCharCodes) !== undefined) {
              this.found = true;
            }
          }
        };
        return CharCodeFinder;
      })(regexp_to_ast["BaseRegExpVisitor"]);
      function canMatchCharCode(charCodes, pattern) {
        if (pattern instanceof RegExp) {
          var ast = getRegExpAst(pattern);
          var charCodeFinder = new reg_exp_CharCodeFinder(charCodes);
          charCodeFinder.visit(ast);
          return charCodeFinder.found;
        } else {
          return (
            Object(utils["q" /* find */])(pattern, function (char) {
              return Object(utils["j" /* contains */])(
                charCodes,
                char.charCodeAt(0)
              );
            }) !== undefined
          );
        }
      }
      //# sourceMappingURL=reg_exp.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/scan/lexer.js
      var lexer_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      var PATTERN = "PATTERN";
      var DEFAULT_MODE = "defaultMode";
      var MODES = "modes";
      var SUPPORT_STICKY = typeof new RegExp("(?:)").sticky === "boolean";
      function disableSticky() {
        SUPPORT_STICKY = false;
      }
      function enableSticky() {
        SUPPORT_STICKY = true;
      }
      function analyzeTokenTypes(tokenTypes, options) {
        options = Object(utils["k" /* defaults */])(options, {
          useSticky: SUPPORT_STICKY,
          debug: false,
          safeMode: false,
          positionTracking: "full",
          lineTerminatorCharacters: ["\r", "\n"],
          tracer: function (msg, action) {
            return action();
          },
        });
        var tracer = options.tracer;
        tracer("initCharCodeToOptimizedIndexMap", function () {
          initCharCodeToOptimizedIndexMap();
        });
        var onlyRelevantTypes;
        tracer("Reject Lexer.NA", function () {
          onlyRelevantTypes = Object(utils["P" /* reject */])(
            tokenTypes,
            function (currType) {
              return currType[PATTERN] === lexer_public_Lexer.NA;
            }
          );
        });
        var hasCustom = false;
        var allTransformedPatterns;
        tracer("Transform Patterns", function () {
          hasCustom = false;
          allTransformedPatterns = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            function (currType) {
              var currPattern = currType[PATTERN];
              /* istanbul ignore else */
              if (Object(utils["D" /* isRegExp */])(currPattern)) {
                var regExpSource = currPattern.source;
                if (
                  regExpSource.length === 1 &&
                  // only these regExp meta characters which can appear in a length one regExp
                  regExpSource !== "^" &&
                  regExpSource !== "$" &&
                  regExpSource !== "."
                ) {
                  return regExpSource;
                } else if (
                  regExpSource.length === 2 &&
                  regExpSource[0] === "\\" &&
                  // not a meta character
                  !Object(utils["j" /* contains */])(
                    [
                      "d",
                      "D",
                      "s",
                      "S",
                      "t",
                      "r",
                      "n",
                      "t",
                      "0",
                      "c",
                      "b",
                      "B",
                      "f",
                      "v",
                      "w",
                      "W",
                    ],
                    regExpSource[1]
                  )
                ) {
                  // escaped meta Characters: /\+/ /\[/
                  // or redundant escaping: /\a/
                  // without the escaping "\"
                  return regExpSource[1];
                } else {
                  return options.useSticky
                    ? addStickyFlag(currPattern)
                    : addStartOfInput(currPattern);
                }
              } else if (Object(utils["B" /* isFunction */])(currPattern)) {
                hasCustom = true;
                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
                return { exec: currPattern };
              } else if (Object(utils["w" /* has */])(currPattern, "exec")) {
                hasCustom = true;
                // ICustomPattern
                return currPattern;
              } else if (typeof currPattern === "string") {
                if (currPattern.length === 1) {
                  return currPattern;
                } else {
                  var escapedRegExpString = currPattern.replace(
                    /[\\^$.*+?()[\]{}|]/g,
                    "\\$&"
                  );
                  var wrappedRegExp = new RegExp(escapedRegExpString);
                  return options.useSticky
                    ? addStickyFlag(wrappedRegExp)
                    : addStartOfInput(wrappedRegExp);
                }
              } else {
                throw Error("non exhaustive match");
              }
            }
          );
        });
        var patternIdxToType;
        var patternIdxToGroup;
        var patternIdxToLongerAltIdx;
        var patternIdxToPushMode;
        var patternIdxToPopMode;
        tracer("misc mapping", function () {
          patternIdxToType = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            function (currType) {
              return currType.tokenTypeIdx;
            }
          );
          patternIdxToGroup = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            function (clazz) {
              var groupName = clazz.GROUP;
              /* istanbul ignore next */
              if (groupName === lexer_public_Lexer.SKIPPED) {
                return undefined;
              } else if (Object(utils["E" /* isString */])(groupName)) {
                return groupName;
              } else if (Object(utils["F" /* isUndefined */])(groupName)) {
                return false;
              } else {
                throw Error("non exhaustive match");
              }
            }
          );
          patternIdxToLongerAltIdx = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            function (clazz) {
              var longerAltType = clazz.LONGER_ALT;
              if (longerAltType) {
                var longerAltIdx = Object(utils["x" /* indexOf */])(
                  onlyRelevantTypes,
                  longerAltType
                );
                return longerAltIdx;
              }
            }
          );
          patternIdxToPushMode = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            function (clazz) {
              return clazz.PUSH_MODE;
            }
          );
          patternIdxToPopMode = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            function (clazz) {
              return Object(utils["w" /* has */])(clazz, "POP_MODE");
            }
          );
        });
        var patternIdxToCanLineTerminator;
        tracer("Line Terminator Handling", function () {
          var lineTerminatorCharCodes = getCharCodes(
            options.lineTerminatorCharacters
          );
          patternIdxToCanLineTerminator = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            function (tokType) {
              return false;
            }
          );
          if (options.positionTracking !== "onlyOffset") {
            patternIdxToCanLineTerminator = Object(utils["I" /* map */])(
              onlyRelevantTypes,
              function (tokType) {
                if (Object(utils["w" /* has */])(tokType, "LINE_BREAKS")) {
                  return tokType.LINE_BREAKS;
                } else {
                  if (
                    checkLineBreaksIssues(tokType, lineTerminatorCharCodes) ===
                    false
                  ) {
                    return canMatchCharCode(
                      lineTerminatorCharCodes,
                      tokType.PATTERN
                    );
                  }
                }
              }
            );
          }
        });
        var patternIdxToIsCustom;
        var patternIdxToShort;
        var emptyGroups;
        var patternIdxToConfig;
        tracer("Misc Mapping #2", function () {
          patternIdxToIsCustom = Object(utils["I" /* map */])(
            onlyRelevantTypes,
            isCustomPattern
          );
          patternIdxToShort = Object(utils["I" /* map */])(
            allTransformedPatterns,
            isShortPattern
          );
          emptyGroups = Object(utils["O" /* reduce */])(
            onlyRelevantTypes,
            function (acc, clazz) {
              var groupName = clazz.GROUP;
              if (
                Object(utils["E" /* isString */])(groupName) &&
                !(groupName === lexer_public_Lexer.SKIPPED)
              ) {
                acc[groupName] = [];
              }
              return acc;
            },
            {}
          );
          patternIdxToConfig = Object(utils["I" /* map */])(
            allTransformedPatterns,
            function (x, idx) {
              return {
                pattern: allTransformedPatterns[idx],
                longerAlt: patternIdxToLongerAltIdx[idx],
                canLineTerminator: patternIdxToCanLineTerminator[idx],
                isCustom: patternIdxToIsCustom[idx],
                short: patternIdxToShort[idx],
                group: patternIdxToGroup[idx],
                push: patternIdxToPushMode[idx],
                pop: patternIdxToPopMode[idx],
                tokenTypeIdx: patternIdxToType[idx],
                tokenType: onlyRelevantTypes[idx],
              };
            }
          );
        });
        var canBeOptimized = true;
        var charCodeToPatternIdxToConfig = [];
        if (!options.safeMode) {
          tracer("First Char Optimization", function () {
            charCodeToPatternIdxToConfig = Object(utils["O" /* reduce */])(
              onlyRelevantTypes,
              function (result, currTokType, idx) {
                if (typeof currTokType.PATTERN === "string") {
                  var charCode = currTokType.PATTERN.charCodeAt(0);
                  var optimizedIdx = charCodeToOptimizedIndex(charCode);
                  addToMapOfArrays(
                    result,
                    optimizedIdx,
                    patternIdxToConfig[idx]
                  );
                } else if (
                  Object(utils["y" /* isArray */])(currTokType.START_CHARS_HINT)
                ) {
                  var lastOptimizedIdx_1;
                  Object(utils["u" /* forEach */])(
                    currTokType.START_CHARS_HINT,
                    function (charOrInt) {
                      var charCode =
                        typeof charOrInt === "string"
                          ? charOrInt.charCodeAt(0)
                          : charOrInt;
                      var currOptimizedIdx = charCodeToOptimizedIndex(charCode);
                      // Avoid adding the config multiple times
                      if (lastOptimizedIdx_1 !== currOptimizedIdx) {
                        lastOptimizedIdx_1 = currOptimizedIdx;
                        addToMapOfArrays(
                          result,
                          currOptimizedIdx,
                          patternIdxToConfig[idx]
                        );
                      }
                    }
                  );
                } else if (
                  Object(utils["D" /* isRegExp */])(currTokType.PATTERN)
                ) {
                  if (currTokType.PATTERN.unicode) {
                    canBeOptimized = false;
                    if (options.ensureOptimizations) {
                      Object(utils["c" /* PRINT_ERROR */])(
                        "" +
                          failedOptimizationPrefixMsg +
                          ("\tUnable to analyze < " +
                            currTokType.PATTERN.toString() +
                            " > pattern.\n") +
                          "\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n" +
                          "\tThis will disable the lexer's first char optimizations.\n" +
                          "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE"
                      );
                    }
                  } else {
                    var optimizedCodes = getOptimizedStartCodesIndices(
                      currTokType.PATTERN,
                      options.ensureOptimizations
                    );
                    /* istanbul ignore if */
                    // start code will only be empty given an empty regExp or failure of regexp-to-ast library
                    // the first should be a different validation and the second cannot be tested.
                    if (Object(utils["A" /* isEmpty */])(optimizedCodes)) {
                      // we cannot understand what codes may start possible matches
                      // The optimization correctness requires knowing start codes for ALL patterns.
                      // Not actually sure this is an error, no debug message
                      canBeOptimized = false;
                    }
                    Object(utils["u" /* forEach */])(
                      optimizedCodes,
                      function (code) {
                        addToMapOfArrays(result, code, patternIdxToConfig[idx]);
                      }
                    );
                  }
                } else {
                  if (options.ensureOptimizations) {
                    Object(utils["c" /* PRINT_ERROR */])(
                      "" +
                        failedOptimizationPrefixMsg +
                        ("\tTokenType: <" +
                          currTokType.name +
                          "> is using a custom token pattern without providing <start_chars_hint> parameter.\n") +
                        "\tThis will disable the lexer's first char optimizations.\n" +
                        "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE"
                    );
                  }
                  canBeOptimized = false;
                }
                return result;
              },
              []
            );
          });
        }
        tracer("ArrayPacking", function () {
          charCodeToPatternIdxToConfig = Object(utils["L" /* packArray */])(
            charCodeToPatternIdxToConfig
          );
        });
        return {
          emptyGroups: emptyGroups,
          patternIdxToConfig: patternIdxToConfig,
          charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,
          hasCustom: hasCustom,
          canBeOptimized: canBeOptimized,
        };
      }
      function validatePatterns(tokenTypes, validModesNames) {
        var errors = [];
        var missingResult = findMissingPatterns(tokenTypes);
        errors = errors.concat(missingResult.errors);
        var invalidResult = findInvalidPatterns(missingResult.valid);
        var validTokenTypes = invalidResult.valid;
        errors = errors.concat(invalidResult.errors);
        errors = errors.concat(validateRegExpPattern(validTokenTypes));
        errors = errors.concat(findInvalidGroupType(validTokenTypes));
        errors = errors.concat(
          findModesThatDoNotExist(validTokenTypes, validModesNames)
        );
        errors = errors.concat(findUnreachablePatterns(validTokenTypes));
        return errors;
      }
      function validateRegExpPattern(tokenTypes) {
        var errors = [];
        var withRegExpPatterns = Object(utils["p" /* filter */])(
          tokenTypes,
          function (currTokType) {
            return Object(utils["D" /* isRegExp */])(currTokType[PATTERN]);
          }
        );
        errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));
        errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));
        errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));
        errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));
        errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));
        return errors;
      }
      function findMissingPatterns(tokenTypes) {
        var tokenTypesWithMissingPattern = Object(utils["p" /* filter */])(
          tokenTypes,
          function (currType) {
            return !Object(utils["w" /* has */])(currType, PATTERN);
          }
        );
        var errors = Object(utils["I" /* map */])(
          tokenTypesWithMissingPattern,
          function (currType) {
            return {
              message:
                "Token Type: ->" +
                currType.name +
                "<- missing static 'PATTERN' property",
              type: LexerDefinitionErrorType.MISSING_PATTERN,
              tokenTypes: [currType],
            };
          }
        );
        var valid = Object(utils["l" /* difference */])(
          tokenTypes,
          tokenTypesWithMissingPattern
        );
        return { errors: errors, valid: valid };
      }
      function findInvalidPatterns(tokenTypes) {
        var tokenTypesWithInvalidPattern = Object(utils["p" /* filter */])(
          tokenTypes,
          function (currType) {
            var pattern = currType[PATTERN];
            return (
              !Object(utils["D" /* isRegExp */])(pattern) &&
              !Object(utils["B" /* isFunction */])(pattern) &&
              !Object(utils["w" /* has */])(pattern, "exec") &&
              !Object(utils["E" /* isString */])(pattern)
            );
          }
        );
        var errors = Object(utils["I" /* map */])(
          tokenTypesWithInvalidPattern,
          function (currType) {
            return {
              message:
                "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' can only be a RegExp, a" +
                " Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
              type: LexerDefinitionErrorType.INVALID_PATTERN,
              tokenTypes: [currType],
            };
          }
        );
        var valid = Object(utils["l" /* difference */])(
          tokenTypes,
          tokenTypesWithInvalidPattern
        );
        return { errors: errors, valid: valid };
      }
      var end_of_input = /[^\\][\$]/;
      function findEndOfInputAnchor(tokenTypes) {
        var EndAnchorFinder = /** @class */ (function (_super) {
          lexer_extends(EndAnchorFinder, _super);
          function EndAnchorFinder() {
            var _this =
              (_super !== null && _super.apply(this, arguments)) || this;
            _this.found = false;
            return _this;
          }
          EndAnchorFinder.prototype.visitEndAnchor = function (node) {
            this.found = true;
          };
          return EndAnchorFinder;
        })(regexp_to_ast["BaseRegExpVisitor"]);
        var invalidRegex = Object(utils["p" /* filter */])(
          tokenTypes,
          function (currType) {
            var pattern = currType[PATTERN];
            try {
              var regexpAst = getRegExpAst(pattern);
              var endAnchorVisitor = new EndAnchorFinder();
              endAnchorVisitor.visit(regexpAst);
              return endAnchorVisitor.found;
            } catch (e) {
              // old behavior in case of runtime exceptions with regexp-to-ast.
              /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
              return end_of_input.test(pattern.source);
            }
          }
        );
        var errors = Object(utils["I" /* map */])(
          invalidRegex,
          function (currType) {
            return {
              message:
                "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                currType.name +
                "<- static 'PATTERN' cannot contain end of input anchor '$'\n" +
                "\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
              type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,
              tokenTypes: [currType],
            };
          }
        );
        return errors;
      }
      function findEmptyMatchRegExps(tokenTypes) {
        var matchesEmptyString = Object(utils["p" /* filter */])(
          tokenTypes,
          function (currType) {
            var pattern = currType[PATTERN];
            return pattern.test("");
          }
        );
        var errors = Object(utils["I" /* map */])(
          matchesEmptyString,
          function (currType) {
            return {
              message:
                "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' must not match an empty string",
              type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,
              tokenTypes: [currType],
            };
          }
        );
        return errors;
      }
      var start_of_input = /[^\\[][\^]|^\^/;
      function findStartOfInputAnchor(tokenTypes) {
        var StartAnchorFinder = /** @class */ (function (_super) {
          lexer_extends(StartAnchorFinder, _super);
          function StartAnchorFinder() {
            var _this =
              (_super !== null && _super.apply(this, arguments)) || this;
            _this.found = false;
            return _this;
          }
          StartAnchorFinder.prototype.visitStartAnchor = function (node) {
            this.found = true;
          };
          return StartAnchorFinder;
        })(regexp_to_ast["BaseRegExpVisitor"]);
        var invalidRegex = Object(utils["p" /* filter */])(
          tokenTypes,
          function (currType) {
            var pattern = currType[PATTERN];
            try {
              var regexpAst = getRegExpAst(pattern);
              var startAnchorVisitor = new StartAnchorFinder();
              startAnchorVisitor.visit(regexpAst);
              return startAnchorVisitor.found;
            } catch (e) {
              // old behavior in case of runtime exceptions with regexp-to-ast.
              /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
              return start_of_input.test(pattern.source);
            }
          }
        );
        var errors = Object(utils["I" /* map */])(
          invalidRegex,
          function (currType) {
            return {
              message:
                "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                currType.name +
                "<- static 'PATTERN' cannot contain start of input anchor '^'\n" +
                "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
              type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,
              tokenTypes: [currType],
            };
          }
        );
        return errors;
      }
      function findUnsupportedFlags(tokenTypes) {
        var invalidFlags = Object(utils["p" /* filter */])(
          tokenTypes,
          function (currType) {
            var pattern = currType[PATTERN];
            return (
              pattern instanceof RegExp && (pattern.multiline || pattern.global)
            );
          }
        );
        var errors = Object(utils["I" /* map */])(
          invalidFlags,
          function (currType) {
            return {
              message:
                "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
              type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,
              tokenTypes: [currType],
            };
          }
        );
        return errors;
      }
      // This can only test for identical duplicate RegExps, not semantically equivalent ones.
      function findDuplicatePatterns(tokenTypes) {
        var found = [];
        var identicalPatterns = Object(utils["I" /* map */])(
          tokenTypes,
          function (outerType) {
            return Object(utils["O" /* reduce */])(
              tokenTypes,
              function (result, innerType) {
                if (
                  outerType.PATTERN.source === innerType.PATTERN.source &&
                  !Object(utils["j" /* contains */])(found, innerType) &&
                  innerType.PATTERN !== lexer_public_Lexer.NA
                ) {
                  // this avoids duplicates in the result, each Token Type may only appear in one "set"
                  // in essence we are creating Equivalence classes on equality relation.
                  found.push(innerType);
                  result.push(innerType);
                  return result;
                }
                return result;
              },
              []
            );
          }
        );
        identicalPatterns = Object(utils["i" /* compact */])(identicalPatterns);
        var duplicatePatterns = Object(utils["p" /* filter */])(
          identicalPatterns,
          function (currIdenticalSet) {
            return currIdenticalSet.length > 1;
          }
        );
        var errors = Object(utils["I" /* map */])(
          duplicatePatterns,
          function (setOfIdentical) {
            var tokenTypeNames = Object(utils["I" /* map */])(
              setOfIdentical,
              function (currType) {
                return currType.name;
              }
            );
            var dupPatternSrc = Object(utils["s" /* first */])(
              setOfIdentical
            ).PATTERN;
            return {
              message:
                "The same RegExp pattern ->" +
                dupPatternSrc +
                "<-" +
                ("has been used in all of the following Token Types: " +
                  tokenTypeNames.join(", ") +
                  " <-"),
              type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,
              tokenTypes: setOfIdentical,
            };
          }
        );
        return errors;
      }
      function findInvalidGroupType(tokenTypes) {
        var invalidTypes = Object(utils["p" /* filter */])(
          tokenTypes,
          function (clazz) {
            if (!Object(utils["w" /* has */])(clazz, "GROUP")) {
              return false;
            }
            var group = clazz.GROUP;
            return (
              group !== lexer_public_Lexer.SKIPPED &&
              group !== lexer_public_Lexer.NA &&
              !Object(utils["E" /* isString */])(group)
            );
          }
        );
        var errors = Object(utils["I" /* map */])(
          invalidTypes,
          function (currType) {
            return {
              message:
                "Token Type: ->" +
                currType.name +
                "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
              type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,
              tokenTypes: [currType],
            };
          }
        );
        return errors;
      }
      function findModesThatDoNotExist(tokenTypes, validModes) {
        var invalidModes = Object(utils["p" /* filter */])(
          tokenTypes,
          function (clazz) {
            return (
              clazz.PUSH_MODE !== undefined &&
              !Object(utils["j" /* contains */])(validModes, clazz.PUSH_MODE)
            );
          }
        );
        var errors = Object(utils["I" /* map */])(
          invalidModes,
          function (tokType) {
            var msg =
              "Token Type: ->" +
              tokType.name +
              "<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->" +
              tokType.PUSH_MODE +
              "<-" +
              "which does not exist";
            return {
              message: msg,
              type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,
              tokenTypes: [tokType],
            };
          }
        );
        return errors;
      }
      function findUnreachablePatterns(tokenTypes) {
        var errors = [];
        var canBeTested = Object(utils["O" /* reduce */])(
          tokenTypes,
          function (result, tokType, idx) {
            var pattern = tokType.PATTERN;
            if (pattern === lexer_public_Lexer.NA) {
              return result;
            }
            // a more comprehensive validation for all forms of regExps would require
            // deeper regExp analysis capabilities
            if (Object(utils["E" /* isString */])(pattern)) {
              result.push({
                str: pattern,
                idx: idx,
                tokenType: tokType,
              });
            } else if (
              Object(utils["D" /* isRegExp */])(pattern) &&
              noMetaChar(pattern)
            ) {
              result.push({
                str: pattern.source,
                idx: idx,
                tokenType: tokType,
              });
            }
            return result;
          },
          []
        );
        Object(utils["u" /* forEach */])(
          tokenTypes,
          function (tokType, testIdx) {
            Object(utils["u" /* forEach */])(canBeTested, function (_a) {
              var str = _a.str,
                idx = _a.idx,
                tokenType = _a.tokenType;
              if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {
                var msg =
                  "Token: ->" +
                  tokenType.name +
                  "<- can never be matched.\n" +
                  ("Because it appears AFTER the Token Type ->" +
                    tokType.name +
                    "<-") +
                  "in the lexer's definition.\n" +
                  "See https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE";
                errors.push({
                  message: msg,
                  type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,
                  tokenTypes: [tokType, tokenType],
                });
              }
            });
          }
        );
        return errors;
      }
      function testTokenType(str, pattern) {
        /* istanbul ignore else */
        if (Object(utils["D" /* isRegExp */])(pattern)) {
          var regExpArray = pattern.exec(str);
          return regExpArray !== null && regExpArray.index === 0;
        } else if (Object(utils["B" /* isFunction */])(pattern)) {
          // maintain the API of custom patterns
          return pattern(str, 0, [], {});
        } else if (Object(utils["w" /* has */])(pattern, "exec")) {
          // maintain the API of custom patterns
          return pattern.exec(str, 0, [], {});
        } else if (typeof pattern === "string") {
          return pattern === str;
        } else {
          throw Error("non exhaustive match");
        }
      }
      function noMetaChar(regExp) {
        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
        var metaChars = [
          ".",
          "\\",
          "[",
          "]",
          "|",
          "^",
          "$",
          "(",
          ")",
          "?",
          "*",
          "+",
          "{",
        ];
        return (
          Object(utils["q" /* find */])(metaChars, function (char) {
            return regExp.source.indexOf(char) !== -1;
          }) === undefined
        );
      }
      function addStartOfInput(pattern) {
        var flags = pattern.ignoreCase ? "i" : "";
        // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
        // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
        return new RegExp("^(?:" + pattern.source + ")", flags);
      }
      function addStickyFlag(pattern) {
        var flags = pattern.ignoreCase ? "iy" : "y";
        // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
        // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
        return new RegExp("" + pattern.source, flags);
      }
      function performRuntimeChecks(
        lexerDefinition,
        trackLines,
        lineTerminatorCharacters
      ) {
        var errors = [];
        // some run time checks to help the end users.
        if (!Object(utils["w" /* has */])(lexerDefinition, DEFAULT_MODE)) {
          errors.push({
            message:
              "A MultiMode Lexer cannot be initialized without a <" +
              DEFAULT_MODE +
              "> property in its definition\n",
            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,
          });
        }
        if (!Object(utils["w" /* has */])(lexerDefinition, MODES)) {
          errors.push({
            message:
              "A MultiMode Lexer cannot be initialized without a <" +
              MODES +
              "> property in its definition\n",
            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,
          });
        }
        if (
          Object(utils["w" /* has */])(lexerDefinition, MODES) &&
          Object(utils["w" /* has */])(lexerDefinition, DEFAULT_MODE) &&
          !Object(utils["w" /* has */])(
            lexerDefinition.modes,
            lexerDefinition.defaultMode
          )
        ) {
          errors.push({
            message:
              "A MultiMode Lexer cannot be initialized with a " +
              DEFAULT_MODE +
              ": <" +
              lexerDefinition.defaultMode +
              ">" +
              "which does not exist\n",
            type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,
          });
        }
        if (Object(utils["w" /* has */])(lexerDefinition, MODES)) {
          Object(utils["u" /* forEach */])(
            lexerDefinition.modes,
            function (currModeValue, currModeName) {
              Object(utils["u" /* forEach */])(
                currModeValue,
                function (currTokType, currIdx) {
                  if (Object(utils["F" /* isUndefined */])(currTokType)) {
                    errors.push({
                      message:
                        "A Lexer cannot be initialized using an undefined Token Type. Mode:" +
                        ("<" +
                          currModeName +
                          "> at index: <" +
                          currIdx +
                          ">\n"),
                      type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,
                    });
                  }
                }
              );
            }
          );
        }
        return errors;
      }
      function performWarningRuntimeChecks(
        lexerDefinition,
        trackLines,
        lineTerminatorCharacters
      ) {
        var warnings = [];
        var hasAnyLineBreak = false;
        var allTokenTypes = Object(utils["i" /* compact */])(
          Object(utils["t" /* flatten */])(
            Object(utils["J" /* mapValues */])(
              lexerDefinition.modes,
              function (tokTypes) {
                return tokTypes;
              }
            )
          )
        );
        var concreteTokenTypes = Object(utils["P" /* reject */])(
          allTokenTypes,
          function (currType) {
            return currType[PATTERN] === lexer_public_Lexer.NA;
          }
        );
        var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);
        if (trackLines) {
          Object(utils["u" /* forEach */])(
            concreteTokenTypes,
            function (tokType) {
              var currIssue = checkLineBreaksIssues(
                tokType,
                terminatorCharCodes
              );
              if (currIssue !== false) {
                var message = buildLineBreakIssueMessage(tokType, currIssue);
                var warningDescriptor = {
                  message: message,
                  type: currIssue.issue,
                  tokenType: tokType,
                };
                warnings.push(warningDescriptor);
              } else {
                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.
                if (Object(utils["w" /* has */])(tokType, "LINE_BREAKS")) {
                  if (tokType.LINE_BREAKS === true) {
                    hasAnyLineBreak = true;
                  }
                } else {
                  if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {
                    hasAnyLineBreak = true;
                  }
                }
              }
            }
          );
        }
        if (trackLines && !hasAnyLineBreak) {
          warnings.push({
            message:
              "Warning: No LINE_BREAKS Found.\n" +
              "\tThis Lexer has been defined to track line and column information,\n" +
              "\tBut none of the Token Types can be identified as matching a line terminator.\n" +
              "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n" +
              "\tfor details.",
            type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,
          });
        }
        return warnings;
      }
      function cloneEmptyGroups(emptyGroups) {
        var clonedResult = {};
        var groupKeys = Object(utils["G" /* keys */])(emptyGroups);
        Object(utils["u" /* forEach */])(groupKeys, function (currKey) {
          var currGroupValue = emptyGroups[currKey];
          /* istanbul ignore else */
          if (Object(utils["y" /* isArray */])(currGroupValue)) {
            clonedResult[currKey] = [];
          } else {
            throw Error("non exhaustive match");
          }
        });
        return clonedResult;
      }
      // TODO: refactor to avoid duplication
      function isCustomPattern(tokenType) {
        var pattern = tokenType.PATTERN;
        /* istanbul ignore else */
        if (Object(utils["D" /* isRegExp */])(pattern)) {
          return false;
        } else if (Object(utils["B" /* isFunction */])(pattern)) {
          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
          return true;
        } else if (Object(utils["w" /* has */])(pattern, "exec")) {
          // ICustomPattern
          return true;
        } else if (Object(utils["E" /* isString */])(pattern)) {
          return false;
        } else {
          throw Error("non exhaustive match");
        }
      }
      function isShortPattern(pattern) {
        if (
          Object(utils["E" /* isString */])(pattern) &&
          pattern.length === 1
        ) {
          return pattern.charCodeAt(0);
        } else {
          return false;
        }
      }
      /**
       * Faster than using a RegExp for default newline detection during lexing.
       */
      var LineTerminatorOptimizedTester = {
        // implements /\n|\r\n?/g.test
        test: function (text) {
          var len = text.length;
          for (var i = this.lastIndex; i < len; i++) {
            var c = text.charCodeAt(i);
            if (c === 10) {
              this.lastIndex = i + 1;
              return true;
            } else if (c === 13) {
              if (text.charCodeAt(i + 1) === 10) {
                this.lastIndex = i + 2;
              } else {
                this.lastIndex = i + 1;
              }
              return true;
            }
          }
          return false;
        },
        lastIndex: 0,
      };
      function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {
        if (Object(utils["w" /* has */])(tokType, "LINE_BREAKS")) {
          // if the user explicitly declared the line_breaks option we will respect their choice
          // and assume it is correct.
          return false;
        } else {
          /* istanbul ignore else */
          if (Object(utils["D" /* isRegExp */])(tokType.PATTERN)) {
            try {
              canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);
            } catch (e) {
              /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */
              return {
                issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,
                errMsg: e.message,
              };
            }
            return false;
          } else if (Object(utils["E" /* isString */])(tokType.PATTERN)) {
            // string literal patterns can always be analyzed to detect line terminator usage
            return false;
          } else if (isCustomPattern(tokType)) {
            // custom token types
            return {
              issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK,
            };
          } else {
            throw Error("non exhaustive match");
          }
        }
      }
      function buildLineBreakIssueMessage(tokType, details) {
        /* istanbul ignore else */
        if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {
          return (
            "Warning: unable to identify line terminator usage in pattern.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            ("\t Root cause: " + details.errMsg + ".\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR"
          );
        } else if (
          details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK
        ) {
          return (
            "Warning: A Custom Token Pattern should specify the <line_breaks> option.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK"
          );
        } else {
          throw Error("non exhaustive match");
        }
      }
      function getCharCodes(charsOrCodes) {
        var charCodes = Object(utils["I" /* map */])(
          charsOrCodes,
          function (numOrString) {
            if (
              Object(utils["E" /* isString */])(numOrString) &&
              numOrString.length > 0
            ) {
              return numOrString.charCodeAt(0);
            } else {
              return numOrString;
            }
          }
        );
        return charCodes;
      }
      function addToMapOfArrays(map, key, value) {
        if (map[key] === undefined) {
          map[key] = [value];
        } else {
          map[key].push(value);
        }
      }
      var minOptimizationVal = 256;
      /**
       * We ae mapping charCode above ASCI (256) into buckets each in the size of 256.
       * This is because ASCI are the most common start chars so each one of those will get its own
       * possible token configs vector.
       *
       * Tokens starting with charCodes "above" ASCI are uncommon, so we can "afford"
       * to place these into buckets of possible token configs, What we gain from
       * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'
       * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).
       * Our 'charCodeToPatternIdxToConfig' max size will now be:
       * 256 + (2^16 / 2^8) - 1 === 511
       *
       * note the hack for fast division integer part extraction
       * See: https://stackoverflow.com/a/4228528
       */
      function charCodeToOptimizedIndex(charCode) {
        return charCode < minOptimizationVal
          ? charCode
          : charCodeToOptimizedIdxMap[charCode];
      }
      /**
       * This is a compromise between cold start / hot running performance
       * Creating this array takes ~3ms on a modern machine,
       * But if we perform the computation at runtime as needed the CSS Lexer benchmark
       * performance degrades by ~10%
       *
       * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.
       */
      var charCodeToOptimizedIdxMap = [];
      function initCharCodeToOptimizedIndexMap() {
        if (Object(utils["A" /* isEmpty */])(charCodeToOptimizedIdxMap)) {
          charCodeToOptimizedIdxMap = new Array(65536);
          for (var i = 0; i < 65536; i++) {
            /* tslint:disable */
            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;
            /* tslint:enable */
          }
        }
      }
      //# sourceMappingURL=lexer.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/scan/tokens.js

      function tokenStructuredMatcher(tokInstance, tokConstructor) {
        var instanceType = tokInstance.tokenTypeIdx;
        if (instanceType === tokConstructor.tokenTypeIdx) {
          return true;
        } else {
          return (
            tokConstructor.isParent === true &&
            tokConstructor.categoryMatchesMap[instanceType] === true
          );
        }
      }
      // Optimized tokenMatcher in case our grammar does not use token categories
      // Being so tiny it is much more likely to be in-lined and this avoid the function call overhead
      function tokenStructuredMatcherNoCategories(token, tokType) {
        return token.tokenTypeIdx === tokType.tokenTypeIdx;
      }
      var tokenShortNameIdx = 1;
      var tokenIdxToClass = {};
      function augmentTokenTypes(tokenTypes) {
        // collect the parent Token Types as well.
        var tokenTypesAndParents = expandCategories(tokenTypes);
        // add required tokenType and categoryMatches properties
        assignTokenDefaultProps(tokenTypesAndParents);
        // fill up the categoryMatches
        assignCategoriesMapProp(tokenTypesAndParents);
        assignCategoriesTokensProp(tokenTypesAndParents);
        Object(utils["u" /* forEach */])(
          tokenTypesAndParents,
          function (tokType) {
            tokType.isParent = tokType.categoryMatches.length > 0;
          }
        );
      }
      function expandCategories(tokenTypes) {
        var result = Object(utils["g" /* cloneArr */])(tokenTypes);
        var categories = tokenTypes;
        var searching = true;
        while (searching) {
          categories = Object(utils["i" /* compact */])(
            Object(utils["t" /* flatten */])(
              Object(utils["I" /* map */])(categories, function (currTokType) {
                return currTokType.CATEGORIES;
              })
            )
          );
          var newCategories = Object(utils["l" /* difference */])(
            categories,
            result
          );
          result = result.concat(newCategories);
          if (Object(utils["A" /* isEmpty */])(newCategories)) {
            searching = false;
          } else {
            categories = newCategories;
          }
        }
        return result;
      }
      function assignTokenDefaultProps(tokenTypes) {
        Object(utils["u" /* forEach */])(tokenTypes, function (currTokType) {
          if (!hasShortKeyProperty(currTokType)) {
            tokenIdxToClass[tokenShortNameIdx] = currTokType;
            currTokType.tokenTypeIdx = tokenShortNameIdx++;
          }
          // CATEGORIES? : TokenType | TokenType[]
          if (
            hasCategoriesProperty(currTokType) &&
            !Object(utils["y" /* isArray */])(currTokType.CATEGORIES)
            // &&
            // !isUndefined(currTokType.CATEGORIES.PATTERN)
          ) {
            currTokType.CATEGORIES = [currTokType.CATEGORIES];
          }
          if (!hasCategoriesProperty(currTokType)) {
            currTokType.CATEGORIES = [];
          }
          if (!hasExtendingTokensTypesProperty(currTokType)) {
            currTokType.categoryMatches = [];
          }
          if (!hasExtendingTokensTypesMapProperty(currTokType)) {
            currTokType.categoryMatchesMap = {};
          }
        });
      }
      function assignCategoriesTokensProp(tokenTypes) {
        Object(utils["u" /* forEach */])(tokenTypes, function (currTokType) {
          // avoid duplications
          currTokType.categoryMatches = [];
          Object(utils["u" /* forEach */])(
            currTokType.categoryMatchesMap,
            function (val, key) {
              currTokType.categoryMatches.push(
                tokenIdxToClass[key].tokenTypeIdx
              );
            }
          );
        });
      }
      function assignCategoriesMapProp(tokenTypes) {
        Object(utils["u" /* forEach */])(tokenTypes, function (currTokType) {
          singleAssignCategoriesToksMap([], currTokType);
        });
      }
      function singleAssignCategoriesToksMap(path, nextNode) {
        Object(utils["u" /* forEach */])(path, function (pathNode) {
          nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;
        });
        Object(utils["u" /* forEach */])(
          nextNode.CATEGORIES,
          function (nextCategory) {
            var newPath = path.concat(nextNode);
            // avoids infinite loops due to cyclic categories.
            if (!Object(utils["j" /* contains */])(newPath, nextCategory)) {
              singleAssignCategoriesToksMap(newPath, nextCategory);
            }
          }
        );
      }
      function hasShortKeyProperty(tokType) {
        return Object(utils["w" /* has */])(tokType, "tokenTypeIdx");
      }
      function hasCategoriesProperty(tokType) {
        return Object(utils["w" /* has */])(tokType, "CATEGORIES");
      }
      function hasExtendingTokensTypesProperty(tokType) {
        return Object(utils["w" /* has */])(tokType, "categoryMatches");
      }
      function hasExtendingTokensTypesMapProperty(tokType) {
        return Object(utils["w" /* has */])(tokType, "categoryMatchesMap");
      }
      function isTokenType(tokType) {
        return Object(utils["w" /* has */])(tokType, "tokenTypeIdx");
      }
      //# sourceMappingURL=tokens.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/scan/lexer_errors_public.js
      var defaultLexerErrorProvider = {
        buildUnableToPopLexerModeMessage: function (token) {
          return (
            "Unable to pop Lexer Mode after encountering Token ->" +
            token.image +
            "<- The Mode Stack is empty"
          );
        },
        buildUnexpectedCharactersMessage: function (
          fullText,
          startOffset,
          length,
          line,
          column
        ) {
          return (
            "unexpected character: ->" +
            fullText.charAt(startOffset) +
            "<- at offset: " +
            startOffset +
            "," +
            (" skipped " + length + " characters.")
          );
        },
      };
      //# sourceMappingURL=lexer_errors_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/scan/lexer_public.js

      var LexerDefinitionErrorType;
      (function (LexerDefinitionErrorType) {
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["MISSING_PATTERN"] = 0)
        ] = "MISSING_PATTERN";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["INVALID_PATTERN"] = 1)
        ] = "INVALID_PATTERN";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["EOI_ANCHOR_FOUND"] = 2)
        ] = "EOI_ANCHOR_FOUND";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["UNSUPPORTED_FLAGS_FOUND"] = 3)
        ] = "UNSUPPORTED_FLAGS_FOUND";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["DUPLICATE_PATTERNS_FOUND"] = 4)
        ] = "DUPLICATE_PATTERNS_FOUND";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["INVALID_GROUP_TYPE_FOUND"] = 5)
        ] = "INVALID_GROUP_TYPE_FOUND";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["PUSH_MODE_DOES_NOT_EXIST"] = 6)
        ] = "PUSH_MODE_DOES_NOT_EXIST";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType[
            "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE"
          ] = 7)
        ] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType[
            "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY"
          ] = 8)
        ] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType[
            "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST"
          ] = 9)
        ] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType[
            "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED"
          ] = 10)
        ] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["SOI_ANCHOR_FOUND"] = 11)
        ] = "SOI_ANCHOR_FOUND";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["EMPTY_MATCH_PATTERN"] = 12)
        ] = "EMPTY_MATCH_PATTERN";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["NO_LINE_BREAKS_FLAGS"] = 13)
        ] = "NO_LINE_BREAKS_FLAGS";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["UNREACHABLE_PATTERN"] = 14)
        ] = "UNREACHABLE_PATTERN";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["IDENTIFY_TERMINATOR"] = 15)
        ] = "IDENTIFY_TERMINATOR";
        LexerDefinitionErrorType[
          (LexerDefinitionErrorType["CUSTOM_LINE_BREAK"] = 16)
        ] = "CUSTOM_LINE_BREAK";
      })(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));
      var DEFAULT_LEXER_CONFIG = {
        deferDefinitionErrorsHandling: false,
        positionTracking: "full",
        lineTerminatorsPattern: /\n|\r\n?/g,
        lineTerminatorCharacters: ["\n", "\r"],
        ensureOptimizations: false,
        safeMode: false,
        errorMessageProvider: defaultLexerErrorProvider,
        traceInitPerf: false,
        skipValidations: false,
      };
      Object.freeze(DEFAULT_LEXER_CONFIG);
      var lexer_public_Lexer = /** @class */ (function () {
        function Lexer(lexerDefinition, config) {
          var _this = this;
          if (config === void 0) {
            config = DEFAULT_LEXER_CONFIG;
          }
          this.lexerDefinition = lexerDefinition;
          this.lexerDefinitionErrors = [];
          this.lexerDefinitionWarning = [];
          this.patternIdxToConfig = {};
          this.charCodeToPatternIdxToConfig = {};
          this.modes = [];
          this.emptyGroups = {};
          this.config = undefined;
          this.trackStartLines = true;
          this.trackEndLines = true;
          this.hasCustom = false;
          this.canModeBeOptimized = {};
          if (typeof config === "boolean") {
            throw Error(
              "The second argument to the Lexer constructor is now an ILexerConfig Object.\n" +
                "a boolean 2nd argument is no longer supported"
            );
          }
          // todo: defaults func?
          this.config = Object(utils["K" /* merge */])(
            DEFAULT_LEXER_CONFIG,
            config
          );
          var traceInitVal = this.config.traceInitPerf;
          if (traceInitVal === true) {
            this.traceInitMaxIdent = Infinity;
            this.traceInitPerf = true;
          } else if (typeof traceInitVal === "number") {
            this.traceInitMaxIdent = traceInitVal;
            this.traceInitPerf = true;
          }
          this.traceInitIndent = -1;
          this.TRACE_INIT("Lexer Constructor", function () {
            var actualDefinition;
            var hasOnlySingleMode = true;
            _this.TRACE_INIT("Lexer Config handling", function () {
              if (
                _this.config.lineTerminatorsPattern ===
                DEFAULT_LEXER_CONFIG.lineTerminatorsPattern
              ) {
                // optimized built-in implementation for the defaults definition of lineTerminators
                _this.config.lineTerminatorsPattern =
                  LineTerminatorOptimizedTester;
              } else {
                if (
                  _this.config.lineTerminatorCharacters ===
                  DEFAULT_LEXER_CONFIG.lineTerminatorCharacters
                ) {
                  throw Error(
                    "Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n" +
                      "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS"
                  );
                }
              }
              if (config.safeMode && config.ensureOptimizations) {
                throw Error(
                  '"safeMode" and "ensureOptimizations" flags are mutually exclusive.'
                );
              }
              _this.trackStartLines = /full|onlyStart/i.test(
                _this.config.positionTracking
              );
              _this.trackEndLines = /full/i.test(_this.config.positionTracking);
              // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.
              if (Object(utils["y" /* isArray */])(lexerDefinition)) {
                actualDefinition = { modes: {} };
                actualDefinition.modes[DEFAULT_MODE] = Object(
                  utils["g" /* cloneArr */]
                )(lexerDefinition);
                actualDefinition[DEFAULT_MODE] = DEFAULT_MODE;
              } else {
                // no conversion needed, input should already be a IMultiModeLexerDefinition
                hasOnlySingleMode = false;
                actualDefinition = Object(utils["h" /* cloneObj */])(
                  lexerDefinition
                );
              }
            });
            if (_this.config.skipValidations === false) {
              _this.TRACE_INIT("performRuntimeChecks", function () {
                _this.lexerDefinitionErrors =
                  _this.lexerDefinitionErrors.concat(
                    performRuntimeChecks(
                      actualDefinition,
                      _this.trackStartLines,
                      _this.config.lineTerminatorCharacters
                    )
                  );
              });
              _this.TRACE_INIT("performWarningRuntimeChecks", function () {
                _this.lexerDefinitionWarning =
                  _this.lexerDefinitionWarning.concat(
                    performWarningRuntimeChecks(
                      actualDefinition,
                      _this.trackStartLines,
                      _this.config.lineTerminatorCharacters
                    )
                  );
              });
            }
            // for extra robustness to avoid throwing an none informative error message
            actualDefinition.modes = actualDefinition.modes
              ? actualDefinition.modes
              : {};
            // an error of undefined TokenTypes will be detected in "performRuntimeChecks" above.
            // this transformation is to increase robustness in the case of partially invalid lexer definition.
            Object(utils["u" /* forEach */])(
              actualDefinition.modes,
              function (currModeValue, currModeName) {
                actualDefinition.modes[currModeName] = Object(
                  utils["P" /* reject */]
                )(currModeValue, function (currTokType) {
                  return Object(utils["F" /* isUndefined */])(currTokType);
                });
              }
            );
            var allModeNames = Object(utils["G" /* keys */])(
              actualDefinition.modes
            );
            Object(utils["u" /* forEach */])(
              actualDefinition.modes,
              function (currModDef, currModName) {
                _this.TRACE_INIT(
                  "Mode: <" + currModName + "> processing",
                  function () {
                    _this.modes.push(currModName);
                    if (_this.config.skipValidations === false) {
                      _this.TRACE_INIT("validatePatterns", function () {
                        _this.lexerDefinitionErrors =
                          _this.lexerDefinitionErrors.concat(
                            validatePatterns(currModDef, allModeNames)
                          );
                      });
                    }
                    // If definition errors were encountered, the analysis phase may fail unexpectedly/
                    // Considering a lexer with definition errors may never be used, there is no point
                    // to performing the analysis anyhow...
                    if (
                      Object(utils["A" /* isEmpty */])(
                        _this.lexerDefinitionErrors
                      )
                    ) {
                      augmentTokenTypes(currModDef);
                      var currAnalyzeResult_1;
                      _this.TRACE_INIT("analyzeTokenTypes", function () {
                        currAnalyzeResult_1 = analyzeTokenTypes(currModDef, {
                          lineTerminatorCharacters:
                            _this.config.lineTerminatorCharacters,
                          positionTracking: config.positionTracking,
                          ensureOptimizations: config.ensureOptimizations,
                          safeMode: config.safeMode,
                          tracer: _this.TRACE_INIT.bind(_this),
                        });
                      });
                      _this.patternIdxToConfig[currModName] =
                        currAnalyzeResult_1.patternIdxToConfig;
                      _this.charCodeToPatternIdxToConfig[currModName] =
                        currAnalyzeResult_1.charCodeToPatternIdxToConfig;
                      _this.emptyGroups = Object(utils["K" /* merge */])(
                        _this.emptyGroups,
                        currAnalyzeResult_1.emptyGroups
                      );
                      _this.hasCustom =
                        currAnalyzeResult_1.hasCustom || _this.hasCustom;
                      _this.canModeBeOptimized[currModName] =
                        currAnalyzeResult_1.canBeOptimized;
                    }
                  }
                );
              }
            );
            _this.defaultMode = actualDefinition.defaultMode;
            if (
              !Object(utils["A" /* isEmpty */])(_this.lexerDefinitionErrors) &&
              !_this.config.deferDefinitionErrorsHandling
            ) {
              var allErrMessages = Object(utils["I" /* map */])(
                _this.lexerDefinitionErrors,
                function (error) {
                  return error.message;
                }
              );
              var allErrMessagesString = allErrMessages.join(
                "-----------------------\n"
              );
              throw new Error(
                "Errors detected in definition of Lexer:\n" +
                  allErrMessagesString
              );
            }
            // Only print warning if there are no errors, This will avoid pl
            Object(utils["u" /* forEach */])(
              _this.lexerDefinitionWarning,
              function (warningDescriptor) {
                Object(utils["d" /* PRINT_WARNING */])(
                  warningDescriptor.message
                );
              }
            );
            _this.TRACE_INIT(
              "Choosing sub-methods implementations",
              function () {
                // Choose the relevant internal implementations for this specific parser.
                // These implementations should be in-lined by the JavaScript engine
                // to provide optimal performance in each scenario.
                if (SUPPORT_STICKY) {
                  _this.chopInput = utils["a" /* IDENTITY */];
                  _this.match = _this.matchWithTest;
                } else {
                  _this.updateLastIndex = utils["b" /* NOOP */];
                  _this.match = _this.matchWithExec;
                }
                if (hasOnlySingleMode) {
                  _this.handleModes = utils["b" /* NOOP */];
                }
                if (_this.trackStartLines === false) {
                  _this.computeNewColumn = utils["a" /* IDENTITY */];
                }
                if (_this.trackEndLines === false) {
                  _this.updateTokenEndLineColumnLocation =
                    utils["b" /* NOOP */];
                }
                if (/full/i.test(_this.config.positionTracking)) {
                  _this.createTokenInstance = _this.createFullToken;
                } else if (/onlyStart/i.test(_this.config.positionTracking)) {
                  _this.createTokenInstance = _this.createStartOnlyToken;
                } else if (/onlyOffset/i.test(_this.config.positionTracking)) {
                  _this.createTokenInstance = _this.createOffsetOnlyToken;
                } else {
                  throw Error(
                    'Invalid <positionTracking> config option: "' +
                      _this.config.positionTracking +
                      '"'
                  );
                }
                if (_this.hasCustom) {
                  _this.addToken = _this.addTokenUsingPush;
                  _this.handlePayload = _this.handlePayloadWithCustom;
                } else {
                  _this.addToken = _this.addTokenUsingMemberAccess;
                  _this.handlePayload = _this.handlePayloadNoCustom;
                }
              }
            );
            _this.TRACE_INIT("Failed Optimization Warnings", function () {
              var unOptimizedModes = Object(utils["O" /* reduce */])(
                _this.canModeBeOptimized,
                function (cannotBeOptimized, canBeOptimized, modeName) {
                  if (canBeOptimized === false) {
                    cannotBeOptimized.push(modeName);
                  }
                  return cannotBeOptimized;
                },
                []
              );
              if (
                config.ensureOptimizations &&
                !Object(utils["A" /* isEmpty */])(unOptimizedModes)
              ) {
                throw Error(
                  "Lexer Modes: < " +
                    unOptimizedModes.join(", ") +
                    " > cannot be optimized.\n" +
                    '\t Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n' +
                    "\t Or inspect the console log for details on how to resolve these issues."
                );
              }
            });
            _this.TRACE_INIT("clearRegExpParserCache", function () {
              clearRegExpParserCache();
            });
            _this.TRACE_INIT("toFastProperties", function () {
              Object(utils["S" /* toFastProperties */])(_this);
            });
          });
        }
        Lexer.prototype.tokenize = function (text, initialMode) {
          if (initialMode === void 0) {
            initialMode = this.defaultMode;
          }
          if (!Object(utils["A" /* isEmpty */])(this.lexerDefinitionErrors)) {
            var allErrMessages = Object(utils["I" /* map */])(
              this.lexerDefinitionErrors,
              function (error) {
                return error.message;
              }
            );
            var allErrMessagesString = allErrMessages.join(
              "-----------------------\n"
            );
            throw new Error(
              "Unable to Tokenize because Errors detected in definition of Lexer:\n" +
                allErrMessagesString
            );
          }
          var lexResult = this.tokenizeInternal(text, initialMode);
          return lexResult;
        };
        // There is quite a bit of duplication between this and "tokenizeInternalLazy"
        // This is intentional due to performance considerations.
        Lexer.prototype.tokenizeInternal = function (text, initialMode) {
          var _this = this;
          var i,
            j,
            matchAltImage,
            longerAltIdx,
            matchedImage,
            payload,
            altPayload,
            imageLength,
            group,
            tokType,
            newToken,
            errLength,
            droppedChar,
            msg,
            match;
          var orgText = text;
          var orgLength = orgText.length;
          var offset = 0;
          var matchedTokensIndex = 0;
          // initializing the tokensArray to the "guessed" size.
          // guessing too little will still reduce the number of array re-sizes on pushes.
          // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory
          // but would still have a faster runtime by avoiding (All but one) array resizing.
          var guessedNumberOfTokens = this.hasCustom
            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.
            : Math.floor(text.length / 10);
          var matchedTokens = new Array(guessedNumberOfTokens);
          var errors = [];
          var line = this.trackStartLines ? 1 : undefined;
          var column = this.trackStartLines ? 1 : undefined;
          var groups = cloneEmptyGroups(this.emptyGroups);
          var trackLines = this.trackStartLines;
          var lineTerminatorPattern = this.config.lineTerminatorsPattern;
          var currModePatternsLength = 0;
          var patternIdxToConfig = [];
          var currCharCodeToPatternIdxToConfig = [];
          var modeStack = [];
          var emptyArray = [];
          Object.freeze(emptyArray);
          var getPossiblePatterns = undefined;
          function getPossiblePatternsSlow() {
            return patternIdxToConfig;
          }
          function getPossiblePatternsOptimized(charCode) {
            var optimizedCharIdx = charCodeToOptimizedIndex(charCode);
            var possiblePatterns =
              currCharCodeToPatternIdxToConfig[optimizedCharIdx];
            if (possiblePatterns === undefined) {
              return emptyArray;
            } else {
              return possiblePatterns;
            }
          }
          var pop_mode = function (popToken) {
            // TODO: perhaps avoid this error in the edge case there is no more input?
            if (
              modeStack.length === 1 &&
              // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
              // So no error should occur.
              popToken.tokenType.PUSH_MODE === undefined
            ) {
              // if we try to pop the last mode there lexer will no longer have ANY mode.
              // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.
              var msg_1 =
                _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(
                  popToken
                );
              errors.push({
                offset: popToken.startOffset,
                line:
                  popToken.startLine !== undefined
                    ? popToken.startLine
                    : undefined,
                column:
                  popToken.startColumn !== undefined
                    ? popToken.startColumn
                    : undefined,
                length: popToken.image.length,
                message: msg_1,
              });
            } else {
              modeStack.pop();
              var newMode = Object(utils["H" /* last */])(modeStack);
              patternIdxToConfig = _this.patternIdxToConfig[newMode];
              currCharCodeToPatternIdxToConfig =
                _this.charCodeToPatternIdxToConfig[newMode];
              currModePatternsLength = patternIdxToConfig.length;
              var modeCanBeOptimized =
                _this.canModeBeOptimized[newMode] &&
                _this.config.safeMode === false;
              if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                getPossiblePatterns = getPossiblePatternsOptimized;
              } else {
                getPossiblePatterns = getPossiblePatternsSlow;
              }
            }
          };
          function push_mode(newMode) {
            modeStack.push(newMode);
            currCharCodeToPatternIdxToConfig =
              this.charCodeToPatternIdxToConfig[newMode];
            patternIdxToConfig = this.patternIdxToConfig[newMode];
            currModePatternsLength = patternIdxToConfig.length;
            currModePatternsLength = patternIdxToConfig.length;
            var modeCanBeOptimized =
              this.canModeBeOptimized[newMode] &&
              this.config.safeMode === false;
            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
              getPossiblePatterns = getPossiblePatternsOptimized;
            } else {
              getPossiblePatterns = getPossiblePatternsSlow;
            }
          }
          // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not
          // seem to matter performance wise.
          push_mode.call(this, initialMode);
          var currConfig;
          while (offset < orgLength) {
            matchedImage = null;
            var nextCharCode = orgText.charCodeAt(offset);
            var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);
            var chosenPatternsLength = chosenPatternIdxToConfig.length;
            for (i = 0; i < chosenPatternsLength; i++) {
              currConfig = chosenPatternIdxToConfig[i];
              var currPattern = currConfig.pattern;
              payload = null;
              // manually in-lined because > 600 chars won't be in-lined in V8
              var singleCharCode = currConfig.short;
              if (singleCharCode !== false) {
                if (nextCharCode === singleCharCode) {
                  // single character string
                  matchedImage = currPattern;
                }
              } else if (currConfig.isCustom === true) {
                match = currPattern.exec(
                  orgText,
                  offset,
                  matchedTokens,
                  groups
                );
                if (match !== null) {
                  matchedImage = match[0];
                  if (match.payload !== undefined) {
                    payload = match.payload;
                  }
                } else {
                  matchedImage = null;
                }
              } else {
                this.updateLastIndex(currPattern, offset);
                matchedImage = this.match(currPattern, text, offset);
              }
              if (matchedImage !== null) {
                // even though this pattern matched we must try a another longer alternative.
                // this can be used to prioritize keywords over identifiers
                longerAltIdx = currConfig.longerAlt;
                if (longerAltIdx !== undefined) {
                  // TODO: micro optimize, avoid extra prop access
                  // by saving/linking longerAlt on the original config?
                  var longerAltConfig = patternIdxToConfig[longerAltIdx];
                  var longerAltPattern = longerAltConfig.pattern;
                  altPayload = null;
                  // single Char can never be a longer alt so no need to test it.
                  // manually in-lined because > 600 chars won't be in-lined in V8
                  if (longerAltConfig.isCustom === true) {
                    match = longerAltPattern.exec(
                      orgText,
                      offset,
                      matchedTokens,
                      groups
                    );
                    if (match !== null) {
                      matchAltImage = match[0];
                      if (match.payload !== undefined) {
                        altPayload = match.payload;
                      }
                    } else {
                      matchAltImage = null;
                    }
                  } else {
                    this.updateLastIndex(longerAltPattern, offset);
                    matchAltImage = this.match(longerAltPattern, text, offset);
                  }
                  if (
                    matchAltImage &&
                    matchAltImage.length > matchedImage.length
                  ) {
                    matchedImage = matchAltImage;
                    payload = altPayload;
                    currConfig = longerAltConfig;
                  }
                }
                break;
              }
            }
            // successful match
            if (matchedImage !== null) {
              imageLength = matchedImage.length;
              group = currConfig.group;
              if (group !== undefined) {
                tokType = currConfig.tokenTypeIdx;
                // TODO: "offset + imageLength" and the new column may be computed twice in case of "full" location information inside
                // createFullToken method
                newToken = this.createTokenInstance(
                  matchedImage,
                  offset,
                  tokType,
                  currConfig.tokenType,
                  line,
                  column,
                  imageLength
                );
                this.handlePayload(newToken, payload);
                // TODO: optimize NOOP in case there are no special groups?
                if (group === false) {
                  matchedTokensIndex = this.addToken(
                    matchedTokens,
                    matchedTokensIndex,
                    newToken
                  );
                } else {
                  groups[group].push(newToken);
                }
              }
              text = this.chopInput(text, imageLength);
              offset = offset + imageLength;
              // TODO: with newlines the column may be assigned twice
              column = this.computeNewColumn(column, imageLength);
              if (
                trackLines === true &&
                currConfig.canLineTerminator === true
              ) {
                var numOfLTsInMatch = 0;
                var foundTerminator = void 0;
                var lastLTEndOffset = void 0;
                lineTerminatorPattern.lastIndex = 0;
                do {
                  foundTerminator = lineTerminatorPattern.test(matchedImage);
                  if (foundTerminator === true) {
                    lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;
                    numOfLTsInMatch++;
                  }
                } while (foundTerminator === true);
                if (numOfLTsInMatch !== 0) {
                  line = line + numOfLTsInMatch;
                  column = imageLength - lastLTEndOffset;
                  this.updateTokenEndLineColumnLocation(
                    newToken,
                    group,
                    lastLTEndOffset,
                    numOfLTsInMatch,
                    line,
                    column,
                    imageLength
                  );
                }
              }
              // will be NOOP if no modes present
              this.handleModes(currConfig, pop_mode, push_mode, newToken);
            } else {
              // error recovery, drop characters until we identify a valid token's start point
              var errorStartOffset = offset;
              var errorLine = line;
              var errorColumn = column;
              var foundResyncPoint = false;
              while (!foundResyncPoint && offset < orgLength) {
                // drop chars until we succeed in matching something
                droppedChar = orgText.charCodeAt(offset);
                // Identity Func (when sticky flag is enabled)
                text = this.chopInput(text, 1);
                offset++;
                for (j = 0; j < currModePatternsLength; j++) {
                  var currConfig_1 = patternIdxToConfig[j];
                  var currPattern = currConfig_1.pattern;
                  // manually in-lined because > 600 chars won't be in-lined in V8
                  var singleCharCode = currConfig_1.short;
                  if (singleCharCode !== false) {
                    if (orgText.charCodeAt(offset) === singleCharCode) {
                      // single character string
                      foundResyncPoint = true;
                    }
                  } else if (currConfig_1.isCustom === true) {
                    foundResyncPoint =
                      currPattern.exec(
                        orgText,
                        offset,
                        matchedTokens,
                        groups
                      ) !== null;
                  } else {
                    this.updateLastIndex(currPattern, offset);
                    foundResyncPoint = currPattern.exec(text) !== null;
                  }
                  if (foundResyncPoint === true) {
                    break;
                  }
                }
              }
              errLength = offset - errorStartOffset;
              // at this point we either re-synced or reached the end of the input text
              msg =
                this.config.errorMessageProvider.buildUnexpectedCharactersMessage(
                  orgText,
                  errorStartOffset,
                  errLength,
                  errorLine,
                  errorColumn
                );
              errors.push({
                offset: errorStartOffset,
                line: errorLine,
                column: errorColumn,
                length: errLength,
                message: msg,
              });
            }
          }
          // if we do have custom patterns which push directly into the
          // TODO: custom tokens should not push directly??
          if (!this.hasCustom) {
            // if we guessed a too large size for the tokens array this will shrink it to the right size.
            matchedTokens.length = matchedTokensIndex;
          }
          return {
            tokens: matchedTokens,
            groups: groups,
            errors: errors,
          };
        };
        Lexer.prototype.handleModes = function (
          config,
          pop_mode,
          push_mode,
          newToken
        ) {
          if (config.pop === true) {
            // need to save the PUSH_MODE property as if the mode is popped
            // patternIdxToPopMode is updated to reflect the new mode after popping the stack
            var pushMode = config.push;
            pop_mode(newToken);
            if (pushMode !== undefined) {
              push_mode.call(this, pushMode);
            }
          } else if (config.push !== undefined) {
            push_mode.call(this, config.push);
          }
        };
        Lexer.prototype.chopInput = function (text, length) {
          return text.substring(length);
        };
        Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {
          regExp.lastIndex = newLastIndex;
        };
        // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
        Lexer.prototype.updateTokenEndLineColumnLocation = function (
          newToken,
          group,
          lastLTIdx,
          numOfLTsInMatch,
          line,
          column,
          imageLength
        ) {
          var lastCharIsLT, fixForEndingInLT;
          if (group !== undefined) {
            // a none skipped multi line Token, need to update endLine/endColumn
            lastCharIsLT = lastLTIdx === imageLength - 1;
            fixForEndingInLT = lastCharIsLT ? -1 : 0;
            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {
              // if a token ends in a LT that last LT only affects the line numbering of following Tokens
              newToken.endLine = line + fixForEndingInLT;
              // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)
              // inclusive to exclusive range.
              newToken.endColumn = column - 1 + -fixForEndingInLT;
            }
            // else single LT in the last character of a token, no need to modify the endLine/EndColumn
          }
        };
        Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {
          return oldColumn + imageLength;
        };
        // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
        /* istanbul ignore next - place holder */
        Lexer.prototype.createTokenInstance = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return null;
        };
        Lexer.prototype.createOffsetOnlyToken = function (
          image,
          startOffset,
          tokenTypeIdx,
          tokenType
        ) {
          return {
            image: image,
            startOffset: startOffset,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType,
          };
        };
        Lexer.prototype.createStartOnlyToken = function (
          image,
          startOffset,
          tokenTypeIdx,
          tokenType,
          startLine,
          startColumn
        ) {
          return {
            image: image,
            startOffset: startOffset,
            startLine: startLine,
            startColumn: startColumn,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType,
          };
        };
        Lexer.prototype.createFullToken = function (
          image,
          startOffset,
          tokenTypeIdx,
          tokenType,
          startLine,
          startColumn,
          imageLength
        ) {
          return {
            image: image,
            startOffset: startOffset,
            endOffset: startOffset + imageLength - 1,
            startLine: startLine,
            endLine: startLine,
            startColumn: startColumn,
            endColumn: startColumn + imageLength - 1,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType,
          };
        };
        // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
        /* istanbul ignore next - place holder */
        Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {
          return 666;
        };
        Lexer.prototype.addTokenUsingPush = function (
          tokenVector,
          index,
          tokenToAdd
        ) {
          tokenVector.push(tokenToAdd);
          return index;
        };
        Lexer.prototype.addTokenUsingMemberAccess = function (
          tokenVector,
          index,
          tokenToAdd
        ) {
          tokenVector[index] = tokenToAdd;
          index++;
          return index;
        };
        // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.
        /* istanbul ignore next - place holder */
        Lexer.prototype.handlePayload = function (token, payload) {};
        Lexer.prototype.handlePayloadNoCustom = function (token, payload) {};
        Lexer.prototype.handlePayloadWithCustom = function (token, payload) {
          if (payload !== null) {
            token.payload = payload;
          }
        };
        /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */
        Lexer.prototype.match = function (pattern, text, offset) {
          return null;
        };
        Lexer.prototype.matchWithTest = function (pattern, text, offset) {
          var found = pattern.test(text);
          if (found === true) {
            return text.substring(offset, pattern.lastIndex);
          }
          return null;
        };
        Lexer.prototype.matchWithExec = function (pattern, text) {
          var regExpArray = pattern.exec(text);
          return regExpArray !== null ? regExpArray[0] : regExpArray;
        };
        // Duplicated from the parser's perf trace trait to allow future extraction
        // of the lexer to a separate package.
        Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {
          // No need to optimize this using NOOP pattern because
          // It is not called in a hot spot...
          if (this.traceInitPerf === true) {
            this.traceInitIndent++;
            var indent = new Array(this.traceInitIndent + 1).join("\t");
            if (this.traceInitIndent < this.traceInitMaxIdent) {
              console.log(indent + "--> <" + phaseDesc + ">");
            }
            var _a = Object(utils["R" /* timer */])(phaseImpl),
              time = _a.time,
              value = _a.value;
            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */
            var traceMethod = time > 10 ? console.warn : console.log;
            if (this.traceInitIndent < this.traceInitMaxIdent) {
              traceMethod(
                indent + "<-- <" + phaseDesc + "> time: " + time + "ms"
              );
            }
            this.traceInitIndent--;
            return value;
          } else {
            return phaseImpl();
          }
        };
        Lexer.SKIPPED =
          "This marks a skipped Token pattern, this means each token identified by it will" +
          "be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
        Lexer.NA = /NOT_APPLICABLE/;
        return Lexer;
      })();

      //# sourceMappingURL=lexer_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/scan/tokens_public.js

      function tokenLabel(tokType) {
        if (hasTokenLabel(tokType)) {
          return tokType.LABEL;
        } else {
          return tokType.name;
        }
      }
      function tokenName(tokType) {
        return tokType.name;
      }
      function hasTokenLabel(obj) {
        return Object(utils["E" /* isString */])(obj.LABEL) && obj.LABEL !== "";
      }
      var PARENT = "parent";
      var CATEGORIES = "categories";
      var LABEL = "label";
      var GROUP = "group";
      var PUSH_MODE = "push_mode";
      var POP_MODE = "pop_mode";
      var LONGER_ALT = "longer_alt";
      var LINE_BREAKS = "line_breaks";
      var START_CHARS_HINT = "start_chars_hint";
      function createToken(config) {
        return createTokenInternal(config);
      }
      function createTokenInternal(config) {
        var pattern = config.pattern;
        var tokenType = {};
        tokenType.name = config.name;
        if (!Object(utils["F" /* isUndefined */])(pattern)) {
          tokenType.PATTERN = pattern;
        }
        if (Object(utils["w" /* has */])(config, PARENT)) {
          throw (
            "The parent property is no longer supported.\n" +
            "See: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details."
          );
        }
        if (Object(utils["w" /* has */])(config, CATEGORIES)) {
          // casting to ANY as this will be fixed inside `augmentTokenTypes``
          tokenType.CATEGORIES = config[CATEGORIES];
        }
        augmentTokenTypes([tokenType]);
        if (Object(utils["w" /* has */])(config, LABEL)) {
          tokenType.LABEL = config[LABEL];
        }
        if (Object(utils["w" /* has */])(config, GROUP)) {
          tokenType.GROUP = config[GROUP];
        }
        if (Object(utils["w" /* has */])(config, POP_MODE)) {
          tokenType.POP_MODE = config[POP_MODE];
        }
        if (Object(utils["w" /* has */])(config, PUSH_MODE)) {
          tokenType.PUSH_MODE = config[PUSH_MODE];
        }
        if (Object(utils["w" /* has */])(config, LONGER_ALT)) {
          tokenType.LONGER_ALT = config[LONGER_ALT];
        }
        if (Object(utils["w" /* has */])(config, LINE_BREAKS)) {
          tokenType.LINE_BREAKS = config[LINE_BREAKS];
        }
        if (Object(utils["w" /* has */])(config, START_CHARS_HINT)) {
          tokenType.START_CHARS_HINT = config[START_CHARS_HINT];
        }
        return tokenType;
      }
      var EOF = createToken({
        name: "EOF",
        pattern: lexer_public_Lexer.NA,
      });
      augmentTokenTypes([EOF]);
      function createTokenInstance(
        tokType,
        image,
        startOffset,
        endOffset,
        startLine,
        endLine,
        startColumn,
        endColumn
      ) {
        return {
          image: image,
          startOffset: startOffset,
          endOffset: endOffset,
          startLine: startLine,
          endLine: endLine,
          startColumn: startColumn,
          endColumn: endColumn,
          tokenTypeIdx: tokType.tokenTypeIdx,
          tokenType: tokType,
        };
      }
      function tokens_public_tokenMatcher(token, tokType) {
        return tokenStructuredMatcher(token, tokType);
      }
      //# sourceMappingURL=tokens_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_public.js
      var gast_public_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      var gast_public_AbstractProduction = /** @class */ (function () {
        function AbstractProduction(definition) {
          this.definition = definition;
        }
        AbstractProduction.prototype.accept = function (visitor) {
          visitor.visit(this);
          Object(utils["u" /* forEach */])(this.definition, function (prod) {
            prod.accept(visitor);
          });
        };
        return AbstractProduction;
      })();

      var gast_public_NonTerminal = /** @class */ (function (_super) {
        gast_public_extends(NonTerminal, _super);
        function NonTerminal(options) {
          var _this = _super.call(this, []) || this;
          _this.idx = 1;
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        Object.defineProperty(NonTerminal.prototype, "definition", {
          get: function () {
            if (this.referencedRule !== undefined) {
              return this.referencedRule.definition;
            }
            return [];
          },
          set: function (definition) {
            // immutable
          },
          enumerable: true,
          configurable: true,
        });
        NonTerminal.prototype.accept = function (visitor) {
          visitor.visit(this);
          // don't visit children of a reference, we will get cyclic infinite loops if we do so
        };
        return NonTerminal;
      })(gast_public_AbstractProduction);

      var gast_public_Rule = /** @class */ (function (_super) {
        gast_public_extends(Rule, _super);
        function Rule(options) {
          var _this = _super.call(this, options.definition) || this;
          _this.orgText = "";
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        return Rule;
      })(gast_public_AbstractProduction);

      // TODO: is this only used in an Alternation?
      //       Perhaps `Flat` should be renamed to `Alternative`?
      var gast_public_Flat = /** @class */ (function (_super) {
        gast_public_extends(Flat, _super);
        // A named Flat production is used to indicate a Nested Rule in an alternation
        function Flat(options) {
          var _this = _super.call(this, options.definition) || this;
          _this.ignoreAmbiguities = false;
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        return Flat;
      })(gast_public_AbstractProduction);

      var gast_public_Option = /** @class */ (function (_super) {
        gast_public_extends(Option, _super);
        function Option(options) {
          var _this = _super.call(this, options.definition) || this;
          _this.idx = 1;
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        return Option;
      })(gast_public_AbstractProduction);

      var gast_public_RepetitionMandatory = /** @class */ (function (_super) {
        gast_public_extends(RepetitionMandatory, _super);
        function RepetitionMandatory(options) {
          var _this = _super.call(this, options.definition) || this;
          _this.idx = 1;
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        return RepetitionMandatory;
      })(gast_public_AbstractProduction);

      var gast_public_RepetitionMandatoryWithSeparator =
        /** @class */ (function (_super) {
          gast_public_extends(RepetitionMandatoryWithSeparator, _super);
          function RepetitionMandatoryWithSeparator(options) {
            var _this = _super.call(this, options.definition) || this;
            _this.idx = 1;
            Object(utils["f" /* assign */])(
              _this,
              Object(utils["N" /* pick */])(options, function (v) {
                return v !== undefined;
              })
            );
            return _this;
          }
          return RepetitionMandatoryWithSeparator;
        })(gast_public_AbstractProduction);

      var gast_public_Repetition = /** @class */ (function (_super) {
        gast_public_extends(Repetition, _super);
        function Repetition(options) {
          var _this = _super.call(this, options.definition) || this;
          _this.idx = 1;
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        return Repetition;
      })(gast_public_AbstractProduction);

      var gast_public_RepetitionWithSeparator = /** @class */ (function (
        _super
      ) {
        gast_public_extends(RepetitionWithSeparator, _super);
        function RepetitionWithSeparator(options) {
          var _this = _super.call(this, options.definition) || this;
          _this.idx = 1;
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        return RepetitionWithSeparator;
      })(gast_public_AbstractProduction);

      var gast_public_Alternation = /** @class */ (function (_super) {
        gast_public_extends(Alternation, _super);
        function Alternation(options) {
          var _this = _super.call(this, options.definition) || this;
          _this.idx = 1;
          _this.ignoreAmbiguities = false;
          _this.hasPredicates = false;
          Object(utils["f" /* assign */])(
            _this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
          return _this;
        }
        return Alternation;
      })(gast_public_AbstractProduction);

      var gast_public_Terminal = /** @class */ (function () {
        function Terminal(options) {
          this.idx = 1;
          Object(utils["f" /* assign */])(
            this,
            Object(utils["N" /* pick */])(options, function (v) {
              return v !== undefined;
            })
          );
        }
        Terminal.prototype.accept = function (visitor) {
          visitor.visit(this);
        };
        return Terminal;
      })();

      function serializeGrammar(topRules) {
        return Object(utils["I" /* map */])(topRules, serializeProduction);
      }
      function serializeProduction(node) {
        function convertDefinition(definition) {
          return Object(utils["I" /* map */])(definition, serializeProduction);
        }
        /* istanbul ignore else */
        if (node instanceof gast_public_NonTerminal) {
          return {
            type: "NonTerminal",
            name: node.nonTerminalName,
            idx: node.idx,
          };
        } else if (node instanceof gast_public_Flat) {
          return {
            type: "Flat",
            definition: convertDefinition(node.definition),
          };
        } else if (node instanceof gast_public_Option) {
          return {
            type: "Option",
            idx: node.idx,
            definition: convertDefinition(node.definition),
          };
        } else if (node instanceof gast_public_RepetitionMandatory) {
          return {
            type: "RepetitionMandatory",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition),
          };
        } else if (
          node instanceof gast_public_RepetitionMandatoryWithSeparator
        ) {
          return {
            type: "RepetitionMandatoryWithSeparator",
            name: node.name,
            idx: node.idx,
            separator: serializeProduction(
              new gast_public_Terminal({
                terminalType: node.separator,
              })
            ),
            definition: convertDefinition(node.definition),
          };
        } else if (node instanceof gast_public_RepetitionWithSeparator) {
          return {
            type: "RepetitionWithSeparator",
            name: node.name,
            idx: node.idx,
            separator: serializeProduction(
              new gast_public_Terminal({
                terminalType: node.separator,
              })
            ),
            definition: convertDefinition(node.definition),
          };
        } else if (node instanceof gast_public_Repetition) {
          return {
            type: "Repetition",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition),
          };
        } else if (node instanceof gast_public_Alternation) {
          return {
            type: "Alternation",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition),
          };
        } else if (node instanceof gast_public_Terminal) {
          var serializedTerminal = {
            type: "Terminal",
            name: node.terminalType.name,
            label: tokenLabel(node.terminalType),
            idx: node.idx,
          };
          var pattern = node.terminalType.PATTERN;
          if (node.terminalType.PATTERN) {
            serializedTerminal.pattern = Object(utils["D" /* isRegExp */])(
              pattern
            )
              ? pattern.source
              : pattern;
          }
          return serializedTerminal;
        } else if (node instanceof gast_public_Rule) {
          return {
            type: "Rule",
            name: node.name,
            orgText: node.orgText,
            definition: convertDefinition(node.definition),
          };
        } else {
          throw Error("non exhaustive match");
        }
      }
      //# sourceMappingURL=gast_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/rest.js

      /**
       *  A Grammar Walker that computes the "remaining" grammar "after" a productions in the grammar.
       */
      var rest_RestWalker = /** @class */ (function () {
        function RestWalker() {}
        RestWalker.prototype.walk = function (prod, prevRest) {
          var _this = this;
          if (prevRest === void 0) {
            prevRest = [];
          }
          Object(utils["u" /* forEach */])(
            prod.definition,
            function (subProd, index) {
              var currRest = Object(utils["m" /* drop */])(
                prod.definition,
                index + 1
              );
              /* istanbul ignore else */
              if (subProd instanceof gast_public_NonTerminal) {
                _this.walkProdRef(subProd, currRest, prevRest);
              } else if (subProd instanceof gast_public_Terminal) {
                _this.walkTerminal(subProd, currRest, prevRest);
              } else if (subProd instanceof gast_public_Flat) {
                _this.walkFlat(subProd, currRest, prevRest);
              } else if (subProd instanceof gast_public_Option) {
                _this.walkOption(subProd, currRest, prevRest);
              } else if (subProd instanceof gast_public_RepetitionMandatory) {
                _this.walkAtLeastOne(subProd, currRest, prevRest);
              } else if (
                subProd instanceof gast_public_RepetitionMandatoryWithSeparator
              ) {
                _this.walkAtLeastOneSep(subProd, currRest, prevRest);
              } else if (
                subProd instanceof gast_public_RepetitionWithSeparator
              ) {
                _this.walkManySep(subProd, currRest, prevRest);
              } else if (subProd instanceof gast_public_Repetition) {
                _this.walkMany(subProd, currRest, prevRest);
              } else if (subProd instanceof gast_public_Alternation) {
                _this.walkOr(subProd, currRest, prevRest);
              } else {
                throw Error("non exhaustive match");
              }
            }
          );
        };
        RestWalker.prototype.walkTerminal = function (
          terminal,
          currRest,
          prevRest
        ) {};
        RestWalker.prototype.walkProdRef = function (
          refProd,
          currRest,
          prevRest
        ) {};
        RestWalker.prototype.walkFlat = function (
          flatProd,
          currRest,
          prevRest
        ) {
          // ABCDEF => after the D the rest is EF
          var fullOrRest = currRest.concat(prevRest);
          this.walk(flatProd, fullOrRest);
        };
        RestWalker.prototype.walkOption = function (
          optionProd,
          currRest,
          prevRest
        ) {
          // ABC(DE)?F => after the (DE)? the rest is F
          var fullOrRest = currRest.concat(prevRest);
          this.walk(optionProd, fullOrRest);
        };
        RestWalker.prototype.walkAtLeastOne = function (
          atLeastOneProd,
          currRest,
          prevRest
        ) {
          // ABC(DE)+F => after the (DE)+ the rest is (DE)?F
          var fullAtLeastOneRest = [
            new gast_public_Option({
              definition: atLeastOneProd.definition,
            }),
          ].concat(currRest, prevRest);
          this.walk(atLeastOneProd, fullAtLeastOneRest);
        };
        RestWalker.prototype.walkAtLeastOneSep = function (
          atLeastOneSepProd,
          currRest,
          prevRest
        ) {
          // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F
          var fullAtLeastOneSepRest = restForRepetitionWithSeparator(
            atLeastOneSepProd,
            currRest,
            prevRest
          );
          this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);
        };
        RestWalker.prototype.walkMany = function (
          manyProd,
          currRest,
          prevRest
        ) {
          // ABC(DE)*F => after the (DE)* the rest is (DE)?F
          var fullManyRest = [
            new gast_public_Option({
              definition: manyProd.definition,
            }),
          ].concat(currRest, prevRest);
          this.walk(manyProd, fullManyRest);
        };
        RestWalker.prototype.walkManySep = function (
          manySepProd,
          currRest,
          prevRest
        ) {
          // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F
          var fullManySepRest = restForRepetitionWithSeparator(
            manySepProd,
            currRest,
            prevRest
          );
          this.walk(manySepProd, fullManySepRest);
        };
        RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {
          var _this = this;
          // ABC(D|E|F)G => when finding the (D|E|F) the rest is G
          var fullOrRest = currRest.concat(prevRest);
          // walk all different alternatives
          Object(utils["u" /* forEach */])(orProd.definition, function (alt) {
            // wrapping each alternative in a single definition wrapper
            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows
            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1
            var prodWrapper = new gast_public_Flat({
              definition: [alt],
            });
            _this.walk(prodWrapper, fullOrRest);
          });
        };
        return RestWalker;
      })();

      function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {
        var repSepRest = [
          new gast_public_Option({
            definition: [
              new gast_public_Terminal({
                terminalType: repSepProd.separator,
              }),
            ].concat(repSepProd.definition),
          }),
        ];
        var fullRepSepRest = repSepRest.concat(currRest, prevRest);
        return fullRepSepRest;
      }
      //# sourceMappingURL=rest.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_visitor_public.js

      var gast_visitor_public_GAstVisitor = /** @class */ (function () {
        function GAstVisitor() {}
        GAstVisitor.prototype.visit = function (node) {
          var nodeAny = node;
          switch (nodeAny.constructor) {
            case gast_public_NonTerminal:
              return this.visitNonTerminal(nodeAny);
            case gast_public_Flat:
              return this.visitFlat(nodeAny);
            case gast_public_Option:
              return this.visitOption(nodeAny);
            case gast_public_RepetitionMandatory:
              return this.visitRepetitionMandatory(nodeAny);
            case gast_public_RepetitionMandatoryWithSeparator:
              return this.visitRepetitionMandatoryWithSeparator(nodeAny);
            case gast_public_RepetitionWithSeparator:
              return this.visitRepetitionWithSeparator(nodeAny);
            case gast_public_Repetition:
              return this.visitRepetition(nodeAny);
            case gast_public_Alternation:
              return this.visitAlternation(nodeAny);
            case gast_public_Terminal:
              return this.visitTerminal(nodeAny);
            case gast_public_Rule:
              return this.visitRule(nodeAny);
            /* istanbul ignore next */
            default:
              throw Error("non exhaustive match");
          }
        };
        GAstVisitor.prototype.visitNonTerminal = function (node) {};
        GAstVisitor.prototype.visitFlat = function (node) {};
        GAstVisitor.prototype.visitOption = function (node) {};
        GAstVisitor.prototype.visitRepetition = function (node) {};
        GAstVisitor.prototype.visitRepetitionMandatory = function (node) {};
        GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (
          node
        ) {};
        GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) {};
        GAstVisitor.prototype.visitAlternation = function (node) {};
        GAstVisitor.prototype.visitTerminal = function (node) {};
        GAstVisitor.prototype.visitRule = function (node) {};
        return GAstVisitor;
      })();

      //# sourceMappingURL=gast_visitor_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast.js
      var gast_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      function isSequenceProd(prod) {
        return (
          prod instanceof gast_public_Flat ||
          prod instanceof gast_public_Option ||
          prod instanceof gast_public_Repetition ||
          prod instanceof gast_public_RepetitionMandatory ||
          prod instanceof gast_public_RepetitionMandatoryWithSeparator ||
          prod instanceof gast_public_RepetitionWithSeparator ||
          prod instanceof gast_public_Terminal ||
          prod instanceof gast_public_Rule
        );
      }
      function isOptionalProd(prod, alreadyVisited) {
        if (alreadyVisited === void 0) {
          alreadyVisited = [];
        }
        var isDirectlyOptional =
          prod instanceof gast_public_Option ||
          prod instanceof gast_public_Repetition ||
          prod instanceof gast_public_RepetitionWithSeparator;
        if (isDirectlyOptional) {
          return true;
        }
        // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another
        // empty optional top rule
        // may be indirectly optional ((A?B?C?) | (D?E?F?))
        if (prod instanceof gast_public_Alternation) {
          // for OR its enough for just one of the alternatives to be optional
          return Object(utils["Q" /* some */])(
            prod.definition,
            function (subProd) {
              return isOptionalProd(subProd, alreadyVisited);
            }
          );
        } else if (
          prod instanceof gast_public_NonTerminal &&
          Object(utils["j" /* contains */])(alreadyVisited, prod)
        ) {
          // avoiding stack overflow due to infinite recursion
          return false;
        } else if (prod instanceof gast_public_AbstractProduction) {
          if (prod instanceof gast_public_NonTerminal) {
            alreadyVisited.push(prod);
          }
          return Object(utils["o" /* every */])(
            prod.definition,
            function (subProd) {
              return isOptionalProd(subProd, alreadyVisited);
            }
          );
        } else {
          return false;
        }
      }
      function isBranchingProd(prod) {
        return prod instanceof gast_public_Alternation;
      }
      function getProductionDslName(prod) {
        /* istanbul ignore else */
        if (prod instanceof gast_public_NonTerminal) {
          return "SUBRULE";
        } else if (prod instanceof gast_public_Option) {
          return "OPTION";
        } else if (prod instanceof gast_public_Alternation) {
          return "OR";
        } else if (prod instanceof gast_public_RepetitionMandatory) {
          return "AT_LEAST_ONE";
        } else if (
          prod instanceof gast_public_RepetitionMandatoryWithSeparator
        ) {
          return "AT_LEAST_ONE_SEP";
        } else if (prod instanceof gast_public_RepetitionWithSeparator) {
          return "MANY_SEP";
        } else if (prod instanceof gast_public_Repetition) {
          return "MANY";
        } else if (prod instanceof gast_public_Terminal) {
          return "CONSUME";
        } else {
          throw Error("non exhaustive match");
        }
      }
      var gast_DslMethodsCollectorVisitor = /** @class */ (function (_super) {
        gast_extends(DslMethodsCollectorVisitor, _super);
        function DslMethodsCollectorVisitor() {
          var _this =
            (_super !== null && _super.apply(this, arguments)) || this;
          // A minus is never valid in an identifier name
          _this.separator = "-";
          _this.dslMethods = {
            option: [],
            alternation: [],
            repetition: [],
            repetitionWithSeparator: [],
            repetitionMandatory: [],
            repetitionMandatoryWithSeparator: [],
          };
          return _this;
        }
        DslMethodsCollectorVisitor.prototype.reset = function () {
          this.dslMethods = {
            option: [],
            alternation: [],
            repetition: [],
            repetitionWithSeparator: [],
            repetitionMandatory: [],
            repetitionMandatoryWithSeparator: [],
          };
        };
        DslMethodsCollectorVisitor.prototype.visitTerminal = function (
          terminal
        ) {
          var key = terminal.terminalType.name + this.separator + "Terminal";
          if (!Object(utils["w" /* has */])(this.dslMethods, key)) {
            this.dslMethods[key] = [];
          }
          this.dslMethods[key].push(terminal);
        };
        DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (
          subrule
        ) {
          var key = subrule.nonTerminalName + this.separator + "Terminal";
          if (!Object(utils["w" /* has */])(this.dslMethods, key)) {
            this.dslMethods[key] = [];
          }
          this.dslMethods[key].push(subrule);
        };
        DslMethodsCollectorVisitor.prototype.visitOption = function (option) {
          this.dslMethods.option.push(option);
        };
        DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator =
          function (manySep) {
            this.dslMethods.repetitionWithSeparator.push(manySep);
          };
        DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory =
          function (atLeastOne) {
            this.dslMethods.repetitionMandatory.push(atLeastOne);
          };
        DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator =
          function (atLeastOneSep) {
            this.dslMethods.repetitionMandatoryWithSeparator.push(
              atLeastOneSep
            );
          };
        DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {
          this.dslMethods.repetition.push(many);
        };
        DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {
          this.dslMethods.alternation.push(or);
        };
        return DslMethodsCollectorVisitor;
      })(gast_visitor_public_GAstVisitor);

      var gast_collectorVisitor = new gast_DslMethodsCollectorVisitor();
      function collectMethods(rule) {
        gast_collectorVisitor.reset();
        rule.accept(gast_collectorVisitor);
        var dslMethods = gast_collectorVisitor.dslMethods;
        // avoid uncleaned references
        gast_collectorVisitor.reset();
        return dslMethods;
      }
      //# sourceMappingURL=gast.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/first.js

      function first(prod) {
        /* istanbul ignore else */
        if (prod instanceof gast_public_NonTerminal) {
          // this could in theory cause infinite loops if
          // (1) prod A refs prod B.
          // (2) prod B refs prod A
          // (3) AB can match the empty set
          // in other words a cycle where everything is optional so the first will keep
          // looking ahead for the next optional part and will never exit
          // currently there is no safeguard for this unique edge case because
          // (1) not sure a grammar in which this can happen is useful for anything (productive)
          return first(prod.referencedRule);
        } else if (prod instanceof gast_public_Terminal) {
          return firstForTerminal(prod);
        } else if (isSequenceProd(prod)) {
          return firstForSequence(prod);
        } else if (isBranchingProd(prod)) {
          return firstForBranching(prod);
        } else {
          throw Error("non exhaustive match");
        }
      }
      function firstForSequence(prod) {
        var firstSet = [];
        var seq = prod.definition;
        var nextSubProdIdx = 0;
        var hasInnerProdsRemaining = seq.length > nextSubProdIdx;
        var currSubProd;
        // so we enter the loop at least once (if the definition is not empty
        var isLastInnerProdOptional = true;
        // scan a sequence until it's end or until we have found a NONE optional production in it
        while (hasInnerProdsRemaining && isLastInnerProdOptional) {
          currSubProd = seq[nextSubProdIdx];
          isLastInnerProdOptional = isOptionalProd(currSubProd);
          firstSet = firstSet.concat(first(currSubProd));
          nextSubProdIdx = nextSubProdIdx + 1;
          hasInnerProdsRemaining = seq.length > nextSubProdIdx;
        }
        return Object(utils["T" /* uniq */])(firstSet);
      }
      function firstForBranching(prod) {
        var allAlternativesFirsts = Object(utils["I" /* map */])(
          prod.definition,
          function (innerProd) {
            return first(innerProd);
          }
        );
        return Object(utils["T" /* uniq */])(
          Object(utils["t" /* flatten */])(allAlternativesFirsts)
        );
      }
      function firstForTerminal(terminal) {
        return [terminal.terminalType];
      }
      //# sourceMappingURL=first.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/constants.js
      // TODO: can this be removed? where is it used?
      var IN = "_~IN~_";
      //# sourceMappingURL=constants.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/follow.js
      var follow_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      // This ResyncFollowsWalker computes all of the follows required for RESYNC
      // (skipping reference production).
      var follow_ResyncFollowsWalker = /** @class */ (function (_super) {
        follow_extends(ResyncFollowsWalker, _super);
        function ResyncFollowsWalker(topProd) {
          var _this = _super.call(this) || this;
          _this.topProd = topProd;
          _this.follows = {};
          return _this;
        }
        ResyncFollowsWalker.prototype.startWalking = function () {
          this.walk(this.topProd);
          return this.follows;
        };
        ResyncFollowsWalker.prototype.walkTerminal = function (
          terminal,
          currRest,
          prevRest
        ) {
          // do nothing! just like in the public sector after 13:00
        };
        ResyncFollowsWalker.prototype.walkProdRef = function (
          refProd,
          currRest,
          prevRest
        ) {
          var followName =
            buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +
            this.topProd.name;
          var fullRest = currRest.concat(prevRest);
          var restProd = new gast_public_Flat({
            definition: fullRest,
          });
          var t_in_topProd_follows = first(restProd);
          this.follows[followName] = t_in_topProd_follows;
        };
        return ResyncFollowsWalker;
      })(rest_RestWalker);

      function computeAllProdsFollows(topProductions) {
        var reSyncFollows = {};
        Object(utils["u" /* forEach */])(topProductions, function (topProd) {
          var currRefsFollow = new follow_ResyncFollowsWalker(
            topProd
          ).startWalking();
          Object(utils["f" /* assign */])(reSyncFollows, currRefsFollow);
        });
        return reSyncFollows;
      }
      function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {
        return inner.name + occurenceInParent + IN;
      }
      function buildInProdFollowPrefix(terminal) {
        var terminalName = terminal.terminalType.name;
        return terminalName + terminal.idx + IN;
      }
      //# sourceMappingURL=follow.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js
      // Lookahead keys are 32Bit integers in the form
      // TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX
      // XXXX -> Occurrence Index bitmap.
      // YYYY -> DSL Method Type bitmap.
      // ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.
      // TTTTTTTTT -> alternation alternative index bitmap
      var BITS_FOR_METHOD_TYPE = 4;
      var BITS_FOR_OCCURRENCE_IDX = 8;
      var BITS_FOR_RULE_IDX = 12;
      // TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.
      var BITS_FOR_ALT_IDX = 8;
      // short string used as part of mapping keys.
      // being short improves the performance when composing KEYS for maps out of these
      // The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)
      /* tslint:disable */
      var OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;
      var OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;
      var MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;
      var AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;
      var MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;
      var AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;
      /* tslint:enable */
      // this actually returns a number, but it is always used as a string (object prop key)
      function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {
        /* tslint:disable */
        return occurrence | dslMethodIdx | ruleIdx;
        /* tslint:enable */
      }
      var BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;
      function getKeyForAltIndex(ruleIdx, dslMethodIdx, occurrence, altIdx) {
        /* tslint:disable */
        // alternative indices are zero based, thus must always add one (turn on one bit) to guarantee uniqueness.
        var altIdxBitMap = (altIdx + 1) << BITS_START_FOR_ALT_IDX;
        return (
          getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) |
          altIdxBitMap
        );
        /* tslint:enable */
      }
      //# sourceMappingURL=keys.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/cst/cst.js
      var cst_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      /**
       * This nodeLocation tracking is not efficient and should only be used
       * when error recovery is enabled or the Token Vector contains virtual Tokens
       * (e.g, Python Indent/Outdent)
       * As it executes the calculation for every single terminal/nonTerminal
       * and does not rely on the fact the token vector is **sorted**
       */
      function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {
        // First (valid) update for this cst node
        if (isNaN(currNodeLocation.startOffset) === true) {
          // assumption1: Token location information is either NaN or a valid number
          // assumption2: Token location information is fully valid if it exist
          // (both start/end offsets exist and are numbers).
          currNodeLocation.startOffset = newLocationInfo.startOffset;
          currNodeLocation.endOffset = newLocationInfo.endOffset;
        }
        // Once the startOffset has been updated with a valid number it should never receive
        // any farther updates as the Token vector is sorted.
        // We still have to check this this condition for every new possible location info
        // because with error recovery enabled we may encounter invalid tokens (NaN location props)
        else if (
          currNodeLocation.endOffset < newLocationInfo.endOffset ===
          true
        ) {
          currNodeLocation.endOffset = newLocationInfo.endOffset;
        }
      }
      /**
       * This nodeLocation tracking is not efficient and should only be used
       * when error recovery is enabled or the Token Vector contains virtual Tokens
       * (e.g, Python Indent/Outdent)
       * As it executes the calculation for every single terminal/nonTerminal
       * and does not rely on the fact the token vector is **sorted**
       */
      function setNodeLocationFull(currNodeLocation, newLocationInfo) {
        // First (valid) update for this cst node
        if (isNaN(currNodeLocation.startOffset) === true) {
          // assumption1: Token location information is either NaN or a valid number
          // assumption2: Token location information is fully valid if it exist
          // (all start/end props exist and are numbers).
          currNodeLocation.startOffset = newLocationInfo.startOffset;
          currNodeLocation.startColumn = newLocationInfo.startColumn;
          currNodeLocation.startLine = newLocationInfo.startLine;
          currNodeLocation.endOffset = newLocationInfo.endOffset;
          currNodeLocation.endColumn = newLocationInfo.endColumn;
          currNodeLocation.endLine = newLocationInfo.endLine;
        }
        // Once the start props has been updated with a valid number it should never receive
        // any farther updates as the Token vector is sorted.
        // We still have to check this this condition for every new possible location info
        // because with error recovery enabled we may encounter invalid tokens (NaN location props)
        else if (
          currNodeLocation.endOffset < newLocationInfo.endOffset ===
          true
        ) {
          currNodeLocation.endOffset = newLocationInfo.endOffset;
          currNodeLocation.endColumn = newLocationInfo.endColumn;
          currNodeLocation.endLine = newLocationInfo.endLine;
        }
      }
      function addTerminalToCst(node, token, tokenTypeName) {
        if (node.children[tokenTypeName] === undefined) {
          node.children[tokenTypeName] = [token];
        } else {
          node.children[tokenTypeName].push(token);
        }
      }
      function addNoneTerminalToCst(node, ruleName, ruleResult) {
        if (node.children[ruleName] === undefined) {
          node.children[ruleName] = [ruleResult];
        } else {
          node.children[ruleName].push(ruleResult);
        }
      }
      var cst_NamedDSLMethodsCollectorVisitor = /** @class */ (function (
        _super
      ) {
        cst_extends(NamedDSLMethodsCollectorVisitor, _super);
        function NamedDSLMethodsCollectorVisitor(ruleIdx) {
          var _this = _super.call(this) || this;
          _this.result = [];
          _this.ruleIdx = ruleIdx;
          return _this;
        }
        NamedDSLMethodsCollectorVisitor.prototype.collectNamedDSLMethod =
          function (node, newNodeConstructor, methodIdx) {
            // TODO: better hack to copy what we need here...
            if (!Object(utils["F" /* isUndefined */])(node.name)) {
              // copy without name so this will indeed be processed later.
              var nameLessNode =
                /* istanbul ignore else */
                void 0;
              /* istanbul ignore else */
              if (
                node instanceof gast_public_Option ||
                node instanceof gast_public_Repetition ||
                node instanceof gast_public_RepetitionMandatory ||
                node instanceof gast_public_Alternation
              ) {
                nameLessNode = new newNodeConstructor({
                  definition: node.definition,
                  idx: node.idx,
                });
              } else if (
                node instanceof gast_public_RepetitionMandatoryWithSeparator ||
                node instanceof gast_public_RepetitionWithSeparator
              ) {
                nameLessNode = new newNodeConstructor({
                  definition: node.definition,
                  idx: node.idx,
                  separator: node.separator,
                });
              } else {
                throw Error("non exhaustive match");
              }
              var def = [nameLessNode];
              var key = getKeyForAutomaticLookahead(
                this.ruleIdx,
                methodIdx,
                node.idx
              );
              this.result.push({
                def: def,
                key: key,
                name: node.name,
                orgProd: node,
              });
            }
          };
        NamedDSLMethodsCollectorVisitor.prototype.visitOption = function (
          node
        ) {
          this.collectNamedDSLMethod(node, gast_public_Option, OPTION_IDX);
        };
        NamedDSLMethodsCollectorVisitor.prototype.visitRepetition = function (
          node
        ) {
          this.collectNamedDSLMethod(node, gast_public_Repetition, MANY_IDX);
        };
        NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatory =
          function (node) {
            this.collectNamedDSLMethod(
              node,
              gast_public_RepetitionMandatory,
              AT_LEAST_ONE_IDX
            );
          };
        NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator =
          function (node) {
            this.collectNamedDSLMethod(
              node,
              gast_public_RepetitionMandatoryWithSeparator,
              AT_LEAST_ONE_SEP_IDX
            );
          };
        NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator =
          function (node) {
            this.collectNamedDSLMethod(
              node,
              gast_public_RepetitionWithSeparator,
              MANY_SEP_IDX
            );
          };
        NamedDSLMethodsCollectorVisitor.prototype.visitAlternation = function (
          node
        ) {
          var _this = this;
          this.collectNamedDSLMethod(node, gast_public_Alternation, OR_IDX);
          var hasMoreThanOneAlternative = node.definition.length > 1;
          Object(utils["u" /* forEach */])(
            node.definition,
            function (currFlatAlt, altIdx) {
              if (!Object(utils["F" /* isUndefined */])(currFlatAlt.name)) {
                var def = currFlatAlt.definition;
                if (hasMoreThanOneAlternative) {
                  def = [
                    new gast_public_Option({
                      definition: currFlatAlt.definition,
                    }),
                  ];
                } else {
                  // mandatory
                  def = currFlatAlt.definition;
                }
                var key = getKeyForAltIndex(
                  _this.ruleIdx,
                  OR_IDX,
                  node.idx,
                  altIdx
                );
                _this.result.push({
                  def: def,
                  key: key,
                  name: currFlatAlt.name,
                  orgProd: currFlatAlt,
                });
              }
            }
          );
        };
        return NamedDSLMethodsCollectorVisitor;
      })(gast_visitor_public_GAstVisitor);

      function expandAllNestedRuleNames(topRules, fullToShortName) {
        var result = {
          allRuleNames: [],
        };
        Object(utils["u" /* forEach */])(topRules, function (currTopRule) {
          var currTopRuleShortName = fullToShortName[currTopRule.name];
          result.allRuleNames.push(currTopRule.name);
          var namedCollectorVisitor = new cst_NamedDSLMethodsCollectorVisitor(
            currTopRuleShortName
          );
          currTopRule.accept(namedCollectorVisitor);
          Object(utils["u" /* forEach */])(
            namedCollectorVisitor.result,
            function (_a) {
              var def = _a.def,
                key = _a.key,
                name = _a.name;
              result.allRuleNames.push(currTopRule.name + name);
            }
          );
        });
        return result;
      }
      //# sourceMappingURL=cst.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/interpreter.js
      var interpreter_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      var interpreter_AbstractNextPossibleTokensWalker =
        /** @class */ (function (_super) {
          interpreter_extends(AbstractNextPossibleTokensWalker, _super);
          function AbstractNextPossibleTokensWalker(topProd, path) {
            var _this = _super.call(this) || this;
            _this.topProd = topProd;
            _this.path = path;
            _this.possibleTokTypes = [];
            _this.nextProductionName = "";
            _this.nextProductionOccurrence = 0;
            _this.found = false;
            _this.isAtEndOfPath = false;
            return _this;
          }
          AbstractNextPossibleTokensWalker.prototype.startWalking =
            function () {
              this.found = false;
              if (this.path.ruleStack[0] !== this.topProd.name) {
                throw Error(
                  "The path does not start with the walker's top Rule!"
                );
              }
              // immutable for the win
              this.ruleStack = Object(utils["g" /* cloneArr */])(
                this.path.ruleStack
              ).reverse(); // intelij bug requires assertion
              this.occurrenceStack = Object(utils["g" /* cloneArr */])(
                this.path.occurrenceStack
              ).reverse(); // intelij bug requires assertion
              // already verified that the first production is valid, we now seek the 2nd production
              this.ruleStack.pop();
              this.occurrenceStack.pop();
              this.updateExpectedNext();
              this.walk(this.topProd);
              return this.possibleTokTypes;
            };
          AbstractNextPossibleTokensWalker.prototype.walk = function (
            prod,
            prevRest
          ) {
            if (prevRest === void 0) {
              prevRest = [];
            }
            // stop scanning once we found the path
            if (!this.found) {
              _super.prototype.walk.call(this, prod, prevRest);
            }
          };
          AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (
            refProd,
            currRest,
            prevRest
          ) {
            // found the next production, need to keep walking in it
            if (
              refProd.referencedRule.name === this.nextProductionName &&
              refProd.idx === this.nextProductionOccurrence
            ) {
              var fullRest = currRest.concat(prevRest);
              this.updateExpectedNext();
              this.walk(refProd.referencedRule, fullRest);
            }
          };
          AbstractNextPossibleTokensWalker.prototype.updateExpectedNext =
            function () {
              // need to consume the Terminal
              if (Object(utils["A" /* isEmpty */])(this.ruleStack)) {
                // must reset nextProductionXXX to avoid walking down another Top Level production while what we are
                // really seeking is the last Terminal...
                this.nextProductionName = "";
                this.nextProductionOccurrence = 0;
                this.isAtEndOfPath = true;
              } else {
                this.nextProductionName = this.ruleStack.pop();
                this.nextProductionOccurrence = this.occurrenceStack.pop();
              }
            };
          return AbstractNextPossibleTokensWalker;
        })(rest_RestWalker);

      var interpreter_NextAfterTokenWalker = /** @class */ (function (_super) {
        interpreter_extends(NextAfterTokenWalker, _super);
        function NextAfterTokenWalker(topProd, path) {
          var _this = _super.call(this, topProd, path) || this;
          _this.path = path;
          _this.nextTerminalName = "";
          _this.nextTerminalOccurrence = 0;
          _this.nextTerminalName = _this.path.lastTok.name;
          _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;
          return _this;
        }
        NextAfterTokenWalker.prototype.walkTerminal = function (
          terminal,
          currRest,
          prevRest
        ) {
          if (
            this.isAtEndOfPath &&
            terminal.terminalType.name === this.nextTerminalName &&
            terminal.idx === this.nextTerminalOccurrence &&
            !this.found
          ) {
            var fullRest = currRest.concat(prevRest);
            var restProd = new gast_public_Flat({
              definition: fullRest,
            });
            this.possibleTokTypes = first(restProd);
            this.found = true;
          }
        };
        return NextAfterTokenWalker;
      })(interpreter_AbstractNextPossibleTokensWalker);

      /**
       * This walker only "walks" a single "TOP" level in the Grammar Ast, this means
       * it never "follows" production refs
       */
      var AbstractNextTerminalAfterProductionWalker = /** @class */ (function (
        _super
      ) {
        interpreter_extends(AbstractNextTerminalAfterProductionWalker, _super);
        function AbstractNextTerminalAfterProductionWalker(
          topRule,
          occurrence
        ) {
          var _this = _super.call(this) || this;
          _this.topRule = topRule;
          _this.occurrence = occurrence;
          _this.result = {
            token: undefined,
            occurrence: undefined,
            isEndOfRule: undefined,
          };
          return _this;
        }
        AbstractNextTerminalAfterProductionWalker.prototype.startWalking =
          function () {
            this.walk(this.topRule);
            return this.result;
          };
        return AbstractNextTerminalAfterProductionWalker;
      })(rest_RestWalker);

      var interpreter_NextTerminalAfterManyWalker = /** @class */ (function (
        _super
      ) {
        interpreter_extends(NextTerminalAfterManyWalker, _super);
        function NextTerminalAfterManyWalker() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        NextTerminalAfterManyWalker.prototype.walkMany = function (
          manyProd,
          currRest,
          prevRest
        ) {
          if (manyProd.idx === this.occurrence) {
            var firstAfterMany = Object(utils["s" /* first */])(
              currRest.concat(prevRest)
            );
            this.result.isEndOfRule = firstAfterMany === undefined;
            if (firstAfterMany instanceof gast_public_Terminal) {
              this.result.token = firstAfterMany.terminalType;
              this.result.occurrence = firstAfterMany.idx;
            }
          } else {
            _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);
          }
        };
        return NextTerminalAfterManyWalker;
      })(AbstractNextTerminalAfterProductionWalker);

      var interpreter_NextTerminalAfterManySepWalker = /** @class */ (function (
        _super
      ) {
        interpreter_extends(NextTerminalAfterManySepWalker, _super);
        function NextTerminalAfterManySepWalker() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        NextTerminalAfterManySepWalker.prototype.walkManySep = function (
          manySepProd,
          currRest,
          prevRest
        ) {
          if (manySepProd.idx === this.occurrence) {
            var firstAfterManySep = Object(utils["s" /* first */])(
              currRest.concat(prevRest)
            );
            this.result.isEndOfRule = firstAfterManySep === undefined;
            if (firstAfterManySep instanceof gast_public_Terminal) {
              this.result.token = firstAfterManySep.terminalType;
              this.result.occurrence = firstAfterManySep.idx;
            }
          } else {
            _super.prototype.walkManySep.call(
              this,
              manySepProd,
              currRest,
              prevRest
            );
          }
        };
        return NextTerminalAfterManySepWalker;
      })(AbstractNextTerminalAfterProductionWalker);

      var interpreter_NextTerminalAfterAtLeastOneWalker =
        /** @class */ (function (_super) {
          interpreter_extends(NextTerminalAfterAtLeastOneWalker, _super);
          function NextTerminalAfterAtLeastOneWalker() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne =
            function (atLeastOneProd, currRest, prevRest) {
              if (atLeastOneProd.idx === this.occurrence) {
                var firstAfterAtLeastOne = Object(utils["s" /* first */])(
                  currRest.concat(prevRest)
                );
                this.result.isEndOfRule = firstAfterAtLeastOne === undefined;
                if (firstAfterAtLeastOne instanceof gast_public_Terminal) {
                  this.result.token = firstAfterAtLeastOne.terminalType;
                  this.result.occurrence = firstAfterAtLeastOne.idx;
                }
              } else {
                _super.prototype.walkAtLeastOne.call(
                  this,
                  atLeastOneProd,
                  currRest,
                  prevRest
                );
              }
            };
          return NextTerminalAfterAtLeastOneWalker;
        })(AbstractNextTerminalAfterProductionWalker);

      // TODO: reduce code duplication in the AfterWalkers
      var interpreter_NextTerminalAfterAtLeastOneSepWalker =
        /** @class */ (function (_super) {
          interpreter_extends(NextTerminalAfterAtLeastOneSepWalker, _super);
          function NextTerminalAfterAtLeastOneSepWalker() {
            return (_super !== null && _super.apply(this, arguments)) || this;
          }
          NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep =
            function (atleastOneSepProd, currRest, prevRest) {
              if (atleastOneSepProd.idx === this.occurrence) {
                var firstAfterfirstAfterAtLeastOneSep = Object(
                  utils["s" /* first */]
                )(currRest.concat(prevRest));
                this.result.isEndOfRule =
                  firstAfterfirstAfterAtLeastOneSep === undefined;
                if (
                  firstAfterfirstAfterAtLeastOneSep instanceof
                  gast_public_Terminal
                ) {
                  this.result.token =
                    firstAfterfirstAfterAtLeastOneSep.terminalType;
                  this.result.occurrence =
                    firstAfterfirstAfterAtLeastOneSep.idx;
                }
              } else {
                _super.prototype.walkAtLeastOneSep.call(
                  this,
                  atleastOneSepProd,
                  currRest,
                  prevRest
                );
              }
            };
          return NextTerminalAfterAtLeastOneSepWalker;
        })(AbstractNextTerminalAfterProductionWalker);

      function possiblePathsFrom(targetDef, maxLength, currPath) {
        if (currPath === void 0) {
          currPath = [];
        }
        // avoid side effects
        currPath = Object(utils["g" /* cloneArr */])(currPath);
        var result = [];
        var i = 0;
        // TODO: avoid inner funcs
        function remainingPathWith(nextDef) {
          return nextDef.concat(
            Object(utils["m" /* drop */])(targetDef, i + 1)
          );
        }
        // TODO: avoid inner funcs
        function getAlternativesForProd(definition) {
          var alternatives = possiblePathsFrom(
            remainingPathWith(definition),
            maxLength,
            currPath
          );
          return result.concat(alternatives);
        }
        /**
         * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the
         * following (rest) of the targetDef.
         *
         * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the
         * the optional production.
         */
        while (currPath.length < maxLength && i < targetDef.length) {
          var prod = targetDef[i];
          /* istanbul ignore else */
          if (prod instanceof gast_public_Flat) {
            return getAlternativesForProd(prod.definition);
          } else if (prod instanceof gast_public_NonTerminal) {
            return getAlternativesForProd(prod.definition);
          } else if (prod instanceof gast_public_Option) {
            result = getAlternativesForProd(prod.definition);
          } else if (prod instanceof gast_public_RepetitionMandatory) {
            var newDef = prod.definition.concat([
              new gast_public_Repetition({
                definition: prod.definition,
              }),
            ]);
            return getAlternativesForProd(newDef);
          } else if (
            prod instanceof gast_public_RepetitionMandatoryWithSeparator
          ) {
            var newDef = [
              new gast_public_Flat({
                definition: prod.definition,
              }),
              new gast_public_Repetition({
                definition: [
                  new gast_public_Terminal({
                    terminalType: prod.separator,
                  }),
                ].concat(prod.definition),
              }),
            ];
            return getAlternativesForProd(newDef);
          } else if (prod instanceof gast_public_RepetitionWithSeparator) {
            var newDef = prod.definition.concat([
              new gast_public_Repetition({
                definition: [
                  new gast_public_Terminal({
                    terminalType: prod.separator,
                  }),
                ].concat(prod.definition),
              }),
            ]);
            result = getAlternativesForProd(newDef);
          } else if (prod instanceof gast_public_Repetition) {
            var newDef = prod.definition.concat([
              new gast_public_Repetition({
                definition: prod.definition,
              }),
            ]);
            result = getAlternativesForProd(newDef);
          } else if (prod instanceof gast_public_Alternation) {
            Object(utils["u" /* forEach */])(
              prod.definition,
              function (currAlt) {
                result = getAlternativesForProd(currAlt.definition);
              }
            );
            return result;
          } else if (prod instanceof gast_public_Terminal) {
            currPath.push(prod.terminalType);
          } else {
            throw Error("non exhaustive match");
          }
          i++;
        }
        result.push({
          partialPath: currPath,
          suffixDef: Object(utils["m" /* drop */])(targetDef, i),
        });
        return result;
      }
      function nextPossibleTokensAfter(
        initialDef,
        tokenVector,
        tokMatcher,
        maxLookAhead
      ) {
        var EXIT_NON_TERMINAL = "EXIT_NONE_TERMINAL";
        // to avoid creating a new Array each time.
        var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];
        var EXIT_ALTERNATIVE = "EXIT_ALTERNATIVE";
        var foundCompletePath = false;
        var tokenVectorLength = tokenVector.length;
        var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;
        var result = [];
        var possiblePaths = [];
        possiblePaths.push({
          idx: -1,
          def: initialDef,
          ruleStack: [],
          occurrenceStack: [],
        });
        while (!Object(utils["A" /* isEmpty */])(possiblePaths)) {
          var currPath = possiblePaths.pop();
          // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)
          if (currPath === EXIT_ALTERNATIVE) {
            if (
              foundCompletePath &&
              Object(utils["H" /* last */])(possiblePaths).idx <=
                minimalAlternativesIndex
            ) {
              // remove irrelevant alternative
              possiblePaths.pop();
            }
            continue;
          }
          var currDef = currPath.def;
          var currIdx = currPath.idx;
          var currRuleStack = currPath.ruleStack;
          var currOccurrenceStack = currPath.occurrenceStack;
          // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT
          if (Object(utils["A" /* isEmpty */])(currDef)) {
            continue;
          }
          var prod = currDef[0];
          /* istanbul ignore else */
          if (prod === EXIT_NON_TERMINAL) {
            var nextPath = {
              idx: currIdx,
              def: Object(utils["m" /* drop */])(currDef),
              ruleStack: Object(utils["n" /* dropRight */])(currRuleStack),
              occurrenceStack: Object(utils["n" /* dropRight */])(
                currOccurrenceStack
              ),
            };
            possiblePaths.push(nextPath);
          } else if (prod instanceof gast_public_Terminal) {
            /* istanbul ignore else */
            if (currIdx < tokenVectorLength - 1) {
              var nextIdx = currIdx + 1;
              var actualToken = tokenVector[nextIdx];
              if (tokMatcher(actualToken, prod.terminalType)) {
                var nextPath = {
                  idx: nextIdx,
                  def: Object(utils["m" /* drop */])(currDef),
                  ruleStack: currRuleStack,
                  occurrenceStack: currOccurrenceStack,
                };
                possiblePaths.push(nextPath);
              }
              // end of the line
            } else if (currIdx === tokenVectorLength - 1) {
              // IGNORE ABOVE ELSE
              result.push({
                nextTokenType: prod.terminalType,
                nextTokenOccurrence: prod.idx,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack,
              });
              foundCompletePath = true;
            } else {
              throw Error("non exhaustive match");
            }
          } else if (prod instanceof gast_public_NonTerminal) {
            var newRuleStack = Object(utils["g" /* cloneArr */])(currRuleStack);
            newRuleStack.push(prod.nonTerminalName);
            var newOccurrenceStack = Object(utils["g" /* cloneArr */])(
              currOccurrenceStack
            );
            newOccurrenceStack.push(prod.idx);
            var nextPath = {
              idx: currIdx,
              def: prod.definition.concat(
                EXIT_NON_TERMINAL_ARR,
                Object(utils["m" /* drop */])(currDef)
              ),
              ruleStack: newRuleStack,
              occurrenceStack: newOccurrenceStack,
            };
            possiblePaths.push(nextPath);
          } else if (prod instanceof gast_public_Option) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
              idx: currIdx,
              def: Object(utils["m" /* drop */])(currDef),
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var nextPathWith = {
              idx: currIdx,
              def: prod.definition.concat(
                Object(utils["m" /* drop */])(currDef)
              ),
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPathWith);
          } else if (prod instanceof gast_public_RepetitionMandatory) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var secondIteration = new gast_public_Repetition({
              definition: prod.definition,
              idx: prod.idx,
            });
            var nextDef = prod.definition.concat(
              [secondIteration],
              Object(utils["m" /* drop */])(currDef)
            );
            var nextPath = {
              idx: currIdx,
              def: nextDef,
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPath);
          } else if (
            prod instanceof gast_public_RepetitionMandatoryWithSeparator
          ) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var separatorGast = new gast_public_Terminal({
              terminalType: prod.separator,
            });
            var secondIteration = new gast_public_Repetition({
              definition: [separatorGast].concat(prod.definition),
              idx: prod.idx,
            });
            var nextDef = prod.definition.concat(
              [secondIteration],
              Object(utils["m" /* drop */])(currDef)
            );
            var nextPath = {
              idx: currIdx,
              def: nextDef,
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPath);
          } else if (prod instanceof gast_public_RepetitionWithSeparator) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
              idx: currIdx,
              def: Object(utils["m" /* drop */])(currDef),
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var separatorGast = new gast_public_Terminal({
              terminalType: prod.separator,
            });
            var nthRepetition = new gast_public_Repetition({
              definition: [separatorGast].concat(prod.definition),
              idx: prod.idx,
            });
            var nextDef = prod.definition.concat(
              [nthRepetition],
              Object(utils["m" /* drop */])(currDef)
            );
            var nextPathWith = {
              idx: currIdx,
              def: nextDef,
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPathWith);
          } else if (prod instanceof gast_public_Repetition) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
              idx: currIdx,
              def: Object(utils["m" /* drop */])(currDef),
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?
            var nthRepetition = new gast_public_Repetition({
              definition: prod.definition,
              idx: prod.idx,
            });
            var nextDef = prod.definition.concat(
              [nthRepetition],
              Object(utils["m" /* drop */])(currDef)
            );
            var nextPathWith = {
              idx: currIdx,
              def: nextDef,
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            };
            possiblePaths.push(nextPathWith);
          } else if (prod instanceof gast_public_Alternation) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            for (var i = prod.definition.length - 1; i >= 0; i--) {
              var currAlt = prod.definition[i];
              var currAltPath = {
                idx: currIdx,
                def: currAlt.definition.concat(
                  Object(utils["m" /* drop */])(currDef)
                ),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack,
              };
              possiblePaths.push(currAltPath);
              possiblePaths.push(EXIT_ALTERNATIVE);
            }
          } else if (prod instanceof gast_public_Flat) {
            possiblePaths.push({
              idx: currIdx,
              def: prod.definition.concat(
                Object(utils["m" /* drop */])(currDef)
              ),
              ruleStack: currRuleStack,
              occurrenceStack: currOccurrenceStack,
            });
          } else if (prod instanceof gast_public_Rule) {
            // last because we should only encounter at most a single one of these per invocation.
            possiblePaths.push(
              expandTopLevelRule(
                prod,
                currIdx,
                currRuleStack,
                currOccurrenceStack
              )
            );
          } else {
            throw Error("non exhaustive match");
          }
        }
        return result;
      }
      function expandTopLevelRule(
        topRule,
        currIdx,
        currRuleStack,
        currOccurrenceStack
      ) {
        var newRuleStack = Object(utils["g" /* cloneArr */])(currRuleStack);
        newRuleStack.push(topRule.name);
        var newCurrOccurrenceStack = Object(utils["g" /* cloneArr */])(
          currOccurrenceStack
        );
        // top rule is always assumed to have been called with occurrence index 1
        newCurrOccurrenceStack.push(1);
        return {
          idx: currIdx,
          def: topRule.definition,
          ruleStack: newRuleStack,
          occurrenceStack: newCurrOccurrenceStack,
        };
      }
      //# sourceMappingURL=interpreter.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/lookahead.js
      var lookahead_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      var PROD_TYPE;
      (function (PROD_TYPE) {
        PROD_TYPE[(PROD_TYPE["OPTION"] = 0)] = "OPTION";
        PROD_TYPE[(PROD_TYPE["REPETITION"] = 1)] = "REPETITION";
        PROD_TYPE[(PROD_TYPE["REPETITION_MANDATORY"] = 2)] =
          "REPETITION_MANDATORY";
        PROD_TYPE[(PROD_TYPE["REPETITION_MANDATORY_WITH_SEPARATOR"] = 3)] =
          "REPETITION_MANDATORY_WITH_SEPARATOR";
        PROD_TYPE[(PROD_TYPE["REPETITION_WITH_SEPARATOR"] = 4)] =
          "REPETITION_WITH_SEPARATOR";
        PROD_TYPE[(PROD_TYPE["ALTERNATION"] = 5)] = "ALTERNATION";
      })(PROD_TYPE || (PROD_TYPE = {}));
      function getProdType(prod) {
        /* istanbul ignore else */
        if (prod instanceof gast_public_Option) {
          return PROD_TYPE.OPTION;
        } else if (prod instanceof gast_public_Repetition) {
          return PROD_TYPE.REPETITION;
        } else if (prod instanceof gast_public_RepetitionMandatory) {
          return PROD_TYPE.REPETITION_MANDATORY;
        } else if (
          prod instanceof gast_public_RepetitionMandatoryWithSeparator
        ) {
          return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;
        } else if (prod instanceof gast_public_RepetitionWithSeparator) {
          return PROD_TYPE.REPETITION_WITH_SEPARATOR;
        } else if (prod instanceof gast_public_Alternation) {
          return PROD_TYPE.ALTERNATION;
        } else {
          throw Error("non exhaustive match");
        }
      }
      function buildLookaheadFuncForOr(
        occurrence,
        ruleGrammar,
        maxLookahead,
        hasPredicates,
        dynamicTokensEnabled,
        laFuncBuilder
      ) {
        var lookAheadPaths = getLookaheadPathsForOr(
          occurrence,
          ruleGrammar,
          maxLookahead
        );
        var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
          ? tokenStructuredMatcherNoCategories
          : tokenStructuredMatcher;
        return laFuncBuilder(
          lookAheadPaths,
          hasPredicates,
          tokenMatcher,
          dynamicTokensEnabled
        );
      }
      /**
       *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare
       *  the lookahead "inside" the production and the lookahead immediately "after" it in the same top level rule (context free).
       *
       *  Example: given a production:
       *  ABC(DE)?DF
       *
       *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two
       *  alternatives.
       *
       *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.
       */
      function buildLookaheadFuncForOptionalProd(
        occurrence,
        ruleGrammar,
        k,
        dynamicTokensEnabled,
        prodType,
        lookaheadBuilder
      ) {
        var lookAheadPaths = getLookaheadPathsForOptionalProd(
          occurrence,
          ruleGrammar,
          prodType,
          k
        );
        var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
          ? tokenStructuredMatcherNoCategories
          : tokenStructuredMatcher;
        return lookaheadBuilder(
          lookAheadPaths[0],
          tokenMatcher,
          dynamicTokensEnabled
        );
      }
      function buildAlternativesLookAheadFunc(
        alts,
        hasPredicates,
        tokenMatcher,
        dynamicTokensEnabled
      ) {
        var numOfAlts = alts.length;
        var areAllOneTokenLookahead = Object(utils["o" /* every */])(
          alts,
          function (currAlt) {
            return Object(utils["o" /* every */])(currAlt, function (currPath) {
              return currPath.length === 1;
            });
          }
        );
        // This version takes into account the predicates as well.
        if (hasPredicates) {
          /**
           * @returns {number} - The chosen alternative index
           */
          return function (orAlts) {
            // unfortunately the predicates must be extracted every single time
            // as they cannot be cached due to references to parameters(vars) which are no longer valid.
            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)
            var predicates = Object(utils["I" /* map */])(
              orAlts,
              function (currAlt) {
                return currAlt.GATE;
              }
            );
            for (var t = 0; t < numOfAlts; t++) {
              var currAlt = alts[t];
              var currNumOfPaths = currAlt.length;
              var currPredicate = predicates[t];
              if (
                currPredicate !== undefined &&
                currPredicate.call(this) === false
              ) {
                // if the predicate does not match there is no point in checking the paths
                continue;
              }
              nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                var currPath = currAlt[j];
                var currPathLength = currPath.length;
                for (var i = 0; i < currPathLength; i++) {
                  var nextToken = this.LA(i + 1);
                  if (tokenMatcher(nextToken, currPath[i]) === false) {
                    // mismatch in current path
                    // try the next pth
                    continue nextPath;
                  }
                }
                // found a full path that matches.
                // this will also work for an empty ALT as the loop will be skipped
                return t;
              }
              // none of the paths for the current alternative matched
              // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
          };
        } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
          // optimized (common) case of all the lookaheads paths requiring only
          // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.
          var singleTokenAlts = Object(utils["I" /* map */])(
            alts,
            function (currAlt) {
              return Object(utils["t" /* flatten */])(currAlt);
            }
          );
          var choiceToAlt_1 = Object(utils["O" /* reduce */])(
            singleTokenAlts,
            function (result, currAlt, idx) {
              Object(utils["u" /* forEach */])(currAlt, function (currTokType) {
                if (
                  !Object(utils["w" /* has */])(
                    result,
                    currTokType.tokenTypeIdx
                  )
                ) {
                  result[currTokType.tokenTypeIdx] = idx;
                }
                Object(utils["u" /* forEach */])(
                  currTokType.categoryMatches,
                  function (currExtendingType) {
                    if (
                      !Object(utils["w" /* has */])(result, currExtendingType)
                    ) {
                      result[currExtendingType] = idx;
                    }
                  }
                );
              });
              return result;
            },
            []
          );
          /**
           * @returns {number} - The chosen alternative index
           */
          return function () {
            var nextToken = this.LA(1);
            return choiceToAlt_1[nextToken.tokenTypeIdx];
          };
        } else {
          // optimized lookahead without needing to check the predicates at all.
          // this causes code duplication which is intentional to improve performance.
          /**
           * @returns {number} - The chosen alternative index
           */
          return function () {
            for (var t = 0; t < numOfAlts; t++) {
              var currAlt = alts[t];
              var currNumOfPaths = currAlt.length;
              nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                var currPath = currAlt[j];
                var currPathLength = currPath.length;
                for (var i = 0; i < currPathLength; i++) {
                  var nextToken = this.LA(i + 1);
                  if (tokenMatcher(nextToken, currPath[i]) === false) {
                    // mismatch in current path
                    // try the next pth
                    continue nextPath;
                  }
                }
                // found a full path that matches.
                // this will also work for an empty ALT as the loop will be skipped
                return t;
              }
              // none of the paths for the current alternative matched
              // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
          };
        }
      }
      function buildSingleAlternativeLookaheadFunction(
        alt,
        tokenMatcher,
        dynamicTokensEnabled
      ) {
        var areAllOneTokenLookahead = Object(utils["o" /* every */])(
          alt,
          function (currPath) {
            return currPath.length === 1;
          }
        );
        var numOfPaths = alt.length;
        // optimized (common) case of all the lookaheads paths requiring only
        // a single token lookahead.
        if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
          var singleTokensTypes = Object(utils["t" /* flatten */])(alt);
          if (
            singleTokensTypes.length === 1 &&
            Object(utils["A" /* isEmpty */])(
              singleTokensTypes[0].categoryMatches
            )
          ) {
            var expectedTokenType = singleTokensTypes[0];
            var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;
            return function () {
              return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;
            };
          } else {
            var choiceToAlt_2 = Object(utils["O" /* reduce */])(
              singleTokensTypes,
              function (result, currTokType, idx) {
                result[currTokType.tokenTypeIdx] = true;
                Object(utils["u" /* forEach */])(
                  currTokType.categoryMatches,
                  function (currExtendingType) {
                    result[currExtendingType] = true;
                  }
                );
                return result;
              },
              []
            );
            return function () {
              var nextToken = this.LA(1);
              return choiceToAlt_2[nextToken.tokenTypeIdx] === true;
            };
          }
        } else {
          return function () {
            nextPath: for (var j = 0; j < numOfPaths; j++) {
              var currPath = alt[j];
              var currPathLength = currPath.length;
              for (var i = 0; i < currPathLength; i++) {
                var nextToken = this.LA(i + 1);
                if (tokenMatcher(nextToken, currPath[i]) === false) {
                  // mismatch in current path
                  // try the next pth
                  continue nextPath;
                }
              }
              // found a full path that matches.
              return true;
            }
            // none of the paths matched
            return false;
          };
        }
      }
      var RestDefinitionFinderWalker = /** @class */ (function (_super) {
        lookahead_extends(RestDefinitionFinderWalker, _super);
        function RestDefinitionFinderWalker(
          topProd,
          targetOccurrence,
          targetProdType
        ) {
          var _this = _super.call(this) || this;
          _this.topProd = topProd;
          _this.targetOccurrence = targetOccurrence;
          _this.targetProdType = targetProdType;
          return _this;
        }
        RestDefinitionFinderWalker.prototype.startWalking = function () {
          this.walk(this.topProd);
          return this.restDef;
        };
        RestDefinitionFinderWalker.prototype.checkIsTarget = function (
          node,
          expectedProdType,
          currRest,
          prevRest
        ) {
          if (
            node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdType
          ) {
            this.restDef = currRest.concat(prevRest);
            return true;
          }
          // performance optimization, do not iterate over the entire Grammar ast after we have found the target
          return false;
        };
        RestDefinitionFinderWalker.prototype.walkOption = function (
          optionProd,
          currRest,
          prevRest
        ) {
          if (
            !this.checkIsTarget(
              optionProd,
              PROD_TYPE.OPTION,
              currRest,
              prevRest
            )
          ) {
            _super.prototype.walkOption.call(
              this,
              optionProd,
              currRest,
              prevRest
            );
          }
        };
        RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (
          atLeastOneProd,
          currRest,
          prevRest
        ) {
          if (
            !this.checkIsTarget(
              atLeastOneProd,
              PROD_TYPE.REPETITION_MANDATORY,
              currRest,
              prevRest
            )
          ) {
            _super.prototype.walkOption.call(
              this,
              atLeastOneProd,
              currRest,
              prevRest
            );
          }
        };
        RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (
          atLeastOneSepProd,
          currRest,
          prevRest
        ) {
          if (
            !this.checkIsTarget(
              atLeastOneSepProd,
              PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,
              currRest,
              prevRest
            )
          ) {
            _super.prototype.walkOption.call(
              this,
              atLeastOneSepProd,
              currRest,
              prevRest
            );
          }
        };
        RestDefinitionFinderWalker.prototype.walkMany = function (
          manyProd,
          currRest,
          prevRest
        ) {
          if (
            !this.checkIsTarget(
              manyProd,
              PROD_TYPE.REPETITION,
              currRest,
              prevRest
            )
          ) {
            _super.prototype.walkOption.call(
              this,
              manyProd,
              currRest,
              prevRest
            );
          }
        };
        RestDefinitionFinderWalker.prototype.walkManySep = function (
          manySepProd,
          currRest,
          prevRest
        ) {
          if (
            !this.checkIsTarget(
              manySepProd,
              PROD_TYPE.REPETITION_WITH_SEPARATOR,
              currRest,
              prevRest
            )
          ) {
            _super.prototype.walkOption.call(
              this,
              manySepProd,
              currRest,
              prevRest
            );
          }
        };
        return RestDefinitionFinderWalker;
      })(rest_RestWalker);
      /**
       * Returns the definition of a target production in a top level level rule.
       */
      var InsideDefinitionFinderVisitor = /** @class */ (function (_super) {
        lookahead_extends(InsideDefinitionFinderVisitor, _super);
        function InsideDefinitionFinderVisitor(
          targetOccurrence,
          targetProdType,
          targetRef
        ) {
          var _this = _super.call(this) || this;
          _this.targetOccurrence = targetOccurrence;
          _this.targetProdType = targetProdType;
          _this.targetRef = targetRef;
          _this.result = [];
          return _this;
        }
        InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (
          node,
          expectedProdName
        ) {
          if (
            node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdName &&
            (this.targetRef === undefined || node === this.targetRef)
          ) {
            this.result = node.definition;
          }
        };
        InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {
          this.checkIsTarget(node, PROD_TYPE.OPTION);
        };
        InsideDefinitionFinderVisitor.prototype.visitRepetition = function (
          node
        ) {
          this.checkIsTarget(node, PROD_TYPE.REPETITION);
        };
        InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory =
          function (node) {
            this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);
          };
        InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator =
          function (node) {
            this.checkIsTarget(
              node,
              PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR
            );
          };
        InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator =
          function (node) {
            this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);
          };
        InsideDefinitionFinderVisitor.prototype.visitAlternation = function (
          node
        ) {
          this.checkIsTarget(node, PROD_TYPE.ALTERNATION);
        };
        return InsideDefinitionFinderVisitor;
      })(gast_visitor_public_GAstVisitor);
      function initializeArrayOfArrays(size) {
        var result = new Array(size);
        for (var i = 0; i < size; i++) {
          result[i] = [];
        }
        return result;
      }
      /**
       * A sort of hash function between a Path in the grammar and a string.
       * Note that this returns multiple "hashes" to support the scenario of token categories.
       * -  A single path with categories may match multiple **actual** paths.
       */
      function pathToHashKeys(path) {
        var keys = [""];
        for (var i = 0; i < path.length; i++) {
          var tokType = path[i];
          var longerKeys = [];
          for (var j = 0; j < keys.length; j++) {
            var currShorterKey = keys[j];
            longerKeys.push(currShorterKey + "_" + tokType.tokenTypeIdx);
            for (var t = 0; t < tokType.categoryMatches.length; t++) {
              var categoriesKeySuffix = "_" + tokType.categoryMatches[t];
              longerKeys.push(currShorterKey + categoriesKeySuffix);
            }
          }
          keys = longerKeys;
        }
        return keys;
      }
      /**
       * Imperative style due to being called from a hot spot
       */
      function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {
        for (
          var currAltIdx = 0;
          currAltIdx < altKnownPathsKeys.length;
          currAltIdx++
        ) {
          // We only want to test vs the other alternatives
          if (currAltIdx === idx) {
            continue;
          }
          var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];
          for (
            var searchIdx = 0;
            searchIdx < searchPathKeys.length;
            searchIdx++
          ) {
            var searchKey = searchPathKeys[searchIdx];
            if (otherAltKnownPathsKeys[searchKey] === true) {
              return false;
            }
          }
        }
        // None of the SearchPathKeys were found in any of the other alternatives
        return true;
      }
      function lookAheadSequenceFromAlternatives(altsDefs, k) {
        var partialAlts = Object(utils["I" /* map */])(
          altsDefs,
          function (currAlt) {
            return possiblePathsFrom([currAlt], 1);
          }
        );
        var finalResult = initializeArrayOfArrays(partialAlts.length);
        var altsHashes = Object(utils["I" /* map */])(
          partialAlts,
          function (currAltPaths) {
            var dict = {};
            Object(utils["u" /* forEach */])(currAltPaths, function (item) {
              var keys = pathToHashKeys(item.partialPath);
              Object(utils["u" /* forEach */])(keys, function (currKey) {
                dict[currKey] = true;
              });
            });
            return dict;
          }
        );
        var newData = partialAlts;
        // maxLookahead loop
        for (var pathLength = 1; pathLength <= k; pathLength++) {
          var currDataset = newData;
          newData = initializeArrayOfArrays(currDataset.length);
          var _loop_1 = function (altIdx) {
            var currAltPathsAndSuffixes = currDataset[altIdx];
            // paths in current alternative loop
            for (
              var currPathIdx = 0;
              currPathIdx < currAltPathsAndSuffixes.length;
              currPathIdx++
            ) {
              var currPathPrefix =
                currAltPathsAndSuffixes[currPathIdx].partialPath;
              var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;
              var prefixKeys = pathToHashKeys(currPathPrefix);
              var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);
              // End of the line for this path.
              if (
                isUnique ||
                Object(utils["A" /* isEmpty */])(suffixDef) ||
                currPathPrefix.length === k
              ) {
                var currAltResult = finalResult[altIdx];
                // TODO: Can we implement a containsPath using Maps/Dictionaries?
                if (containsPath(currAltResult, currPathPrefix) === false) {
                  currAltResult.push(currPathPrefix);
                  // Update all new  keys for the current path.
                  for (var j = 0; j < prefixKeys.length; j++) {
                    var currKey = prefixKeys[j];
                    altsHashes[altIdx][currKey] = true;
                  }
                }
              }
              // Expand longer paths
              else {
                var newPartialPathsAndSuffixes = possiblePathsFrom(
                  suffixDef,
                  pathLength + 1,
                  currPathPrefix
                );
                newData[altIdx] = newData[altIdx].concat(
                  newPartialPathsAndSuffixes
                );
                // Update keys for new known paths
                Object(utils["u" /* forEach */])(
                  newPartialPathsAndSuffixes,
                  function (item) {
                    var prefixKeys = pathToHashKeys(item.partialPath);
                    Object(utils["u" /* forEach */])(
                      prefixKeys,
                      function (key) {
                        altsHashes[altIdx][key] = true;
                      }
                    );
                  }
                );
              }
            }
          };
          // alternatives loop
          for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {
            _loop_1(altIdx);
          }
        }
        return finalResult;
      }
      function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {
        var visitor = new InsideDefinitionFinderVisitor(
          occurrence,
          PROD_TYPE.ALTERNATION,
          orProd
        );
        ruleGrammar.accept(visitor);
        return lookAheadSequenceFromAlternatives(visitor.result, k);
      }
      function getLookaheadPathsForOptionalProd(
        occurrence,
        ruleGrammar,
        prodType,
        k
      ) {
        var insideDefVisitor = new InsideDefinitionFinderVisitor(
          occurrence,
          prodType
        );
        ruleGrammar.accept(insideDefVisitor);
        var insideDef = insideDefVisitor.result;
        var afterDefWalker = new RestDefinitionFinderWalker(
          ruleGrammar,
          occurrence,
          prodType
        );
        var afterDef = afterDefWalker.startWalking();
        var insideFlat = new gast_public_Flat({
          definition: insideDef,
        });
        var afterFlat = new gast_public_Flat({ definition: afterDef });
        return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);
      }
      function containsPath(alternative, searchPath) {
        compareOtherPath: for (var i = 0; i < alternative.length; i++) {
          var otherPath = alternative[i];
          if (otherPath.length !== searchPath.length) {
            continue;
          }
          for (var j = 0; j < otherPath.length; j++) {
            var searchTok = searchPath[j];
            var otherTok = otherPath[j];
            var matchingTokens =
              searchTok === otherTok ||
              otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;
            if (matchingTokens === false) {
              continue compareOtherPath;
            }
          }
          return true;
        }
        return false;
      }
      function isStrictPrefixOfPath(prefix, other) {
        return (
          prefix.length < other.length &&
          Object(utils["o" /* every */])(prefix, function (tokType, idx) {
            var otherTokType = other[idx];
            return (
              tokType === otherTokType ||
              otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]
            );
          })
        );
      }
      function areTokenCategoriesNotUsed(lookAheadPaths) {
        return Object(utils["o" /* every */])(
          lookAheadPaths,
          function (singleAltPaths) {
            return Object(utils["o" /* every */])(
              singleAltPaths,
              function (singlePath) {
                return Object(utils["o" /* every */])(
                  singlePath,
                  function (token) {
                    return Object(utils["A" /* isEmpty */])(
                      token.categoryMatches
                    );
                  }
                );
              }
            );
          }
        );
      }
      //# sourceMappingURL=lookahead.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/checks.js
      var checks_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      function validateGrammar(
        topLevels,
        globalMaxLookahead,
        tokenTypes,
        ignoredIssues,
        errMsgProvider,
        grammarName
      ) {
        var duplicateErrors = utils["I" /* map */](
          topLevels,
          function (currTopLevel) {
            return validateDuplicateProductions(currTopLevel, errMsgProvider);
          }
        );
        var leftRecursionErrors = utils["I" /* map */](
          topLevels,
          function (currTopRule) {
            return validateNoLeftRecursion(
              currTopRule,
              currTopRule,
              errMsgProvider
            );
          }
        );
        var emptyAltErrors = [];
        var ambiguousAltsErrors = [];
        var emptyRepetitionErrors = [];
        // left recursion could cause infinite loops in the following validations.
        // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.
        if (
          Object(utils["o" /* every */])(
            leftRecursionErrors,
            utils["A" /* isEmpty */]
          )
        ) {
          emptyAltErrors = Object(utils["I" /* map */])(
            topLevels,
            function (currTopRule) {
              return validateEmptyOrAlternative(currTopRule, errMsgProvider);
            }
          );
          ambiguousAltsErrors = Object(utils["I" /* map */])(
            topLevels,
            function (currTopRule) {
              return validateAmbiguousAlternationAlternatives(
                currTopRule,
                globalMaxLookahead,
                ignoredIssues,
                errMsgProvider
              );
            }
          );
          emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(
            topLevels,
            globalMaxLookahead,
            errMsgProvider
          );
        }
        var termsNamespaceConflictErrors =
          checkTerminalAndNoneTerminalsNameSpace(
            topLevels,
            tokenTypes,
            errMsgProvider
          );
        var tokenNameErrors = utils["I" /* map */](
          tokenTypes,
          function (currTokType) {
            return validateTokenName(currTokType, errMsgProvider);
          }
        );
        var nestedRulesNameErrors = validateNestedRulesNames(
          topLevels,
          errMsgProvider
        );
        var nestedRulesDuplicateErrors = validateDuplicateNestedRules(
          topLevels,
          errMsgProvider
        );
        var tooManyAltsErrors = Object(utils["I" /* map */])(
          topLevels,
          function (curRule) {
            return validateTooManyAlts(curRule, errMsgProvider);
          }
        );
        var ruleNameErrors = Object(utils["I" /* map */])(
          topLevels,
          function (curRule) {
            return validateRuleName(curRule, errMsgProvider);
          }
        );
        var duplicateRulesError = Object(utils["I" /* map */])(
          topLevels,
          function (curRule) {
            return validateRuleDoesNotAlreadyExist(
              curRule,
              topLevels,
              grammarName,
              errMsgProvider
            );
          }
        );
        return utils["t" /* flatten */](
          duplicateErrors.concat(
            tokenNameErrors,
            nestedRulesNameErrors,
            nestedRulesDuplicateErrors,
            emptyRepetitionErrors,
            leftRecursionErrors,
            emptyAltErrors,
            ambiguousAltsErrors,
            termsNamespaceConflictErrors,
            tooManyAltsErrors,
            ruleNameErrors,
            duplicateRulesError
          )
        );
      }
      function validateNestedRulesNames(topLevels, errMsgProvider) {
        var result = [];
        Object(utils["u" /* forEach */])(topLevels, function (curTopLevel) {
          var namedCollectorVisitor = new cst_NamedDSLMethodsCollectorVisitor(
            ""
          );
          curTopLevel.accept(namedCollectorVisitor);
          var nestedProds = Object(utils["I" /* map */])(
            namedCollectorVisitor.result,
            function (currItem) {
              return currItem.orgProd;
            }
          );
          result.push(
            Object(utils["I" /* map */])(
              nestedProds,
              function (currNestedProd) {
                return validateNestedRuleName(
                  curTopLevel,
                  currNestedProd,
                  errMsgProvider
                );
              }
            )
          );
        });
        return Object(utils["t" /* flatten */])(result);
      }
      function validateDuplicateProductions(topLevelRule, errMsgProvider) {
        var collectorVisitor = new OccurrenceValidationCollector();
        topLevelRule.accept(collectorVisitor);
        var allRuleProductions = collectorVisitor.allProductions;
        var productionGroups = utils["v" /* groupBy */](
          allRuleProductions,
          identifyProductionForDuplicates
        );
        var duplicates = utils["N" /* pick */](
          productionGroups,
          function (currGroup) {
            return currGroup.length > 1;
          }
        );
        var errors = utils["I" /* map */](
          utils["U" /* values */](duplicates),
          function (currDuplicates) {
            var firstProd = utils["s" /* first */](currDuplicates);
            var msg = errMsgProvider.buildDuplicateFoundError(
              topLevelRule,
              currDuplicates
            );
            var dslName = getProductionDslName(firstProd);
            var defError = {
              message: msg,
              type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
              ruleName: topLevelRule.name,
              dslName: dslName,
              occurrence: firstProd.idx,
            };
            var param = checks_getExtraProductionArgument(firstProd);
            if (param) {
              defError.parameter = param;
            }
            return defError;
          }
        );
        return errors;
      }
      function identifyProductionForDuplicates(prod) {
        return (
          getProductionDslName(prod) +
          "_#_" +
          prod.idx +
          "_#_" +
          checks_getExtraProductionArgument(prod)
        );
      }
      function checks_getExtraProductionArgument(prod) {
        if (prod instanceof gast_public_Terminal) {
          return prod.terminalType.name;
        } else if (prod instanceof gast_public_NonTerminal) {
          return prod.nonTerminalName;
        } else {
          return "";
        }
      }
      var OccurrenceValidationCollector = /** @class */ (function (_super) {
        checks_extends(OccurrenceValidationCollector, _super);
        function OccurrenceValidationCollector() {
          var _this =
            (_super !== null && _super.apply(this, arguments)) || this;
          _this.allProductions = [];
          return _this;
        }
        OccurrenceValidationCollector.prototype.visitNonTerminal = function (
          subrule
        ) {
          this.allProductions.push(subrule);
        };
        OccurrenceValidationCollector.prototype.visitOption = function (
          option
        ) {
          this.allProductions.push(option);
        };
        OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator =
          function (manySep) {
            this.allProductions.push(manySep);
          };
        OccurrenceValidationCollector.prototype.visitRepetitionMandatory =
          function (atLeastOne) {
            this.allProductions.push(atLeastOne);
          };
        OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator =
          function (atLeastOneSep) {
            this.allProductions.push(atLeastOneSep);
          };
        OccurrenceValidationCollector.prototype.visitRepetition = function (
          many
        ) {
          this.allProductions.push(many);
        };
        OccurrenceValidationCollector.prototype.visitAlternation = function (
          or
        ) {
          this.allProductions.push(or);
        };
        OccurrenceValidationCollector.prototype.visitTerminal = function (
          terminal
        ) {
          this.allProductions.push(terminal);
        };
        return OccurrenceValidationCollector;
      })(gast_visitor_public_GAstVisitor);

      var validTermsPattern = /^[a-zA-Z_]\w*$/;
      var validNestedRuleName = new RegExp(
        validTermsPattern.source.replace("^", "^\\$")
      );
      // TODO: remove this limitation now that we use recorders
      function validateRuleName(rule, errMsgProvider) {
        var errors = [];
        var ruleName = rule.name;
        if (!ruleName.match(validTermsPattern)) {
          errors.push({
            message: errMsgProvider.buildInvalidRuleNameError({
              topLevelRule: rule,
              expectedPattern: validTermsPattern,
            }),
            type: ParserDefinitionErrorType.INVALID_RULE_NAME,
            ruleName: ruleName,
          });
        }
        return errors;
      }
      // TODO: did the nested rule name regExp now change?
      function validateNestedRuleName(topLevel, nestedProd, errMsgProvider) {
        var errors = [];
        var errMsg;
        if (!nestedProd.name.match(validNestedRuleName)) {
          errMsg = errMsgProvider.buildInvalidNestedRuleNameError(
            topLevel,
            nestedProd
          );
          errors.push({
            message: errMsg,
            type: ParserDefinitionErrorType.INVALID_NESTED_RULE_NAME,
            ruleName: topLevel.name,
          });
        }
        return errors;
      }
      // TODO: remove this limitation now that we use recorders
      function validateTokenName(tokenType, errMsgProvider) {
        var errors = [];
        var tokTypeName = tokenType.name;
        if (!tokTypeName.match(validTermsPattern)) {
          errors.push({
            message: errMsgProvider.buildTokenNameError({
              tokenType: tokenType,
              expectedPattern: validTermsPattern,
            }),
            type: ParserDefinitionErrorType.INVALID_TOKEN_NAME,
          });
        }
        return errors;
      }
      function validateRuleDoesNotAlreadyExist(
        rule,
        allRules,
        className,
        errMsgProvider
      ) {
        var errors = [];
        var occurrences = Object(utils["O" /* reduce */])(
          allRules,
          function (result, curRule) {
            if (curRule.name === rule.name) {
              return result + 1;
            }
            return result;
          },
          0
        );
        if (occurrences > 1) {
          var errMsg = errMsgProvider.buildDuplicateRuleNameError({
            topLevelRule: rule,
            grammarName: className,
          });
          errors.push({
            message: errMsg,
            type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
            ruleName: rule.name,
          });
        }
        return errors;
      }
      // TODO: is there anyway to get only the rule names of rules inherited from the super grammars?
      // This is not part of the IGrammarErrorProvider because the validation cannot be performed on
      // The grammar structure, only at runtime.
      function validateRuleIsOverridden(
        ruleName,
        definedRulesNames,
        className
      ) {
        var errors = [];
        var errMsg;
        if (!utils["j" /* contains */](definedRulesNames, ruleName)) {
          errMsg =
            "Invalid rule override, rule: ->" +
            ruleName +
            "<- cannot be overridden in the grammar: ->" +
            className +
            "<-" +
            "as it is not defined in any of the super grammars ";
          errors.push({
            message: errMsg,
            type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,
            ruleName: ruleName,
          });
        }
        return errors;
      }
      function validateNoLeftRecursion(
        topRule,
        currRule,
        errMsgProvider,
        path
      ) {
        if (path === void 0) {
          path = [];
        }
        var errors = [];
        var nextNonTerminals = getFirstNoneTerminal(currRule.definition);
        if (utils["A" /* isEmpty */](nextNonTerminals)) {
          return [];
        } else {
          var ruleName = topRule.name;
          var foundLeftRecursion = utils["j" /* contains */](
            nextNonTerminals,
            topRule
          );
          if (foundLeftRecursion) {
            errors.push({
              message: errMsgProvider.buildLeftRecursionError({
                topLevelRule: topRule,
                leftRecursionPath: path,
              }),
              type: ParserDefinitionErrorType.LEFT_RECURSION,
              ruleName: ruleName,
            });
          }
          // we are only looking for cyclic paths leading back to the specific topRule
          // other cyclic paths are ignored, we still need this difference to avoid infinite loops...
          var validNextSteps = utils["l" /* difference */](
            nextNonTerminals,
            path.concat([topRule])
          );
          var errorsFromNextSteps = utils["I" /* map */](
            validNextSteps,
            function (currRefRule) {
              var newPath = utils["g" /* cloneArr */](path);
              newPath.push(currRefRule);
              return validateNoLeftRecursion(
                topRule,
                currRefRule,
                errMsgProvider,
                newPath
              );
            }
          );
          return errors.concat(utils["t" /* flatten */](errorsFromNextSteps));
        }
      }
      function getFirstNoneTerminal(definition) {
        var result = [];
        if (utils["A" /* isEmpty */](definition)) {
          return result;
        }
        var firstProd = utils["s" /* first */](definition);
        /* istanbul ignore else */
        if (firstProd instanceof gast_public_NonTerminal) {
          result.push(firstProd.referencedRule);
        } else if (
          firstProd instanceof gast_public_Flat ||
          firstProd instanceof gast_public_Option ||
          firstProd instanceof gast_public_RepetitionMandatory ||
          firstProd instanceof gast_public_RepetitionMandatoryWithSeparator ||
          firstProd instanceof gast_public_RepetitionWithSeparator ||
          firstProd instanceof gast_public_Repetition
        ) {
          result = result.concat(getFirstNoneTerminal(firstProd.definition));
        } else if (firstProd instanceof gast_public_Alternation) {
          // each sub definition in alternation is a FLAT
          result = utils["t" /* flatten */](
            utils["I" /* map */](firstProd.definition, function (currSubDef) {
              return getFirstNoneTerminal(currSubDef.definition);
            })
          );
        } else if (firstProd instanceof gast_public_Terminal) {
          // nothing to see, move along
        } else {
          throw Error("non exhaustive match");
        }
        var isFirstOptional = isOptionalProd(firstProd);
        var hasMore = definition.length > 1;
        if (isFirstOptional && hasMore) {
          var rest = utils["m" /* drop */](definition);
          return result.concat(getFirstNoneTerminal(rest));
        } else {
          return result;
        }
      }
      var OrCollector = /** @class */ (function (_super) {
        checks_extends(OrCollector, _super);
        function OrCollector() {
          var _this =
            (_super !== null && _super.apply(this, arguments)) || this;
          _this.alternations = [];
          return _this;
        }
        OrCollector.prototype.visitAlternation = function (node) {
          this.alternations.push(node);
        };
        return OrCollector;
      })(gast_visitor_public_GAstVisitor);
      function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {
        var orCollector = new OrCollector();
        topLevelRule.accept(orCollector);
        var ors = orCollector.alternations;
        var errors = utils["O" /* reduce */](
          ors,
          function (errors, currOr) {
            var exceptLast = utils["n" /* dropRight */](currOr.definition);
            var currErrors = utils["I" /* map */](
              exceptLast,
              function (currAlternative, currAltIdx) {
                var possibleFirstInAlt = nextPossibleTokensAfter(
                  [currAlternative],
                  [],
                  null,
                  1
                );
                if (utils["A" /* isEmpty */](possibleFirstInAlt)) {
                  return {
                    message: errMsgProvider.buildEmptyAlternationError({
                      topLevelRule: topLevelRule,
                      alternation: currOr,
                      emptyChoiceIdx: currAltIdx,
                    }),
                    type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,
                    ruleName: topLevelRule.name,
                    occurrence: currOr.idx,
                    alternative: currAltIdx + 1,
                  };
                } else {
                  return null;
                }
              }
            );
            return errors.concat(utils["i" /* compact */](currErrors));
          },
          []
        );
        return errors;
      }
      function validateAmbiguousAlternationAlternatives(
        topLevelRule,
        globalMaxLookahead,
        ignoredIssues,
        errMsgProvider
      ) {
        var orCollector = new OrCollector();
        topLevelRule.accept(orCollector);
        var ors = orCollector.alternations;
        // TODO: this filtering should be deprecated once we remove the ignoredIssues
        //  IParserConfig property
        var ignoredIssuesForCurrentRule = ignoredIssues[topLevelRule.name];
        if (ignoredIssuesForCurrentRule) {
          ors = Object(utils["P" /* reject */])(ors, function (currOr) {
            return ignoredIssuesForCurrentRule[
              getProductionDslName(currOr) +
                (currOr.idx === 0 ? "" : currOr.idx)
            ];
          });
        }
        // New Handling of ignoring ambiguities
        // - https://github.com/SAP/chevrotain/issues/869
        ors = Object(utils["P" /* reject */])(ors, function (currOr) {
          return currOr.ignoreAmbiguities === true;
        });
        var errors = utils["O" /* reduce */](
          ors,
          function (result, currOr) {
            var currOccurrence = currOr.idx;
            var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;
            var alternatives = getLookaheadPathsForOr(
              currOccurrence,
              topLevelRule,
              actualMaxLookahead,
              currOr
            );
            var altsAmbiguityErrors = checkAlternativesAmbiguities(
              alternatives,
              currOr,
              topLevelRule,
              errMsgProvider
            );
            var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(
              alternatives,
              currOr,
              topLevelRule,
              errMsgProvider
            );
            return result.concat(
              altsAmbiguityErrors,
              altsPrefixAmbiguityErrors
            );
          },
          []
        );
        return errors;
      }
      var RepetionCollector = /** @class */ (function (_super) {
        checks_extends(RepetionCollector, _super);
        function RepetionCollector() {
          var _this =
            (_super !== null && _super.apply(this, arguments)) || this;
          _this.allProductions = [];
          return _this;
        }
        RepetionCollector.prototype.visitRepetitionWithSeparator = function (
          manySep
        ) {
          this.allProductions.push(manySep);
        };
        RepetionCollector.prototype.visitRepetitionMandatory = function (
          atLeastOne
        ) {
          this.allProductions.push(atLeastOne);
        };
        RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator =
          function (atLeastOneSep) {
            this.allProductions.push(atLeastOneSep);
          };
        RepetionCollector.prototype.visitRepetition = function (many) {
          this.allProductions.push(many);
        };
        return RepetionCollector;
      })(gast_visitor_public_GAstVisitor);

      function validateTooManyAlts(topLevelRule, errMsgProvider) {
        var orCollector = new OrCollector();
        topLevelRule.accept(orCollector);
        var ors = orCollector.alternations;
        var errors = utils["O" /* reduce */](
          ors,
          function (errors, currOr) {
            if (currOr.definition.length > 255) {
              errors.push({
                message: errMsgProvider.buildTooManyAlternativesError({
                  topLevelRule: topLevelRule,
                  alternation: currOr,
                }),
                type: ParserDefinitionErrorType.TOO_MANY_ALTS,
                ruleName: topLevelRule.name,
                occurrence: currOr.idx,
              });
            }
            return errors;
          },
          []
        );
        return errors;
      }
      function validateSomeNonEmptyLookaheadPath(
        topLevelRules,
        maxLookahead,
        errMsgProvider
      ) {
        var errors = [];
        Object(utils["u" /* forEach */])(topLevelRules, function (currTopRule) {
          var collectorVisitor = new RepetionCollector();
          currTopRule.accept(collectorVisitor);
          var allRuleProductions = collectorVisitor.allProductions;
          Object(utils["u" /* forEach */])(
            allRuleProductions,
            function (currProd) {
              var prodType = getProdType(currProd);
              var actualMaxLookahead = currProd.maxLookahead || maxLookahead;
              var currOccurrence = currProd.idx;
              var paths = getLookaheadPathsForOptionalProd(
                currOccurrence,
                currTopRule,
                prodType,
                actualMaxLookahead
              );
              var pathsInsideProduction = paths[0];
              if (
                Object(utils["A" /* isEmpty */])(
                  Object(utils["t" /* flatten */])(pathsInsideProduction)
                )
              ) {
                var errMsg = errMsgProvider.buildEmptyRepetitionError({
                  topLevelRule: currTopRule,
                  repetition: currProd,
                });
                errors.push({
                  message: errMsg,
                  type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,
                  ruleName: currTopRule.name,
                });
              }
            }
          );
        });
        return errors;
      }
      function checkAlternativesAmbiguities(
        alternatives,
        alternation,
        rule,
        errMsgProvider
      ) {
        var foundAmbiguousPaths = [];
        var identicalAmbiguities = Object(utils["O" /* reduce */])(
          alternatives,
          function (result, currAlt, currAltIdx) {
            // ignore (skip) ambiguities with this alternative
            if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {
              return result;
            }
            Object(utils["u" /* forEach */])(currAlt, function (currPath) {
              var altsCurrPathAppearsIn = [currAltIdx];
              Object(utils["u" /* forEach */])(
                alternatives,
                function (currOtherAlt, currOtherAltIdx) {
                  if (
                    currAltIdx !== currOtherAltIdx &&
                    containsPath(currOtherAlt, currPath) &&
                    // ignore (skip) ambiguities with this "other" alternative
                    alternation.definition[currOtherAltIdx]
                      .ignoreAmbiguities !== true
                  ) {
                    altsCurrPathAppearsIn.push(currOtherAltIdx);
                  }
                }
              );
              if (
                altsCurrPathAppearsIn.length > 1 &&
                !containsPath(foundAmbiguousPaths, currPath)
              ) {
                foundAmbiguousPaths.push(currPath);
                result.push({
                  alts: altsCurrPathAppearsIn,
                  path: currPath,
                });
              }
            });
            return result;
          },
          []
        );
        var currErrors = utils["I" /* map */](
          identicalAmbiguities,
          function (currAmbDescriptor) {
            var ambgIndices = Object(utils["I" /* map */])(
              currAmbDescriptor.alts,
              function (currAltIdx) {
                return currAltIdx + 1;
              }
            );
            var currMessage = errMsgProvider.buildAlternationAmbiguityError({
              topLevelRule: rule,
              alternation: alternation,
              ambiguityIndices: ambgIndices,
              prefixPath: currAmbDescriptor.path,
            });
            return {
              message: currMessage,
              type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,
              ruleName: rule.name,
              occurrence: alternation.idx,
              alternatives: [currAmbDescriptor.alts],
            };
          }
        );
        return currErrors;
      }
      function checkPrefixAlternativesAmbiguities(
        alternatives,
        alternation,
        rule,
        errMsgProvider
      ) {
        var errors = [];
        // flatten
        var pathsAndIndices = Object(utils["O" /* reduce */])(
          alternatives,
          function (result, currAlt, idx) {
            var currPathsAndIdx = Object(utils["I" /* map */])(
              currAlt,
              function (currPath) {
                return { idx: idx, path: currPath };
              }
            );
            return result.concat(currPathsAndIdx);
          },
          []
        );
        Object(utils["u" /* forEach */])(
          pathsAndIndices,
          function (currPathAndIdx) {
            var alternativeGast = alternation.definition[currPathAndIdx.idx];
            // ignore (skip) ambiguities with this alternative
            if (alternativeGast.ignoreAmbiguities === true) {
              return;
            }
            var targetIdx = currPathAndIdx.idx;
            var targetPath = currPathAndIdx.path;
            var prefixAmbiguitiesPathsAndIndices = Object(
              utils["r" /* findAll */]
            )(pathsAndIndices, function (searchPathAndIdx) {
              // prefix ambiguity can only be created from lower idx (higher priority) path
              return (
                // ignore (skip) ambiguities with this "other" alternative
                alternation.definition[searchPathAndIdx.idx]
                  .ignoreAmbiguities !== true &&
                searchPathAndIdx.idx < targetIdx &&
                // checking for strict prefix because identical lookaheads
                // will be be detected using a different validation.
                isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)
              );
            });
            var currPathPrefixErrors = Object(utils["I" /* map */])(
              prefixAmbiguitiesPathsAndIndices,
              function (currAmbPathAndIdx) {
                var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];
                var occurrence = alternation.idx === 0 ? "" : alternation.idx;
                var message =
                  errMsgProvider.buildAlternationPrefixAmbiguityError({
                    topLevelRule: rule,
                    alternation: alternation,
                    ambiguityIndices: ambgIndices,
                    prefixPath: currAmbPathAndIdx.path,
                  });
                return {
                  message: message,
                  type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,
                  ruleName: rule.name,
                  occurrence: occurrence,
                  alternatives: ambgIndices,
                };
              }
            );
            errors = errors.concat(currPathPrefixErrors);
          }
        );
        return errors;
      }
      function checkTerminalAndNoneTerminalsNameSpace(
        topLevels,
        tokenTypes,
        errMsgProvider
      ) {
        var errors = [];
        var tokenNames = Object(utils["I" /* map */])(
          tokenTypes,
          function (currToken) {
            return currToken.name;
          }
        );
        Object(utils["u" /* forEach */])(topLevels, function (currRule) {
          var currRuleName = currRule.name;
          if (Object(utils["j" /* contains */])(tokenNames, currRuleName)) {
            var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);
            errors.push({
              message: errMsg,
              type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,
              ruleName: currRuleName,
            });
          }
        });
        return errors;
      }
      function validateDuplicateNestedRules(topLevelRules, errMsgProvider) {
        var errors = [];
        Object(utils["u" /* forEach */])(topLevelRules, function (currTopRule) {
          var namedCollectorVisitor = new cst_NamedDSLMethodsCollectorVisitor(
            ""
          );
          currTopRule.accept(namedCollectorVisitor);
          var prodsByGroup = Object(utils["v" /* groupBy */])(
            namedCollectorVisitor.result,
            function (item) {
              return item.name;
            }
          );
          var duplicates = Object(utils["N" /* pick */])(
            prodsByGroup,
            function (currGroup) {
              return currGroup.length > 1;
            }
          );
          Object(utils["u" /* forEach */])(
            Object(utils["U" /* values */])(duplicates),
            function (currDupGroup) {
              var currDupProds = Object(utils["I" /* map */])(
                currDupGroup,
                function (dupGroup) {
                  return dupGroup.orgProd;
                }
              );
              var errMsg = errMsgProvider.buildDuplicateNestedRuleNameError(
                currTopRule,
                currDupProds
              );
              errors.push({
                message: errMsg,
                type: ParserDefinitionErrorType.DUPLICATE_NESTED_NAME,
                ruleName: currTopRule.name,
              });
            }
          );
        });
        return errors;
      }
      //# sourceMappingURL=checks.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/errors_public.js

      var defaultParserErrorProvider = {
        buildMismatchTokenMessage: function (_a) {
          var expected = _a.expected,
            actual = _a.actual,
            previous = _a.previous,
            ruleName = _a.ruleName;
          var hasLabel = hasTokenLabel(expected);
          var expectedMsg = hasLabel
            ? "--> " + tokenLabel(expected) + " <--"
            : "token of type --> " + expected.name + " <--";
          var msg =
            "Expecting " +
            expectedMsg +
            " but found --> '" +
            actual.image +
            "' <--";
          return msg;
        },
        buildNotAllInputParsedMessage: function (_a) {
          var firstRedundant = _a.firstRedundant,
            ruleName = _a.ruleName;
          return (
            "Redundant input, expecting EOF but found: " + firstRedundant.image
          );
        },
        buildNoViableAltMessage: function (_a) {
          var expectedPathsPerAlt = _a.expectedPathsPerAlt,
            actual = _a.actual,
            previous = _a.previous,
            customUserDescription = _a.customUserDescription,
            ruleName = _a.ruleName;
          var errPrefix = "Expecting: ";
          // TODO: issue: No Viable Alternative Error may have incomplete details. #502
          var actualText = Object(utils["s" /* first */])(actual).image;
          var errSuffix = "\nbut found: '" + actualText + "'";
          if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
          } else {
            var allLookAheadPaths = Object(utils["O" /* reduce */])(
              expectedPathsPerAlt,
              function (result, currAltPaths) {
                return result.concat(currAltPaths);
              },
              []
            );
            var nextValidTokenSequences = Object(utils["I" /* map */])(
              allLookAheadPaths,
              function (currPath) {
                return (
                  "[" +
                  Object(utils["I" /* map */])(
                    currPath,
                    function (currTokenType) {
                      return tokenLabel(currTokenType);
                    }
                  ).join(", ") +
                  "]"
                );
              }
            );
            var nextValidSequenceItems = Object(utils["I" /* map */])(
              nextValidTokenSequences,
              function (itemMsg, idx) {
                return "  " + (idx + 1) + ". " + itemMsg;
              }
            );
            var calculatedDescription =
              "one of these possible Token sequences:\n" +
              nextValidSequenceItems.join("\n");
            return errPrefix + calculatedDescription + errSuffix;
          }
        },
        buildEarlyExitMessage: function (_a) {
          var expectedIterationPaths = _a.expectedIterationPaths,
            actual = _a.actual,
            customUserDescription = _a.customUserDescription,
            ruleName = _a.ruleName;
          var errPrefix = "Expecting: ";
          // TODO: issue: No Viable Alternative Error may have incomplete details. #502
          var actualText = Object(utils["s" /* first */])(actual).image;
          var errSuffix = "\nbut found: '" + actualText + "'";
          if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
          } else {
            var nextValidTokenSequences = Object(utils["I" /* map */])(
              expectedIterationPaths,
              function (currPath) {
                return (
                  "[" +
                  Object(utils["I" /* map */])(
                    currPath,
                    function (currTokenType) {
                      return tokenLabel(currTokenType);
                    }
                  ).join(",") +
                  "]"
                );
              }
            );
            var calculatedDescription =
              "expecting at least one iteration which starts with one of these possible Token sequences::\n  " +
              ("<" + nextValidTokenSequences.join(" ,") + ">");
            return errPrefix + calculatedDescription + errSuffix;
          }
        },
      };
      Object.freeze(defaultParserErrorProvider);
      var defaultGrammarResolverErrorProvider = {
        buildRuleNotFoundError: function (topLevelRule, undefinedRule) {
          var msg =
            "Invalid grammar, reference to a rule which is not defined: ->" +
            undefinedRule.nonTerminalName +
            "<-\n" +
            "inside top level rule: ->" +
            topLevelRule.name +
            "<-";
          return msg;
        },
      };
      var defaultGrammarValidatorErrorProvider = {
        buildDuplicateFoundError: function (topLevelRule, duplicateProds) {
          function getExtraProductionArgument(prod) {
            if (prod instanceof gast_public_Terminal) {
              return prod.terminalType.name;
            } else if (prod instanceof gast_public_NonTerminal) {
              return prod.nonTerminalName;
            } else {
              return "";
            }
          }
          var topLevelName = topLevelRule.name;
          var duplicateProd = Object(utils["s" /* first */])(duplicateProds);
          var index = duplicateProd.idx;
          var dslName = getProductionDslName(duplicateProd);
          var extraArgument = getExtraProductionArgument(duplicateProd);
          var hasExplicitIndex = index > 0;
          var msg =
            "->" +
            dslName +
            (hasExplicitIndex ? index : "") +
            "<- " +
            (extraArgument ? "with argument: ->" + extraArgument + "<-" : "") +
            "\n                  appears more than once (" +
            duplicateProds.length +
            " times) in the top level rule: ->" +
            topLevelName +
            "<-.                  \n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ";
          // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...
          msg = msg.replace(/[ \t]+/g, " ");
          msg = msg.replace(/\s\s+/g, "\n");
          return msg;
        },
        buildInvalidNestedRuleNameError: function (topLevelRule, nestedProd) {
          var msg =
            "Invalid nested rule name: ->" +
            nestedProd.name +
            "<- inside rule: ->" +
            topLevelRule.name +
            "<-\n" +
            ("it must match the pattern: ->" +
              validNestedRuleName.toString() +
              "<-.\n") +
            "Note that this means a nested rule name must start with the '$'(dollar) sign.";
          return msg;
        },
        buildDuplicateNestedRuleNameError: function (topLevelRule, nestedProd) {
          var duplicateName = Object(utils["s" /* first */])(nestedProd).name;
          var errMsg =
            "Duplicate nested rule name: ->" +
            duplicateName +
            "<- inside rule: ->" +
            topLevelRule.name +
            "<-\n" +
            "A nested name must be unique in the scope of a top level grammar rule.";
          return errMsg;
        },
        buildNamespaceConflictError: function (rule) {
          var errMsg =
            "Namespace conflict found in grammar.\n" +
            ("The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <" +
              rule.name +
              ">.\n") +
            "To resolve this make sure each Terminal and Non-Terminal names are unique\n" +
            "This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\n" +
            "and Non-Terminal names start with a lower case letter.";
          return errMsg;
        },
        buildAlternationPrefixAmbiguityError: function (options) {
          var pathMsg = Object(utils["I" /* map */])(
            options.prefixPath,
            function (currTok) {
              return tokenLabel(currTok);
            }
          ).join(", ");
          var occurrence =
            options.alternation.idx === 0 ? "" : options.alternation.idx;
          var errMsg =
            "Ambiguous alternatives: <" +
            options.ambiguityIndices.join(" ,") +
            "> due to common lookahead prefix\n" +
            ("in <OR" +
              occurrence +
              "> inside <" +
              options.topLevelRule.name +
              "> Rule,\n") +
            ("<" +
              pathMsg +
              "> may appears as a prefix path in all these alternatives.\n") +
            "See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\n" +
            "For Further details.";
          return errMsg;
        },
        buildAlternationAmbiguityError: function (options) {
          var pathMsg = Object(utils["I" /* map */])(
            options.prefixPath,
            function (currtok) {
              return tokenLabel(currtok);
            }
          ).join(", ");
          var occurrence =
            options.alternation.idx === 0 ? "" : options.alternation.idx;
          var currMessage =
            "Ambiguous Alternatives Detected: <" +
            options.ambiguityIndices.join(" ,") +
            "> in <OR" +
            occurrence +
            ">" +
            (" inside <" + options.topLevelRule.name + "> Rule,\n") +
            ("<" +
              pathMsg +
              "> may appears as a prefix path in all these alternatives.\n");
          currMessage =
            currMessage +
            "See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\n" +
            "For Further details.";
          return currMessage;
        },
        buildEmptyRepetitionError: function (options) {
          var dslName = getProductionDslName(options.repetition);
          if (options.repetition.idx !== 0) {
            dslName += options.repetition.idx;
          }
          var errMsg =
            "The repetition <" +
            dslName +
            "> within Rule <" +
            options.topLevelRule.name +
            "> can never consume any tokens.\n" +
            "This could lead to an infinite loop.";
          return errMsg;
        },
        buildTokenNameError: function (options) {
          var tokTypeName = options.tokenType.name;
          var errMsg =
            "Invalid Grammar Token name: ->" +
            tokTypeName +
            "<- it must match the pattern: ->" +
            options.expectedPattern.toString() +
            "<-";
          return errMsg;
        },
        buildEmptyAlternationError: function (options) {
          var errMsg =
            "Ambiguous empty alternative: <" +
            (options.emptyChoiceIdx + 1) +
            ">" +
            (" in <OR" +
              options.alternation.idx +
              "> inside <" +
              options.topLevelRule.name +
              "> Rule.\n") +
            "Only the last alternative may be an empty alternative.";
          return errMsg;
        },
        buildTooManyAlternativesError: function (options) {
          var errMsg =
            "An Alternation cannot have more than 256 alternatives:\n" +
            ("<OR" +
              options.alternation.idx +
              "> inside <" +
              options.topLevelRule.name +
              "> Rule.\n has " +
              (options.alternation.definition.length + 1) +
              " alternatives.");
          return errMsg;
        },
        buildLeftRecursionError: function (options) {
          var ruleName = options.topLevelRule.name;
          var pathNames = utils["I" /* map */](
            options.leftRecursionPath,
            function (currRule) {
              return currRule.name;
            }
          );
          var leftRecursivePath =
            ruleName + " --> " + pathNames.concat([ruleName]).join(" --> ");
          var errMsg =
            "Left Recursion found in grammar.\n" +
            ("rule: <" +
              ruleName +
              "> can be invoked from itself (directly or indirectly)\n") +
            ("without consuming any Tokens. The grammar path that causes this is: \n " +
              leftRecursivePath +
              "\n") +
            " To fix this refactor your grammar to remove the left recursion.\n" +
            "see: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.";
          return errMsg;
        },
        buildInvalidRuleNameError: function (options) {
          var ruleName = options.topLevelRule.name;
          var expectedPatternString = options.expectedPattern.toString();
          var errMsg =
            "Invalid grammar rule name: ->" +
            ruleName +
            "<- it must match the pattern: ->" +
            expectedPatternString +
            "<-";
          return errMsg;
        },
        buildDuplicateRuleNameError: function (options) {
          var ruleName;
          if (options.topLevelRule instanceof gast_public_Rule) {
            ruleName = options.topLevelRule.name;
          } else {
            ruleName = options.topLevelRule;
          }
          var errMsg =
            "Duplicate definition, rule: ->" +
            ruleName +
            "<- is already defined in the grammar: ->" +
            options.grammarName +
            "<-";
          return errMsg;
        },
      };
      //# sourceMappingURL=errors_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/resolver.js
      var resolver_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      function resolveGrammar(topLevels, errMsgProvider) {
        var refResolver = new resolver_GastRefResolverVisitor(
          topLevels,
          errMsgProvider
        );
        refResolver.resolveRefs();
        return refResolver.errors;
      }
      var resolver_GastRefResolverVisitor = /** @class */ (function (_super) {
        resolver_extends(GastRefResolverVisitor, _super);
        function GastRefResolverVisitor(nameToTopRule, errMsgProvider) {
          var _this = _super.call(this) || this;
          _this.nameToTopRule = nameToTopRule;
          _this.errMsgProvider = errMsgProvider;
          _this.errors = [];
          return _this;
        }
        GastRefResolverVisitor.prototype.resolveRefs = function () {
          var _this = this;
          Object(utils["u" /* forEach */])(
            Object(utils["U" /* values */])(this.nameToTopRule),
            function (prod) {
              _this.currTopLevel = prod;
              prod.accept(_this);
            }
          );
        };
        GastRefResolverVisitor.prototype.visitNonTerminal = function (node) {
          var ref = this.nameToTopRule[node.nonTerminalName];
          if (!ref) {
            var msg = this.errMsgProvider.buildRuleNotFoundError(
              this.currTopLevel,
              node
            );
            this.errors.push({
              message: msg,
              type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,
              ruleName: this.currTopLevel.name,
              unresolvedRefName: node.nonTerminalName,
            });
          } else {
            node.referencedRule = ref;
          }
        };
        return GastRefResolverVisitor;
      })(gast_visitor_public_GAstVisitor);

      //# sourceMappingURL=resolver.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_resolver_public.js

      function gast_resolver_public_resolveGrammar(options) {
        options = Object(utils["k" /* defaults */])(options, {
          errMsgProvider: defaultGrammarResolverErrorProvider,
        });
        var topRulesTable = {};
        Object(utils["u" /* forEach */])(options.rules, function (rule) {
          topRulesTable[rule.name] = rule;
        });
        return resolveGrammar(topRulesTable, options.errMsgProvider);
      }
      function gast_resolver_public_validateGrammar(options) {
        options = Object(utils["k" /* defaults */])(options, {
          errMsgProvider: defaultGrammarValidatorErrorProvider,
          ignoredIssues: {},
        });
        return validateGrammar(
          options.rules,
          options.maxLookahead,
          options.tokenTypes,
          options.ignoredIssues,
          options.errMsgProvider,
          options.grammarName
        );
      }
      function assignOccurrenceIndices(options) {
        Object(utils["u" /* forEach */])(options.rules, function (currRule) {
          var methodsCollector = new gast_DslMethodsCollectorVisitor();
          currRule.accept(methodsCollector);
          Object(utils["u" /* forEach */])(
            methodsCollector.dslMethods,
            function (methods) {
              Object(utils["u" /* forEach */])(
                methods,
                function (currMethod, arrIdx) {
                  currMethod.idx = arrIdx + 1;
                }
              );
            }
          );
        });
      }
      //# sourceMappingURL=gast_resolver_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js

      var MISMATCHED_TOKEN_EXCEPTION = "MismatchedTokenException";
      var NO_VIABLE_ALT_EXCEPTION = "NoViableAltException";
      var EARLY_EXIT_EXCEPTION = "EarlyExitException";
      var NOT_ALL_INPUT_PARSED_EXCEPTION = "NotAllInputParsedException";
      var RECOGNITION_EXCEPTION_NAMES = [
        MISMATCHED_TOKEN_EXCEPTION,
        NO_VIABLE_ALT_EXCEPTION,
        EARLY_EXIT_EXCEPTION,
        NOT_ALL_INPUT_PARSED_EXCEPTION,
      ];
      Object.freeze(RECOGNITION_EXCEPTION_NAMES);
      // hacks to bypass no support for custom Errors in javascript/typescript
      function isRecognitionException(error) {
        // can't do instanceof on hacked custom js exceptions
        return Object(utils["j" /* contains */])(
          RECOGNITION_EXCEPTION_NAMES,
          error.name
        );
      }
      function MismatchedTokenException(message, token, previousToken) {
        this.name = MISMATCHED_TOKEN_EXCEPTION;
        this.message = message;
        this.token = token;
        this.previousToken = previousToken;
        this.resyncedTokens = [];
      }
      // must use the "Error.prototype" instead of "new Error"
      // because the stack trace points to where "new Error" was invoked"
      MismatchedTokenException.prototype = Error.prototype;
      function NoViableAltException(message, token, previousToken) {
        this.name = NO_VIABLE_ALT_EXCEPTION;
        this.message = message;
        this.token = token;
        this.previousToken = previousToken;
        this.resyncedTokens = [];
      }
      NoViableAltException.prototype = Error.prototype;
      function NotAllInputParsedException(message, token) {
        this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;
        this.message = message;
        this.token = token;
        this.resyncedTokens = [];
      }
      NotAllInputParsedException.prototype = Error.prototype;
      function EarlyExitException(message, token, previousToken) {
        this.name = EARLY_EXIT_EXCEPTION;
        this.message = message;
        this.token = token;
        this.previousToken = previousToken;
        this.resyncedTokens = [];
      }
      EarlyExitException.prototype = Error.prototype;
      //# sourceMappingURL=exceptions_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recoverable.js

      var EOF_FOLLOW_KEY = {};
      var IN_RULE_RECOVERY_EXCEPTION = "InRuleRecoveryException";
      function InRuleRecoveryException(message) {
        this.name = IN_RULE_RECOVERY_EXCEPTION;
        this.message = message;
      }
      InRuleRecoveryException.prototype = Error.prototype;
      /**
       * This trait is responsible for the error recovery and fault tolerant logic
       */
      var recoverable_Recoverable = /** @class */ (function () {
        function Recoverable() {}
        Recoverable.prototype.initRecoverable = function (config) {
          this.firstAfterRepMap = {};
          this.resyncFollows = {};
          this.recoveryEnabled = Object(utils["w" /* has */])(
            config,
            "recoveryEnabled"
          )
            ? config.recoveryEnabled
            : DEFAULT_PARSER_CONFIG.recoveryEnabled;
          // performance optimization, NOOP will be inlined which
          // effectively means that this optional feature does not exist
          // when not used.
          if (this.recoveryEnabled) {
            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
          }
        };
        Recoverable.prototype.getTokenToInsert = function (tokType) {
          var tokToInsert = createTokenInstance(
            tokType,
            "",
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN
          );
          tokToInsert.isInsertedInRecovery = true;
          return tokToInsert;
        };
        Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (
          tokType
        ) {
          return true;
        };
        Recoverable.prototype.tryInRepetitionRecovery = function (
          grammarRule,
          grammarRuleArgs,
          lookAheadFunc,
          expectedTokType
        ) {
          var _this = this;
          // TODO: can the resyncTokenType be cached?
          var reSyncTokType = this.findReSyncTokenType();
          var savedLexerState = this.exportLexerState();
          var resyncedTokens = [];
          var passedResyncPoint = false;
          var nextTokenWithoutResync = this.LA(1);
          var currToken = this.LA(1);
          var generateErrorMessage = function () {
            var previousToken = _this.LA(0);
            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce
            // the error that would have been thrown
            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({
              expected: expectedTokType,
              actual: nextTokenWithoutResync,
              previous: previousToken,
              ruleName: _this.getCurrRuleFullName(),
            });
            var error = new MismatchedTokenException(
              msg,
              nextTokenWithoutResync,
              _this.LA(0)
            );
            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.
            error.resyncedTokens = Object(utils["n" /* dropRight */])(
              resyncedTokens
            );
            _this.SAVE_ERROR(error);
          };
          while (!passedResyncPoint) {
            // re-synced to a point where we can safely exit the repetition/
            if (this.tokenMatcher(currToken, expectedTokType)) {
              generateErrorMessage();
              return; // must return here to avoid reverting the inputIdx
            } else if (lookAheadFunc.call(this)) {
              // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule
              generateErrorMessage();
              // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule
              grammarRule.apply(this, grammarRuleArgs);
              return; // must return here to avoid reverting the inputIdx
            } else if (this.tokenMatcher(currToken, reSyncTokType)) {
              passedResyncPoint = true;
            } else {
              currToken = this.SKIP_TOKEN();
              this.addToResyncTokens(currToken, resyncedTokens);
            }
          }
          // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.
          // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by
          // "between rules" resync recovery later in the flow.
          this.importLexerState(savedLexerState);
        };
        Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (
          expectTokAfterLastMatch,
          nextTokIdx,
          notStuck
        ) {
          // Edge case of arriving from a MANY repetition which is stuck
          // Attempting recovery in this case could cause an infinite loop
          if (notStuck === false) {
            return false;
          }
          // arguments to try and perform resync into the next iteration of the many are missing
          if (
            expectTokAfterLastMatch === undefined ||
            nextTokIdx === undefined
          ) {
            return false;
          }
          // no need to recover, next token is what we expect...
          if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {
            return false;
          }
          // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path
          // and prefer some backtracking path that includes recovered errors.
          if (this.isBackTracking()) {
            return false;
          }
          // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm
          // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)
          //noinspection RedundantIfStatementJS
          if (
            this.canPerformInRuleRecovery(
              expectTokAfterLastMatch,
              this.getFollowsForInRuleRecovery(
                expectTokAfterLastMatch,
                nextTokIdx
              )
            )
          ) {
            return false;
          }
          return true;
        };
        // Error Recovery functionality
        Recoverable.prototype.getFollowsForInRuleRecovery = function (
          tokType,
          tokIdxInRule
        ) {
          var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);
          var follows = this.getNextPossibleTokenTypes(grammarPath);
          return follows;
        };
        Recoverable.prototype.tryInRuleRecovery = function (
          expectedTokType,
          follows
        ) {
          if (
            this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)
          ) {
            var tokToInsert = this.getTokenToInsert(expectedTokType);
            return tokToInsert;
          }
          if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {
            var nextTok = this.SKIP_TOKEN();
            this.consumeToken();
            return nextTok;
          }
          throw new InRuleRecoveryException("sad sad panda");
        };
        Recoverable.prototype.canPerformInRuleRecovery = function (
          expectedToken,
          follows
        ) {
          return (
            this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||
            this.canRecoverWithSingleTokenDeletion(expectedToken)
          );
        };
        Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (
          expectedTokType,
          follows
        ) {
          var _this = this;
          if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {
            return false;
          }
          // must know the possible following tokens to perform single token insertion
          if (Object(utils["A" /* isEmpty */])(follows)) {
            return false;
          }
          var mismatchedTok = this.LA(1);
          var isMisMatchedTokInFollows =
            Object(utils["q" /* find */])(
              follows,
              function (possibleFollowsTokType) {
                return _this.tokenMatcher(
                  mismatchedTok,
                  possibleFollowsTokType
                );
              }
            ) !== undefined;
          return isMisMatchedTokInFollows;
        };
        Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (
          expectedTokType
        ) {
          var isNextTokenWhatIsExpected = this.tokenMatcher(
            this.LA(2),
            expectedTokType
          );
          return isNextTokenWhatIsExpected;
        };
        Recoverable.prototype.isInCurrentRuleReSyncSet = function (
          tokenTypeIdx
        ) {
          var followKey = this.getCurrFollowKey();
          var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);
          return Object(utils["j" /* contains */])(
            currentRuleReSyncSet,
            tokenTypeIdx
          );
        };
        Recoverable.prototype.findReSyncTokenType = function () {
          var allPossibleReSyncTokTypes = this.flattenFollowSet();
          // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input
          var nextToken = this.LA(1);
          var k = 2;
          while (true) {
            var nextTokenType = nextToken.tokenType;
            if (
              Object(utils["j" /* contains */])(
                allPossibleReSyncTokTypes,
                nextTokenType
              )
            ) {
              return nextTokenType;
            }
            nextToken = this.LA(k);
            k++;
          }
        };
        Recoverable.prototype.getCurrFollowKey = function () {
          // the length is at least one as we always add the ruleName to the stack before invoking the rule.
          if (this.RULE_STACK.length === 1) {
            return EOF_FOLLOW_KEY;
          }
          var currRuleShortName = this.getLastExplicitRuleShortName();
          var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();
          var prevRuleShortName = this.getPreviousExplicitRuleShortName();
          return {
            ruleName: this.shortRuleNameToFullName(currRuleShortName),
            idxInCallingRule: currRuleIdx,
            inRule: this.shortRuleNameToFullName(prevRuleShortName),
          };
        };
        Recoverable.prototype.buildFullFollowKeyStack = function () {
          var _this = this;
          var explicitRuleStack = this.RULE_STACK;
          var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;
          if (
            !Object(utils["A" /* isEmpty */])(this.LAST_EXPLICIT_RULE_STACK)
          ) {
            explicitRuleStack = Object(utils["I" /* map */])(
              this.LAST_EXPLICIT_RULE_STACK,
              function (idx) {
                return _this.RULE_STACK[idx];
              }
            );
            explicitOccurrenceStack = Object(utils["I" /* map */])(
              this.LAST_EXPLICIT_RULE_STACK,
              function (idx) {
                return _this.RULE_OCCURRENCE_STACK[idx];
              }
            );
          }
          // TODO: only iterate over explicit rules here
          return Object(utils["I" /* map */])(
            explicitRuleStack,
            function (ruleName, idx) {
              if (idx === 0) {
                return EOF_FOLLOW_KEY;
              }
              return {
                ruleName: _this.shortRuleNameToFullName(ruleName),
                idxInCallingRule: explicitOccurrenceStack[idx],
                inRule: _this.shortRuleNameToFullName(
                  explicitRuleStack[idx - 1]
                ),
              };
            }
          );
        };
        Recoverable.prototype.flattenFollowSet = function () {
          var _this = this;
          var followStack = Object(utils["I" /* map */])(
            this.buildFullFollowKeyStack(),
            function (currKey) {
              return _this.getFollowSetFromFollowKey(currKey);
            }
          );
          return Object(utils["t" /* flatten */])(followStack);
        };
        Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {
          if (followKey === EOF_FOLLOW_KEY) {
            return [EOF];
          }
          var followName =
            followKey.ruleName +
            followKey.idxInCallingRule +
            IN +
            followKey.inRule;
          return this.resyncFollows[followName];
        };
        // It does not make any sense to include a virtual EOF token in the list of resynced tokens
        // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
        Recoverable.prototype.addToResyncTokens = function (
          token,
          resyncTokens
        ) {
          if (!this.tokenMatcher(token, EOF)) {
            resyncTokens.push(token);
          }
          return resyncTokens;
        };
        Recoverable.prototype.reSyncTo = function (tokType) {
          var resyncedTokens = [];
          var nextTok = this.LA(1);
          while (this.tokenMatcher(nextTok, tokType) === false) {
            nextTok = this.SKIP_TOKEN();
            this.addToResyncTokens(nextTok, resyncedTokens);
          }
          // the last token is not part of the error.
          return Object(utils["n" /* dropRight */])(resyncedTokens);
        };
        Recoverable.prototype.attemptInRepetitionRecovery = function (
          prodFunc,
          args,
          lookaheadFunc,
          dslMethodIdx,
          prodOccurrence,
          nextToksWalker,
          notStuck
        ) {
          // by default this is a NO-OP
          // The actual implementation is with the function(not method) below
        };
        Recoverable.prototype.getCurrentGrammarPath = function (
          tokType,
          tokIdxInRule
        ) {
          var pathRuleStack = this.getHumanReadableRuleStack();
          var pathOccurrenceStack = Object(utils["g" /* cloneArr */])(
            this.RULE_OCCURRENCE_STACK
          );
          var grammarPath = {
            ruleStack: pathRuleStack,
            occurrenceStack: pathOccurrenceStack,
            lastTok: tokType,
            lastTokOccurrence: tokIdxInRule,
          };
          return grammarPath;
        };
        Recoverable.prototype.getHumanReadableRuleStack = function () {
          var _this = this;
          if (
            !Object(utils["A" /* isEmpty */])(this.LAST_EXPLICIT_RULE_STACK)
          ) {
            return Object(utils["I" /* map */])(
              this.LAST_EXPLICIT_RULE_STACK,
              function (currIdx) {
                return _this.shortRuleNameToFullName(_this.RULE_STACK[currIdx]);
              }
            );
          } else {
            return Object(utils["I" /* map */])(
              this.RULE_STACK,
              function (currShortName) {
                return _this.shortRuleNameToFullName(currShortName);
              }
            );
          }
        };
        return Recoverable;
      })();

      function attemptInRepetitionRecovery(
        prodFunc,
        args,
        lookaheadFunc,
        dslMethodIdx,
        prodOccurrence,
        nextToksWalker,
        notStuck
      ) {
        var key = this.getKeyForAutomaticLookahead(
          dslMethodIdx,
          prodOccurrence
        );
        var firstAfterRepInfo = this.firstAfterRepMap[key];
        if (firstAfterRepInfo === undefined) {
          var currRuleName = this.getCurrRuleFullName();
          var ruleGrammar = this.getGAstProductions()[currRuleName];
          var walker = new nextToksWalker(ruleGrammar, prodOccurrence);
          firstAfterRepInfo = walker.startWalking();
          this.firstAfterRepMap[key] = firstAfterRepInfo;
        }
        var expectTokAfterLastMatch = firstAfterRepInfo.token;
        var nextTokIdx = firstAfterRepInfo.occurrence;
        var isEndOfRule = firstAfterRepInfo.isEndOfRule;
        // special edge case of a TOP most repetition after which the input should END.
        // this will force an attempt for inRule recovery in that scenario.
        if (
          this.RULE_STACK.length === 1 &&
          isEndOfRule &&
          expectTokAfterLastMatch === undefined
        ) {
          expectTokAfterLastMatch = EOF;
          nextTokIdx = 1;
        }
        if (
          this.shouldInRepetitionRecoveryBeTried(
            expectTokAfterLastMatch,
            nextTokIdx,
            notStuck
          )
        ) {
          // TODO: performance optimization: instead of passing the original args here, we modify
          // the args param (or create a new one) and make sure the lookahead func is explicitly provided
          // to avoid searching the cache for it once more.
          this.tryInRepetitionRecovery(
            prodFunc,
            args,
            lookaheadFunc,
            expectTokAfterLastMatch
          );
        }
      }
      //# sourceMappingURL=recoverable.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/looksahead.js

      /**
       * Trait responsible for the lookahead related utilities and optimizations.
       */
      var looksahead_LooksAhead = /** @class */ (function () {
        function LooksAhead() {}
        LooksAhead.prototype.initLooksAhead = function (config) {
          this.dynamicTokensEnabled = Object(utils["w" /* has */])(
            config,
            "dynamicTokensEnabled"
          )
            ? config.dynamicTokensEnabled
            : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;
          this.maxLookahead = Object(utils["w" /* has */])(
            config,
            "maxLookahead"
          )
            ? config.maxLookahead
            : DEFAULT_PARSER_CONFIG.maxLookahead;
          /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
          this.lookAheadFuncsCache = Object(
            utils["z" /* isES2015MapSupported */]
          )()
            ? new Map()
            : [];
          // Performance optimization on newer engines that support ES6 Map
          // For larger Maps this is slightly faster than using a plain object (array in our case).
          /* istanbul ignore else - The else branch will be tested on older node.js versions and IE11 */
          if (Object(utils["z" /* isES2015MapSupported */])()) {
            this.getLaFuncFromCache = this.getLaFuncFromMap;
            this.setLaFuncCache = this.setLaFuncCacheUsingMap;
          } else {
            this.getLaFuncFromCache = this.getLaFuncFromObj;
            this.setLaFuncCache = this.setLaFuncUsingObj;
          }
        };
        LooksAhead.prototype.preComputeLookaheadFunctions = function (rules) {
          var _this = this;
          Object(utils["u" /* forEach */])(rules, function (currRule) {
            _this.TRACE_INIT(currRule.name + " Rule Lookahead", function () {
              var _a = collectMethods(currRule),
                alternation = _a.alternation,
                repetition = _a.repetition,
                option = _a.option,
                repetitionMandatory = _a.repetitionMandatory,
                repetitionMandatoryWithSeparator =
                  _a.repetitionMandatoryWithSeparator,
                repetitionWithSeparator = _a.repetitionWithSeparator;
              Object(utils["u" /* forEach */])(
                alternation,
                function (currProd) {
                  var prodIdx = currProd.idx === 0 ? "" : currProd.idx;
                  _this.TRACE_INIT(
                    "" + getProductionDslName(currProd) + prodIdx,
                    function () {
                      var laFunc = buildLookaheadFuncForOr(
                        currProd.idx,
                        currRule,
                        currProd.maxLookahead || _this.maxLookahead,
                        currProd.hasPredicates,
                        _this.dynamicTokensEnabled,
                        _this.lookAheadBuilderForAlternatives
                      );
                      var key = getKeyForAutomaticLookahead(
                        _this.fullRuleNameToShort[currRule.name],
                        OR_IDX,
                        currProd.idx
                      );
                      _this.setLaFuncCache(key, laFunc);
                    }
                  );
                }
              );
              Object(utils["u" /* forEach */])(repetition, function (currProd) {
                _this.computeLookaheadFunc(
                  currRule,
                  currProd.idx,
                  MANY_IDX,
                  PROD_TYPE.REPETITION,
                  currProd.maxLookahead,
                  getProductionDslName(currProd)
                );
              });
              Object(utils["u" /* forEach */])(option, function (currProd) {
                _this.computeLookaheadFunc(
                  currRule,
                  currProd.idx,
                  OPTION_IDX,
                  PROD_TYPE.OPTION,
                  currProd.maxLookahead,
                  getProductionDslName(currProd)
                );
              });
              Object(utils["u" /* forEach */])(
                repetitionMandatory,
                function (currProd) {
                  _this.computeLookaheadFunc(
                    currRule,
                    currProd.idx,
                    AT_LEAST_ONE_IDX,
                    PROD_TYPE.REPETITION_MANDATORY,
                    currProd.maxLookahead,
                    getProductionDslName(currProd)
                  );
                }
              );
              Object(utils["u" /* forEach */])(
                repetitionMandatoryWithSeparator,
                function (currProd) {
                  _this.computeLookaheadFunc(
                    currRule,
                    currProd.idx,
                    AT_LEAST_ONE_SEP_IDX,
                    PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,
                    currProd.maxLookahead,
                    getProductionDslName(currProd)
                  );
                }
              );
              Object(utils["u" /* forEach */])(
                repetitionWithSeparator,
                function (currProd) {
                  _this.computeLookaheadFunc(
                    currRule,
                    currProd.idx,
                    MANY_SEP_IDX,
                    PROD_TYPE.REPETITION_WITH_SEPARATOR,
                    currProd.maxLookahead,
                    getProductionDslName(currProd)
                  );
                }
              );
            });
          });
        };
        LooksAhead.prototype.computeLookaheadFunc = function (
          rule,
          prodOccurrence,
          prodKey,
          prodType,
          prodMaxLookahead,
          dslMethodName
        ) {
          var _this = this;
          this.TRACE_INIT(
            "" + dslMethodName + (prodOccurrence === 0 ? "" : prodOccurrence),
            function () {
              var laFunc = buildLookaheadFuncForOptionalProd(
                prodOccurrence,
                rule,
                prodMaxLookahead || _this.maxLookahead,
                _this.dynamicTokensEnabled,
                prodType,
                _this.lookAheadBuilderForOptional
              );
              var key = getKeyForAutomaticLookahead(
                _this.fullRuleNameToShort[rule.name],
                prodKey,
                prodOccurrence
              );
              _this.setLaFuncCache(key, laFunc);
            }
          );
        };
        LooksAhead.prototype.lookAheadBuilderForOptional = function (
          alt,
          tokenMatcher,
          dynamicTokensEnabled
        ) {
          return buildSingleAlternativeLookaheadFunction(
            alt,
            tokenMatcher,
            dynamicTokensEnabled
          );
        };
        LooksAhead.prototype.lookAheadBuilderForAlternatives = function (
          alts,
          hasPredicates,
          tokenMatcher,
          dynamicTokensEnabled
        ) {
          return buildAlternativesLookAheadFunc(
            alts,
            hasPredicates,
            tokenMatcher,
            dynamicTokensEnabled
          );
        };
        // this actually returns a number, but it is always used as a string (object prop key)
        LooksAhead.prototype.getKeyForAutomaticLookahead = function (
          dslMethodIdx,
          occurrence
        ) {
          var currRuleShortName = this.getLastExplicitRuleShortName();
          return getKeyForAutomaticLookahead(
            currRuleShortName,
            dslMethodIdx,
            occurrence
          );
        };
        /* istanbul ignore next */
        LooksAhead.prototype.getLaFuncFromCache = function (key) {
          return undefined;
        };
        LooksAhead.prototype.getLaFuncFromMap = function (key) {
          return this.lookAheadFuncsCache.get(key);
        };
        /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
        LooksAhead.prototype.getLaFuncFromObj = function (key) {
          return this.lookAheadFuncsCache[key];
        };
        /* istanbul ignore next */
        LooksAhead.prototype.setLaFuncCache = function (key, value) {};
        LooksAhead.prototype.setLaFuncCacheUsingMap = function (key, value) {
          this.lookAheadFuncsCache.set(key, value);
        };
        /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
        LooksAhead.prototype.setLaFuncUsingObj = function (key, value) {
          this.lookAheadFuncsCache[key] = value;
        };
        return LooksAhead;
      })();

      //# sourceMappingURL=looksahead.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/lang/lang_extensions.js

      function classNameFromInstance(instance) {
        return functionName(instance.constructor);
      }
      var FUNC_NAME_REGEXP = /^\s*function\s*(\S*)\s*\(/;
      var NAME = "name";
      /* istanbul ignore next too many hacks for IE/old versions of node.js here*/
      function functionName(func) {
        // Engines that support Function.prototype.name OR the nth (n>1) time after
        // the name has been computed in the following else block.
        var existingNameProp = func.name;
        if (existingNameProp) {
          return existingNameProp;
        }
        // hack for IE and engines that do not support Object.defineProperty on function.name (Node.js 0.10 && 0.12)
        var computedName = func.toString().match(FUNC_NAME_REGEXP)[1];
        return computedName;
      }
      /**
       * @returns {boolean} - has the property been successfully defined
       */
      function defineNameProp(obj, nameValue) {
        var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);
        /* istanbul ignore else -> will only run in old versions of node.js */
        if (
          Object(utils["F" /* isUndefined */])(namePropDescriptor) ||
          namePropDescriptor.configurable
        ) {
          Object.defineProperty(obj, NAME, {
            enumerable: false,
            configurable: true,
            writable: false,
            value: nameValue,
          });
          return true;
        }
        /* istanbul ignore next -> will only run in old versions of node.js */
        return false;
      }
      //# sourceMappingURL=lang_extensions.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/cst/cst_visitor.js

      function defaultVisit(ctx, param) {
        var childrenNames = Object(utils["G" /* keys */])(ctx);
        var childrenNamesLength = childrenNames.length;
        for (var i = 0; i < childrenNamesLength; i++) {
          var currChildName = childrenNames[i];
          var currChildArray = ctx[currChildName];
          var currChildArrayLength = currChildArray.length;
          for (var j = 0; j < currChildArrayLength; j++) {
            var currChild = currChildArray[j];
            // distinction between Tokens Children and CstNode children
            if (currChild.tokenTypeIdx === undefined) {
              if (currChild.fullName !== undefined) {
                this[currChild.fullName](currChild.children, param);
              } else {
                this[currChild.name](currChild.children, param);
              }
            }
          }
        }
        // defaultVisit does not support generic out param
        return undefined;
      }
      function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {
        var derivedConstructor = function () {};
        // can be overwritten according to:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
        // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
        defineNameProp(derivedConstructor, grammarName + "BaseSemantics");
        var semanticProto = {
          visit: function (cstNode, param) {
            // enables writing more concise visitor methods when CstNode has only a single child
            if (Object(utils["y" /* isArray */])(cstNode)) {
              // A CST Node's children dictionary can never have empty arrays as values
              // If a key is defined there will be at least one element in the corresponding value array.
              cstNode = cstNode[0];
            }
            // enables passing optional CstNodes concisely.
            if (Object(utils["F" /* isUndefined */])(cstNode)) {
              return undefined;
            }
            if (cstNode.fullName !== undefined) {
              return this[cstNode.fullName](cstNode.children, param);
            } else {
              return this[cstNode.name](cstNode.children, param);
            }
          },
          validateVisitor: function () {
            var semanticDefinitionErrors = validateVisitor(this, ruleNames);
            if (!Object(utils["A" /* isEmpty */])(semanticDefinitionErrors)) {
              var errorMessages = Object(utils["I" /* map */])(
                semanticDefinitionErrors,
                function (currDefError) {
                  return currDefError.msg;
                }
              );
              throw Error(
                "Errors Detected in CST Visitor <" +
                  functionName(this.constructor) +
                  ">:\n\t" +
                  ("" + errorMessages.join("\n\n").replace(/\n/g, "\n\t"))
              );
            }
          },
        };
        derivedConstructor.prototype = semanticProto;
        derivedConstructor.prototype.constructor = derivedConstructor;
        derivedConstructor._RULE_NAMES = ruleNames;
        return derivedConstructor;
      }
      function createBaseVisitorConstructorWithDefaults(
        grammarName,
        ruleNames,
        baseConstructor
      ) {
        var derivedConstructor = function () {};
        // can be overwritten according to:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
        // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
        defineNameProp(
          derivedConstructor,
          grammarName + "BaseSemanticsWithDefaults"
        );
        var withDefaultsProto = Object.create(baseConstructor.prototype);
        Object(utils["u" /* forEach */])(ruleNames, function (ruleName) {
          withDefaultsProto[ruleName] = defaultVisit;
        });
        derivedConstructor.prototype = withDefaultsProto;
        derivedConstructor.prototype.constructor = derivedConstructor;
        return derivedConstructor;
      }
      var CstVisitorDefinitionError;
      (function (CstVisitorDefinitionError) {
        CstVisitorDefinitionError[
          (CstVisitorDefinitionError["REDUNDANT_METHOD"] = 0)
        ] = "REDUNDANT_METHOD";
        CstVisitorDefinitionError[
          (CstVisitorDefinitionError["MISSING_METHOD"] = 1)
        ] = "MISSING_METHOD";
      })(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));
      function validateVisitor(visitorInstance, ruleNames) {
        var missingErrors = validateMissingCstMethods(
          visitorInstance,
          ruleNames
        );
        var redundantErrors = validateRedundantMethods(
          visitorInstance,
          ruleNames
        );
        return missingErrors.concat(redundantErrors);
      }
      function validateMissingCstMethods(visitorInstance, ruleNames) {
        var errors = Object(utils["I" /* map */])(
          ruleNames,
          function (currRuleName) {
            if (
              !Object(utils["B" /* isFunction */])(
                visitorInstance[currRuleName]
              )
            ) {
              return {
                msg:
                  "Missing visitor method: <" +
                  currRuleName +
                  "> on " +
                  functionName(visitorInstance.constructor) +
                  " CST Visitor.",
                type: CstVisitorDefinitionError.MISSING_METHOD,
                methodName: currRuleName,
              };
            }
          }
        );
        return Object(utils["i" /* compact */])(errors);
      }
      var VALID_PROP_NAMES = ["constructor", "visit", "validateVisitor"];
      function validateRedundantMethods(visitorInstance, ruleNames) {
        var errors = [];
        for (var prop in visitorInstance) {
          if (
            validTermsPattern.test(prop) &&
            Object(utils["B" /* isFunction */])(visitorInstance[prop]) &&
            !Object(utils["j" /* contains */])(VALID_PROP_NAMES, prop) &&
            !Object(utils["j" /* contains */])(ruleNames, prop)
          ) {
            errors.push({
              msg:
                "Redundant visitor method: <" +
                prop +
                "> on " +
                functionName(visitorInstance.constructor) +
                " CST Visitor\n" +
                "There is no Grammar Rule corresponding to this method's name.\n" +
                ("For utility methods on visitor classes use methods names that do not match /" +
                  validTermsPattern.source +
                  "/."),
              type: CstVisitorDefinitionError.REDUNDANT_METHOD,
              methodName: prop,
            });
          }
        }
        return errors;
      }
      //# sourceMappingURL=cst_visitor.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/tree_builder.js

      /**
       * This trait is responsible for the CST building logic.
       */
      var tree_builder_TreeBuilder = /** @class */ (function () {
        function TreeBuilder() {}
        TreeBuilder.prototype.initTreeBuilder = function (config) {
          this.LAST_EXPLICIT_RULE_STACK = [];
          this.CST_STACK = [];
          this.outputCst = Object(utils["w" /* has */])(config, "outputCst")
            ? config.outputCst
            : DEFAULT_PARSER_CONFIG.outputCst;
          this.nodeLocationTracking = Object(utils["w" /* has */])(
            config,
            "nodeLocationTracking"
          )
            ? config.nodeLocationTracking
            : DEFAULT_PARSER_CONFIG.nodeLocationTracking;
          if (!this.outputCst) {
            this.cstInvocationStateUpdate = utils["b" /* NOOP */];
            this.cstFinallyStateUpdate = utils["b" /* NOOP */];
            this.cstPostTerminal = utils["b" /* NOOP */];
            this.cstPostNonTerminal = utils["b" /* NOOP */];
            this.cstPostRule = utils["b" /* NOOP */];
            this.getLastExplicitRuleShortName =
              this.getLastExplicitRuleShortNameNoCst;
            this.getPreviousExplicitRuleShortName =
              this.getPreviousExplicitRuleShortNameNoCst;
            this.getLastExplicitRuleOccurrenceIndex =
              this.getLastExplicitRuleOccurrenceIndexNoCst;
            this.manyInternal = this.manyInternalNoCst;
            this.orInternal = this.orInternalNoCst;
            this.optionInternal = this.optionInternalNoCst;
            this.atLeastOneInternal = this.atLeastOneInternalNoCst;
            this.manySepFirstInternal = this.manySepFirstInternalNoCst;
            this.atLeastOneSepFirstInternal =
              this.atLeastOneSepFirstInternalNoCst;
          } else {
            if (/full/i.test(this.nodeLocationTracking)) {
              if (this.recoveryEnabled) {
                this.setNodeLocationFromToken = setNodeLocationFull;
                this.setNodeLocationFromNode = setNodeLocationFull;
                this.cstPostRule = utils["b" /* NOOP */];
                this.setInitialNodeLocation =
                  this.setInitialNodeLocationFullRecovery;
              } else {
                this.setNodeLocationFromToken = utils["b" /* NOOP */];
                this.setNodeLocationFromNode = utils["b" /* NOOP */];
                this.cstPostRule = this.cstPostRuleFull;
                this.setInitialNodeLocation =
                  this.setInitialNodeLocationFullRegular;
              }
            } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {
              if (this.recoveryEnabled) {
                this.setNodeLocationFromToken = setNodeLocationOnlyOffset;
                this.setNodeLocationFromNode = setNodeLocationOnlyOffset;
                this.cstPostRule = utils["b" /* NOOP */];
                this.setInitialNodeLocation =
                  this.setInitialNodeLocationOnlyOffsetRecovery;
              } else {
                this.setNodeLocationFromToken = utils["b" /* NOOP */];
                this.setNodeLocationFromNode = utils["b" /* NOOP */];
                this.cstPostRule = this.cstPostRuleOnlyOffset;
                this.setInitialNodeLocation =
                  this.setInitialNodeLocationOnlyOffsetRegular;
              }
            } else if (/none/i.test(this.nodeLocationTracking)) {
              this.setNodeLocationFromToken = utils["b" /* NOOP */];
              this.setNodeLocationFromNode = utils["b" /* NOOP */];
              this.cstPostRule = utils["b" /* NOOP */];
              this.setInitialNodeLocation = utils["b" /* NOOP */];
            } else {
              throw Error(
                'Invalid <nodeLocationTracking> config option: "' +
                  config.nodeLocationTracking +
                  '"'
              );
            }
          }
        };
        TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery =
          function (cstNode) {
            cstNode.location = {
              startOffset: NaN,
              endOffset: NaN,
            };
          };
        TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular =
          function (cstNode) {
            cstNode.location = {
              // without error recovery the starting Location of a new CstNode is guaranteed
              // To be the next Token's startOffset (for valid inputs).
              // For invalid inputs there won't be any CSTOutput so this potential
              // inaccuracy does not matter
              startOffset: this.LA(1).startOffset,
              endOffset: NaN,
            };
          };
        TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (
          cstNode
        ) {
          cstNode.location = {
            startOffset: NaN,
            startLine: NaN,
            startColumn: NaN,
            endOffset: NaN,
            endLine: NaN,
            endColumn: NaN,
          };
        };
        /**
     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work

     * @param cstNode
     */
        TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (
          cstNode
        ) {
          var nextToken = this.LA(1);
          cstNode.location = {
            startOffset: nextToken.startOffset,
            startLine: nextToken.startLine,
            startColumn: nextToken.startColumn,
            endOffset: NaN,
            endLine: NaN,
            endColumn: NaN,
          };
        };
        // CST
        TreeBuilder.prototype.cstNestedInvocationStateUpdate = function (
          nestedName,
          shortName
        ) {
          var cstNode = {
            name: nestedName,
            fullName:
              this.shortRuleNameToFull[this.getLastExplicitRuleShortName()] +
              nestedName,
            children: {},
          };
          this.setInitialNodeLocation(cstNode);
          this.CST_STACK.push(cstNode);
        };
        TreeBuilder.prototype.cstInvocationStateUpdate = function (
          fullRuleName,
          shortName
        ) {
          this.LAST_EXPLICIT_RULE_STACK.push(this.RULE_STACK.length - 1);
          var cstNode = {
            name: fullRuleName,
            children: {},
          };
          this.setInitialNodeLocation(cstNode);
          this.CST_STACK.push(cstNode);
        };
        TreeBuilder.prototype.cstFinallyStateUpdate = function () {
          this.LAST_EXPLICIT_RULE_STACK.pop();
          this.CST_STACK.pop();
        };
        TreeBuilder.prototype.cstNestedFinallyStateUpdate = function () {
          var lastCstNode = this.CST_STACK.pop();
          // TODO: the naming is bad, this should go directly to the
          //       (correct) cstLocation update method
          //       e.g if we put other logic in postRule...
          this.cstPostRule(lastCstNode);
        };
        TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {
          var prevToken = this.LA(0);
          var loc = ruleCstNode.location;
          // If this condition is true it means we consumed at least one Token
          // In this CstNode or its nested children.
          if (loc.startOffset <= prevToken.startOffset === true) {
            loc.endOffset = prevToken.endOffset;
            loc.endLine = prevToken.endLine;
            loc.endColumn = prevToken.endColumn;
          }
          // "empty" CstNode edge case
          else {
            loc.startOffset = NaN;
            loc.startLine = NaN;
            loc.startColumn = NaN;
          }
        };
        TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {
          var prevToken = this.LA(0);
          var loc = ruleCstNode.location;
          // If this condition is true it means we consumed at least one Token
          // In this CstNode or its nested children.
          if (loc.startOffset <= prevToken.startOffset === true) {
            loc.endOffset = prevToken.endOffset;
          }
          // "empty" CstNode edge case
          else {
            loc.startOffset = NaN;
          }
        };
        TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {
          var rootCst = this.CST_STACK[this.CST_STACK.length - 1];
          addTerminalToCst(rootCst, consumedToken, key);
          // This is only used when **both** error recovery and CST Output are enabled.
          this.setNodeLocationFromToken(rootCst.location, consumedToken);
        };
        TreeBuilder.prototype.cstPostNonTerminal = function (
          ruleCstResult,
          ruleName
        ) {
          // Avoid side effects due to back tracking
          // TODO: This costs a 2-3% in performance, A flag on IParserConfig
          //   could be used to get rid of this conditional, but not sure its worth the effort
          //   and API complexity.
          if (this.isBackTracking() !== true) {
            var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];
            addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);
            // This is only used when **both** error recovery and CST Output are enabled.
            this.setNodeLocationFromNode(
              preCstNode.location,
              ruleCstResult.location
            );
          }
        };
        TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {
          if (
            Object(utils["F" /* isUndefined */])(this.baseCstVisitorConstructor)
          ) {
            var newBaseCstVisitorConstructor =
              createBaseSemanticVisitorConstructor(
                this.className,
                this.allRuleNames
              );
            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;
            return newBaseCstVisitorConstructor;
          }
          return this.baseCstVisitorConstructor;
        };
        TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults =
          function () {
            if (
              Object(utils["F" /* isUndefined */])(
                this.baseCstVisitorWithDefaultsConstructor
              )
            ) {
              var newConstructor = createBaseVisitorConstructorWithDefaults(
                this.className,
                this.allRuleNames,
                this.getBaseCstVisitorConstructor()
              );
              this.baseCstVisitorWithDefaultsConstructor = newConstructor;
              return newConstructor;
            }
            return this.baseCstVisitorWithDefaultsConstructor;
          };
        TreeBuilder.prototype.nestedRuleBeforeClause = function (
          methodOpts,
          laKey
        ) {
          var nestedName;
          if (methodOpts.NAME !== undefined) {
            nestedName = methodOpts.NAME;
            this.nestedRuleInvocationStateUpdate(nestedName, laKey);
            return nestedName;
          } else {
            return undefined;
          }
        };
        TreeBuilder.prototype.nestedAltBeforeClause = function (
          methodOpts,
          occurrence,
          methodKeyIdx,
          altIdx
        ) {
          var ruleIdx = this.getLastExplicitRuleShortName();
          var shortName = getKeyForAltIndex(
            ruleIdx,
            methodKeyIdx,
            occurrence,
            altIdx
          );
          var nestedName;
          if (methodOpts.NAME !== undefined) {
            nestedName = methodOpts.NAME;
            this.nestedRuleInvocationStateUpdate(nestedName, shortName);
            return {
              shortName: shortName,
              nestedName: nestedName,
            };
          } else {
            return undefined;
          }
        };
        TreeBuilder.prototype.nestedRuleFinallyClause = function (
          laKey,
          nestedName
        ) {
          var cstStack = this.CST_STACK;
          var nestedRuleCst = cstStack[cstStack.length - 1];
          this.nestedRuleFinallyStateUpdate();
          // this return a different result than the previous invocation because "nestedRuleFinallyStateUpdate" pops the cst stack
          var parentCstNode = cstStack[cstStack.length - 1];
          addNoneTerminalToCst(parentCstNode, nestedName, nestedRuleCst);
          this.setNodeLocationFromNode(
            parentCstNode.location,
            nestedRuleCst.location
          );
        };
        TreeBuilder.prototype.getLastExplicitRuleShortName = function () {
          var lastExplictIndex =
            this.LAST_EXPLICIT_RULE_STACK[
              this.LAST_EXPLICIT_RULE_STACK.length - 1
            ];
          return this.RULE_STACK[lastExplictIndex];
        };
        TreeBuilder.prototype.getLastExplicitRuleShortNameNoCst = function () {
          var ruleStack = this.RULE_STACK;
          return ruleStack[ruleStack.length - 1];
        };
        TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {
          var lastExplicitIndex =
            this.LAST_EXPLICIT_RULE_STACK[
              this.LAST_EXPLICIT_RULE_STACK.length - 2
            ];
          return this.RULE_STACK[lastExplicitIndex];
        };
        TreeBuilder.prototype.getPreviousExplicitRuleShortNameNoCst =
          function () {
            var ruleStack = this.RULE_STACK;
            return ruleStack[ruleStack.length - 2];
          };
        TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {
          var lastExplicitIndex =
            this.LAST_EXPLICIT_RULE_STACK[
              this.LAST_EXPLICIT_RULE_STACK.length - 1
            ];
          return this.RULE_OCCURRENCE_STACK[lastExplicitIndex];
        };
        TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndexNoCst =
          function () {
            var occurrenceStack = this.RULE_OCCURRENCE_STACK;
            return occurrenceStack[occurrenceStack.length - 1];
          };
        TreeBuilder.prototype.nestedRuleInvocationStateUpdate = function (
          nestedRuleName,
          shortNameKey
        ) {
          this.RULE_OCCURRENCE_STACK.push(1);
          this.RULE_STACK.push(shortNameKey);
          this.cstNestedInvocationStateUpdate(nestedRuleName, shortNameKey);
        };
        TreeBuilder.prototype.nestedRuleFinallyStateUpdate = function () {
          this.RULE_STACK.pop();
          this.RULE_OCCURRENCE_STACK.pop();
          // NOOP when cst is disabled
          this.cstNestedFinallyStateUpdate();
        };
        return TreeBuilder;
      })();

      //# sourceMappingURL=tree_builder.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/lexer_adapter.js

      /**
       * Trait responsible abstracting over the interaction with Lexer output (Token vector).
       *
       * This could be generalized to support other kinds of lexers, e.g.
       * - Just in Time Lexing / Lexer-Less parsing.
       * - Streaming Lexer.
       */
      var lexer_adapter_LexerAdapter = /** @class */ (function () {
        function LexerAdapter() {}
        LexerAdapter.prototype.initLexerAdapter = function () {
          this.tokVector = [];
          this.tokVectorLength = 0;
          this.currIdx = -1;
        };
        Object.defineProperty(LexerAdapter.prototype, "input", {
          get: function () {
            return this.tokVector;
          },
          set: function (newInput) {
            if (this.selfAnalysisDone !== true) {
              throw Error(
                "Missing <performSelfAnalysis> invocation at the end of the Parser's constructor."
              );
            }
            this.reset();
            this.tokVector = newInput;
            this.tokVectorLength = newInput.length;
          },
          enumerable: true,
          configurable: true,
        });
        // skips a token and returns the next token
        LexerAdapter.prototype.SKIP_TOKEN = function () {
          if (this.currIdx <= this.tokVector.length - 2) {
            this.consumeToken();
            return this.LA(1);
          } else {
            return END_OF_FILE;
          }
        };
        // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
        // or lexers dependent on parser context.
        LexerAdapter.prototype.LA = function (howMuch) {
          var soughtIdx = this.currIdx + howMuch;
          if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {
            return END_OF_FILE;
          } else {
            return this.tokVector[soughtIdx];
          }
        };
        LexerAdapter.prototype.consumeToken = function () {
          this.currIdx++;
        };
        LexerAdapter.prototype.exportLexerState = function () {
          return this.currIdx;
        };
        LexerAdapter.prototype.importLexerState = function (newState) {
          this.currIdx = newState;
        };
        LexerAdapter.prototype.resetLexerState = function () {
          this.currIdx = -1;
        };
        LexerAdapter.prototype.moveToTerminatedState = function () {
          this.currIdx = this.tokVector.length - 1;
        };
        LexerAdapter.prototype.getLexerPosition = function () {
          return this.exportLexerState();
        };
        return LexerAdapter;
      })();

      //# sourceMappingURL=lexer_adapter.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_api.js

      /**
       * This trait is responsible for implementing the public API
       * for defining Chevrotain parsers, i.e:
       * - CONSUME
       * - RULE
       * - OPTION
       * - ...
       */
      var recognizer_api_RecognizerApi = /** @class */ (function () {
        function RecognizerApi() {}
        RecognizerApi.prototype.ACTION = function (impl) {
          return impl.call(this);
        };
        RecognizerApi.prototype.consume = function (idx, tokType, options) {
          return this.consumeInternal(tokType, idx, options);
        };
        RecognizerApi.prototype.subrule = function (idx, ruleToCall, options) {
          return this.subruleInternal(ruleToCall, idx, options);
        };
        RecognizerApi.prototype.option = function (idx, actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, idx);
        };
        RecognizerApi.prototype.or = function (idx, altsOrOpts) {
          return this.orInternal(altsOrOpts, idx);
        };
        RecognizerApi.prototype.many = function (idx, actionORMethodDef) {
          return this.manyInternal(idx, actionORMethodDef);
        };
        RecognizerApi.prototype.atLeastOne = function (idx, actionORMethodDef) {
          return this.atLeastOneInternal(idx, actionORMethodDef);
        };
        RecognizerApi.prototype.CONSUME = function (tokType, options) {
          return this.consumeInternal(tokType, 0, options);
        };
        RecognizerApi.prototype.CONSUME1 = function (tokType, options) {
          return this.consumeInternal(tokType, 1, options);
        };
        RecognizerApi.prototype.CONSUME2 = function (tokType, options) {
          return this.consumeInternal(tokType, 2, options);
        };
        RecognizerApi.prototype.CONSUME3 = function (tokType, options) {
          return this.consumeInternal(tokType, 3, options);
        };
        RecognizerApi.prototype.CONSUME4 = function (tokType, options) {
          return this.consumeInternal(tokType, 4, options);
        };
        RecognizerApi.prototype.CONSUME5 = function (tokType, options) {
          return this.consumeInternal(tokType, 5, options);
        };
        RecognizerApi.prototype.CONSUME6 = function (tokType, options) {
          return this.consumeInternal(tokType, 6, options);
        };
        RecognizerApi.prototype.CONSUME7 = function (tokType, options) {
          return this.consumeInternal(tokType, 7, options);
        };
        RecognizerApi.prototype.CONSUME8 = function (tokType, options) {
          return this.consumeInternal(tokType, 8, options);
        };
        RecognizerApi.prototype.CONSUME9 = function (tokType, options) {
          return this.consumeInternal(tokType, 9, options);
        };
        RecognizerApi.prototype.SUBRULE = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 0, options);
        };
        RecognizerApi.prototype.SUBRULE1 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 1, options);
        };
        RecognizerApi.prototype.SUBRULE2 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 2, options);
        };
        RecognizerApi.prototype.SUBRULE3 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 3, options);
        };
        RecognizerApi.prototype.SUBRULE4 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 4, options);
        };
        RecognizerApi.prototype.SUBRULE5 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 5, options);
        };
        RecognizerApi.prototype.SUBRULE6 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 6, options);
        };
        RecognizerApi.prototype.SUBRULE7 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 7, options);
        };
        RecognizerApi.prototype.SUBRULE8 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 8, options);
        };
        RecognizerApi.prototype.SUBRULE9 = function (ruleToCall, options) {
          return this.subruleInternal(ruleToCall, 9, options);
        };
        RecognizerApi.prototype.OPTION = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 0);
        };
        RecognizerApi.prototype.OPTION1 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 1);
        };
        RecognizerApi.prototype.OPTION2 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 2);
        };
        RecognizerApi.prototype.OPTION3 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 3);
        };
        RecognizerApi.prototype.OPTION4 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 4);
        };
        RecognizerApi.prototype.OPTION5 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 5);
        };
        RecognizerApi.prototype.OPTION6 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 6);
        };
        RecognizerApi.prototype.OPTION7 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 7);
        };
        RecognizerApi.prototype.OPTION8 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 8);
        };
        RecognizerApi.prototype.OPTION9 = function (actionORMethodDef) {
          return this.optionInternal(actionORMethodDef, 9);
        };
        RecognizerApi.prototype.OR = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 0);
        };
        RecognizerApi.prototype.OR1 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 1);
        };
        RecognizerApi.prototype.OR2 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 2);
        };
        RecognizerApi.prototype.OR3 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 3);
        };
        RecognizerApi.prototype.OR4 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 4);
        };
        RecognizerApi.prototype.OR5 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 5);
        };
        RecognizerApi.prototype.OR6 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 6);
        };
        RecognizerApi.prototype.OR7 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 7);
        };
        RecognizerApi.prototype.OR8 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 8);
        };
        RecognizerApi.prototype.OR9 = function (altsOrOpts) {
          return this.orInternal(altsOrOpts, 9);
        };
        RecognizerApi.prototype.MANY = function (actionORMethodDef) {
          this.manyInternal(0, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY1 = function (actionORMethodDef) {
          this.manyInternal(1, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY2 = function (actionORMethodDef) {
          this.manyInternal(2, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY3 = function (actionORMethodDef) {
          this.manyInternal(3, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY4 = function (actionORMethodDef) {
          this.manyInternal(4, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY5 = function (actionORMethodDef) {
          this.manyInternal(5, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY6 = function (actionORMethodDef) {
          this.manyInternal(6, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY7 = function (actionORMethodDef) {
          this.manyInternal(7, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY8 = function (actionORMethodDef) {
          this.manyInternal(8, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY9 = function (actionORMethodDef) {
          this.manyInternal(9, actionORMethodDef);
        };
        RecognizerApi.prototype.MANY_SEP = function (options) {
          this.manySepFirstInternal(0, options);
        };
        RecognizerApi.prototype.MANY_SEP1 = function (options) {
          this.manySepFirstInternal(1, options);
        };
        RecognizerApi.prototype.MANY_SEP2 = function (options) {
          this.manySepFirstInternal(2, options);
        };
        RecognizerApi.prototype.MANY_SEP3 = function (options) {
          this.manySepFirstInternal(3, options);
        };
        RecognizerApi.prototype.MANY_SEP4 = function (options) {
          this.manySepFirstInternal(4, options);
        };
        RecognizerApi.prototype.MANY_SEP5 = function (options) {
          this.manySepFirstInternal(5, options);
        };
        RecognizerApi.prototype.MANY_SEP6 = function (options) {
          this.manySepFirstInternal(6, options);
        };
        RecognizerApi.prototype.MANY_SEP7 = function (options) {
          this.manySepFirstInternal(7, options);
        };
        RecognizerApi.prototype.MANY_SEP8 = function (options) {
          this.manySepFirstInternal(8, options);
        };
        RecognizerApi.prototype.MANY_SEP9 = function (options) {
          this.manySepFirstInternal(9, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE = function (actionORMethodDef) {
          this.atLeastOneInternal(0, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE1 = function (actionORMethodDef) {
          return this.atLeastOneInternal(1, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE2 = function (actionORMethodDef) {
          this.atLeastOneInternal(2, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE3 = function (actionORMethodDef) {
          this.atLeastOneInternal(3, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE4 = function (actionORMethodDef) {
          this.atLeastOneInternal(4, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE5 = function (actionORMethodDef) {
          this.atLeastOneInternal(5, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE6 = function (actionORMethodDef) {
          this.atLeastOneInternal(6, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE7 = function (actionORMethodDef) {
          this.atLeastOneInternal(7, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE8 = function (actionORMethodDef) {
          this.atLeastOneInternal(8, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE9 = function (actionORMethodDef) {
          this.atLeastOneInternal(9, actionORMethodDef);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP = function (options) {
          this.atLeastOneSepFirstInternal(0, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP1 = function (options) {
          this.atLeastOneSepFirstInternal(1, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP2 = function (options) {
          this.atLeastOneSepFirstInternal(2, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP3 = function (options) {
          this.atLeastOneSepFirstInternal(3, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP4 = function (options) {
          this.atLeastOneSepFirstInternal(4, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP5 = function (options) {
          this.atLeastOneSepFirstInternal(5, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP6 = function (options) {
          this.atLeastOneSepFirstInternal(6, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP7 = function (options) {
          this.atLeastOneSepFirstInternal(7, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP8 = function (options) {
          this.atLeastOneSepFirstInternal(8, options);
        };
        RecognizerApi.prototype.AT_LEAST_ONE_SEP9 = function (options) {
          this.atLeastOneSepFirstInternal(9, options);
        };
        RecognizerApi.prototype.RULE = function (name, implementation, config) {
          if (config === void 0) {
            config = DEFAULT_RULE_CONFIG;
          }
          if (Object(utils["j" /* contains */])(this.definedRulesNames, name)) {
            var errMsg =
              defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({
                topLevelRule: name,
                grammarName: this.className,
              });
            var error = {
              message: errMsg,
              type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
              ruleName: name,
            };
            this.definitionErrors.push(error);
          }
          this.definedRulesNames.push(name);
          var ruleImplementation = this.defineRule(
            name,
            implementation,
            config
          );
          this[name] = ruleImplementation;
          return ruleImplementation;
        };
        RecognizerApi.prototype.OVERRIDE_RULE = function (name, impl, config) {
          if (config === void 0) {
            config = DEFAULT_RULE_CONFIG;
          }
          var ruleErrors = [];
          ruleErrors = ruleErrors.concat(
            validateRuleIsOverridden(
              name,
              this.definedRulesNames,
              this.className
            )
          );
          this.definitionErrors.push.apply(this.definitionErrors, ruleErrors); // mutability for the win
          var ruleImplementation = this.defineRule(name, impl, config);
          this[name] = ruleImplementation;
          return ruleImplementation;
        };
        RecognizerApi.prototype.BACKTRACK = function (grammarRule, args) {
          return function () {
            // save org state
            this.isBackTrackingStack.push(1);
            var orgState = this.saveRecogState();
            try {
              grammarRule.apply(this, args);
              // if no exception was thrown we have succeed parsing the rule.
              return true;
            } catch (e) {
              if (isRecognitionException(e)) {
                return false;
              } else {
                throw e;
              }
            } finally {
              this.reloadRecogState(orgState);
              this.isBackTrackingStack.pop();
            }
          };
        };
        // GAST export APIs
        RecognizerApi.prototype.getGAstProductions = function () {
          return this.gastProductionsCache;
        };
        RecognizerApi.prototype.getSerializedGastProductions = function () {
          return serializeGrammar(
            Object(utils["U" /* values */])(this.gastProductionsCache)
          );
        };
        return RecognizerApi;
      })();

      //# sourceMappingURL=recognizer_api.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/recognizer_engine.js

      /**
       * This trait is responsible for the runtime parsing engine
       * Used by the official API (recognizer_api.ts)
       */
      var recognizer_engine_RecognizerEngine = /** @class */ (function () {
        function RecognizerEngine() {}
        RecognizerEngine.prototype.initRecognizerEngine = function (
          tokenVocabulary,
          config
        ) {
          this.className = classNameFromInstance(this);
          // TODO: would using an ES6 Map or plain object be faster (CST building scenario)
          this.shortRuleNameToFull = {};
          this.fullRuleNameToShort = {};
          this.ruleShortNameIdx = 256;
          this.tokenMatcher = tokenStructuredMatcherNoCategories;
          this.definedRulesNames = [];
          this.tokensMap = {};
          this.allRuleNames = [];
          this.isBackTrackingStack = [];
          this.RULE_STACK = [];
          this.RULE_OCCURRENCE_STACK = [];
          this.gastProductionsCache = {};
          if (Object(utils["w" /* has */])(config, "serializedGrammar")) {
            throw Error(
              "The Parser's configuration can no longer contain a <serializedGrammar> property.\n" +
                "\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_6-0-0\n" +
                "\tFor Further details."
            );
          }
          if (Object(utils["y" /* isArray */])(tokenVocabulary)) {
            // This only checks for Token vocabularies provided as arrays.
            // That is good enough because the main objective is to detect users of pre-V4.0 APIs
            // rather than all edge cases of empty Token vocabularies.
            if (Object(utils["A" /* isEmpty */])(tokenVocabulary)) {
              throw Error(
                "A Token Vocabulary cannot be empty.\n" +
                  "\tNote that the first argument for the parser constructor\n" +
                  "\tis no longer a Token vector (since v4.0)."
              );
            }
            if (typeof tokenVocabulary[0].startOffset === "number") {
              throw Error(
                "The Parser constructor no longer accepts a token vector as the first argument.\n" +
                  "\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\n" +
                  "\tFor Further details."
              );
            }
          }
          if (Object(utils["y" /* isArray */])(tokenVocabulary)) {
            this.tokensMap = Object(utils["O" /* reduce */])(
              tokenVocabulary,
              function (acc, tokType) {
                acc[tokType.name] = tokType;
                return acc;
              },
              {}
            );
          } else if (
            Object(utils["w" /* has */])(tokenVocabulary, "modes") &&
            Object(utils["o" /* every */])(
              Object(utils["t" /* flatten */])(
                Object(utils["U" /* values */])(tokenVocabulary.modes)
              ),
              isTokenType
            )
          ) {
            var allTokenTypes = Object(utils["t" /* flatten */])(
              Object(utils["U" /* values */])(tokenVocabulary.modes)
            );
            var uniqueTokens = Object(utils["T" /* uniq */])(allTokenTypes);
            this.tokensMap = Object(utils["O" /* reduce */])(
              uniqueTokens,
              function (acc, tokType) {
                acc[tokType.name] = tokType;
                return acc;
              },
              {}
            );
          } else if (Object(utils["C" /* isObject */])(tokenVocabulary)) {
            this.tokensMap = Object(utils["h" /* cloneObj */])(tokenVocabulary);
          } else {
            throw new Error(
              "<tokensDictionary> argument must be An Array of Token constructors," +
                " A dictionary of Token constructors or an IMultiModeLexerDefinition"
            );
          }
          // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been
          // parsed with a clear error message ("expecting EOF but found ...")
          /* tslint:disable */
          this.tokensMap["EOF"] = EOF;
          // TODO: This check may not be accurate for multi mode lexers
          var noTokenCategoriesUsed = Object(utils["o" /* every */])(
            Object(utils["U" /* values */])(tokenVocabulary),
            function (tokenConstructor) {
              return Object(utils["A" /* isEmpty */])(
                tokenConstructor.categoryMatches
              );
            }
          );
          this.tokenMatcher = noTokenCategoriesUsed
            ? tokenStructuredMatcherNoCategories
            : tokenStructuredMatcher;
          // Because ES2015+ syntax should be supported for creating Token classes
          // We cannot assume that the Token classes were created using the "extendToken" utilities
          // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization
          augmentTokenTypes(Object(utils["U" /* values */])(this.tokensMap));
        };
        RecognizerEngine.prototype.defineRule = function (
          ruleName,
          impl,
          config
        ) {
          if (this.selfAnalysisDone) {
            throw Error(
              "Grammar rule <" +
                ruleName +
                "> may not be defined after the 'performSelfAnalysis' method has been called'\n" +
                "Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called."
            );
          }
          var resyncEnabled = Object(utils["w" /* has */])(
            config,
            "resyncEnabled"
          )
            ? config.resyncEnabled
            : DEFAULT_RULE_CONFIG.resyncEnabled;
          var recoveryValueFunc = Object(utils["w" /* has */])(
            config,
            "recoveryValueFunc"
          )
            ? config.recoveryValueFunc
            : DEFAULT_RULE_CONFIG.recoveryValueFunc;
          // performance optimization: Use small integers as keys for the longer human readable "full" rule names.
          // this greatly improves Map access time (as much as 8% for some performance benchmarks).
          /* tslint:disable */
          var shortName =
            this.ruleShortNameIdx <<
            (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);
          /* tslint:enable */
          this.ruleShortNameIdx++;
          this.shortRuleNameToFull[shortName] = ruleName;
          this.fullRuleNameToShort[ruleName] = shortName;
          function invokeRuleWithTry(args) {
            try {
              if (this.outputCst === true) {
                impl.apply(this, args);
                var cst = this.CST_STACK[this.CST_STACK.length - 1];
                this.cstPostRule(cst);
                return cst;
              } else {
                return impl.apply(this, args);
              }
            } catch (e) {
              return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);
            } finally {
              this.ruleFinallyStateUpdate();
            }
          }
          var wrappedGrammarRule;
          wrappedGrammarRule = function (idxInCallingRule, args) {
            if (idxInCallingRule === void 0) {
              idxInCallingRule = 0;
            }
            this.ruleInvocationStateUpdate(
              shortName,
              ruleName,
              idxInCallingRule
            );
            return invokeRuleWithTry.call(this, args);
          };
          var ruleNamePropName = "ruleName";
          wrappedGrammarRule[ruleNamePropName] = ruleName;
          wrappedGrammarRule["originalGrammarAction"] = impl;
          return wrappedGrammarRule;
        };
        RecognizerEngine.prototype.invokeRuleCatch = function (
          e,
          resyncEnabledConfig,
          recoveryValueFunc
        ) {
          var isFirstInvokedRule = this.RULE_STACK.length === 1;
          // note the reSync is always enabled for the first rule invocation, because we must always be able to
          // reSync with EOF and just output some INVALID ParseTree
          // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking
          // path is really the most valid one
          var reSyncEnabled =
            resyncEnabledConfig &&
            !this.isBackTracking() &&
            this.recoveryEnabled;
          if (isRecognitionException(e)) {
            var recogError = e;
            if (reSyncEnabled) {
              var reSyncTokType = this.findReSyncTokenType();
              if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {
                recogError.resyncedTokens = this.reSyncTo(reSyncTokType);
                if (this.outputCst) {
                  var partialCstResult =
                    this.CST_STACK[this.CST_STACK.length - 1];
                  partialCstResult.recoveredNode = true;
                  return partialCstResult;
                } else {
                  return recoveryValueFunc();
                }
              } else {
                if (this.outputCst) {
                  var partialCstResult =
                    this.CST_STACK[this.CST_STACK.length - 1];
                  partialCstResult.recoveredNode = true;
                  recogError.partialCstResult = partialCstResult;
                }
                // to be handled Further up the call stack
                throw recogError;
              }
            } else if (isFirstInvokedRule) {
              // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case
              this.moveToTerminatedState();
              // the parser should never throw one of its own errors outside its flow.
              // even if error recovery is disabled
              return recoveryValueFunc();
            } else {
              // to be recovered Further up the call stack
              throw recogError;
            }
          } else {
            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)
            throw e;
          }
        };
        // Implementation of parsing DSL
        RecognizerEngine.prototype.optionInternal = function (
          actionORMethodDef,
          occurrence
        ) {
          var key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);
          var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, key);
          try {
            return this.optionInternalLogic(actionORMethodDef, occurrence, key);
          } finally {
            if (nestedName !== undefined) {
              this.nestedRuleFinallyClause(key, nestedName);
            }
          }
        };
        RecognizerEngine.prototype.optionInternalNoCst = function (
          actionORMethodDef,
          occurrence
        ) {
          var key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);
          return this.optionInternalLogic(actionORMethodDef, occurrence, key);
        };
        RecognizerEngine.prototype.optionInternalLogic = function (
          actionORMethodDef,
          occurrence,
          key
        ) {
          var _this = this;
          var lookAheadFunc = this.getLaFuncFromCache(key);
          var action;
          var predicate;
          if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
              var orgLookaheadFunction_1 = lookAheadFunc;
              lookAheadFunc = function () {
                return (
                  predicate.call(_this) && orgLookaheadFunction_1.call(_this)
                );
              };
            }
          } else {
            action = actionORMethodDef;
          }
          if (lookAheadFunc.call(this) === true) {
            return action.call(this);
          }
          return undefined;
        };
        RecognizerEngine.prototype.atLeastOneInternal = function (
          prodOccurrence,
          actionORMethodDef
        ) {
          var laKey = this.getKeyForAutomaticLookahead(
            AT_LEAST_ONE_IDX,
            prodOccurrence
          );
          var nestedName = this.nestedRuleBeforeClause(
            actionORMethodDef,
            laKey
          );
          try {
            return this.atLeastOneInternalLogic(
              prodOccurrence,
              actionORMethodDef,
              laKey
            );
          } finally {
            if (nestedName !== undefined) {
              this.nestedRuleFinallyClause(laKey, nestedName);
            }
          }
        };
        RecognizerEngine.prototype.atLeastOneInternalNoCst = function (
          prodOccurrence,
          actionORMethodDef
        ) {
          var key = this.getKeyForAutomaticLookahead(
            AT_LEAST_ONE_IDX,
            prodOccurrence
          );
          this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key);
        };
        RecognizerEngine.prototype.atLeastOneInternalLogic = function (
          prodOccurrence,
          actionORMethodDef,
          key
        ) {
          var _this = this;
          var lookAheadFunc = this.getLaFuncFromCache(key);
          var action;
          var predicate;
          if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
              var orgLookaheadFunction_2 = lookAheadFunc;
              lookAheadFunc = function () {
                return (
                  predicate.call(_this) && orgLookaheadFunction_2.call(_this)
                );
              };
            }
          } else {
            action = actionORMethodDef;
          }
          if (lookAheadFunc.call(this) === true) {
            var notStuck = this.doSingleRepetition(action);
            while (lookAheadFunc.call(this) === true && notStuck === true) {
              notStuck = this.doSingleRepetition(action);
            }
          } else {
            throw this.raiseEarlyExitException(
              prodOccurrence,
              PROD_TYPE.REPETITION_MANDATORY,
              actionORMethodDef.ERR_MSG
            );
          }
          // note that while it may seem that this can cause an error because by using a recursive call to
          // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call
          // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.
          // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
          this.attemptInRepetitionRecovery(
            this.atLeastOneInternal,
            [prodOccurrence, actionORMethodDef],
            lookAheadFunc,
            AT_LEAST_ONE_IDX,
            prodOccurrence,
            interpreter_NextTerminalAfterAtLeastOneWalker
          );
        };
        RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (
          prodOccurrence,
          options
        ) {
          var laKey = this.getKeyForAutomaticLookahead(
            AT_LEAST_ONE_SEP_IDX,
            prodOccurrence
          );
          var nestedName = this.nestedRuleBeforeClause(options, laKey);
          try {
            this.atLeastOneSepFirstInternalLogic(
              prodOccurrence,
              options,
              laKey
            );
          } finally {
            if (nestedName !== undefined) {
              this.nestedRuleFinallyClause(laKey, nestedName);
            }
          }
        };
        RecognizerEngine.prototype.atLeastOneSepFirstInternalNoCst = function (
          prodOccurrence,
          options
        ) {
          var laKey = this.getKeyForAutomaticLookahead(
            AT_LEAST_ONE_SEP_IDX,
            prodOccurrence
          );
          this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);
        };
        RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (
          prodOccurrence,
          options,
          key
        ) {
          var _this = this;
          var action = options.DEF;
          var separator = options.SEP;
          var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);
          // 1st iteration
          if (firstIterationLookaheadFunc.call(this) === true) {
            action.call(this);
            //  TODO: Optimization can move this function construction into "attemptInRepetitionRecovery"
            //  because it is only needed in error recovery scenarios.
            var separatorLookAheadFunc = function () {
              return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
              // note that this CONSUME will never enter recovery because
              // the separatorLookAheadFunc checks that the separator really does exist.
              this.CONSUME(separator);
              action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(
              this.repetitionSepSecondInternal,
              [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                interpreter_NextTerminalAfterAtLeastOneSepWalker,
              ],
              separatorLookAheadFunc,
              AT_LEAST_ONE_SEP_IDX,
              prodOccurrence,
              interpreter_NextTerminalAfterAtLeastOneSepWalker
            );
          } else {
            throw this.raiseEarlyExitException(
              prodOccurrence,
              PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,
              options.ERR_MSG
            );
          }
        };
        RecognizerEngine.prototype.manyInternal = function (
          prodOccurrence,
          actionORMethodDef
        ) {
          var laKey = this.getKeyForAutomaticLookahead(
            MANY_IDX,
            prodOccurrence
          );
          var nestedName = this.nestedRuleBeforeClause(
            actionORMethodDef,
            laKey
          );
          try {
            return this.manyInternalLogic(
              prodOccurrence,
              actionORMethodDef,
              laKey
            );
          } finally {
            if (nestedName !== undefined) {
              this.nestedRuleFinallyClause(laKey, nestedName);
            }
          }
        };
        RecognizerEngine.prototype.manyInternalNoCst = function (
          prodOccurrence,
          actionORMethodDef
        ) {
          var laKey = this.getKeyForAutomaticLookahead(
            MANY_IDX,
            prodOccurrence
          );
          return this.manyInternalLogic(
            prodOccurrence,
            actionORMethodDef,
            laKey
          );
        };
        RecognizerEngine.prototype.manyInternalLogic = function (
          prodOccurrence,
          actionORMethodDef,
          key
        ) {
          var _this = this;
          var lookaheadFunction = this.getLaFuncFromCache(key);
          var action;
          var predicate;
          if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
              var orgLookaheadFunction_3 = lookaheadFunction;
              lookaheadFunction = function () {
                return (
                  predicate.call(_this) && orgLookaheadFunction_3.call(_this)
                );
              };
            }
          } else {
            action = actionORMethodDef;
          }
          var notStuck = true;
          while (lookaheadFunction.call(this) === true && notStuck === true) {
            notStuck = this.doSingleRepetition(action);
          }
          // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
          this.attemptInRepetitionRecovery(
            this.manyInternal,
            [prodOccurrence, actionORMethodDef],
            lookaheadFunction,
            MANY_IDX,
            prodOccurrence,
            interpreter_NextTerminalAfterManyWalker,
            // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
            // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
            // An infinite loop cannot occur as:
            // - Either the lookahead is guaranteed to consume something (Single Token Separator)
            // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
            notStuck
          );
        };
        RecognizerEngine.prototype.manySepFirstInternal = function (
          prodOccurrence,
          options
        ) {
          var laKey = this.getKeyForAutomaticLookahead(
            MANY_SEP_IDX,
            prodOccurrence
          );
          var nestedName = this.nestedRuleBeforeClause(options, laKey);
          try {
            this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
          } finally {
            if (nestedName !== undefined) {
              this.nestedRuleFinallyClause(laKey, nestedName);
            }
          }
        };
        RecognizerEngine.prototype.manySepFirstInternalNoCst = function (
          prodOccurrence,
          options
        ) {
          var laKey = this.getKeyForAutomaticLookahead(
            MANY_SEP_IDX,
            prodOccurrence
          );
          this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
        };
        RecognizerEngine.prototype.manySepFirstInternalLogic = function (
          prodOccurrence,
          options,
          key
        ) {
          var _this = this;
          var action = options.DEF;
          var separator = options.SEP;
          var firstIterationLaFunc = this.getLaFuncFromCache(key);
          // 1st iteration
          if (firstIterationLaFunc.call(this) === true) {
            action.call(this);
            var separatorLookAheadFunc = function () {
              return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
              // note that this CONSUME will never enter recovery because
              // the separatorLookAheadFunc checks that the separator really does exist.
              this.CONSUME(separator);
              // No need for checking infinite loop here due to consuming the separator.
              action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(
              this.repetitionSepSecondInternal,
              [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                interpreter_NextTerminalAfterManySepWalker,
              ],
              separatorLookAheadFunc,
              MANY_SEP_IDX,
              prodOccurrence,
              interpreter_NextTerminalAfterManySepWalker
            );
          }
        };
        RecognizerEngine.prototype.repetitionSepSecondInternal = function (
          prodOccurrence,
          separator,
          separatorLookAheadFunc,
          action,
          nextTerminalAfterWalker
        ) {
          while (separatorLookAheadFunc()) {
            // note that this CONSUME will never enter recovery because
            // the separatorLookAheadFunc checks that the separator really does exist.
            this.CONSUME(separator);
            action.call(this);
          }
          // we can only arrive to this function after an error
          // has occurred (hence the name 'second') so the following
          // IF will always be entered, its possible to remove it...
          // however it is kept to avoid confusion and be consistent.
          // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
          /* istanbul ignore else */
          this.attemptInRepetitionRecovery(
            this.repetitionSepSecondInternal,
            [
              prodOccurrence,
              separator,
              separatorLookAheadFunc,
              action,
              nextTerminalAfterWalker,
            ],
            separatorLookAheadFunc,
            AT_LEAST_ONE_SEP_IDX,
            prodOccurrence,
            nextTerminalAfterWalker
          );
        };
        RecognizerEngine.prototype.doSingleRepetition = function (action) {
          var beforeIteration = this.getLexerPosition();
          action.call(this);
          var afterIteration = this.getLexerPosition();
          // This boolean will indicate if this repetition progressed
          // or if we are "stuck" (potential infinite loop in the repetition).
          return afterIteration > beforeIteration;
        };
        RecognizerEngine.prototype.orInternalNoCst = function (
          altsOrOpts,
          occurrence
        ) {
          var alts = Object(utils["y" /* isArray */])(altsOrOpts)
            ? altsOrOpts
            : altsOrOpts.DEF;
          var laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);
          var laFunc = this.getLaFuncFromCache(laKey);
          var altIdxToTake = laFunc.call(this, alts);
          if (altIdxToTake !== undefined) {
            var chosenAlternative = alts[altIdxToTake];
            return chosenAlternative.ALT.call(this);
          }
          this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
        };
        RecognizerEngine.prototype.orInternal = function (
          altsOrOpts,
          occurrence
        ) {
          var laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);
          var nestedName = this.nestedRuleBeforeClause(altsOrOpts, laKey);
          try {
            var alts = Object(utils["y" /* isArray */])(altsOrOpts)
              ? altsOrOpts
              : altsOrOpts.DEF;
            var laFunc = this.getLaFuncFromCache(laKey);
            var altIdxToTake = laFunc.call(this, alts);
            if (altIdxToTake !== undefined) {
              var chosenAlternative = alts[altIdxToTake];
              var nestedAltBeforeClauseResult = this.nestedAltBeforeClause(
                chosenAlternative,
                occurrence,
                OR_IDX,
                altIdxToTake
              );
              try {
                return chosenAlternative.ALT.call(this);
              } finally {
                if (nestedAltBeforeClauseResult !== undefined) {
                  this.nestedRuleFinallyClause(
                    nestedAltBeforeClauseResult.shortName,
                    nestedAltBeforeClauseResult.nestedName
                  );
                }
              }
            }
            this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
          } finally {
            if (nestedName !== undefined) {
              this.nestedRuleFinallyClause(laKey, nestedName);
            }
          }
        };
        RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {
          this.RULE_STACK.pop();
          this.RULE_OCCURRENCE_STACK.pop();
          // NOOP when cst is disabled
          this.cstFinallyStateUpdate();
          if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {
            var firstRedundantTok = this.LA(1);
            var errMsg =
              this.errorMessageProvider.buildNotAllInputParsedMessage({
                firstRedundant: firstRedundantTok,
                ruleName: this.getCurrRuleFullName(),
              });
            this.SAVE_ERROR(
              new NotAllInputParsedException(errMsg, firstRedundantTok)
            );
          }
        };
        RecognizerEngine.prototype.subruleInternal = function (
          ruleToCall,
          idx,
          options
        ) {
          var ruleResult;
          try {
            var args = options !== undefined ? options.ARGS : undefined;
            ruleResult = ruleToCall.call(this, idx, args);
            this.cstPostNonTerminal(
              ruleResult,
              options !== undefined && options.LABEL !== undefined
                ? options.LABEL
                : ruleToCall.ruleName
            );
            return ruleResult;
          } catch (e) {
            this.subruleInternalError(e, options, ruleToCall.ruleName);
          }
        };
        RecognizerEngine.prototype.subruleInternalError = function (
          e,
          options,
          ruleName
        ) {
          if (isRecognitionException(e) && e.partialCstResult !== undefined) {
            this.cstPostNonTerminal(
              e.partialCstResult,
              options !== undefined && options.LABEL !== undefined
                ? options.LABEL
                : ruleName
            );
            delete e.partialCstResult;
          }
          throw e;
        };
        RecognizerEngine.prototype.consumeInternal = function (
          tokType,
          idx,
          options
        ) {
          var consumedToken;
          try {
            var nextToken = this.LA(1);
            if (this.tokenMatcher(nextToken, tokType) === true) {
              this.consumeToken();
              consumedToken = nextToken;
            } else {
              this.consumeInternalError(tokType, nextToken, options);
            }
          } catch (eFromConsumption) {
            consumedToken = this.consumeInternalRecovery(
              tokType,
              idx,
              eFromConsumption
            );
          }
          this.cstPostTerminal(
            options !== undefined && options.LABEL !== undefined
              ? options.LABEL
              : tokType.name,
            consumedToken
          );
          return consumedToken;
        };
        RecognizerEngine.prototype.consumeInternalError = function (
          tokType,
          nextToken,
          options
        ) {
          var msg;
          var previousToken = this.LA(0);
          if (options !== undefined && options.ERR_MSG) {
            msg = options.ERR_MSG;
          } else {
            msg = this.errorMessageProvider.buildMismatchTokenMessage({
              expected: tokType,
              actual: nextToken,
              previous: previousToken,
              ruleName: this.getCurrRuleFullName(),
            });
          }
          throw this.SAVE_ERROR(
            new MismatchedTokenException(msg, nextToken, previousToken)
          );
        };
        RecognizerEngine.prototype.consumeInternalRecovery = function (
          tokType,
          idx,
          eFromConsumption
        ) {
          // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it
          // but the original syntax could have been parsed successfully without any backtracking + recovery
          if (
            this.recoveryEnabled &&
            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
            eFromConsumption.name === "MismatchedTokenException" &&
            !this.isBackTracking()
          ) {
            var follows = this.getFollowsForInRuleRecovery(tokType, idx);
            try {
              return this.tryInRuleRecovery(tokType, follows);
            } catch (eFromInRuleRecovery) {
              if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {
                // failed in RuleRecovery.
                // throw the original error in order to trigger reSync error recovery
                throw eFromConsumption;
              } else {
                throw eFromInRuleRecovery;
              }
            }
          } else {
            throw eFromConsumption;
          }
        };
        RecognizerEngine.prototype.saveRecogState = function () {
          // errors is a getter which will clone the errors array
          var savedErrors = this.errors;
          var savedRuleStack = Object(utils["g" /* cloneArr */])(
            this.RULE_STACK
          );
          return {
            errors: savedErrors,
            lexerState: this.exportLexerState(),
            RULE_STACK: savedRuleStack,
            CST_STACK: this.CST_STACK,
            LAST_EXPLICIT_RULE_STACK: this.LAST_EXPLICIT_RULE_STACK,
          };
        };
        RecognizerEngine.prototype.reloadRecogState = function (newState) {
          this.errors = newState.errors;
          this.importLexerState(newState.lexerState);
          this.RULE_STACK = newState.RULE_STACK;
        };
        RecognizerEngine.prototype.ruleInvocationStateUpdate = function (
          shortName,
          fullName,
          idxInCallingRule
        ) {
          this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);
          this.RULE_STACK.push(shortName);
          // NOOP when cst is disabled
          this.cstInvocationStateUpdate(fullName, shortName);
        };
        RecognizerEngine.prototype.isBackTracking = function () {
          return this.isBackTrackingStack.length !== 0;
        };
        RecognizerEngine.prototype.getCurrRuleFullName = function () {
          var shortName = this.getLastExplicitRuleShortName();
          return this.shortRuleNameToFull[shortName];
        };
        RecognizerEngine.prototype.shortRuleNameToFullName = function (
          shortName
        ) {
          return this.shortRuleNameToFull[shortName];
        };
        RecognizerEngine.prototype.isAtEndOfInput = function () {
          return this.tokenMatcher(this.LA(1), EOF);
        };
        RecognizerEngine.prototype.reset = function () {
          this.resetLexerState();
          this.isBackTrackingStack = [];
          this.errors = [];
          this.RULE_STACK = [];
          this.LAST_EXPLICIT_RULE_STACK = [];
          // TODO: extract a specific rest for TreeBuilder trait
          this.CST_STACK = [];
          this.RULE_OCCURRENCE_STACK = [];
        };
        return RecognizerEngine;
      })();

      //# sourceMappingURL=recognizer_engine.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/error_handler.js

      /**
       * Trait responsible for runtime parsing errors.
       */
      var error_handler_ErrorHandler = /** @class */ (function () {
        function ErrorHandler() {}
        ErrorHandler.prototype.initErrorHandler = function (config) {
          this._errors = [];
          this.errorMessageProvider = Object(utils["k" /* defaults */])(
            config.errorMessageProvider,
            DEFAULT_PARSER_CONFIG.errorMessageProvider
          );
        };
        ErrorHandler.prototype.SAVE_ERROR = function (error) {
          if (isRecognitionException(error)) {
            error.context = {
              ruleStack: this.getHumanReadableRuleStack(),
              ruleOccurrenceStack: Object(utils["g" /* cloneArr */])(
                this.RULE_OCCURRENCE_STACK
              ),
            };
            this._errors.push(error);
            return error;
          } else {
            throw Error(
              "Trying to save an Error which is not a RecognitionException"
            );
          }
        };
        Object.defineProperty(ErrorHandler.prototype, "errors", {
          // TODO: extract these methods to ErrorHandler Trait?
          get: function () {
            return Object(utils["g" /* cloneArr */])(this._errors);
          },
          set: function (newErrors) {
            this._errors = newErrors;
          },
          enumerable: true,
          configurable: true,
        });
        // TODO: consider caching the error message computed information
        ErrorHandler.prototype.raiseEarlyExitException = function (
          occurrence,
          prodType,
          userDefinedErrMsg
        ) {
          var ruleName = this.getCurrRuleFullName();
          var ruleGrammar = this.getGAstProductions()[ruleName];
          var lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(
            occurrence,
            ruleGrammar,
            prodType,
            this.maxLookahead
          );
          var insideProdPaths = lookAheadPathsPerAlternative[0];
          var actualTokens = [];
          for (var i = 1; i <= this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
          }
          var msg = this.errorMessageProvider.buildEarlyExitMessage({
            expectedIterationPaths: insideProdPaths,
            actual: actualTokens,
            previous: this.LA(0),
            customUserDescription: userDefinedErrMsg,
            ruleName: ruleName,
          });
          throw this.SAVE_ERROR(
            new EarlyExitException(msg, this.LA(1), this.LA(0))
          );
        };
        // TODO: consider caching the error message computed information
        ErrorHandler.prototype.raiseNoAltException = function (
          occurrence,
          errMsgTypes
        ) {
          var ruleName = this.getCurrRuleFullName();
          var ruleGrammar = this.getGAstProductions()[ruleName];
          // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?
          var lookAheadPathsPerAlternative = getLookaheadPathsForOr(
            occurrence,
            ruleGrammar,
            this.maxLookahead
          );
          var actualTokens = [];
          for (var i = 1; i <= this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
          }
          var previousToken = this.LA(0);
          var errMsg = this.errorMessageProvider.buildNoViableAltMessage({
            expectedPathsPerAlt: lookAheadPathsPerAlternative,
            actual: actualTokens,
            previous: previousToken,
            customUserDescription: errMsgTypes,
            ruleName: this.getCurrRuleFullName(),
          });
          throw this.SAVE_ERROR(
            new NoViableAltException(errMsg, this.LA(1), previousToken)
          );
        };
        return ErrorHandler;
      })();

      //# sourceMappingURL=error_handler.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/context_assist.js

      var context_assist_ContentAssist = /** @class */ (function () {
        function ContentAssist() {}
        ContentAssist.prototype.initContentAssist = function () {};
        ContentAssist.prototype.computeContentAssist = function (
          startRuleName,
          precedingInput
        ) {
          var startRuleGast = this.gastProductionsCache[startRuleName];
          if (Object(utils["F" /* isUndefined */])(startRuleGast)) {
            throw Error(
              "Rule ->" + startRuleName + "<- does not exist in this grammar."
            );
          }
          return nextPossibleTokensAfter(
            [startRuleGast],
            precedingInput,
            this.tokenMatcher,
            this.maxLookahead
          );
        };
        // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
        // TODO: should this be more explicitly part of the public API?
        ContentAssist.prototype.getNextPossibleTokenTypes = function (
          grammarPath
        ) {
          var topRuleName = Object(utils["s" /* first */])(
            grammarPath.ruleStack
          );
          var gastProductions = this.getGAstProductions();
          var topProduction = gastProductions[topRuleName];
          var nextPossibleTokenTypes = new interpreter_NextAfterTokenWalker(
            topProduction,
            grammarPath
          ).startWalking();
          return nextPossibleTokenTypes;
        };
        return ContentAssist;
      })();

      //# sourceMappingURL=context_assist.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/gast_recorder.js

      var RECORDING_NULL_OBJECT = {
        description:
          "This Object indicates the Parser is during Recording Phase",
      };
      Object.freeze(RECORDING_NULL_OBJECT);
      var HANDLE_SEPARATOR = true;
      var MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;
      var RFT = createToken({
        name: "RECORDING_PHASE_TOKEN",
        pattern: lexer_public_Lexer.NA,
      });
      augmentTokenTypes([RFT]);
      var RECORDING_PHASE_TOKEN = createTokenInstance(
        RFT,
        "This IToken indicates the Parser is in Recording Phase\n\t" +
          "" +
          "See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details",
        // Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
        // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      );
      Object.freeze(RECORDING_PHASE_TOKEN);
      var RECORDING_PHASE_CSTNODE = {
        name:
          "This CSTNode indicates the Parser is in Recording Phase\n\t" +
          "See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details",
        children: {},
      };
      /**
       * This trait handles the creation of the GAST structure for Chevrotain Grammars
       */
      var gast_recorder_GastRecorder = /** @class */ (function () {
        function GastRecorder() {}
        GastRecorder.prototype.initGastRecorder = function (config) {
          this.recordingProdStack = [];
          this.RECORDING_PHASE = false;
        };
        GastRecorder.prototype.enableRecording = function () {
          var _this = this;
          this.RECORDING_PHASE = true;
          this.TRACE_INIT("Enable Recording", function () {
            var _loop_1 = function (i) {
              var idx = i > 0 ? i : "";
              _this["CONSUME" + idx] = function (arg1, arg2) {
                return this.consumeInternalRecord(arg1, i, arg2);
              };
              _this["SUBRULE" + idx] = function (arg1, arg2) {
                return this.subruleInternalRecord(arg1, i, arg2);
              };
              _this["OPTION" + idx] = function (arg1) {
                return this.optionInternalRecord(arg1, i);
              };
              _this["OR" + idx] = function (arg1) {
                return this.orInternalRecord(arg1, i);
              };
              _this["MANY" + idx] = function (arg1) {
                this.manyInternalRecord(i, arg1);
              };
              _this["MANY_SEP" + idx] = function (arg1) {
                this.manySepFirstInternalRecord(i, arg1);
              };
              _this["AT_LEAST_ONE" + idx] = function (arg1) {
                this.atLeastOneInternalRecord(i, arg1);
              };
              _this["AT_LEAST_ONE_SEP" + idx] = function (arg1) {
                this.atLeastOneSepFirstInternalRecord(i, arg1);
              };
            };
            /**
             * Warning Dark Voodoo Magic upcoming!
             * We are "replacing" the public parsing DSL methods API
             * With **new** alternative implementations on the Parser **instance**
             *
             * So far this is the only way I've found to avoid performance regressions during parsing time.
             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the "internal"
             *   implementations directly instead.
             */
            for (var i = 0; i < 10; i++) {
              _loop_1(i);
            }
            // DSL methods with the idx(suffix) as an argument
            _this["consume"] = function (idx, arg1, arg2) {
              return this.consumeInternalRecord(arg1, idx, arg2);
            };
            _this["subrule"] = function (idx, arg1, arg2) {
              return this.subruleInternalRecord(arg1, idx, arg2);
            };
            _this["option"] = function (idx, arg1) {
              return this.optionInternalRecord(arg1, idx);
            };
            _this["or"] = function (idx, arg1) {
              return this.orInternalRecord(arg1, idx);
            };
            _this["many"] = function (idx, arg1) {
              this.manyInternalRecord(idx, arg1);
            };
            _this["atLeastOne"] = function (idx, arg1) {
              this.atLeastOneInternalRecord(idx, arg1);
            };
            _this.ACTION = _this.ACTION_RECORD;
            _this.BACKTRACK = _this.BACKTRACK_RECORD;
            _this.LA = _this.LA_RECORD;
          });
        };
        GastRecorder.prototype.disableRecording = function () {
          var _this = this;
          this.RECORDING_PHASE = false;
          // By deleting these **instance** properties, any future invocation
          // will be deferred to the original methods on the **prototype** object
          // This seems to get rid of any incorrect optimizations that V8 may
          // do during the recording phase.
          this.TRACE_INIT("Deleting Recording methods", function () {
            for (var i = 0; i < 10; i++) {
              var idx = i > 0 ? i : "";
              delete _this["CONSUME" + idx];
              delete _this["SUBRULE" + idx];
              delete _this["OPTION" + idx];
              delete _this["OR" + idx];
              delete _this["MANY" + idx];
              delete _this["MANY_SEP" + idx];
              delete _this["AT_LEAST_ONE" + idx];
              delete _this["AT_LEAST_ONE_SEP" + idx];
            }
            delete _this["consume"];
            delete _this["subrule"];
            delete _this["option"];
            delete _this["or"];
            delete _this["many"];
            delete _this["atLeastOne"];
            delete _this.ACTION;
            delete _this.BACKTRACK;
            delete _this.LA;
          });
        };
        // TODO: is there any way to use this method to check no
        //   Parser methods are called inside an ACTION?
        //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?
        GastRecorder.prototype.ACTION_RECORD = function (impl) {
          // NO-OP during recording
          return;
        };
        // Executing backtracking logic will break our recording logic assumptions
        GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {
          return function () {
            return true;
          };
        };
        // LA is part of the official API and may be used for custom lookahead logic
        // by end users who may forget to wrap it in ACTION or inside a GATE
        GastRecorder.prototype.LA_RECORD = function (howMuch) {
          // We cannot use the RECORD_PHASE_TOKEN here because someone may depend
          // On LA return EOF at the end of the input so an infinite loop may occur.
          return END_OF_FILE;
        };
        GastRecorder.prototype.topLevelRuleRecord = function (name, def) {
          try {
            var newTopLevelRule = new gast_public_Rule({
              definition: [],
              name: name,
            });
            newTopLevelRule.name = name;
            this.recordingProdStack.push(newTopLevelRule);
            def.call(this);
            this.recordingProdStack.pop();
            return newTopLevelRule;
          } catch (originalError) {
            if (originalError.KNOWN_RECORDER_ERROR !== true) {
              try {
                originalError.message =
                  originalError.message +
                  '\n\t This error was thrown during the "grammar recording phase" For more info see:\n\t' +
                  "https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording";
              } catch (mutabilityError) {
                // We may not be able to modify the original error object
                throw originalError;
              }
            }
            throw originalError;
          }
        };
        // Implementation of parsing DSL
        GastRecorder.prototype.optionInternalRecord = function (
          actionORMethodDef,
          occurrence
        ) {
          return recordProd.call(
            this,
            gast_public_Option,
            actionORMethodDef,
            occurrence
          );
        };
        GastRecorder.prototype.atLeastOneInternalRecord = function (
          occurrence,
          actionORMethodDef
        ) {
          recordProd.call(
            this,
            gast_public_RepetitionMandatory,
            actionORMethodDef,
            occurrence
          );
        };
        GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (
          occurrence,
          options
        ) {
          recordProd.call(
            this,
            gast_public_RepetitionMandatoryWithSeparator,
            options,
            occurrence,
            HANDLE_SEPARATOR
          );
        };
        GastRecorder.prototype.manyInternalRecord = function (
          occurrence,
          actionORMethodDef
        ) {
          recordProd.call(
            this,
            gast_public_Repetition,
            actionORMethodDef,
            occurrence
          );
        };
        GastRecorder.prototype.manySepFirstInternalRecord = function (
          occurrence,
          options
        ) {
          recordProd.call(
            this,
            gast_public_RepetitionWithSeparator,
            options,
            occurrence,
            HANDLE_SEPARATOR
          );
        };
        GastRecorder.prototype.orInternalRecord = function (
          altsOrOpts,
          occurrence
        ) {
          return recordOrProd.call(this, altsOrOpts, occurrence);
        };
        GastRecorder.prototype.subruleInternalRecord = function (
          ruleToCall,
          occurrence,
          options
        ) {
          assertMethodIdxIsValid(occurrence);
          if (
            !ruleToCall ||
            Object(utils["w" /* has */])(ruleToCall, "ruleName") === false
          ) {
            var error = new Error(
              "<SUBRULE" +
                getIdxSuffix(occurrence) +
                "> argument is invalid" +
                (" expecting a Parser method reference but got: <" +
                  JSON.stringify(ruleToCall) +
                  ">") +
                ("\n inside top level rule: <" +
                  this.recordingProdStack[0].name +
                  ">")
            );
            error.KNOWN_RECORDER_ERROR = true;
            throw error;
          }
          var prevProd = Object(utils["M" /* peek */])(this.recordingProdStack);
          var ruleName = ruleToCall["ruleName"];
          var newNoneTerminal = new gast_public_NonTerminal({
            idx: occurrence,
            nonTerminalName: ruleName,
            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
            referencedRule: undefined,
          });
          prevProd.definition.push(newNoneTerminal);
          return this.outputCst
            ? RECORDING_PHASE_CSTNODE
            : RECORDING_NULL_OBJECT;
        };
        GastRecorder.prototype.consumeInternalRecord = function (
          tokType,
          occurrence,
          options
        ) {
          assertMethodIdxIsValid(occurrence);
          if (!hasShortKeyProperty(tokType)) {
            var error = new Error(
              "<CONSUME" +
                getIdxSuffix(occurrence) +
                "> argument is invalid" +
                (" expecting a TokenType reference but got: <" +
                  JSON.stringify(tokType) +
                  ">") +
                ("\n inside top level rule: <" +
                  this.recordingProdStack[0].name +
                  ">")
            );
            error.KNOWN_RECORDER_ERROR = true;
            throw error;
          }
          var prevProd = Object(utils["M" /* peek */])(this.recordingProdStack);
          var newNoneTerminal = new gast_public_Terminal({
            idx: occurrence,
            terminalType: tokType,
          });
          prevProd.definition.push(newNoneTerminal);
          return RECORDING_PHASE_TOKEN;
        };
        return GastRecorder;
      })();

      function recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {
        if (handleSep === void 0) {
          handleSep = false;
        }
        assertMethodIdxIsValid(occurrence);
        var prevProd = Object(utils["M" /* peek */])(this.recordingProdStack);
        var grammarAction = Object(utils["B" /* isFunction */])(mainProdArg)
          ? mainProdArg
          : mainProdArg.DEF;
        var newProd = new prodConstructor({
          definition: [],
          idx: occurrence,
        });
        if (Object(utils["w" /* has */])(mainProdArg, "NAME")) {
          newProd.name = mainProdArg.NAME;
        }
        if (handleSep) {
          newProd.separator = mainProdArg.SEP;
        }
        if (Object(utils["w" /* has */])(mainProdArg, "MAX_LOOKAHEAD")) {
          newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
        }
        this.recordingProdStack.push(newProd);
        grammarAction.call(this);
        prevProd.definition.push(newProd);
        this.recordingProdStack.pop();
        return RECORDING_NULL_OBJECT;
      }
      function recordOrProd(mainProdArg, occurrence) {
        var _this = this;
        assertMethodIdxIsValid(occurrence);
        var prevProd = Object(utils["M" /* peek */])(this.recordingProdStack);
        // Only an array of alternatives
        var hasOptions =
          Object(utils["y" /* isArray */])(mainProdArg) === false;
        var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;
        var newOrProd = new gast_public_Alternation({
          definition: [],
          idx: occurrence,
          ignoreAmbiguities:
            hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,
        });
        if (Object(utils["w" /* has */])(mainProdArg, "NAME")) {
          newOrProd.name = mainProdArg.NAME;
        }
        if (Object(utils["w" /* has */])(mainProdArg, "MAX_LOOKAHEAD")) {
          newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
        }
        var hasPredicates = Object(utils["Q" /* some */])(
          alts,
          function (currAlt) {
            return Object(utils["B" /* isFunction */])(currAlt.GATE);
          }
        );
        newOrProd.hasPredicates = hasPredicates;
        prevProd.definition.push(newOrProd);
        Object(utils["u" /* forEach */])(alts, function (currAlt) {
          var currAltFlat = new gast_public_Flat({ definition: [] });
          newOrProd.definition.push(currAltFlat);
          if (Object(utils["w" /* has */])(currAlt, "NAME")) {
            currAltFlat.name = currAlt.NAME;
          }
          if (Object(utils["w" /* has */])(currAlt, "IGNORE_AMBIGUITIES")) {
            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;
          }
          // **implicit** ignoreAmbiguities due to usage of gate
          else if (Object(utils["w" /* has */])(currAlt, "GATE")) {
            currAltFlat.ignoreAmbiguities = true;
          }
          _this.recordingProdStack.push(currAltFlat);
          currAlt.ALT.call(_this);
          _this.recordingProdStack.pop();
        });
        return RECORDING_NULL_OBJECT;
      }
      function getIdxSuffix(idx) {
        return idx === 0 ? "" : "" + idx;
      }
      function assertMethodIdxIsValid(idx) {
        if (idx < 0 || idx > MAX_METHOD_IDX) {
          var error = new Error(
            // The stack trace will contain all the needed details
            "Invalid DSL Method idx value: <" +
              idx +
              ">\n\t" +
              ("Idx value must be a none negative value smaller than " +
                (MAX_METHOD_IDX + 1))
          );
          error.KNOWN_RECORDER_ERROR = true;
          throw error;
        }
      }
      //# sourceMappingURL=gast_recorder.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/traits/perf_tracer.js

      /**
       * Trait responsible for runtime parsing errors.
       */
      var perf_tracer_PerformanceTracer = /** @class */ (function () {
        function PerformanceTracer() {}
        PerformanceTracer.prototype.initPerformanceTracer = function (config) {
          if (Object(utils["w" /* has */])(config, "traceInitPerf")) {
            var userTraceInitPerf = config.traceInitPerf;
            var traceIsNumber = typeof userTraceInitPerf === "number";
            this.traceInitMaxIdent = traceIsNumber
              ? userTraceInitPerf
              : Infinity;
            this.traceInitPerf = traceIsNumber
              ? userTraceInitPerf > 0
              : userTraceInitPerf;
          } else {
            this.traceInitMaxIdent = 0;
            this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;
          }
          this.traceInitIndent = -1;
        };
        PerformanceTracer.prototype.TRACE_INIT = function (
          phaseDesc,
          phaseImpl
        ) {
          // No need to optimize this using NOOP pattern because
          // It is not called in a hot spot...
          if (this.traceInitPerf === true) {
            this.traceInitIndent++;
            var indent = new Array(this.traceInitIndent + 1).join("\t");
            if (this.traceInitIndent < this.traceInitMaxIdent) {
              console.log(indent + "--> <" + phaseDesc + ">");
            }
            var _a = Object(utils["R" /* timer */])(phaseImpl),
              time = _a.time,
              value = _a.value;
            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */
            var traceMethod = time > 10 ? console.warn : console.log;
            if (this.traceInitIndent < this.traceInitMaxIdent) {
              traceMethod(
                indent + "<-- <" + phaseDesc + "> time: " + time + "ms"
              );
            }
            this.traceInitIndent--;
            return value;
          } else {
            return phaseImpl();
          }
        };
        return PerformanceTracer;
      })();

      //# sourceMappingURL=perf_tracer.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/parse/parser/parser.js
      var parser_extends =
        (undefined && undefined.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();

      var END_OF_FILE = createTokenInstance(
        EOF,
        "",
        NaN,
        NaN,
        NaN,
        NaN,
        NaN,
        NaN
      );
      Object.freeze(END_OF_FILE);
      var DEFAULT_PARSER_CONFIG = Object.freeze({
        recoveryEnabled: false,
        maxLookahead: 4,
        ignoredIssues: {},
        dynamicTokensEnabled: false,
        outputCst: true,
        errorMessageProvider: defaultParserErrorProvider,
        nodeLocationTracking: "none",
        traceInitPerf: false,
        skipValidations: false,
      });
      var DEFAULT_RULE_CONFIG = Object.freeze({
        recoveryValueFunc: function () {
          return undefined;
        },
        resyncEnabled: true,
      });
      var ParserDefinitionErrorType;
      (function (ParserDefinitionErrorType) {
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["INVALID_RULE_NAME"] = 0)
        ] = "INVALID_RULE_NAME";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["DUPLICATE_RULE_NAME"] = 1)
        ] = "DUPLICATE_RULE_NAME";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["INVALID_RULE_OVERRIDE"] = 2)
        ] = "INVALID_RULE_OVERRIDE";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["DUPLICATE_PRODUCTIONS"] = 3)
        ] = "DUPLICATE_PRODUCTIONS";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["UNRESOLVED_SUBRULE_REF"] = 4)
        ] = "UNRESOLVED_SUBRULE_REF";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["LEFT_RECURSION"] = 5)
        ] = "LEFT_RECURSION";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["NONE_LAST_EMPTY_ALT"] = 6)
        ] = "NONE_LAST_EMPTY_ALT";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["AMBIGUOUS_ALTS"] = 7)
        ] = "AMBIGUOUS_ALTS";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["CONFLICT_TOKENS_RULES_NAMESPACE"] = 8)
        ] = "CONFLICT_TOKENS_RULES_NAMESPACE";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["INVALID_TOKEN_NAME"] = 9)
        ] = "INVALID_TOKEN_NAME";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["INVALID_NESTED_RULE_NAME"] = 10)
        ] = "INVALID_NESTED_RULE_NAME";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["DUPLICATE_NESTED_NAME"] = 11)
        ] = "DUPLICATE_NESTED_NAME";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["NO_NON_EMPTY_LOOKAHEAD"] = 12)
        ] = "NO_NON_EMPTY_LOOKAHEAD";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["AMBIGUOUS_PREFIX_ALTS"] = 13)
        ] = "AMBIGUOUS_PREFIX_ALTS";
        ParserDefinitionErrorType[
          (ParserDefinitionErrorType["TOO_MANY_ALTS"] = 14)
        ] = "TOO_MANY_ALTS";
      })(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));
      function EMPTY_ALT(value) {
        if (value === void 0) {
          value = undefined;
        }
        return function () {
          return value;
        };
      }
      var parser_Parser = /** @class */ (function () {
        function Parser(tokenVocabulary, config) {
          if (config === void 0) {
            config = DEFAULT_PARSER_CONFIG;
          }
          this.ignoredIssues = DEFAULT_PARSER_CONFIG.ignoredIssues;
          this.definitionErrors = [];
          this.selfAnalysisDone = false;
          var that = this;
          that.initErrorHandler(config);
          that.initLexerAdapter();
          that.initLooksAhead(config);
          that.initRecognizerEngine(tokenVocabulary, config);
          that.initRecoverable(config);
          that.initTreeBuilder(config);
          that.initContentAssist();
          that.initGastRecorder(config);
          that.initPerformanceTracer(config);
          /* istanbul ignore if - complete over-kill to test this, we should only add a test when we actually hard deprecate it and throw an error... */
          if (
            Object(utils["w" /* has */])(config, "ignoredIssues") &&
            config.ignoredIssues !== DEFAULT_PARSER_CONFIG.ignoredIssues
          ) {
            Object(utils["d" /* PRINT_WARNING */])(
              "The <ignoredIssues> IParserConfig property is soft-deprecated and will be removed in future versions.\n\t" +
                "Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead."
            );
          }
          this.ignoredIssues = Object(utils["w" /* has */])(
            config,
            "ignoredIssues"
          )
            ? config.ignoredIssues
            : DEFAULT_PARSER_CONFIG.ignoredIssues;
          this.skipValidations = Object(utils["w" /* has */])(
            config,
            "skipValidations"
          )
            ? config.skipValidations
            : DEFAULT_PARSER_CONFIG.skipValidations;
        }
        /**
         *  @deprecated use the **instance** method with the same name instead
         */
        Parser.performSelfAnalysis = function (parserInstance) {
          parserInstance.performSelfAnalysis();
        };
        Parser.prototype.performSelfAnalysis = function () {
          var _this = this;
          this.TRACE_INIT("performSelfAnalysis", function () {
            var defErrorsMsgs;
            _this.selfAnalysisDone = true;
            var className = _this.className;
            _this.TRACE_INIT("toFastProps", function () {
              // Without this voodoo magic the parser would be x3-x4 slower
              // It seems it is better to invoke `toFastProperties` **before**
              // Any manipulations of the `this` object done during the recording phase.
              Object(utils["S" /* toFastProperties */])(_this);
            });
            _this.TRACE_INIT("Grammar Recording", function () {
              try {
                _this.enableRecording();
                // Building the GAST
                Object(utils["u" /* forEach */])(
                  _this.definedRulesNames,
                  function (currRuleName) {
                    var wrappedRule = _this[currRuleName];
                    var originalGrammarAction =
                      wrappedRule["originalGrammarAction"];
                    var recordedRuleGast = undefined;
                    _this.TRACE_INIT(currRuleName + " Rule", function () {
                      recordedRuleGast = _this.topLevelRuleRecord(
                        currRuleName,
                        originalGrammarAction
                      );
                    });
                    _this.gastProductionsCache[currRuleName] = recordedRuleGast;
                  }
                );
              } finally {
                _this.disableRecording();
              }
            });
            var resolverErrors = [];
            _this.TRACE_INIT("Grammar Resolving", function () {
              resolverErrors = gast_resolver_public_resolveGrammar({
                rules: Object(utils["U" /* values */])(
                  _this.gastProductionsCache
                ),
              });
              _this.definitionErrors.push.apply(
                _this.definitionErrors,
                resolverErrors
              ); // mutability for the win?
            });
            _this.TRACE_INIT("Grammar Validations", function () {
              // only perform additional grammar validations IFF no resolving errors have occurred.
              // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.
              if (
                Object(utils["A" /* isEmpty */])(resolverErrors) &&
                _this.skipValidations === false
              ) {
                var validationErrors = gast_resolver_public_validateGrammar({
                  rules: Object(utils["U" /* values */])(
                    _this.gastProductionsCache
                  ),
                  maxLookahead: _this.maxLookahead,
                  tokenTypes: Object(utils["U" /* values */])(_this.tokensMap),
                  ignoredIssues: _this.ignoredIssues,
                  errMsgProvider: defaultGrammarValidatorErrorProvider,
                  grammarName: className,
                });
                _this.definitionErrors.push.apply(
                  _this.definitionErrors,
                  validationErrors
                ); // mutability for the win?
              }
            });
            // this analysis may fail if the grammar is not perfectly valid
            if (Object(utils["A" /* isEmpty */])(_this.definitionErrors)) {
              // The results of these computations are not needed unless error recovery is enabled.
              if (_this.recoveryEnabled) {
                _this.TRACE_INIT("computeAllProdsFollows", function () {
                  var allFollows = computeAllProdsFollows(
                    Object(utils["U" /* values */])(_this.gastProductionsCache)
                  );
                  _this.resyncFollows = allFollows;
                });
              }
              _this.TRACE_INIT("ComputeLookaheadFunctions", function () {
                _this.preComputeLookaheadFunctions(
                  Object(utils["U" /* values */])(_this.gastProductionsCache)
                );
              });
            }
            _this.TRACE_INIT("expandAllNestedRuleNames", function () {
              // TODO: is this needed for EmbeddedActionsParser?
              var cstAnalysisResult = expandAllNestedRuleNames(
                Object(utils["U" /* values */])(_this.gastProductionsCache),
                _this.fullRuleNameToShort
              );
              _this.allRuleNames = cstAnalysisResult.allRuleNames;
            });
            if (
              !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&
              !Object(utils["A" /* isEmpty */])(_this.definitionErrors)
            ) {
              defErrorsMsgs = Object(utils["I" /* map */])(
                _this.definitionErrors,
                function (defError) {
                  return defError.message;
                }
              );
              throw new Error(
                "Parser Definition Errors detected:\n " +
                  defErrorsMsgs.join("\n-------------------------------\n")
              );
            }
          });
        };
        // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.
        // (normally during the parser's constructor).
        // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,
        // for example: duplicate rule names, referencing an unresolved subrule, ect...
        // This flag should not be enabled during normal usage, it is used in special situations, for example when
        // needing to display the parser definition errors in some GUI(online playground).
        Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;
        return Parser;
      })();

      Object(utils["e" /* applyMixins */])(parser_Parser, [
        recoverable_Recoverable,
        looksahead_LooksAhead,
        tree_builder_TreeBuilder,
        lexer_adapter_LexerAdapter,
        recognizer_engine_RecognizerEngine,
        recognizer_api_RecognizerApi,
        error_handler_ErrorHandler,
        context_assist_ContentAssist,
        gast_recorder_GastRecorder,
        perf_tracer_PerformanceTracer,
      ]);
      var parser_CstParser = /** @class */ (function (_super) {
        parser_extends(CstParser, _super);
        function CstParser(tokenVocabulary, config) {
          if (config === void 0) {
            config = DEFAULT_PARSER_CONFIG;
          }
          var _this = this;
          var configClone = Object(utils["h" /* cloneObj */])(config);
          configClone.outputCst = true;
          _this = _super.call(this, tokenVocabulary, configClone) || this;
          return _this;
        }
        return CstParser;
      })(parser_Parser);

      var parser_EmbeddedActionsParser = /** @class */ (function (_super) {
        parser_extends(EmbeddedActionsParser, _super);
        function EmbeddedActionsParser(tokenVocabulary, config) {
          if (config === void 0) {
            config = DEFAULT_PARSER_CONFIG;
          }
          var _this = this;
          var configClone = Object(utils["h" /* cloneObj */])(config);
          configClone.outputCst = false;
          _this = _super.call(this, tokenVocabulary, configClone) || this;
          return _this;
        }
        return EmbeddedActionsParser;
      })(parser_Parser);

      //# sourceMappingURL=parser.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/diagrams/render_public.js

      function createSyntaxDiagramsCode(grammar, _a) {
        var _b = _a === void 0 ? {} : _a,
          _c = _b.resourceBase,
          resourceBase =
            _c === void 0
              ? "https://unpkg.com/chevrotain@" + VERSION + "/diagrams/"
              : _c,
          _d = _b.css,
          css =
            _d === void 0
              ? "https://unpkg.com/chevrotain@" +
                VERSION +
                "/diagrams/diagrams.css"
              : _d;
        var header =
          '\n<!-- This is a generated file -->\n<!DOCTYPE html>\n<meta charset="utf-8">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n';
        var cssHtml = "\n<link rel='stylesheet' href='" + css + "'>\n";
        var scripts =
          "\n<script src='" +
          resourceBase +
          "vendor/railroad-diagrams.js'></script>\n<script src='" +
          resourceBase +
          "src/diagrams_builder.js'></script>\n<script src='" +
          resourceBase +
          "src/diagrams_behavior.js'></script>\n<script src='" +
          resourceBase +
          "src/main.js'></script>\n";
        var diagramsDiv = '\n<div id="diagrams" align="center"></div>    \n';
        var serializedGrammar =
          "\n<script>\n    window.serializedGrammar = " +
          JSON.stringify(grammar, null, "  ") +
          ";\n</script>\n";
        var initLogic =
          '\n<script>\n    var diagramsDiv = document.getElementById("diagrams");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n</script>\n';
        return (
          header +
          cssHtml +
          scripts +
          diagramsDiv +
          serializedGrammar +
          initLogic
        );
      }
      //# sourceMappingURL=render_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/generate/generate.js

      /**
       * Missing features
       * 1. Rule arguments
       * 2. Gates
       * 3. embedded actions
       */
      var NL = "\n";
      function genUmdModule(options) {
        return (
          "\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chevrotain'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chevrotain'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.b);\n    }\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\n\n" +
          genClass(options) +
          "\n    \nreturn {\n    " +
          options.name +
          ": " +
          options.name +
          " \n}\n}));\n"
        );
      }
      function genWrapperFunction(options) {
        return (
          "    \n" +
          genClass(options) +
          "\nreturn new " +
          options.name +
          "(tokenVocabulary, config)    \n"
        );
      }
      function genClass(options) {
        // TODO: how to pass the token vocabulary? Constructor? other?
        var result =
          "\nfunction " +
          options.name +
          "(tokenVocabulary, config) {\n    // invoke super constructor\n    // No support for embedded actions currently, so we can 'hardcode'\n    // The use of CstParser.\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\n\n    const $ = this\n\n    " +
          genAllRules(options.rules) +
          "\n\n    // very important to call this after all the rules have been defined.\n    // otherwise the parser may not work correctly as it will lack information\n    // derived during the self analysis phase.\n    this.performSelfAnalysis(this)\n}\n\n// inheritance as implemented in javascript in the previous decade... :(\n" +
          options.name +
          ".prototype = Object.create(chevrotain.CstParser.prototype)\n" +
          options.name +
          ".prototype.constructor = " +
          options.name +
          "    \n    ";
        return result;
      }
      function genAllRules(rules) {
        var rulesText = Object(utils["I" /* map */])(
          rules,
          function (currRule) {
            return genRule(currRule, 1);
          }
        );
        return rulesText.join("\n");
      }
      function genRule(prod, n) {
        var result =
          generate_indent(n, '$.RULE("' + prod.name + '", function() {') + NL;
        result += genDefinition(prod.definition, n + 1);
        result += generate_indent(n + 1, "})") + NL;
        return result;
      }
      function genTerminal(prod, n) {
        var name = prod.terminalType.name;
        // TODO: potential performance optimization, avoid tokenMap Dictionary access
        return generate_indent(
          n,
          "$.CONSUME" + prod.idx + "(this.tokensMap." + name + ")" + NL
        );
      }
      function genNonTerminal(prod, n) {
        return generate_indent(
          n,
          "$.SUBRULE" + prod.idx + "($." + prod.nonTerminalName + ")" + NL
        );
      }
      function genAlternation(prod, n) {
        var result = generate_indent(n, "$.OR" + prod.idx + "([") + NL;
        var alts = Object(utils["I" /* map */])(
          prod.definition,
          function (altDef) {
            return genSingleAlt(altDef, n + 1);
          }
        );
        result += alts.join("," + NL);
        result += NL + generate_indent(n, "])" + NL);
        return result;
      }
      function genSingleAlt(prod, n) {
        var result = generate_indent(n, "{") + NL;
        if (prod.name) {
          result += generate_indent(n + 1, 'NAME: "' + prod.name + '",') + NL;
        }
        result += generate_indent(n + 1, "ALT: function() {") + NL;
        result += genDefinition(prod.definition, n + 1);
        result += generate_indent(n + 1, "}") + NL;
        result += generate_indent(n, "}");
        return result;
      }
      function genProd(prod, n) {
        /* istanbul ignore else */
        if (prod instanceof gast_public_NonTerminal) {
          return genNonTerminal(prod, n);
        } else if (prod instanceof gast_public_Option) {
          return genDSLRule("OPTION", prod, n);
        } else if (prod instanceof gast_public_RepetitionMandatory) {
          return genDSLRule("AT_LEAST_ONE", prod, n);
        } else if (
          prod instanceof gast_public_RepetitionMandatoryWithSeparator
        ) {
          return genDSLRule("AT_LEAST_ONE_SEP", prod, n);
        } else if (prod instanceof gast_public_RepetitionWithSeparator) {
          return genDSLRule("MANY_SEP", prod, n);
        } else if (prod instanceof gast_public_Repetition) {
          return genDSLRule("MANY", prod, n);
        } else if (prod instanceof gast_public_Alternation) {
          return genAlternation(prod, n);
        } else if (prod instanceof gast_public_Terminal) {
          return genTerminal(prod, n);
        } else if (prod instanceof gast_public_Flat) {
          return genDefinition(prod.definition, n);
        } else {
          throw Error("non exhaustive match");
        }
      }
      function genDSLRule(dslName, prod, n) {
        var result = generate_indent(n, "$." + (dslName + prod.idx) + "(");
        if (prod.name || prod.separator) {
          result += "{" + NL;
          if (prod.name) {
            result +=
              generate_indent(n + 1, 'NAME: "' + prod.name + '"') + "," + NL;
          }
          if (prod.separator) {
            result +=
              generate_indent(
                n + 1,
                "SEP: this.tokensMap." + prod.separator.name
              ) +
              "," +
              NL;
          }
          result += "DEF: " + genDefFunction(prod.definition, n + 2) + NL;
          result += generate_indent(n, "}") + NL;
        } else {
          result += genDefFunction(prod.definition, n + 1);
        }
        result += generate_indent(n, ")") + NL;
        return result;
      }
      function genDefFunction(definition, n) {
        var def = "function() {" + NL;
        def += genDefinition(definition, n);
        def += generate_indent(n, "}") + NL;
        return def;
      }
      function genDefinition(def, n) {
        var result = "";
        Object(utils["u" /* forEach */])(def, function (prod) {
          result += genProd(prod, n + 1);
        });
        return result;
      }
      function generate_indent(howMuch, text) {
        var spaces = Array(howMuch * 4 + 1).join(" ");
        return spaces + text;
      }
      //# sourceMappingURL=generate.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/generate/generate_public.js

      function generateParserFactory(options) {
        var wrapperText = genWrapperFunction({
          name: options.name,
          rules: options.rules,
        });
        var constructorWrapper = new Function(
          "tokenVocabulary",
          "config",
          "chevrotain",
          wrapperText
        );
        return function (config) {
          return constructorWrapper(
            options.tokenVocabulary,
            config,
            // TODO: check how the require is transpiled/webpacked
            __webpack_require__(1)
          );
        };
      }
      function generateParserModule(options) {
        return genUmdModule({
          name: options.name,
          rules: options.rules,
        });
      }
      //# sourceMappingURL=generate_public.js.map
      // CONCATENATED MODULE: ./node_modules/chevrotain/lib_esm/src/api.js
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "clearCache",
        function () {
          return clearCache;
        }
      );
      /* concated harmony reexport VERSION */ __webpack_require__.d(
        __webpack_exports__,
        "VERSION",
        function () {
          return VERSION;
        }
      );
      /* concated harmony reexport Parser */ __webpack_require__.d(
        __webpack_exports__,
        "Parser",
        function () {
          return parser_Parser;
        }
      );
      /* concated harmony reexport CstParser */ __webpack_require__.d(
        __webpack_exports__,
        "CstParser",
        function () {
          return parser_CstParser;
        }
      );
      /* concated harmony reexport EmbeddedActionsParser */ __webpack_require__.d(
        __webpack_exports__,
        "EmbeddedActionsParser",
        function () {
          return parser_EmbeddedActionsParser;
        }
      );
      /* concated harmony reexport ParserDefinitionErrorType */ __webpack_require__.d(
        __webpack_exports__,
        "ParserDefinitionErrorType",
        function () {
          return ParserDefinitionErrorType;
        }
      );
      /* concated harmony reexport EMPTY_ALT */ __webpack_require__.d(
        __webpack_exports__,
        "EMPTY_ALT",
        function () {
          return EMPTY_ALT;
        }
      );
      /* concated harmony reexport Lexer */ __webpack_require__.d(
        __webpack_exports__,
        "Lexer",
        function () {
          return lexer_public_Lexer;
        }
      );
      /* concated harmony reexport LexerDefinitionErrorType */ __webpack_require__.d(
        __webpack_exports__,
        "LexerDefinitionErrorType",
        function () {
          return LexerDefinitionErrorType;
        }
      );
      /* concated harmony reexport createToken */ __webpack_require__.d(
        __webpack_exports__,
        "createToken",
        function () {
          return createToken;
        }
      );
      /* concated harmony reexport createTokenInstance */ __webpack_require__.d(
        __webpack_exports__,
        "createTokenInstance",
        function () {
          return createTokenInstance;
        }
      );
      /* concated harmony reexport EOF */ __webpack_require__.d(
        __webpack_exports__,
        "EOF",
        function () {
          return EOF;
        }
      );
      /* concated harmony reexport tokenLabel */ __webpack_require__.d(
        __webpack_exports__,
        "tokenLabel",
        function () {
          return tokenLabel;
        }
      );
      /* concated harmony reexport tokenMatcher */ __webpack_require__.d(
        __webpack_exports__,
        "tokenMatcher",
        function () {
          return tokens_public_tokenMatcher;
        }
      );
      /* concated harmony reexport tokenName */ __webpack_require__.d(
        __webpack_exports__,
        "tokenName",
        function () {
          return tokenName;
        }
      );
      /* concated harmony reexport defaultGrammarResolverErrorProvider */ __webpack_require__.d(
        __webpack_exports__,
        "defaultGrammarResolverErrorProvider",
        function () {
          return defaultGrammarResolverErrorProvider;
        }
      );
      /* concated harmony reexport defaultGrammarValidatorErrorProvider */ __webpack_require__.d(
        __webpack_exports__,
        "defaultGrammarValidatorErrorProvider",
        function () {
          return defaultGrammarValidatorErrorProvider;
        }
      );
      /* concated harmony reexport defaultParserErrorProvider */ __webpack_require__.d(
        __webpack_exports__,
        "defaultParserErrorProvider",
        function () {
          return defaultParserErrorProvider;
        }
      );
      /* concated harmony reexport EarlyExitException */ __webpack_require__.d(
        __webpack_exports__,
        "EarlyExitException",
        function () {
          return EarlyExitException;
        }
      );
      /* concated harmony reexport isRecognitionException */ __webpack_require__.d(
        __webpack_exports__,
        "isRecognitionException",
        function () {
          return isRecognitionException;
        }
      );
      /* concated harmony reexport MismatchedTokenException */ __webpack_require__.d(
        __webpack_exports__,
        "MismatchedTokenException",
        function () {
          return MismatchedTokenException;
        }
      );
      /* concated harmony reexport NotAllInputParsedException */ __webpack_require__.d(
        __webpack_exports__,
        "NotAllInputParsedException",
        function () {
          return NotAllInputParsedException;
        }
      );
      /* concated harmony reexport NoViableAltException */ __webpack_require__.d(
        __webpack_exports__,
        "NoViableAltException",
        function () {
          return NoViableAltException;
        }
      );
      /* concated harmony reexport defaultLexerErrorProvider */ __webpack_require__.d(
        __webpack_exports__,
        "defaultLexerErrorProvider",
        function () {
          return defaultLexerErrorProvider;
        }
      );
      /* concated harmony reexport Alternation */ __webpack_require__.d(
        __webpack_exports__,
        "Alternation",
        function () {
          return gast_public_Alternation;
        }
      );
      /* concated harmony reexport Flat */ __webpack_require__.d(
        __webpack_exports__,
        "Flat",
        function () {
          return gast_public_Flat;
        }
      );
      /* concated harmony reexport NonTerminal */ __webpack_require__.d(
        __webpack_exports__,
        "NonTerminal",
        function () {
          return gast_public_NonTerminal;
        }
      );
      /* concated harmony reexport Option */ __webpack_require__.d(
        __webpack_exports__,
        "Option",
        function () {
          return gast_public_Option;
        }
      );
      /* concated harmony reexport Repetition */ __webpack_require__.d(
        __webpack_exports__,
        "Repetition",
        function () {
          return gast_public_Repetition;
        }
      );
      /* concated harmony reexport RepetitionMandatory */ __webpack_require__.d(
        __webpack_exports__,
        "RepetitionMandatory",
        function () {
          return gast_public_RepetitionMandatory;
        }
      );
      /* concated harmony reexport RepetitionMandatoryWithSeparator */ __webpack_require__.d(
        __webpack_exports__,
        "RepetitionMandatoryWithSeparator",
        function () {
          return gast_public_RepetitionMandatoryWithSeparator;
        }
      );
      /* concated harmony reexport RepetitionWithSeparator */ __webpack_require__.d(
        __webpack_exports__,
        "RepetitionWithSeparator",
        function () {
          return gast_public_RepetitionWithSeparator;
        }
      );
      /* concated harmony reexport Rule */ __webpack_require__.d(
        __webpack_exports__,
        "Rule",
        function () {
          return gast_public_Rule;
        }
      );
      /* concated harmony reexport Terminal */ __webpack_require__.d(
        __webpack_exports__,
        "Terminal",
        function () {
          return gast_public_Terminal;
        }
      );
      /* concated harmony reexport serializeGrammar */ __webpack_require__.d(
        __webpack_exports__,
        "serializeGrammar",
        function () {
          return serializeGrammar;
        }
      );
      /* concated harmony reexport serializeProduction */ __webpack_require__.d(
        __webpack_exports__,
        "serializeProduction",
        function () {
          return serializeProduction;
        }
      );
      /* concated harmony reexport GAstVisitor */ __webpack_require__.d(
        __webpack_exports__,
        "GAstVisitor",
        function () {
          return gast_visitor_public_GAstVisitor;
        }
      );
      /* concated harmony reexport assignOccurrenceIndices */ __webpack_require__.d(
        __webpack_exports__,
        "assignOccurrenceIndices",
        function () {
          return assignOccurrenceIndices;
        }
      );
      /* concated harmony reexport resolveGrammar */ __webpack_require__.d(
        __webpack_exports__,
        "resolveGrammar",
        function () {
          return gast_resolver_public_resolveGrammar;
        }
      );
      /* concated harmony reexport validateGrammar */ __webpack_require__.d(
        __webpack_exports__,
        "validateGrammar",
        function () {
          return gast_resolver_public_validateGrammar;
        }
      );
      /* concated harmony reexport createSyntaxDiagramsCode */ __webpack_require__.d(
        __webpack_exports__,
        "createSyntaxDiagramsCode",
        function () {
          return createSyntaxDiagramsCode;
        }
      );
      /* concated harmony reexport generateParserFactory */ __webpack_require__.d(
        __webpack_exports__,
        "generateParserFactory",
        function () {
          return generateParserFactory;
        }
      );
      /* concated harmony reexport generateParserModule */ __webpack_require__.d(
        __webpack_exports__,
        "generateParserModule",
        function () {
          return generateParserModule;
        }
      );
      // semantic version

      // Tokens utilities

      // Other Utilities

      // grammar reflection API

      // GAST Utilities

      /* istanbul ignore next */
      function clearCache() {
        console.warn(
          "The clearCache function was 'soft' removed from the Chevrotain API." +
            "\n\t It performs no action other than printing this message." +
            "\n\t Please avoid using it as it will be completely removed in the future"
        );
      }

      //# sourceMappingURL=api.js.map

      /***/
    },
    /* 2 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { concat, hardline, lineSuffix, breakParent, literalline } =
        __webpack_require__(3).doc.builders;

      /**
       * Takes a token and return a doc with:
       * - concatenated leading comments
       * - the token image
       * - concatenated trailing comments
       *
       * @param {Token} token
       * @return a doc with the token and its comments
       */
      function printTokenWithComments(token) {
        return printWithComments(
          token,
          token.image,
          getTokenLeadingComments,
          getTokenTrailingComments
        );
      }

      /**
       * Takes a node and return a doc with:
       * - concatenated leading comments
       * - the node doc value
       * - concatenated trailing comments
       *
       * @param {CSTNode} node
       * @param {Doc} value - the converted node value
       * @return a doc with the token and its comments
       */
      function printNodeWithComments(node, value) {
        return printWithComments(
          node,
          value,
          getNodeLeadingComments,
          getNodeTrailingComments
        );
      }

      function printWithComments(
        nodeOrToken,
        value,
        getLeadingComments,
        getTrailingComments
      ) {
        const leadingComments = getLeadingComments(nodeOrToken);
        const trailingComments = getTrailingComments(nodeOrToken, value);

        return leadingComments.length === 0 && trailingComments.length === 0
          ? value
          : concat([...leadingComments, value, ...trailingComments]);
      }

      /**
       * @param {Token} token
       * @return an array containing processed leading comments and separators
       */
      function getTokenLeadingComments(token) {
        return getLeadingComments(token, token);
      }

      /**
       * @param {CSTNode} node
       * @return an array containing processed leading comments and separators
       */
      function getNodeLeadingComments(node) {
        return getLeadingComments(node, node.location);
      }

      function getLeadingComments(nodeOrToken, location) {
        const arr = [];
        if (
          Object.prototype.hasOwnProperty.call(nodeOrToken, "leadingComments")
        ) {
          let previousEndLine = nodeOrToken.leadingComments[0].endLine;
          let step;
          arr.push(concat(formatComment(nodeOrToken.leadingComments[0])));
          for (let i = 1; i < nodeOrToken.leadingComments.length; i++) {
            step = nodeOrToken.leadingComments[i].startLine - previousEndLine;
            if (
              step === 1 ||
              nodeOrToken.leadingComments[i].startOffset > location.startOffset
            ) {
              arr.push(hardline);
            } else if (step > 1) {
              arr.push(hardline, hardline);
            }

            arr.push(concat(formatComment(nodeOrToken.leadingComments[i])));
            previousEndLine = nodeOrToken.leadingComments[i].endLine;
          }

          step = location.startLine - previousEndLine;
          if (
            step === 1 ||
            nodeOrToken.leadingComments[nodeOrToken.leadingComments.length - 1]
              .startOffset > location.startOffset
          ) {
            arr.push(hardline);
          } else if (step > 1) {
            arr.push(hardline, hardline);
          }
        }

        return arr;
      }

      /**
       * @param {Token} token
       * @return an array containing processed trailing comments and separators
       */
      function getTokenTrailingComments(token) {
        return getTrailingComments(token, token.image, token);
      }

      /**
       * @param {CSTNode} node
       * @return an array containing processed trailing comments and separators
       */
      function getNodeTrailingComments(node, value) {
        return getTrailingComments(node, value, node.location);
      }

      function getTrailingComments(nodeOrToken, value, location) {
        const arr = [];
        let previousEndLine = location.endLine;
        if (
          Object.prototype.hasOwnProperty.call(nodeOrToken, "trailingComments")
        ) {
          nodeOrToken.trailingComments.forEach((comment, idx) => {
            let separator = "";

            if (comment.startLine !== previousEndLine) {
              arr.push(hardline);
            } else if (value !== "" && idx === 0) {
              separator = " ";
            }

            if (comment.tokenType.name === "LineComment") {
              arr.push(
                lineSuffix(
                  concat([
                    separator,
                    concat(formatComment(comment)),
                    breakParent,
                  ])
                )
              );
            } else {
              arr.push(concat(formatComment(comment)));
            }

            previousEndLine = comment.endLine;
          });
        }

        return arr;
      }

      function isJavaDoc(comment, lines) {
        let isJavaDoc = true;
        if (
          comment.tokenType.name === "TraditionalComment" &&
          lines.length > 1
        ) {
          for (let i = 1; i < lines.length; i++) {
            if (lines[i].trim().charAt(0) !== "*") {
              isJavaDoc = false;
              break;
            }
          }
        } else {
          isJavaDoc = false;
        }

        return isJavaDoc;
      }

      function formatJavaDoc(lines) {
        const res = [lines[0].trim()];

        for (let i = 1; i < lines.length; i++) {
          res.push(hardline);
          res.push(" " + lines[i].trim());
        }

        return res;
      }

      function formatComment(comment) {
        const res = [];
        const lines = comment.image.split("\n");

        if (isJavaDoc(comment, lines)) {
          return formatJavaDoc(lines);
        }

        lines.forEach((line) => {
          res.push(line);
          res.push(literalline);
        });
        res.pop();
        return res;
      }

      function isToken(doc) {
        return (
          doc &&
          Object.prototype.hasOwnProperty.call(doc, "image") &&
          doc.tokenType
        );
      }

      function processComments(docs) {
        if (!Array.isArray(docs)) {
          if (isToken(docs)) {
            return printTokenWithComments(docs);
          }
          return docs;
        }
        return docs.map((elt) => {
          if (isToken(elt)) {
            return printTokenWithComments(elt);
          }
          return elt;
        });
      }

      module.exports = {
        getTokenLeadingComments,
        processComments,
        printTokenWithComments,
        printNodeWithComments,
      };

      /***/
    },
    /* 3 */
    /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (global) {
        (function (global, factory) {
          true ? (module.exports = factory()) : undefined;
        })(this, function () {
          "use strict";

          var name = "prettier";
          var version$1 = "1.18.2";
          var description = "Prettier is an opinionated code formatter";
          var bin = {
            prettier: "./bin/prettier.js",
          };
          var repository = "prettier/prettier";
          var homepage = "https://prettier.io";
          var author = "James Long";
          var license = "MIT";
          var main = "./index.js";
          var engines = {
            node: ">=6",
          };
          var dependencies = {
            "@angular/compiler": "7.2.9",
            "@babel/code-frame": "7.0.0",
            "@babel/parser": "7.2.0",
            "@glimmer/syntax": "0.38.4",
            "@iarna/toml": "2.2.3",
            "@typescript-eslint/typescript-estree": "1.6.0",
            "angular-estree-parser": "1.1.5",
            "angular-html-parser": "1.2.0",
            camelcase: "4.1.0",
            chalk: "2.1.0",
            "cjk-regex": "2.0.0",
            cosmiconfig: "5.0.7",
            dashify: "0.2.2",
            dedent: "0.7.0",
            diff: "3.2.0",
            editorconfig: "0.15.2",
            "editorconfig-to-prettier": "0.1.1",
            "escape-string-regexp": "1.0.5",
            esutils: "2.0.2",
            "find-parent-dir": "0.3.0",
            "find-project-root": "1.1.1",
            "flow-parser": "0.84.0",
            "get-stream": "3.0.0",
            globby: "6.1.0",
            graphql: "14.2.0",
            "html-element-attributes": "2.0.0",
            "html-styles": "1.0.0",
            "html-tag-names": "1.1.2",
            ignore: "4.0.6",
            "is-ci": "2.0.0",
            "jest-docblock": "23.2.0",
            "json-stable-stringify": "1.0.1",
            leven: "2.1.0",
            "lines-and-columns": "1.1.6",
            "linguist-languages": "6.2.1-dev.20180706",
            "lodash.uniqby": "4.7.0",
            mem: "1.1.0",
            minimatch: "3.0.4",
            minimist: "1.2.0",
            "n-readlines": "1.0.0",
            "normalize-path": "3.0.0",
            "parse-srcset":
              "ikatyang/parse-srcset#54eb9c1cb21db5c62b4d0e275d7249516df6f0ee",
            "postcss-less": "1.1.5",
            "postcss-media-query-parser": "0.2.3",
            "postcss-scss": "2.0.0",
            "postcss-selector-parser": "2.2.3",
            "postcss-values-parser": "1.5.0",
            "regexp-util": "1.2.2",
            "remark-math": "1.0.4",
            "remark-parse": "5.0.0",
            resolve: "1.5.0",
            semver: "5.4.1",
            "string-width": "3.0.0",
            typescript: "3.4.1",
            "unicode-regex": "2.0.0",
            unified: "6.1.6",
            vnopts: "1.0.2",
            yaml: "1.0.2",
            "yaml-unist-parser": "1.0.0",
          };
          var devDependencies = {
            "@babel/cli": "7.2.0",
            "@babel/core": "7.2.0",
            "@babel/preset-env": "7.2.0",
            "babel-loader": "8.0.4",
            benchmark: "2.1.4",
            "builtin-modules": "2.0.0",
            codecov:
              "codecov/codecov-node#e427d900309adb50746a39a50aa7d80071a5ddd0",
            "cross-env": "5.0.5",
            eslint: "4.18.2",
            "eslint-config-prettier": "2.9.0",
            "eslint-friendly-formatter": "3.0.0",
            "eslint-plugin-import": "2.9.0",
            "eslint-plugin-prettier": "2.6.0",
            "eslint-plugin-react": "7.7.0",
            execa: "0.10.0",
            jest: "23.3.0",
            "jest-junit": "5.0.0",
            "jest-snapshot-serializer-ansi": "1.0.0",
            "jest-snapshot-serializer-raw": "1.1.0",
            "jest-watch-typeahead": "0.1.0",
            mkdirp: "0.5.1",
            prettier: "1.18.0",
            prettylint: "1.0.0",
            rimraf: "2.6.2",
            rollup: "0.47.6",
            "rollup-plugin-alias": "1.4.0",
            "rollup-plugin-babel": "4.0.0-beta.4",
            "rollup-plugin-commonjs": "8.2.6",
            "rollup-plugin-json": "2.1.1",
            "rollup-plugin-node-builtins": "2.0.0",
            "rollup-plugin-node-globals": "1.1.0",
            "rollup-plugin-node-resolve": "2.0.0",
            "rollup-plugin-replace": "1.2.1",
            "rollup-plugin-uglify": "3.0.0",
            shelljs: "0.8.1",
            "snapshot-diff": "0.4.0",
            "strip-ansi": "4.0.0",
            tempy: "0.2.1",
            webpack: "3.12.0",
          };
          var scripts = {
            prepublishOnly: 'echo "Error: must publish from dist/" && exit 1',
            "prepare-release": "yarn && yarn build && yarn test:dist",
            test: "jest",
            "test:dist": "node ./scripts/test-dist.js",
            "test-integration": "jest tests_integration",
            "perf-repeat":
              "yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null",
            "perf-repeat-inspect":
              "yarn && yarn build && cross-env NODE_ENV=production node --inspect-brk ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null",
            "perf-benchmark":
              "yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-benchmark --loglevel debug ${PERF_FILE:-./index.js} > /dev/null",
            lint: "cross-env EFF_NO_LINK_RULES=true eslint . --format node_modules/eslint-friendly-formatter",
            "lint-docs": "prettylint {.,docs,website,website/blog}/*.md",
            "lint-dist":
              'eslint --no-eslintrc --no-ignore --env=browser "dist/!(bin-prettier|index|third-party).js"',
            build: "node --max-old-space-size=2048 ./scripts/build/build.js",
            "build-docs": "node ./scripts/build-docs.js",
            "check-deps": "node ./scripts/check-deps.js",
          };
          var _package = {
            name: name,
            version: version$1,
            description: description,
            bin: bin,
            repository: repository,
            homepage: homepage,
            author: author,
            license: license,
            main: main,
            engines: engines,
            dependencies: dependencies,
            devDependencies: devDependencies,
            scripts: scripts,
          };

          var _package$1 = Object.freeze({
            name: name,
            version: version$1,
            description: description,
            bin: bin,
            repository: repository,
            homepage: homepage,
            author: author,
            license: license,
            main: main,
            engines: engines,
            dependencies: dependencies,
            devDependencies: devDependencies,
            scripts: scripts,
            default: _package,
          });

          var commonjsGlobal =
            typeof window !== "undefined"
              ? window
              : typeof global !== "undefined"
              ? global
              : typeof self !== "undefined"
              ? self
              : {};

          function unwrapExports(x) {
            return x &&
              x.__esModule &&
              Object.prototype.hasOwnProperty.call(x, "default")
              ? x["default"]
              : x;
          }

          function createCommonjsModule(fn, module) {
            return (
              (module = { exports: {} }),
              fn(module, module.exports),
              module.exports
            );
          }

          var base = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports["default"] =
              /*istanbul ignore end*/
              Diff;

            function Diff() {}

            Diff.prototype = {
              /*istanbul ignore start*/

              /*istanbul ignore end*/
              diff: function diff(oldString, newString) {
                /*istanbul ignore start*/
                var /*istanbul ignore end*/
                  options =
                    arguments.length <= 2 || arguments[2] === undefined
                      ? {}
                      : arguments[2];
                var callback = options.callback;

                if (typeof options === "function") {
                  callback = options;
                  options = {};
                }

                this.options = options;
                var self = this;

                function done(value) {
                  if (callback) {
                    setTimeout(function () {
                      callback(undefined, value);
                    }, 0);
                    return true;
                  } else {
                    return value;
                  }
                } // Allow subclasses to massage the input prior to running

                oldString = this.castInput(oldString);
                newString = this.castInput(newString);
                oldString = this.removeEmpty(this.tokenize(oldString));
                newString = this.removeEmpty(this.tokenize(newString));
                var newLen = newString.length,
                  oldLen = oldString.length;
                var editLength = 1;
                var maxEditLength = newLen + oldLen;
                var bestPath = [
                  {
                    newPos: -1,
                    components: [],
                  },
                ]; // Seed editLength = 0, i.e. the content starts with the same values

                var oldPos = this.extractCommon(
                  bestPath[0],
                  newString,
                  oldString,
                  0
                );

                if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
                  // Identity per the equality and tokenizer
                  return done([
                    {
                      value: this.join(newString),
                      count: newString.length,
                    },
                  ]);
                } // Main worker method. checks all permutations of a given edit length for acceptance.

                function execEditLength() {
                  for (
                    var diagonalPath = -1 * editLength;
                    diagonalPath <= editLength;
                    diagonalPath += 2
                  ) {
                    var basePath =
                      /*istanbul ignore start*/
                      void 0;

                    var addPath = bestPath[diagonalPath - 1],
                      removePath = bestPath[diagonalPath + 1],
                      _oldPos =
                        (removePath ? removePath.newPos : 0) - diagonalPath;

                    if (addPath) {
                      // No one else is going to attempt to use this value, clear it
                      bestPath[diagonalPath - 1] = undefined;
                    }

                    var canAdd = addPath && addPath.newPos + 1 < newLen,
                      canRemove =
                        removePath && 0 <= _oldPos && _oldPos < oldLen;

                    if (!canAdd && !canRemove) {
                      // If this path is a terminal then prune
                      bestPath[diagonalPath] = undefined;
                      continue;
                    } // Select the diagonal that we want to branch from. We select the prior
                    // path whose position in the new string is the farthest from the origin
                    // and does not pass the bounds of the diff graph

                    if (
                      !canAdd ||
                      (canRemove && addPath.newPos < removePath.newPos)
                    ) {
                      basePath = clonePath(removePath);
                      self.pushComponent(basePath.components, undefined, true);
                    } else {
                      basePath = addPath; // No need to clone, we've pulled it from the list

                      basePath.newPos++;
                      self.pushComponent(basePath.components, true, undefined);
                    }

                    _oldPos = self.extractCommon(
                      basePath,
                      newString,
                      oldString,
                      diagonalPath
                    ); // If we have hit the end of both strings, then we are done

                    if (
                      basePath.newPos + 1 >= newLen &&
                      _oldPos + 1 >= oldLen
                    ) {
                      return done(
                        buildValues(
                          self,
                          basePath.components,
                          newString,
                          oldString,
                          self.useLongestToken
                        )
                      );
                    } else {
                      // Otherwise track this path as a potential candidate and continue.
                      bestPath[diagonalPath] = basePath;
                    }
                  }

                  editLength++;
                } // Performs the length of edit iteration. Is a bit fugly as this has to support the
                // sync and async mode which is never fun. Loops over execEditLength until a value
                // is produced.

                if (callback) {
                  (function exec() {
                    setTimeout(function () {
                      // This should not happen, but we want to be safe.

                      /* istanbul ignore next */
                      if (editLength > maxEditLength) {
                        return callback();
                      }

                      if (!execEditLength()) {
                        exec();
                      }
                    }, 0);
                  })();
                } else {
                  while (editLength <= maxEditLength) {
                    var ret = execEditLength();

                    if (ret) {
                      return ret;
                    }
                  }
                }
              },

              /*istanbul ignore start*/

              /*istanbul ignore end*/
              pushComponent: function pushComponent(
                components,
                added,
                removed
              ) {
                var last = components[components.length - 1];

                if (last && last.added === added && last.removed === removed) {
                  // We need to clone here as the component clone operation is just
                  // as shallow array clone
                  components[components.length - 1] = {
                    count: last.count + 1,
                    added: added,
                    removed: removed,
                  };
                } else {
                  components.push({
                    count: 1,
                    added: added,
                    removed: removed,
                  });
                }
              },

              /*istanbul ignore start*/

              /*istanbul ignore end*/
              extractCommon: function extractCommon(
                basePath,
                newString,
                oldString,
                diagonalPath
              ) {
                var newLen = newString.length,
                  oldLen = oldString.length,
                  newPos = basePath.newPos,
                  oldPos = newPos - diagonalPath,
                  commonCount = 0;

                while (
                  newPos + 1 < newLen &&
                  oldPos + 1 < oldLen &&
                  this.equals(newString[newPos + 1], oldString[oldPos + 1])
                ) {
                  newPos++;
                  oldPos++;
                  commonCount++;
                }

                if (commonCount) {
                  basePath.components.push({
                    count: commonCount,
                  });
                }

                basePath.newPos = newPos;
                return oldPos;
              },

              /*istanbul ignore start*/

              /*istanbul ignore end*/
              equals: function equals(left, right) {
                return left === right;
              },

              /*istanbul ignore start*/

              /*istanbul ignore end*/
              removeEmpty: function removeEmpty(array) {
                var ret = [];

                for (var i = 0; i < array.length; i++) {
                  if (array[i]) {
                    ret.push(array[i]);
                  }
                }

                return ret;
              },

              /*istanbul ignore start*/

              /*istanbul ignore end*/
              castInput: function castInput(value) {
                return value;
              },

              /*istanbul ignore start*/

              /*istanbul ignore end*/
              tokenize: function tokenize(value) {
                return value.split("");
              },

              /*istanbul ignore start*/

              /*istanbul ignore end*/
              join: function join(chars) {
                return chars.join("");
              },
            };

            function buildValues(
              diff,
              components,
              newString,
              oldString,
              useLongestToken
            ) {
              var componentPos = 0,
                componentLen = components.length,
                newPos = 0,
                oldPos = 0;

              for (; componentPos < componentLen; componentPos++) {
                var component = components[componentPos];

                if (!component.removed) {
                  if (!component.added && useLongestToken) {
                    var value = newString.slice(
                      newPos,
                      newPos + component.count
                    );
                    value = value.map(function (value, i) {
                      var oldValue = oldString[oldPos + i];
                      return oldValue.length > value.length ? oldValue : value;
                    });
                    component.value = diff.join(value);
                  } else {
                    component.value = diff.join(
                      newString.slice(newPos, newPos + component.count)
                    );
                  }

                  newPos += component.count; // Common case

                  if (!component.added) {
                    oldPos += component.count;
                  }
                } else {
                  component.value = diff.join(
                    oldString.slice(oldPos, oldPos + component.count)
                  );
                  oldPos += component.count; // Reverse add and remove so removes are output first to match common convention
                  // The diffing algorithm is tied to add then remove output and this is the simplest
                  // route to get the desired output with minimal overhead.

                  if (componentPos && components[componentPos - 1].added) {
                    var tmp = components[componentPos - 1];
                    components[componentPos - 1] = components[componentPos];
                    components[componentPos] = tmp;
                  }
                }
              } // Special case handle for when one terminal is ignored. For this case we merge the
              // terminal into the prior string and drop the change.

              var lastComponent = components[componentLen - 1];

              if (
                componentLen > 1 &&
                (lastComponent.added || lastComponent.removed) &&
                diff.equals("", lastComponent.value)
              ) {
                components[componentLen - 2].value += lastComponent.value;
                components.pop();
              }

              return components;
            }

            function clonePath(path) {
              return {
                newPos: path.newPos,
                components: path.components.slice(0),
              };
            }
          });
          unwrapExports(base);

          var character = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.characterDiff = undefined;
            /*istanbul ignore end*/
            exports.diffChars = diffChars;
            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault(base);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/

            var characterDiff =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              (exports.characterDiff = new /*istanbul ignore start*/
              _base2["default"]());

            function diffChars(oldStr, newStr, callback) {
              return characterDiff.diff(oldStr, newStr, callback);
            }
          });
          unwrapExports(character);

          var params = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            /*istanbul ignore end*/
            exports.generateOptions = generateOptions;

            function generateOptions(options, defaults) {
              if (typeof options === "function") {
                defaults.callback = options;
              } else if (options) {
                for (var name in options) {
                  /* istanbul ignore else */
                  if (options.hasOwnProperty(name)) {
                    defaults[name] = options[name];
                  }
                }
              }

              return defaults;
            }
          });
          unwrapExports(params);

          var word = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.wordDiff = undefined;
            /*istanbul ignore end*/
            exports.diffWords = diffWords;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffWordsWithSpace = diffWordsWithSpace;
            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault(base);
            /*istanbul ignore end*/

            /*istanbul ignore start*/

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/
            // Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
            //
            // Ranges and exceptions:
            // Latin-1 Supplement, 0080–00FF
            //  - U+00D7  × Multiplication sign
            //  - U+00F7  ÷ Division sign
            // Latin Extended-A, 0100–017F
            // Latin Extended-B, 0180–024F
            // IPA Extensions, 0250–02AF
            // Spacing Modifier Letters, 02B0–02FF
            //  - U+02C7  ˇ &#711;  Caron
            //  - U+02D8  ˘ &#728;  Breve
            //  - U+02D9  ˙ &#729;  Dot Above
            //  - U+02DA  ˚ &#730;  Ring Above
            //  - U+02DB  ˛ &#731;  Ogonek
            //  - U+02DC  ˜ &#732;  Small Tilde
            //  - U+02DD  ˝ &#733;  Double Acute Accent
            // Latin Extended Additional, 1E00–1EFF

            var extendedWordChars =
              /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
            var reWhitespace = /\S/;
            var wordDiff =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              (exports.wordDiff = new /*istanbul ignore start*/
              _base2["default"]());

            wordDiff.equals = function (left, right) {
              return (
                left === right ||
                (this.options.ignoreWhitespace &&
                  !reWhitespace.test(left) &&
                  !reWhitespace.test(right))
              );
            };

            wordDiff.tokenize = function (value) {
              var tokens = value.split(/(\s+|\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.

              for (var i = 0; i < tokens.length - 1; i++) {
                // If we have an empty string in the next field and we have only word chars before and after, merge
                if (
                  !tokens[i + 1] &&
                  tokens[i + 2] &&
                  extendedWordChars.test(tokens[i]) &&
                  extendedWordChars.test(tokens[i + 2])
                ) {
                  tokens[i] += tokens[i + 2];
                  tokens.splice(i + 1, 2);
                  i--;
                }
              }

              return tokens;
            };

            function diffWords(oldStr, newStr, callback) {
              var options =
                /*istanbul ignore start*/
                (0, params.generateOptions)(
                  /*istanbul ignore end*/
                  callback,
                  {
                    ignoreWhitespace: true,
                  }
                );
              return wordDiff.diff(oldStr, newStr, options);
            }

            function diffWordsWithSpace(oldStr, newStr, callback) {
              return wordDiff.diff(oldStr, newStr, callback);
            }
          });
          unwrapExports(word);

          var line = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.lineDiff = undefined;
            /*istanbul ignore end*/
            exports.diffLines = diffLines;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffTrimmedLines = diffTrimmedLines;
            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault(base);
            /*istanbul ignore end*/

            /*istanbul ignore start*/

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/

            var lineDiff =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              (exports.lineDiff = new /*istanbul ignore start*/
              _base2["default"]());

            lineDiff.tokenize = function (value) {
              var retLines = [],
                linesAndNewlines = value.split(/(\n|\r\n)/); // Ignore the final empty token that occurs if the string ends with a new line

              if (!linesAndNewlines[linesAndNewlines.length - 1]) {
                linesAndNewlines.pop();
              } // Merge the content and line separators into single tokens

              for (var i = 0; i < linesAndNewlines.length; i++) {
                var line = linesAndNewlines[i];

                if (i % 2 && !this.options.newlineIsToken) {
                  retLines[retLines.length - 1] += line;
                } else {
                  if (this.options.ignoreWhitespace) {
                    line = line.trim();
                  }

                  retLines.push(line);
                }
              }

              return retLines;
            };

            function diffLines(oldStr, newStr, callback) {
              return lineDiff.diff(oldStr, newStr, callback);
            }

            function diffTrimmedLines(oldStr, newStr, callback) {
              var options =
                /*istanbul ignore start*/
                (0, params.generateOptions)(
                  /*istanbul ignore end*/
                  callback,
                  {
                    ignoreWhitespace: true,
                  }
                );
              return lineDiff.diff(oldStr, newStr, options);
            }
          });
          unwrapExports(line);

          var sentence = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.sentenceDiff = undefined;
            /*istanbul ignore end*/
            exports.diffSentences = diffSentences;
            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault(base);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/

            var sentenceDiff =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              (exports.sentenceDiff = new /*istanbul ignore start*/
              _base2["default"]());

            sentenceDiff.tokenize = function (value) {
              return value.split(/(\S.+?[.!?])(?=\s+|$)/);
            };

            function diffSentences(oldStr, newStr, callback) {
              return sentenceDiff.diff(oldStr, newStr, callback);
            }
          });
          unwrapExports(sentence);

          var css = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.cssDiff = undefined;
            /*istanbul ignore end*/
            exports.diffCss = diffCss;
            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault(base);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/

            var cssDiff =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              (exports.cssDiff = new /*istanbul ignore start*/
              _base2["default"]());

            cssDiff.tokenize = function (value) {
              return value.split(/([{}:;,]|\s+)/);
            };

            function diffCss(oldStr, newStr, callback) {
              return cssDiff.diff(oldStr, newStr, callback);
            }
          });
          unwrapExports(css);

          function _typeof(obj) {
            if (
              typeof Symbol === "function" &&
              typeof Symbol.iterator === "symbol"
            ) {
              _typeof = function (obj) {
                return typeof obj;
              };
            } else {
              _typeof = function (obj) {
                return obj &&
                  typeof Symbol === "function" &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? "symbol"
                  : typeof obj;
              };
            }

            return _typeof(obj);
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            }

            subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true,
                },
              }
            );
            if (superClass) _setPrototypeOf(subClass, superClass);
          }

          function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf
              ? Object.getPrototypeOf
              : function _getPrototypeOf(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                };
            return _getPrototypeOf(o);
          }

          function _setPrototypeOf(o, p) {
            _setPrototypeOf =
              Object.setPrototypeOf ||
              function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

            return _setPrototypeOf(o, p);
          }

          function isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;

            try {
              Date.prototype.toString.call(
                Reflect.construct(Date, [], function () {})
              );
              return true;
            } catch (e) {
              return false;
            }
          }

          function _construct(Parent, args, Class) {
            if (isNativeReflectConstruct()) {
              _construct = Reflect.construct;
            } else {
              _construct = function _construct(Parent, args, Class) {
                var a = [null];
                a.push.apply(a, args);
                var Constructor = Function.bind.apply(Parent, a);
                var instance = new Constructor();
                if (Class) _setPrototypeOf(instance, Class.prototype);
                return instance;
              };
            }

            return _construct.apply(null, arguments);
          }

          function _isNativeFunction(fn) {
            return Function.toString.call(fn).indexOf("[native code]") !== -1;
          }

          function _wrapNativeSuper(Class) {
            var _cache = typeof Map === "function" ? new Map() : undefined;

            _wrapNativeSuper = function _wrapNativeSuper(Class) {
              if (Class === null || !_isNativeFunction(Class)) return Class;

              if (typeof Class !== "function") {
                throw new TypeError(
                  "Super expression must either be null or a function"
                );
              }

              if (typeof _cache !== "undefined") {
                if (_cache.has(Class)) return _cache.get(Class);

                _cache.set(Class, Wrapper);
              }

              function Wrapper() {
                return _construct(
                  Class,
                  arguments,
                  _getPrototypeOf(this).constructor
                );
              }

              Wrapper.prototype = Object.create(Class.prototype, {
                constructor: {
                  value: Wrapper,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                },
              });
              return _setPrototypeOf(Wrapper, Class);
            };

            return _wrapNativeSuper(Class);
          }

          function _assertThisInitialized(self) {
            if (self === void 0) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return self;
          }

          function _possibleConstructorReturn(self, call) {
            if (
              call &&
              (typeof call === "object" || typeof call === "function")
            ) {
              return call;
            }

            return _assertThisInitialized(self);
          }

          function _superPropBase(object, property) {
            while (!Object.prototype.hasOwnProperty.call(object, property)) {
              object = _getPrototypeOf(object);
              if (object === null) break;
            }

            return object;
          }

          function _get(target, property, receiver) {
            if (typeof Reflect !== "undefined" && Reflect.get) {
              _get = Reflect.get;
            } else {
              _get = function _get(target, property, receiver) {
                var base = _superPropBase(target, property);

                if (!base) return;
                var desc = Object.getOwnPropertyDescriptor(base, property);

                if (desc.get) {
                  return desc.get.call(receiver);
                }

                return desc.value;
              };
            }

            return _get(target, property, receiver || target);
          }

          function _taggedTemplateLiteral(strings, raw) {
            if (!raw) {
              raw = strings.slice(0);
            }

            return Object.freeze(
              Object.defineProperties(strings, {
                raw: {
                  value: Object.freeze(raw),
                },
              })
            );
          }

          function _slicedToArray(arr, i) {
            return (
              _arrayWithHoles(arr) ||
              _iterableToArrayLimit(arr, i) ||
              _nonIterableRest()
            );
          }

          function _toArray(arr) {
            return (
              _arrayWithHoles(arr) ||
              _iterableToArray(arr) ||
              _nonIterableRest()
            );
          }

          function _toConsumableArray(arr) {
            return (
              _arrayWithoutHoles(arr) ||
              _iterableToArray(arr) ||
              _nonIterableSpread()
            );
          }

          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) {
              for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)
                arr2[i] = arr[i];

              return arr2;
            }
          }

          function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          }

          function _iterableToArray(iter) {
            if (
              Symbol.iterator in Object(iter) ||
              Object.prototype.toString.call(iter) === "[object Arguments]"
            )
              return Array.from(iter);
          }

          function _iterableToArrayLimit(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
              for (
                var _i = arr[Symbol.iterator](), _s;
                !(_n = (_s = _i.next()).done);
                _n = true
              ) {
                _arr.push(_s.value);

                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"] != null) _i["return"]();
              } finally {
                if (_d) throw _e;
              }
            }

            return _arr;
          }

          function _nonIterableSpread() {
            throw new TypeError(
              "Invalid attempt to spread non-iterable instance"
            );
          }

          function _nonIterableRest() {
            throw new TypeError(
              "Invalid attempt to destructure non-iterable instance"
            );
          }

          function _toPrimitive(input, hint) {
            if (typeof input !== "object" || input === null) return input;
            var prim = input[Symbol.toPrimitive];

            if (prim !== undefined) {
              var res = prim.call(input, hint || "default");
              if (typeof res !== "object") return res;
              throw new TypeError(
                "@@toPrimitive must return a primitive value."
              );
            }

            return (hint === "string" ? String : Number)(input);
          }

          function _toPropertyKey(arg) {
            var key = _toPrimitive(arg, "string");

            return typeof key === "symbol" ? key : String(key);
          }

          function _addElementPlacement(element, placements, silent) {
            var keys = placements[element.placement];

            if (!silent && keys.indexOf(element.key) !== -1) {
              throw new TypeError("Duplicated element (" + element.key + ")");
            }

            keys.push(element.key);
          }

          function _fromElementDescriptor(element) {
            var obj = {
              kind: element.kind,
              key: element.key,
              placement: element.placement,
              descriptor: element.descriptor,
            };
            var desc = {
              value: "Descriptor",
              configurable: true,
            };
            Object.defineProperty(obj, Symbol.toStringTag, desc);
            if (element.kind === "field") obj.initializer = element.initializer;
            return obj;
          }

          function _toElementDescriptors(elementObjects) {
            if (elementObjects === undefined) return;
            return _toArray(elementObjects).map(function (elementObject) {
              var element = _toElementDescriptor(elementObject);

              _disallowProperty(
                elementObject,
                "finisher",
                "An element descriptor"
              );

              _disallowProperty(
                elementObject,
                "extras",
                "An element descriptor"
              );

              return element;
            });
          }

          function _toElementDescriptor(elementObject) {
            var kind = String(elementObject.kind);

            if (kind !== "method" && kind !== "field") {
              throw new TypeError(
                'An element descriptor\'s .kind property must be either "method" or' +
                  ' "field", but a decorator created an element descriptor with' +
                  ' .kind "' +
                  kind +
                  '"'
              );
            }

            var key = _toPropertyKey(elementObject.key);

            var placement = String(elementObject.placement);

            if (
              placement !== "static" &&
              placement !== "prototype" &&
              placement !== "own"
            ) {
              throw new TypeError(
                'An element descriptor\'s .placement property must be one of "static",' +
                  ' "prototype" or "own", but a decorator created an element descriptor' +
                  ' with .placement "' +
                  placement +
                  '"'
              );
            }

            var descriptor = elementObject.descriptor;

            _disallowProperty(
              elementObject,
              "elements",
              "An element descriptor"
            );

            var element = {
              kind: kind,
              key: key,
              placement: placement,
              descriptor: Object.assign({}, descriptor),
            };

            if (kind !== "field") {
              _disallowProperty(
                elementObject,
                "initializer",
                "A method descriptor"
              );
            } else {
              _disallowProperty(
                descriptor,
                "get",
                "The property descriptor of a field descriptor"
              );

              _disallowProperty(
                descriptor,
                "set",
                "The property descriptor of a field descriptor"
              );

              _disallowProperty(
                descriptor,
                "value",
                "The property descriptor of a field descriptor"
              );

              element.initializer = elementObject.initializer;
            }

            return element;
          }

          function _toElementFinisherExtras(elementObject) {
            var element = _toElementDescriptor(elementObject);

            var finisher = _optionalCallableProperty(elementObject, "finisher");

            var extras = _toElementDescriptors(elementObject.extras);

            return {
              element: element,
              finisher: finisher,
              extras: extras,
            };
          }

          function _fromClassDescriptor(elements) {
            var obj = {
              kind: "class",
              elements: elements.map(_fromElementDescriptor),
            };
            var desc = {
              value: "Descriptor",
              configurable: true,
            };
            Object.defineProperty(obj, Symbol.toStringTag, desc);
            return obj;
          }

          function _toClassDescriptor(obj) {
            var kind = String(obj.kind);

            if (kind !== "class") {
              throw new TypeError(
                'A class descriptor\'s .kind property must be "class", but a decorator' +
                  ' created a class descriptor with .kind "' +
                  kind +
                  '"'
              );
            }

            _disallowProperty(obj, "key", "A class descriptor");

            _disallowProperty(obj, "placement", "A class descriptor");

            _disallowProperty(obj, "descriptor", "A class descriptor");

            _disallowProperty(obj, "initializer", "A class descriptor");

            _disallowProperty(obj, "extras", "A class descriptor");

            var finisher = _optionalCallableProperty(obj, "finisher");

            var elements = _toElementDescriptors(obj.elements);

            return {
              elements: elements,
              finisher: finisher,
            };
          }

          function _disallowProperty(obj, name, objectType) {
            if (obj[name] !== undefined) {
              throw new TypeError(
                objectType + " can't have a ." + name + " property."
              );
            }
          }

          function _optionalCallableProperty(obj, name) {
            var value = obj[name];

            if (value !== undefined && typeof value !== "function") {
              throw new TypeError("Expected '" + name + "' to be a function");
            }

            return value;
          }

          var json = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.jsonDiff = undefined;

            var _typeof$$1 =
              typeof Symbol === "function" &&
              _typeof(Symbol.iterator) === "symbol"
                ? function (obj) {
                    return _typeof(obj);
                  }
                : function (obj) {
                    return obj &&
                      typeof Symbol === "function" &&
                      obj.constructor === Symbol
                      ? "symbol"
                      : _typeof(obj);
                  };

            /*istanbul ignore end*/
            exports.diffJson = diffJson;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.canonicalize = canonicalize;
            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault$$1(base);
            /*istanbul ignore end*/

            /*istanbul ignore start*/

            function _interopRequireDefault$$1(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/

            var objectPrototypeToString = Object.prototype.toString;
            var jsonDiff =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              (exports.jsonDiff = new /*istanbul ignore start*/
              _base2["default"]()); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
            // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:

            jsonDiff.useLongestToken = true;
            jsonDiff.tokenize =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              line.lineDiff.tokenize;

            jsonDiff.castInput = function (value) {
              /*istanbul ignore start*/
              var /*istanbul ignore end*/
                undefinedReplacement = this.options.undefinedReplacement;
              return typeof value === "string"
                ? value
                : JSON.stringify(
                    canonicalize(value),
                    function (k, v) {
                      if (typeof v === "undefined") {
                        return undefinedReplacement;
                      }

                      return v;
                    },
                    "  "
                  );
            };

            jsonDiff.equals = function (left, right) {
              return (
                /*istanbul ignore start*/
                _base2["default"] /*istanbul ignore end*/.prototype
                  .equals(
                    left.replace(/,([\r\n])/g, "$1"),
                    right.replace(/,([\r\n])/g, "$1")
                  )
              );
            };

            function diffJson(oldObj, newObj, options) {
              return jsonDiff.diff(oldObj, newObj, options);
            } // This function handles the presence of circular references by bailing out when encountering an
            // object that is already on the "stack" of items being processed.

            function canonicalize(obj, stack, replacementStack) {
              stack = stack || [];
              replacementStack = replacementStack || [];
              var i =
                /*istanbul ignore start*/
                void 0;

              for (i = 0; i < stack.length; i += 1) {
                if (stack[i] === obj) {
                  return replacementStack[i];
                }
              }

              var canonicalizedObj =
                /*istanbul ignore start*/
                void 0;

              if ("[object Array]" === objectPrototypeToString.call(obj)) {
                stack.push(obj);
                canonicalizedObj = new Array(obj.length);
                replacementStack.push(canonicalizedObj);

                for (i = 0; i < obj.length; i += 1) {
                  canonicalizedObj[i] = canonicalize(
                    obj[i],
                    stack,
                    replacementStack
                  );
                }

                stack.pop();
                replacementStack.pop();
                return canonicalizedObj;
              }

              if (obj && obj.toJSON) {
                obj = obj.toJSON();
              }

              if (
                /*istanbul ignore start*/
                (typeof (
                  /*istanbul ignore end*/
                  obj
                ) === "undefined"
                  ? "undefined"
                  : _typeof$$1(obj)) === "object" &&
                obj !== null
              ) {
                stack.push(obj);
                canonicalizedObj = {};
                replacementStack.push(canonicalizedObj);
                var sortedKeys = [],
                  key =
                    /*istanbul ignore start*/
                    void 0;

                for (key in obj) {
                  /* istanbul ignore else */
                  if (obj.hasOwnProperty(key)) {
                    sortedKeys.push(key);
                  }
                }

                sortedKeys.sort();

                for (i = 0; i < sortedKeys.length; i += 1) {
                  key = sortedKeys[i];
                  canonicalizedObj[key] = canonicalize(
                    obj[key],
                    stack,
                    replacementStack
                  );
                }

                stack.pop();
                replacementStack.pop();
              } else {
                canonicalizedObj = obj;
              }

              return canonicalizedObj;
            }
          });
          unwrapExports(json);

          var array = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.arrayDiff = undefined;
            /*istanbul ignore end*/
            exports.diffArrays = diffArrays;
            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault(base);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/

            var arrayDiff =
              /*istanbul ignore start*/
              /*istanbul ignore end*/
              (exports.arrayDiff = new /*istanbul ignore start*/
              _base2["default"]());

            arrayDiff.tokenize = arrayDiff.join = function (value) {
              return value.slice();
            };

            function diffArrays(oldArr, newArr, callback) {
              return arrayDiff.diff(oldArr, newArr, callback);
            }
          });
          unwrapExports(array);

          var parse = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            /*istanbul ignore end*/
            exports.parsePatch = parsePatch;

            function parsePatch(uniDiff) {
              /*istanbul ignore start*/
              var /*istanbul ignore end*/
                options =
                  arguments.length <= 1 || arguments[1] === undefined
                    ? {}
                    : arguments[1];
              var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/),
                delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [],
                list = [],
                i = 0;

              function parseIndex() {
                var index = {};
                list.push(index); // Parse diff metadata

                while (i < diffstr.length) {
                  var line = diffstr[i]; // File header found, end parsing diff metadata

                  if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
                    break;
                  } // Diff index

                  var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(
                    line
                  );

                  if (header) {
                    index.index = header[1];
                  }

                  i++;
                } // Parse file headers if they are defined. Unified diff requires them, but
                // there's no technical issues to have an isolated hunk without file header

                parseFileHeader(index);
                parseFileHeader(index); // Parse hunks

                index.hunks = [];

                while (i < diffstr.length) {
                  var _line = diffstr[i];

                  if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
                    break;
                  } else if (/^@@/.test(_line)) {
                    index.hunks.push(parseHunk());
                  } else if (_line && options.strict) {
                    // Ignore unexpected content unless in strict mode
                    throw new Error(
                      "Unknown line " + (i + 1) + " " + JSON.stringify(_line)
                    );
                  } else {
                    i++;
                  }
                }
              } // Parses the --- and +++ headers, if none are found, no lines
              // are consumed.

              function parseFileHeader(index) {
                var headerPattern = /^(---|\+\+\+)\s+([\S ]*)(?:\t(.*?)\s*)?$/;
                var fileHeader = headerPattern.exec(diffstr[i]);

                if (fileHeader) {
                  var keyPrefix = fileHeader[1] === "---" ? "old" : "new";
                  index[keyPrefix + "FileName"] = fileHeader[2];
                  index[keyPrefix + "Header"] = fileHeader[3];
                  i++;
                }
              } // Parses a hunk
              // This assumes that we are at the start of a hunk.

              function parseHunk() {
                var chunkHeaderIndex = i,
                  chunkHeaderLine = diffstr[i++],
                  chunkHeader = chunkHeaderLine.split(
                    /@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/
                  );
                var hunk = {
                  oldStart: +chunkHeader[1],
                  oldLines: +chunkHeader[2] || 1,
                  newStart: +chunkHeader[3],
                  newLines: +chunkHeader[4] || 1,
                  lines: [],
                  linedelimiters: [],
                };
                var addCount = 0,
                  removeCount = 0;

                for (; i < diffstr.length; i++) {
                  // Lines starting with '---' could be mistaken for the "remove line" operation
                  // But they could be the header for the next file. Therefore prune such cases out.
                  if (
                    diffstr[i].indexOf("--- ") === 0 &&
                    i + 2 < diffstr.length &&
                    diffstr[i + 1].indexOf("+++ ") === 0 &&
                    diffstr[i + 2].indexOf("@@") === 0
                  ) {
                    break;
                  }

                  var operation = diffstr[i][0];

                  if (
                    operation === "+" ||
                    operation === "-" ||
                    operation === " " ||
                    operation === "\\"
                  ) {
                    hunk.lines.push(diffstr[i]);
                    hunk.linedelimiters.push(delimiters[i] || "\n");

                    if (operation === "+") {
                      addCount++;
                    } else if (operation === "-") {
                      removeCount++;
                    } else if (operation === " ") {
                      addCount++;
                      removeCount++;
                    }
                  } else {
                    break;
                  }
                } // Handle the empty block count case

                if (!addCount && hunk.newLines === 1) {
                  hunk.newLines = 0;
                }

                if (!removeCount && hunk.oldLines === 1) {
                  hunk.oldLines = 0;
                } // Perform optional sanity checking

                if (options.strict) {
                  if (addCount !== hunk.newLines) {
                    throw new Error(
                      "Added line count did not match for hunk at line " +
                        (chunkHeaderIndex + 1)
                    );
                  }

                  if (removeCount !== hunk.oldLines) {
                    throw new Error(
                      "Removed line count did not match for hunk at line " +
                        (chunkHeaderIndex + 1)
                    );
                  }
                }

                return hunk;
              }

              while (i < diffstr.length) {
                parseIndex();
              }

              return list;
            }
          });
          unwrapExports(parse);

          var distanceIterator = createCommonjsModule(function (
            module,
            exports
          ) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;

            exports["default"] =
              /*istanbul ignore end*/
              function (start, minLine, maxLine) {
                var wantForward = true,
                  backwardExhausted = false,
                  forwardExhausted = false,
                  localOffset = 1;
                return function iterator() {
                  if (wantForward && !forwardExhausted) {
                    if (backwardExhausted) {
                      localOffset++;
                    } else {
                      wantForward = false;
                    } // Check if trying to fit beyond text length, and if not, check it fits
                    // after offset location (or desired location on first iteration)

                    if (start + localOffset <= maxLine) {
                      return localOffset;
                    }

                    forwardExhausted = true;
                  }

                  if (!backwardExhausted) {
                    if (!forwardExhausted) {
                      wantForward = true;
                    } // Check if trying to fit before text beginning, and if not, check it fits
                    // before offset location

                    if (minLine <= start - localOffset) {
                      return -localOffset++;
                    }

                    backwardExhausted = true;
                    return iterator();
                  } // We tried to fit hunk before text beginning and beyond text lenght, then
                  // hunk can't fit on the text. Return undefined
                };
              };
          });
          unwrapExports(distanceIterator);

          var apply = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            /*istanbul ignore end*/
            exports.applyPatch = applyPatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.applyPatches = applyPatches;
            /*istanbul ignore start*/

            var _distanceIterator2 = _interopRequireDefault(distanceIterator);

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /*istanbul ignore end*/

            function applyPatch(source, uniDiff) {
              /*istanbul ignore start*/
              var /*istanbul ignore end*/
                options =
                  arguments.length <= 2 || arguments[2] === undefined
                    ? {}
                    : arguments[2];

              if (typeof uniDiff === "string") {
                uniDiff =
                  /*istanbul ignore start*/
                  (0, parse.parsePatch)(
                    /*istanbul ignore end*/
                    uniDiff
                  );
              }

              if (Array.isArray(uniDiff)) {
                if (uniDiff.length > 1) {
                  throw new Error("applyPatch only works with a single input.");
                }

                uniDiff = uniDiff[0];
              } // Apply the diff to the input

              var lines = source.split(/\r\n|[\n\v\f\r\x85]/),
                delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [],
                hunks = uniDiff.hunks,
                compareLine =
                  options.compareLine ||
                  function (
                    lineNumber,
                    line,
                    operation,
                    patchContent /*istanbul ignore start*/
                  ) {
                    return (
                      /*istanbul ignore end*/
                      line === patchContent
                    );
                  },
                errorCount = 0,
                fuzzFactor = options.fuzzFactor || 0,
                minLine = 0,
                offset = 0,
                removeEOFNL =
                  /*istanbul ignore start*/
                  void 0,
                /*istanbul ignore end*/
                addEOFNL =
                  /*istanbul ignore start*/
                  void 0;
              /**
               * Checks if the hunk exactly fits on the provided location
               */

              function hunkFits(hunk, toPos) {
                for (var j = 0; j < hunk.lines.length; j++) {
                  var line = hunk.lines[j],
                    operation = line[0],
                    content = line.substr(1);

                  if (operation === " " || operation === "-") {
                    // Context sanity check
                    if (
                      !compareLine(toPos + 1, lines[toPos], operation, content)
                    ) {
                      errorCount++;

                      if (errorCount > fuzzFactor) {
                        return false;
                      }
                    }

                    toPos++;
                  }
                }

                return true;
              } // Search best fit offsets for each hunk based on the previous ones

              for (var i = 0; i < hunks.length; i++) {
                var hunk = hunks[i],
                  maxLine = lines.length - hunk.oldLines,
                  localOffset = 0,
                  toPos = offset + hunk.oldStart - 1;
                var iterator =
                  /*istanbul ignore start*/
                  (0, _distanceIterator2["default"])(
                    /*istanbul ignore end*/
                    toPos,
                    minLine,
                    maxLine
                  );

                for (; localOffset !== undefined; localOffset = iterator()) {
                  if (hunkFits(hunk, toPos + localOffset)) {
                    hunk.offset = offset += localOffset;
                    break;
                  }
                }

                if (localOffset === undefined) {
                  return false;
                } // Set lower text limit to end of the current hunk, so next ones don't try
                // to fit over already patched text

                minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
              } // Apply patch hunks

              for (var _i = 0; _i < hunks.length; _i++) {
                var _hunk = hunks[_i],
                  _toPos = _hunk.offset + _hunk.newStart - 1;

                if (_hunk.newLines == 0) {
                  _toPos++;
                }

                for (var j = 0; j < _hunk.lines.length; j++) {
                  var line = _hunk.lines[j],
                    operation = line[0],
                    content = line.substr(1),
                    delimiter = _hunk.linedelimiters[j];

                  if (operation === " ") {
                    _toPos++;
                  } else if (operation === "-") {
                    lines.splice(_toPos, 1);
                    delimiters.splice(_toPos, 1);
                    /* istanbul ignore else */
                  } else if (operation === "+") {
                    lines.splice(_toPos, 0, content);
                    delimiters.splice(_toPos, 0, delimiter);
                    _toPos++;
                  } else if (operation === "\\") {
                    var previousOperation = _hunk.lines[j - 1]
                      ? _hunk.lines[j - 1][0]
                      : null;

                    if (previousOperation === "+") {
                      removeEOFNL = true;
                    } else if (previousOperation === "-") {
                      addEOFNL = true;
                    }
                  }
                }
              } // Handle EOFNL insertion/removal

              if (removeEOFNL) {
                while (!lines[lines.length - 1]) {
                  lines.pop();
                  delimiters.pop();
                }
              } else if (addEOFNL) {
                lines.push("");
                delimiters.push("\n");
              }

              for (var _k = 0; _k < lines.length - 1; _k++) {
                lines[_k] = lines[_k] + delimiters[_k];
              }

              return lines.join("");
            } // Wrapper that supports multiple file patches via callbacks.

            function applyPatches(uniDiff, options) {
              if (typeof uniDiff === "string") {
                uniDiff =
                  /*istanbul ignore start*/
                  (0, parse.parsePatch)(
                    /*istanbul ignore end*/
                    uniDiff
                  );
              }

              var currentIndex = 0;

              function processIndex() {
                var index = uniDiff[currentIndex++];

                if (!index) {
                  return options.complete();
                }

                options.loadFile(index, function (err, data) {
                  if (err) {
                    return options.complete(err);
                  }

                  var updatedContent = applyPatch(data, index, options);
                  options.patched(index, updatedContent, function (err) {
                    if (err) {
                      return options.complete(err);
                    }

                    processIndex();
                  });
                });
              }

              processIndex();
            }
          });
          unwrapExports(apply);

          var create = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            /*istanbul ignore end*/
            exports.structuredPatch = structuredPatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.createTwoFilesPatch = createTwoFilesPatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.createPatch = createPatch;
            /*istanbul ignore start*/

            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }

                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            /*istanbul ignore end*/

            function structuredPatch(
              oldFileName,
              newFileName,
              oldStr,
              newStr,
              oldHeader,
              newHeader,
              options
            ) {
              if (!options) {
                options = {};
              }

              if (typeof options.context === "undefined") {
                options.context = 4;
              }

              var diff =
                /*istanbul ignore start*/
                (0, line.diffLines)(
                  /*istanbul ignore end*/
                  oldStr,
                  newStr,
                  options
                );
              diff.push({
                value: "",
                lines: [],
              }); // Append an empty value to make cleanup easier

              function contextLines(lines) {
                return lines.map(function (entry) {
                  return " " + entry;
                });
              }

              var hunks = [];
              var oldRangeStart = 0,
                newRangeStart = 0,
                curRange = [],
                oldLine = 1,
                newLine = 1;
              /*istanbul ignore start*/

              var _loop = function _loop(
                /*istanbul ignore end*/
                i
              ) {
                var current = diff[i],
                  lines =
                    current.lines ||
                    current.value.replace(/\n$/, "").split("\n");
                current.lines = lines;

                if (current.added || current.removed) {
                  /*istanbul ignore start*/
                  var _curRange;
                  /*istanbul ignore end*/
                  // If we have previous context, start with that

                  if (!oldRangeStart) {
                    var prev = diff[i - 1];
                    oldRangeStart = oldLine;
                    newRangeStart = newLine;

                    if (prev) {
                      curRange =
                        options.context > 0
                          ? contextLines(prev.lines.slice(-options.context))
                          : [];
                      oldRangeStart -= curRange.length;
                      newRangeStart -= curRange.length;
                    }
                  } // Output our changes

                  /*istanbul ignore start*/

                  (_curRange =
                    /*istanbul ignore end*/
                    curRange).push
                    /*istanbul ignore start*/
                    .apply(
                      /*istanbul ignore end*/
                      /*istanbul ignore start*/
                      _curRange,
                      /*istanbul ignore end*/
                      /*istanbul ignore start*/
                      _toConsumableArray(
                        /*istanbul ignore end*/
                        lines.map(function (entry) {
                          return (current.added ? "+" : "-") + entry;
                        })
                      )
                    ); // Track the updated file position

                  if (current.added) {
                    newLine += lines.length;
                  } else {
                    oldLine += lines.length;
                  }
                } else {
                  // Identical context lines. Track line changes
                  if (oldRangeStart) {
                    // Close out any changes that have been output (or join overlapping)
                    if (
                      lines.length <= options.context * 2 &&
                      i < diff.length - 2
                    ) {
                      /*istanbul ignore start*/
                      var _curRange2;
                      /*istanbul ignore end*/
                      // Overlapping

                      /*istanbul ignore start*/

                      (_curRange2 =
                        /*istanbul ignore end*/
                        curRange).push
                        /*istanbul ignore start*/
                        .apply(
                          /*istanbul ignore end*/
                          /*istanbul ignore start*/
                          _curRange2,
                          /*istanbul ignore end*/
                          /*istanbul ignore start*/
                          _toConsumableArray(
                            /*istanbul ignore end*/
                            contextLines(lines)
                          )
                        );
                    } else {
                      /*istanbul ignore start*/
                      var _curRange3;
                      /*istanbul ignore end*/
                      // end the range and output

                      var contextSize = Math.min(lines.length, options.context);
                      /*istanbul ignore start*/

                      (_curRange3 =
                        /*istanbul ignore end*/
                        curRange).push
                        /*istanbul ignore start*/
                        .apply(
                          /*istanbul ignore end*/
                          /*istanbul ignore start*/
                          _curRange3,
                          /*istanbul ignore end*/
                          /*istanbul ignore start*/
                          _toConsumableArray(
                            /*istanbul ignore end*/
                            contextLines(lines.slice(0, contextSize))
                          )
                        );

                      var hunk = {
                        oldStart: oldRangeStart,
                        oldLines: oldLine - oldRangeStart + contextSize,
                        newStart: newRangeStart,
                        newLines: newLine - newRangeStart + contextSize,
                        lines: curRange,
                      };

                      if (
                        i >= diff.length - 2 &&
                        lines.length <= options.context
                      ) {
                        // EOF is inside this hunk
                        var oldEOFNewline = /\n$/.test(oldStr);
                        var newEOFNewline = /\n$/.test(newStr);

                        if (lines.length == 0 && !oldEOFNewline) {
                          // special case: old has no eol and no trailing context; no-nl can end up before adds
                          curRange.splice(
                            hunk.oldLines,
                            0,
                            "\\ No newline at end of file"
                          );
                        } else if (!oldEOFNewline || !newEOFNewline) {
                          curRange.push("\\ No newline at end of file");
                        }
                      }

                      hunks.push(hunk);
                      oldRangeStart = 0;
                      newRangeStart = 0;
                      curRange = [];
                    }
                  }

                  oldLine += lines.length;
                  newLine += lines.length;
                }
              };

              for (var i = 0; i < diff.length; i++) {
                /*istanbul ignore start*/
                _loop(
                  /*istanbul ignore end*/
                  i
                );
              }

              return {
                oldFileName: oldFileName,
                newFileName: newFileName,
                oldHeader: oldHeader,
                newHeader: newHeader,
                hunks: hunks,
              };
            }

            function createTwoFilesPatch(
              oldFileName,
              newFileName,
              oldStr,
              newStr,
              oldHeader,
              newHeader,
              options
            ) {
              var diff = structuredPatch(
                oldFileName,
                newFileName,
                oldStr,
                newStr,
                oldHeader,
                newHeader,
                options
              );
              var ret = [];

              if (oldFileName == newFileName) {
                ret.push("Index: " + oldFileName);
              }

              ret.push(
                "==================================================================="
              );
              ret.push(
                "--- " +
                  diff.oldFileName +
                  (typeof diff.oldHeader === "undefined"
                    ? ""
                    : "\t" + diff.oldHeader)
              );
              ret.push(
                "+++ " +
                  diff.newFileName +
                  (typeof diff.newHeader === "undefined"
                    ? ""
                    : "\t" + diff.newHeader)
              );

              for (var i = 0; i < diff.hunks.length; i++) {
                var hunk = diff.hunks[i];
                ret.push(
                  "@@ -" +
                    hunk.oldStart +
                    "," +
                    hunk.oldLines +
                    " +" +
                    hunk.newStart +
                    "," +
                    hunk.newLines +
                    " @@"
                );
                ret.push.apply(ret, hunk.lines);
              }

              return ret.join("\n") + "\n";
            }

            function createPatch(
              fileName,
              oldStr,
              newStr,
              oldHeader,
              newHeader,
              options
            ) {
              return createTwoFilesPatch(
                fileName,
                fileName,
                oldStr,
                newStr,
                oldHeader,
                newHeader,
                options
              );
            }
          });
          unwrapExports(create);

          var dmp = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            /*istanbul ignore end*/
            exports.convertChangesToDMP = convertChangesToDMP; // See: http://code.google.com/p/google-diff-match-patch/wiki/API

            function convertChangesToDMP(changes) {
              var ret = [],
                change =
                  /*istanbul ignore start*/
                  void 0,
                /*istanbul ignore end*/
                operation =
                  /*istanbul ignore start*/
                  void 0;

              for (var i = 0; i < changes.length; i++) {
                change = changes[i];

                if (change.added) {
                  operation = 1;
                } else if (change.removed) {
                  operation = -1;
                } else {
                  operation = 0;
                }

                ret.push([operation, change.value]);
              }

              return ret;
            }
          });
          unwrapExports(dmp);

          var xml = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            /*istanbul ignore end*/
            exports.convertChangesToXML = convertChangesToXML;

            function convertChangesToXML(changes) {
              var ret = [];

              for (var i = 0; i < changes.length; i++) {
                var change = changes[i];

                if (change.added) {
                  ret.push("<ins>");
                } else if (change.removed) {
                  ret.push("<del>");
                }

                ret.push(escapeHTML(change.value));

                if (change.added) {
                  ret.push("</ins>");
                } else if (change.removed) {
                  ret.push("</del>");
                }
              }

              return ret.join("");
            }

            function escapeHTML(s) {
              var n = s;
              n = n.replace(/&/g, "&amp;");
              n = n.replace(/</g, "&lt;");
              n = n.replace(/>/g, "&gt;");
              n = n.replace(/"/g, "&quot;");
              return n;
            }
          });
          unwrapExports(xml);

          var lib = createCommonjsModule(function (module, exports) {
            /*istanbul ignore start*/
            "use strict";

            exports.__esModule = true;
            exports.canonicalize =
              exports.convertChangesToXML =
              exports.convertChangesToDMP =
              exports.parsePatch =
              exports.applyPatches =
              exports.applyPatch =
              exports.createPatch =
              exports.createTwoFilesPatch =
              exports.structuredPatch =
              exports.diffArrays =
              exports.diffJson =
              exports.diffCss =
              exports.diffSentences =
              exports.diffTrimmedLines =
              exports.diffLines =
              exports.diffWordsWithSpace =
              exports.diffWords =
              exports.diffChars =
              exports.Diff =
                undefined;
            /*istanbul ignore end*/

            /*istanbul ignore start*/

            var _base2 = _interopRequireDefault(base);
            /*istanbul ignore end*/

            /*istanbul ignore start*/

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }

            /*istanbul ignore end*/
            exports.Diff = _base2["default"];
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffChars = character.diffChars;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffWords = word.diffWords;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffWordsWithSpace = word.diffWordsWithSpace;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffLines = line.diffLines;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffTrimmedLines = line.diffTrimmedLines;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffSentences = sentence.diffSentences;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffCss = css.diffCss;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffJson = json.diffJson;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.diffArrays = array.diffArrays;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.structuredPatch = create.structuredPatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.createTwoFilesPatch = create.createTwoFilesPatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.createPatch = create.createPatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.applyPatch = apply.applyPatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.applyPatches = apply.applyPatches;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.parsePatch = parse.parsePatch;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.convertChangesToDMP = dmp.convertChangesToDMP;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.convertChangesToXML = xml.convertChangesToXML;
            /*istanbul ignore start*/

            /*istanbul ignore end*/
            exports.canonicalize = json.canonicalize;
            /* See LICENSE file for terms of use */

            /*
             * Text diff implementation.
             *
             * This library supports the following APIS:
             * JsDiff.diffChars: Character by character diff
             * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
             * JsDiff.diffLines: Line based diff
             *
             * JsDiff.diffCss: Diff targeted at CSS content
             *
             * These methods are based on the implementation proposed in
             * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
             * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
             */
          });
          unwrapExports(lib);

          var _shim_fs = {};

          var _shim_fs$1 = Object.freeze({
            default: _shim_fs,
          });

          /*!
           * normalize-path <https://github.com/jonschlinkert/normalize-path>
           *
           * Copyright (c) 2014-2018, Jon Schlinkert.
           * Released under the MIT License.
           */
          var normalizePath = function normalizePath(path, stripTrailing) {
            if (typeof path !== "string") {
              throw new TypeError("expected path to be a string");
            }

            if (path === "\\" || path === "/") return "/";
            var len = path.length;
            if (len <= 1) return path; // ensure that win32 namespaces has two leading slashes, so that the path is
            // handled properly by the win32 version of path.parse() after being normalized
            // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces

            var prefix = "";

            if (len > 4 && path[3] === "\\") {
              var ch = path[2];

              if ((ch === "?" || ch === ".") && path.slice(0, 2) === "\\\\") {
                path = path.slice(2);
                prefix = "//";
              }
            }

            var segs = path.split(/[/\\]+/);

            if (stripTrailing !== false && segs[segs.length - 1] === "") {
              segs.pop();
            }

            return prefix + segs.join("/");
          };

          var global$1 =
            typeof global !== "undefined"
              ? global
              : typeof self !== "undefined"
              ? self
              : typeof window !== "undefined"
              ? window
              : {};

          var lookup = [];
          var revLookup = [];
          var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
          var inited = false;

          function init() {
            inited = true;
            var code =
              "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

            for (var i = 0, len = code.length; i < len; ++i) {
              lookup[i] = code[i];
              revLookup[code.charCodeAt(i)] = i;
            }

            revLookup["-".charCodeAt(0)] = 62;
            revLookup["_".charCodeAt(0)] = 63;
          }

          function toByteArray(b64) {
            if (!inited) {
              init();
            }

            var i, j, l, tmp, placeHolders, arr;
            var len = b64.length;

            if (len % 4 > 0) {
              throw new Error("Invalid string. Length must be a multiple of 4");
            } // the number of equal signs (place holders)
            // if there are two placeholders, than the two characters before it
            // represent one byte
            // if there is only one, then the three characters before it represent 2 bytes
            // this is just a cheap hack to not do indexOf twice

            placeHolders =
              b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

            arr = new Arr((len * 3) / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

            l = placeHolders > 0 ? len - 4 : len;
            var L = 0;

            for (i = 0, j = 0; i < l; i += 4, j += 3) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 18) |
                (revLookup[b64.charCodeAt(i + 1)] << 12) |
                (revLookup[b64.charCodeAt(i + 2)] << 6) |
                revLookup[b64.charCodeAt(i + 3)];
              arr[L++] = (tmp >> 16) & 0xff;
              arr[L++] = (tmp >> 8) & 0xff;
              arr[L++] = tmp & 0xff;
            }

            if (placeHolders === 2) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 2) |
                (revLookup[b64.charCodeAt(i + 1)] >> 4);
              arr[L++] = tmp & 0xff;
            } else if (placeHolders === 1) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 10) |
                (revLookup[b64.charCodeAt(i + 1)] << 4) |
                (revLookup[b64.charCodeAt(i + 2)] >> 2);
              arr[L++] = (tmp >> 8) & 0xff;
              arr[L++] = tmp & 0xff;
            }

            return arr;
          }

          function tripletToBase64(num) {
            return (
              lookup[(num >> 18) & 0x3f] +
              lookup[(num >> 12) & 0x3f] +
              lookup[(num >> 6) & 0x3f] +
              lookup[num & 0x3f]
            );
          }

          function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];

            for (var i = start; i < end; i += 3) {
              tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
              output.push(tripletToBase64(tmp));
            }

            return output.join("");
          }

          function fromByteArray(uint8) {
            if (!inited) {
              init();
            }

            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

            var output = "";
            var parts = [];
            var maxChunkLength = 16383; // must be multiple of 3
            // go through the array every three bytes, we'll deal with trailing stuff later

            for (
              var i = 0, len2 = len - extraBytes;
              i < len2;
              i += maxChunkLength
            ) {
              parts.push(
                encodeChunk(
                  uint8,
                  i,
                  i + maxChunkLength > len2 ? len2 : i + maxChunkLength
                )
              );
            } // pad the end with zeros, but make sure to not forget the extra bytes

            if (extraBytes === 1) {
              tmp = uint8[len - 1];
              output += lookup[tmp >> 2];
              output += lookup[(tmp << 4) & 0x3f];
              output += "==";
            } else if (extraBytes === 2) {
              tmp = (uint8[len - 2] << 8) + uint8[len - 1];
              output += lookup[tmp >> 10];
              output += lookup[(tmp >> 4) & 0x3f];
              output += lookup[(tmp << 2) & 0x3f];
              output += "=";
            }

            parts.push(output);
            return parts.join("");
          }

          function read(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & ((1 << -nBits) - 1);
            s >>= -nBits;
            nBits += eLen;

            for (
              ;
              nBits > 0;
              e = e * 256 + buffer[offset + i], i += d, nBits -= 8
            ) {}

            m = e & ((1 << -nBits) - 1);
            e >>= -nBits;
            nBits += mLen;

            for (
              ;
              nBits > 0;
              m = m * 256 + buffer[offset + i], i += d, nBits -= 8
            ) {}

            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }

            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          }
          function write(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
            value = Math.abs(value);

            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);

              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }

              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }

              if (value * c >= 2) {
                e++;
                c /= 2;
              }

              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }

            for (
              ;
              mLen >= 8;
              buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
            ) {}

            e = (e << mLen) | m;
            eLen += mLen;

            for (
              ;
              eLen > 0;
              buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
            ) {}

            buffer[offset + i - d] |= s * 128;
          }

          var toString = {}.toString;
          var isArray$1 =
            Array.isArray ||
            function (arr) {
              return toString.call(arr) == "[object Array]";
            };

          /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
           * @license  MIT
           */

          /* eslint-disable no-proto */

          var INSPECT_MAX_BYTES = 50;
          /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

          Buffer.TYPED_ARRAY_SUPPORT =
            global$1.TYPED_ARRAY_SUPPORT !== undefined
              ? global$1.TYPED_ARRAY_SUPPORT
              : true;
          function kMaxLength() {
            return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
          }

          function createBuffer(that, length) {
            if (kMaxLength() < length) {
              throw new RangeError("Invalid typed array length");
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = new Uint8Array(length);
              that.__proto__ = Buffer.prototype;
            } else {
              // Fallback: Return an object instance of the Buffer class
              if (that === null) {
                that = new Buffer(length);
              }

              that.length = length;
            }

            return that;
          }
          /**
           * The Buffer constructor returns instances of `Uint8Array` that have their
           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
           * and the `Uint8Array` methods. Square bracket notation works as expected -- it
           * returns a single octet.
           *
           * The `Uint8Array` prototype remains unmodified.
           */

          function Buffer(arg, encodingOrOffset, length) {
            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
              return new Buffer(arg, encodingOrOffset, length);
            } // Common case.

            if (typeof arg === "number") {
              if (typeof encodingOrOffset === "string") {
                throw new Error(
                  "If encoding is specified then the first argument must be a string"
                );
              }

              return allocUnsafe(this, arg);
            }

            return from(this, arg, encodingOrOffset, length);
          }
          Buffer.poolSize = 8192; // not used by this implementation
          // TODO: Legacy, not needed anymore. Remove in next major version.

          Buffer._augment = function (arr) {
            arr.__proto__ = Buffer.prototype;
            return arr;
          };

          function from(that, value, encodingOrOffset, length) {
            if (typeof value === "number") {
              throw new TypeError('"value" argument must not be a number');
            }

            if (
              typeof ArrayBuffer !== "undefined" &&
              value instanceof ArrayBuffer
            ) {
              return fromArrayBuffer(that, value, encodingOrOffset, length);
            }

            if (typeof value === "string") {
              return fromString(that, value, encodingOrOffset);
            }

            return fromObject(that, value);
          }
          /**
           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
           * if value is a number.
           * Buffer.from(str[, encoding])
           * Buffer.from(array)
           * Buffer.from(buffer)
           * Buffer.from(arrayBuffer[, byteOffset[, length]])
           **/

          Buffer.from = function (value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length);
          };

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            Buffer.prototype.__proto__ = Uint8Array.prototype;
            Buffer.__proto__ = Uint8Array;

            if (
              typeof Symbol !== "undefined" &&
              Symbol.species &&
              Buffer[Symbol.species] === Buffer
            ) {
              // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
              // Object.defineProperty(Buffer, Symbol.species, {
              //   value: null,
              //   configurable: true
              // })
            }
          }

          function assertSize(size) {
            if (typeof size !== "number") {
              throw new TypeError('"size" argument must be a number');
            } else if (size < 0) {
              throw new RangeError('"size" argument must not be negative');
            }
          }

          function alloc(that, size, fill, encoding) {
            assertSize(size);

            if (size <= 0) {
              return createBuffer(that, size);
            }

            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpretted as a start offset.
              return typeof encoding === "string"
                ? createBuffer(that, size).fill(fill, encoding)
                : createBuffer(that, size).fill(fill);
            }

            return createBuffer(that, size);
          }
          /**
           * Creates a new filled Buffer instance.
           * alloc(size[, fill[, encoding]])
           **/

          Buffer.alloc = function (size, fill, encoding) {
            return alloc(null, size, fill, encoding);
          };

          function allocUnsafe(that, size) {
            assertSize(size);
            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

            if (!Buffer.TYPED_ARRAY_SUPPORT) {
              for (var i = 0; i < size; ++i) {
                that[i] = 0;
              }
            }

            return that;
          }
          /**
           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
           * */

          Buffer.allocUnsafe = function (size) {
            return allocUnsafe(null, size);
          };
          /**
           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
           */

          Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(null, size);
          };

          function fromString(that, string, encoding) {
            if (typeof encoding !== "string" || encoding === "") {
              encoding = "utf8";
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('"encoding" must be a valid string encoding');
            }

            var length = byteLength(string, encoding) | 0;
            that = createBuffer(that, length);
            var actual = that.write(string, encoding);

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              that = that.slice(0, actual);
            }

            return that;
          }

          function fromArrayLike(that, array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0;
            that = createBuffer(that, length);

            for (var i = 0; i < length; i += 1) {
              that[i] = array[i] & 255;
            }

            return that;
          }

          function fromArrayBuffer(that, array, byteOffset, length) {
            array.byteLength; // this throws if `array` is not a valid ArrayBuffer

            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError("'offset' is out of bounds");
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError("'length' is out of bounds");
            }

            if (byteOffset === undefined && length === undefined) {
              array = new Uint8Array(array);
            } else if (length === undefined) {
              array = new Uint8Array(array, byteOffset);
            } else {
              array = new Uint8Array(array, byteOffset, length);
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = array;
              that.__proto__ = Buffer.prototype;
            } else {
              // Fallback: Return an object instance of the Buffer class
              that = fromArrayLike(that, array);
            }

            return that;
          }

          function fromObject(that, obj) {
            if (internalIsBuffer(obj)) {
              var len = checked(obj.length) | 0;
              that = createBuffer(that, len);

              if (that.length === 0) {
                return that;
              }

              obj.copy(that, 0, 0, len);
              return that;
            }

            if (obj) {
              if (
                (typeof ArrayBuffer !== "undefined" &&
                  obj.buffer instanceof ArrayBuffer) ||
                "length" in obj
              ) {
                if (typeof obj.length !== "number" || isnan(obj.length)) {
                  return createBuffer(that, 0);
                }

                return fromArrayLike(that, obj);
              }

              if (obj.type === "Buffer" && isArray$1(obj.data)) {
                return fromArrayLike(that, obj.data);
              }
            }

            throw new TypeError(
              "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
            );
          }

          function checked(length) {
            // Note: cannot use `length < kMaxLength()` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= kMaxLength()) {
              throw new RangeError(
                "Attempt to allocate Buffer larger than maximum " +
                  "size: 0x" +
                  kMaxLength().toString(16) +
                  " bytes"
              );
            }

            return length | 0;
          }

          Buffer.isBuffer = isBuffer;

          function internalIsBuffer(b) {
            return !!(b != null && b._isBuffer);
          }

          Buffer.compare = function compare(a, b) {
            if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
              throw new TypeError("Arguments must be Buffers");
            }

            if (a === b) return 0;
            var x = a.length;
            var y = b.length;

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;

              default:
                return false;
            }
          };

          Buffer.concat = function concat(list, length) {
            if (!isArray$1(list)) {
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            }

            if (list.length === 0) {
              return Buffer.alloc(0);
            }

            var i;

            if (length === undefined) {
              length = 0;

              for (i = 0; i < list.length; ++i) {
                length += list[i].length;
              }
            }

            var buffer = Buffer.allocUnsafe(length);
            var pos = 0;

            for (i = 0; i < list.length; ++i) {
              var buf = list[i];

              if (!internalIsBuffer(buf)) {
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              }

              buf.copy(buffer, pos);
              pos += buf.length;
            }

            return buffer;
          };

          function byteLength(string, encoding) {
            if (internalIsBuffer(string)) {
              return string.length;
            }

            if (
              typeof ArrayBuffer !== "undefined" &&
              typeof ArrayBuffer.isView === "function" &&
              (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
            ) {
              return string.byteLength;
            }

            if (typeof string !== "string") {
              string = "" + string;
            }

            var len = string.length;
            if (len === 0) return 0; // Use a for loop to avoid recursion

            var loweredCase = false;

            for (;;) {
              switch (encoding) {
                case "ascii":
                case "latin1":
                case "binary":
                  return len;

                case "utf8":
                case "utf-8":
                case undefined:
                  return utf8ToBytes(string).length;

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return len * 2;

                case "hex":
                  return len >>> 1;

                case "base64":
                  return base64ToBytes(string).length;

                default:
                  if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          }

          Buffer.byteLength = byteLength;

          function slowToString(encoding, start, end) {
            var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.
            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

            if (start === undefined || start < 0) {
              start = 0;
            } // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.

            if (start > this.length) {
              return "";
            }

            if (end === undefined || end > this.length) {
              end = this.length;
            }

            if (end <= 0) {
              return "";
            } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.

            end >>>= 0;
            start >>>= 0;

            if (end <= start) {
              return "";
            }

            if (!encoding) encoding = "utf8";

            while (true) {
              switch (encoding) {
                case "hex":
                  return hexSlice(this, start, end);

                case "utf8":
                case "utf-8":
                  return utf8Slice(this, start, end);

                case "ascii":
                  return asciiSlice(this, start, end);

                case "latin1":
                case "binary":
                  return latin1Slice(this, start, end);

                case "base64":
                  return base64Slice(this, start, end);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return utf16leSlice(this, start, end);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = (encoding + "").toLowerCase();
                  loweredCase = true;
              }
            }
          } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
          // Buffer instances.

          Buffer.prototype._isBuffer = true;

          function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m];
            b[m] = i;
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length;

            if (len % 2 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            }

            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1);
            }

            return this;
          };

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length;

            if (len % 4 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            }

            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3);
              swap(this, i + 1, i + 2);
            }

            return this;
          };

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length;

            if (len % 8 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            }

            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7);
              swap(this, i + 1, i + 6);
              swap(this, i + 2, i + 5);
              swap(this, i + 3, i + 4);
            }

            return this;
          };

          Buffer.prototype.toString = function toString() {
            var length = this.length | 0;
            if (length === 0) return "";
            if (arguments.length === 0) return utf8Slice(this, 0, length);
            return slowToString.apply(this, arguments);
          };

          Buffer.prototype.equals = function equals(b) {
            if (!internalIsBuffer(b))
              throw new TypeError("Argument must be a Buffer");
            if (this === b) return true;
            return Buffer.compare(this, b) === 0;
          };

          Buffer.prototype.inspect = function inspect() {
            var str = "";
            var max = INSPECT_MAX_BYTES;

            if (this.length > 0) {
              str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
              if (this.length > max) str += " ... ";
            }

            return "<Buffer " + str + ">";
          };

          Buffer.prototype.compare = function compare(
            target,
            start,
            end,
            thisStart,
            thisEnd
          ) {
            if (!internalIsBuffer(target)) {
              throw new TypeError("Argument must be a Buffer");
            }

            if (start === undefined) {
              start = 0;
            }

            if (end === undefined) {
              end = target ? target.length : 0;
            }

            if (thisStart === undefined) {
              thisStart = 0;
            }

            if (thisEnd === undefined) {
              thisEnd = this.length;
            }

            if (
              start < 0 ||
              end > target.length ||
              thisStart < 0 ||
              thisEnd > this.length
            ) {
              throw new RangeError("out of range index");
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0;
            }

            if (thisStart >= thisEnd) {
              return -1;
            }

            if (start >= end) {
              return 1;
            }

            start >>>= 0;
            end >>>= 0;
            thisStart >>>= 0;
            thisEnd >>>= 0;
            if (this === target) return 0;
            var x = thisEnd - thisStart;
            var y = end - start;
            var len = Math.min(x, y);
            var thisCopy = this.slice(thisStart, thisEnd);
            var targetCopy = target.slice(start, end);

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i];
                y = targetCopy[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf

          function bidirectionalIndexOf(
            buffer,
            val,
            byteOffset,
            encoding,
            dir
          ) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1; // Normalize byteOffset

            if (typeof byteOffset === "string") {
              encoding = byteOffset;
              byteOffset = 0;
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff;
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000;
            }

            byteOffset = +byteOffset; // Coerce to Number.

            if (isNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : buffer.length - 1;
            } // Normalize byteOffset: negative offsets start from the end of the buffer

            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

            if (byteOffset >= buffer.length) {
              if (dir) return -1;
              else byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0;
              else return -1;
            } // Normalize val

            if (typeof val === "string") {
              val = Buffer.from(val, encoding);
            } // Finally, search either indexOf (if dir is true) or lastIndexOf

            if (internalIsBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1;
              }

              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            } else if (typeof val === "number") {
              val = val & 0xff; // Search for a byte value [0-255]

              if (
                Buffer.TYPED_ARRAY_SUPPORT &&
                typeof Uint8Array.prototype.indexOf === "function"
              ) {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                }
              }

              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
            }

            throw new TypeError("val must be string, number or Buffer");
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1;
            var arrLength = arr.length;
            var valLength = val.length;

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase();

              if (
                encoding === "ucs2" ||
                encoding === "ucs-2" ||
                encoding === "utf16le" ||
                encoding === "utf-16le"
              ) {
                if (arr.length < 2 || val.length < 2) {
                  return -1;
                }

                indexSize = 2;
                arrLength /= 2;
                valLength /= 2;
                byteOffset /= 2;
              }
            }

            function read$$1(buf, i) {
              if (indexSize === 1) {
                return buf[i];
              } else {
                return buf.readUInt16BE(i * indexSize);
              }
            }

            var i;

            if (dir) {
              var foundIndex = -1;

              for (i = byteOffset; i < arrLength; i++) {
                if (
                  read$$1(arr, i) ===
                  read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)
                ) {
                  if (foundIndex === -1) foundIndex = i;
                  if (i - foundIndex + 1 === valLength)
                    return foundIndex * indexSize;
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex;
                  foundIndex = -1;
                }
              }
            } else {
              if (byteOffset + valLength > arrLength)
                byteOffset = arrLength - valLength;

              for (i = byteOffset; i >= 0; i--) {
                var found = true;

                for (var j = 0; j < valLength; j++) {
                  if (read$$1(arr, i + j) !== read$$1(val, j)) {
                    found = false;
                    break;
                  }
                }

                if (found) return i;
              }
            }

            return -1;
          }

          Buffer.prototype.includes = function includes(
            val,
            byteOffset,
            encoding
          ) {
            return this.indexOf(val, byteOffset, encoding) !== -1;
          };

          Buffer.prototype.indexOf = function indexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
          };

          Buffer.prototype.lastIndexOf = function lastIndexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
          };

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;

            if (!length) {
              length = remaining;
            } else {
              length = Number(length);

              if (length > remaining) {
                length = remaining;
              }
            } // must be an even number of digits

            var strLen = string.length;
            if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");

            if (length > strLen / 2) {
              length = strLen / 2;
            }

            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16);
              if (isNaN(parsed)) return i;
              buf[offset + i] = parsed;
            }

            return i;
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(
              utf8ToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length);
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(
              utf16leToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          Buffer.prototype.write = function write$$1(
            string,
            offset,
            length,
            encoding
          ) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = "utf8";
              length = this.length;
              offset = 0; // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === "string") {
              encoding = offset;
              length = this.length;
              offset = 0; // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset | 0;

              if (isFinite(length)) {
                length = length | 0;
                if (encoding === undefined) encoding = "utf8";
              } else {
                encoding = length;
                length = undefined;
              } // legacy write(string, encoding, offset, length) - remove in v0.13
            } else {
              throw new Error(
                "Buffer.write(string, encoding, offset[, length]) is no longer supported"
              );
            }

            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;

            if (
              (string.length > 0 && (length < 0 || offset < 0)) ||
              offset > this.length
            ) {
              throw new RangeError("Attempt to write outside buffer bounds");
            }

            if (!encoding) encoding = "utf8";
            var loweredCase = false;

            for (;;) {
              switch (encoding) {
                case "hex":
                  return hexWrite(this, string, offset, length);

                case "utf8":
                case "utf-8":
                  return utf8Write(this, string, offset, length);

                case "ascii":
                  return asciiWrite(this, string, offset, length);

                case "latin1":
                case "binary":
                  return latin1Write(this, string, offset, length);

                case "base64":
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return ucs2Write(this, string, offset, length);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          };

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0),
            };
          };

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return fromByteArray(buf);
            } else {
              return fromByteArray(buf.slice(start, end));
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            var res = [];
            var i = start;

            while (i < end) {
              var firstByte = buf[i];
              var codePoint = null;
              var bytesPerSequence =
                firstByte > 0xef
                  ? 4
                  : firstByte > 0xdf
                  ? 3
                  : firstByte > 0xbf
                  ? 2
                  : 1;

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint;

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte;
                    }

                    break;

                  case 2:
                    secondByte = buf[i + 1];

                    if ((secondByte & 0xc0) === 0x80) {
                      tempCodePoint =
                        ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);

                      if (tempCodePoint > 0x7f) {
                        codePoint = tempCodePoint;
                      }
                    }

                    break;

                  case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];

                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0xc) |
                        ((secondByte & 0x3f) << 0x6) |
                        (thirdByte & 0x3f);

                      if (
                        tempCodePoint > 0x7ff &&
                        (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                      ) {
                        codePoint = tempCodePoint;
                      }
                    }

                    break;

                  case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];

                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80 &&
                      (fourthByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0x12) |
                        ((secondByte & 0x3f) << 0xc) |
                        ((thirdByte & 0x3f) << 0x6) |
                        (fourthByte & 0x3f);

                      if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint;
                      }
                    }
                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xfffd;
                bytesPerSequence = 1;
              } else if (codePoint > 0xffff) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000;
                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                codePoint = 0xdc00 | (codePoint & 0x3ff);
              }

              res.push(codePoint);
              i += bytesPerSequence;
            }

            return decodeCodePointsArray(res);
          } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety

          var MAX_ARGUMENTS_LENGTH = 0x1000;

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;

            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
            } // Decode in chunks to avoid "call stack size exceeded".

            var res = "";
            var i = 0;

            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
              );
            }

            return res;
          }

          function asciiSlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7f);
            }

            return ret;
          }

          function latin1Slice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i]);
            }

            return ret;
          }

          function hexSlice(buf, start, end) {
            var len = buf.length;
            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;
            var out = "";

            for (var i = start; i < end; ++i) {
              out += toHex(buf[i]);
            }

            return out;
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = "";

            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
            }

            return res;
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;

            if (start < 0) {
              start += len;
              if (start < 0) start = 0;
            } else if (start > len) {
              start = len;
            }

            if (end < 0) {
              end += len;
              if (end < 0) end = 0;
            } else if (end > len) {
              end = len;
            }

            if (end < start) end = start;
            var newBuf;

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer.prototype;
            } else {
              var sliceLen = end - start;
              newBuf = new Buffer(sliceLen, undefined);

              for (var i = 0; i < sliceLen; ++i) {
                newBuf[i] = this[i + start];
              }
            }

            return newBuf;
          };
          /*
           * Need to make sure that buffer isn't trying to write out of bounds.
           */

          function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0)
              throw new RangeError("offset is not uint");
            if (offset + ext > length)
              throw new RangeError("Trying to access beyond buffer length");
          }

          Buffer.prototype.readUIntLE = function readUIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;

            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            return val;
          };

          Buffer.prototype.readUIntBE = function readUIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;

            if (!noAssert) {
              checkOffset(offset, byteLength, this.length);
            }

            var val = this[offset + --byteLength];
            var mul = 1;

            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul;
            }

            return val;
          };

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
          };

          Buffer.prototype.readUInt16LE = function readUInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | (this[offset + 1] << 8);
          };

          Buffer.prototype.readUInt16BE = function readUInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return (this[offset] << 8) | this[offset + 1];
          };

          Buffer.prototype.readUInt32LE = function readUInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              (this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
              this[offset + 3] * 0x1000000
            );
          };

          Buffer.prototype.readUInt32BE = function readUInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              this[offset] * 0x1000000 +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            );
          };

          Buffer.prototype.readIntLE = function readIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;

            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };

          Buffer.prototype.readIntBE = function readIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];

            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul;
            }

            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 0x80)) return this[offset];
            return (0xff - this[offset] + 1) * -1;
          };

          Buffer.prototype.readInt16LE = function readInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | (this[offset + 1] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt16BE = function readInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | (this[offset] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt32LE = function readInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
            );
          };

          Buffer.prototype.readInt32BE = function readInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3]
            );
          };

          Buffer.prototype.readFloatLE = function readFloatLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return read(this, offset, true, 23, 4);
          };

          Buffer.prototype.readFloatBE = function readFloatBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return read(this, offset, false, 23, 4);
          };

          Buffer.prototype.readDoubleLE = function readDoubleLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return read(this, offset, true, 52, 8);
          };

          Buffer.prototype.readDoubleBE = function readDoubleBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return read(this, offset, false, 52, 8);
          };

          function checkInt(buf, value, offset, ext, max, min) {
            if (!internalIsBuffer(buf))
              throw new TypeError(
                '"buffer" argument must be a Buffer instance'
              );
            if (value > max || value < min)
              throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;

            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var mul = 1;
            var i = 0;
            this[offset] = value & 0xff;

            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUIntBE = function writeUIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;

            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 0xff;

            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUInt8 = function writeUInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            this[offset] = value & 0xff;
            return offset + 1;
          };

          function objectWriteUInt16(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffff + value + 1;

            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
              buf[offset + i] =
                (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                ((littleEndian ? i : 1 - i) * 8);
            }
          }

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }

            return offset + 2;
          };

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }

            return offset + 2;
          };

          function objectWriteUInt32(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffffffff + value + 1;

            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
              buf[offset + i] =
                (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
            }
          }

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }

            return offset + 4;
          };

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }

            return offset + 4;
          };

          Buffer.prototype.writeIntLE = function writeIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;

            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = 0;
            var mul = 1;
            var sub = 0;
            this[offset] = value & 0xff;

            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1;
              }

              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeIntBE = function writeIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;

            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = byteLength - 1;
            var mul = 1;
            var sub = 0;
            this[offset + i] = value & 0xff;

            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1;
              }

              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeInt8 = function writeInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            if (value < 0) value = 0xff + value + 1;
            this[offset] = value & 0xff;
            return offset + 1;
          };

          Buffer.prototype.writeInt16LE = function writeInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }

            return offset + 2;
          };

          Buffer.prototype.writeInt16BE = function writeInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }

            return offset + 2;
          };

          Buffer.prototype.writeInt32LE = function writeInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }

            return offset + 4;
          };

          Buffer.prototype.writeInt32BE = function writeInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (value < 0) value = 0xffffffff + value + 1;

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }

            return offset + 4;
          };

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
            if (offset < 0) throw new RangeError("Index out of range");
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                4,
                3.4028234663852886e38,
                -3.4028234663852886e38
              );
            }

            write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4;
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeFloatBE = function writeFloatBE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, false, noAssert);
          };

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                8,
                1.7976931348623157e308,
                -1.7976931348623157e308
              );
            }

            write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8;
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, false, noAssert);
          }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

          Buffer.prototype.copy = function copy(
            target,
            targetStart,
            start,
            end
          ) {
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

            if (targetStart < 0) {
              throw new RangeError("targetStart out of bounds");
            }

            if (start < 0 || start >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (end < 0) throw new RangeError("sourceEnd out of bounds"); // Are we oob?

            if (end > this.length) end = this.length;

            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start;
            }

            var len = end - start;
            var i;

            if (this === target && start < targetStart && targetStart < end) {
              // descending copy from end
              for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start];
              }
            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
              // ascending copy from start
              for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start];
              }
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
              );
            }

            return len;
          }; // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])

          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === "string") {
              if (typeof start === "string") {
                encoding = start;
                start = 0;
                end = this.length;
              } else if (typeof end === "string") {
                encoding = end;
                end = this.length;
              }

              if (val.length === 1) {
                var code = val.charCodeAt(0);

                if (code < 256) {
                  val = code;
                }
              }

              if (encoding !== undefined && typeof encoding !== "string") {
                throw new TypeError("encoding must be a string");
              }

              if (
                typeof encoding === "string" &&
                !Buffer.isEncoding(encoding)
              ) {
                throw new TypeError("Unknown encoding: " + encoding);
              }
            } else if (typeof val === "number") {
              val = val & 255;
            } // Invalid ranges are not set to a default, so can range check early.

            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError("Out of range index");
            }

            if (end <= start) {
              return this;
            }

            start = start >>> 0;
            end = end === undefined ? this.length : end >>> 0;
            if (!val) val = 0;
            var i;

            if (typeof val === "number") {
              for (i = start; i < end; ++i) {
                this[i] = val;
              }
            } else {
              var bytes = internalIsBuffer(val)
                ? val
                : utf8ToBytes(new Buffer(val, encoding).toString());
              var len = bytes.length;

              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len];
              }
            }

            return this;
          }; // HELPER FUNCTIONS
          // ================

          var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

          function base64clean(str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = stringtrim(str).replace(INVALID_BASE64_RE, ""); // Node converts strings with length < 2 to ''

            if (str.length < 2) return ""; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

            while (str.length % 4 !== 0) {
              str = str + "=";
            }

            return str;
          }

          function stringtrim(str) {
            if (str.trim) return str.trim();
            return str.replace(/^\s+|\s+$/g, "");
          }

          function toHex(n) {
            if (n < 16) return "0" + n.toString(16);
            return n.toString(16);
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i); // is surrogate component

              if (codePoint > 0xd7ff && codePoint < 0xe000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xdbff) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  } // valid lead

                  leadSurrogate = codePoint;
                  continue;
                } // 2 leads in a row

                if (codePoint < 0xdc00) {
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  leadSurrogate = codePoint;
                  continue;
                } // valid surrogate pair

                codePoint =
                  (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                  0x10000;
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
              }

              leadSurrogate = null; // encode utf8

              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break;
                bytes.push(codePoint);
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break;
                bytes.push(
                  (codePoint >> 0x6) | 0xc0,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break;
                bytes.push(
                  (codePoint >> 0xc) | 0xe0,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break;
                bytes.push(
                  (codePoint >> 0x12) | 0xf0,
                  ((codePoint >> 0xc) & 0x3f) | 0x80,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else {
                throw new Error("Invalid code point");
              }
            }

            return bytes;
          }

          function asciiToBytes(str) {
            var byteArray = [];

            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xff);
            }

            return byteArray;
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];

            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break;
              c = str.charCodeAt(i);
              hi = c >> 8;
              lo = c % 256;
              byteArray.push(lo);
              byteArray.push(hi);
            }

            return byteArray;
          }

          function base64ToBytes(str) {
            return toByteArray(base64clean(str));
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if (i + offset >= dst.length || i >= src.length) break;
              dst[i + offset] = src[i];
            }

            return i;
          }

          function isnan(val) {
            return val !== val; // eslint-disable-line no-self-compare
          } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
          // The _isBuffer check is for Safari 5-7 support, because it's missing
          // Object.prototype.constructor. Remove this eventually

          function isBuffer(obj) {
            return (
              obj != null &&
              (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
            );
          }

          function isFastBuffer(obj) {
            return (
              !!obj.constructor &&
              typeof obj.constructor.isBuffer === "function" &&
              obj.constructor.isBuffer(obj)
            );
          } // For Node v0.10 support. Remove this eventually.

          function isSlowBuffer(obj) {
            return (
              typeof obj.readFloatLE === "function" &&
              typeof obj.slice === "function" &&
              isFastBuffer(obj.slice(0, 0))
            );
          }

          var fs = (_shim_fs$1 && _shim_fs) || _shim_fs$1;

          /**
           * @class
           */

          var LineByLine =
            /*#__PURE__*/
            (function () {
              function LineByLine(file, options) {
                _classCallCheck(this, LineByLine);

                options = options || {};
                if (!options.readChunk) options.readChunk = 1024;

                if (!options.newLineCharacter) {
                  options.newLineCharacter = 0x0a; //linux line ending
                } else {
                  options.newLineCharacter =
                    options.newLineCharacter.charCodeAt(0);
                }

                if (typeof file === "number") {
                  this.fd = file;
                } else {
                  this.fd = fs.openSync(file, "r");
                }

                this.options = options;
                this.newLineCharacter = options.newLineCharacter;
                this.reset();
              }

              _createClass(LineByLine, [
                {
                  key: "_searchInBuffer",
                  value: function _searchInBuffer(buffer, hexNeedle) {
                    var found = -1;

                    for (var i = 0; i <= buffer.length; i++) {
                      var b_byte = buffer[i];

                      if (b_byte === hexNeedle) {
                        found = i;
                        break;
                      }
                    }

                    return found;
                  },
                },
                {
                  key: "reset",
                  value: function reset() {
                    this.eofReached = false;
                    this.linesCache = [];
                    this.fdPosition = 0;
                  },
                },
                {
                  key: "close",
                  value: function close() {
                    fs.closeSync(this.fd);
                    this.fd = null;
                  },
                },
                {
                  key: "_extractLines",
                  value: function _extractLines(buffer) {
                    var line;
                    var lines = [];
                    var bufferPosition = 0;
                    var lastNewLineBufferPosition = 0;

                    while (true) {
                      var bufferPositionValue = buffer[bufferPosition++];

                      if (bufferPositionValue === this.newLineCharacter) {
                        line = buffer.slice(
                          lastNewLineBufferPosition,
                          bufferPosition
                        );
                        lines.push(line);
                        lastNewLineBufferPosition = bufferPosition;
                      } else if (!bufferPositionValue) {
                        break;
                      }
                    }

                    var leftovers = buffer.slice(
                      lastNewLineBufferPosition,
                      bufferPosition
                    );

                    if (leftovers.length) {
                      lines.push(leftovers);
                    }

                    return lines;
                  },
                },
                {
                  key: "_readChunk",
                  value: function _readChunk(lineLeftovers) {
                    var totalBytesRead = 0;
                    var bytesRead;
                    var buffers = [];

                    do {
                      var readBuffer = new Buffer(this.options.readChunk);
                      bytesRead = fs.readSync(
                        this.fd,
                        readBuffer,
                        0,
                        this.options.readChunk,
                        this.fdPosition
                      );
                      totalBytesRead = totalBytesRead + bytesRead;
                      this.fdPosition = this.fdPosition + bytesRead;
                      buffers.push(readBuffer);
                    } while (
                      bytesRead &&
                      this._searchInBuffer(
                        buffers[buffers.length - 1],
                        this.options.newLineCharacter
                      ) === -1
                    );

                    var bufferData = Buffer.concat(buffers);

                    if (bytesRead < this.options.readChunk) {
                      this.eofReached = true;
                      bufferData = bufferData.slice(0, totalBytesRead);
                    }

                    if (totalBytesRead) {
                      this.linesCache = this._extractLines(bufferData);

                      if (lineLeftovers) {
                        this.linesCache[0] = Buffer.concat([
                          lineLeftovers,
                          this.linesCache[0],
                        ]);
                      }
                    }

                    return totalBytesRead;
                  },
                },
                {
                  key: "next",
                  value: function next() {
                    if (!this.fd) return false;
                    var line = false;

                    if (this.eofReached && this.linesCache.length === 0) {
                      return line;
                    }

                    var bytesRead;

                    if (!this.linesCache.length) {
                      bytesRead = this._readChunk();
                    }

                    if (this.linesCache.length) {
                      line = this.linesCache.shift();
                      var lastLineCharacter = line[line.length - 1];

                      if (lastLineCharacter !== 0x0a) {
                        bytesRead = this._readChunk(line);

                        if (bytesRead) {
                          line = this.linesCache.shift();
                        }
                      }
                    }

                    if (this.eofReached && this.linesCache.length === 0) {
                      this.close();
                    }

                    if (
                      line &&
                      line[line.length - 1] === this.newLineCharacter
                    ) {
                      line = line.slice(0, line.length - 1);
                    }

                    return line;
                  },
                },
              ]);

              return LineByLine;
            })();

          var readlines = LineByLine;

          var ConfigError =
            /*#__PURE__*/
            (function (_Error) {
              _inherits(ConfigError, _Error);

              function ConfigError() {
                _classCallCheck(this, ConfigError);

                return _possibleConstructorReturn(
                  this,
                  _getPrototypeOf(ConfigError).apply(this, arguments)
                );
              }

              return ConfigError;
            })(_wrapNativeSuper(Error));

          var DebugError =
            /*#__PURE__*/
            (function (_Error2) {
              _inherits(DebugError, _Error2);

              function DebugError() {
                _classCallCheck(this, DebugError);

                return _possibleConstructorReturn(
                  this,
                  _getPrototypeOf(DebugError).apply(this, arguments)
                );
              }

              return DebugError;
            })(_wrapNativeSuper(Error));

          var UndefinedParserError$1 =
            /*#__PURE__*/
            (function (_Error3) {
              _inherits(UndefinedParserError, _Error3);

              function UndefinedParserError() {
                _classCallCheck(this, UndefinedParserError);

                return _possibleConstructorReturn(
                  this,
                  _getPrototypeOf(UndefinedParserError).apply(this, arguments)
                );
              }

              return UndefinedParserError;
            })(_wrapNativeSuper(Error));

          var errors = {
            ConfigError: ConfigError,
            DebugError: DebugError,
            UndefinedParserError: UndefinedParserError$1,
          };

          // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

          function defaultSetTimout() {
            throw new Error("setTimeout has not been defined");
          }

          function defaultClearTimeout() {
            throw new Error("clearTimeout has not been defined");
          }

          var cachedSetTimeout = defaultSetTimout;
          var cachedClearTimeout = defaultClearTimeout;

          if (typeof global$1.setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          }

          if (typeof global$1.clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          }

          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              //normal enviroments in sane situations
              return setTimeout(fun, 0);
            } // if setTimeout wasn't available but was latter defined

            if (
              (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
              setTimeout
            ) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }

            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedSetTimeout(fun, 0);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
              }
            }
          }

          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              //normal enviroments in sane situations
              return clearTimeout(marker);
            } // if clearTimeout wasn't available but was latter defined

            if (
              (cachedClearTimeout === defaultClearTimeout ||
                !cachedClearTimeout) &&
              clearTimeout
            ) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }

            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedClearTimeout(marker);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
              }
            }
          }

          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;

          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return;
            }

            draining = false;

            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }

            if (queue.length) {
              drainQueue();
            }
          }

          function drainQueue() {
            if (draining) {
              return;
            }

            var timeout = runTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;

            while (len) {
              currentQueue = queue;
              queue = [];

              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }

              queueIndex = -1;
              len = queue.length;
            }

            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }

          function nextTick(fun) {
            var args = new Array(arguments.length - 1);

            if (arguments.length > 1) {
              for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
              }
            }

            queue.push(new Item(fun, args));

            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          } // v8 likes predictible objects

          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }

          Item.prototype.run = function () {
            this.fun.apply(null, this.array);
          };

          var title = "browser";
          var platform = "browser";
          var browser = true;
          var env = {};
          var argv = [];
          var version$2 = ""; // empty string to avoid regexp issues

          var versions = {};
          var release = {};
          var config = {};

          function noop() {}

          var on = noop;
          var addListener = noop;
          var once = noop;
          var off = noop;
          var removeListener = noop;
          var removeAllListeners = noop;
          var emit = noop;
          function binding(name) {
            throw new Error("process.binding is not supported");
          }
          function cwd() {
            return "/";
          }
          function chdir(dir) {
            throw new Error("process.chdir is not supported");
          }

          function umask() {
            return 0;
          } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

          var performance = global$1.performance || {};

          var performanceNow =
            performance.now ||
            performance.mozNow ||
            performance.msNow ||
            performance.oNow ||
            performance.webkitNow ||
            function () {
              return new Date().getTime();
            }; // generate timestamp or delta
          // see http://nodejs.org/api/process.html#process_process_hrtime

          function hrtime(previousTimestamp) {
            var clocktime = performanceNow.call(performance) * 1e-3;
            var seconds = Math.floor(clocktime);
            var nanoseconds = Math.floor((clocktime % 1) * 1e9);

            if (previousTimestamp) {
              seconds = seconds - previousTimestamp[0];
              nanoseconds = nanoseconds - previousTimestamp[1];

              if (nanoseconds < 0) {
                seconds--;
                nanoseconds += 1e9;
              }
            }

            return [seconds, nanoseconds];
          }
          var startTime = new Date();
          function uptime() {
            var currentTime = new Date();
            var dif = currentTime - startTime;
            return dif / 1000;
          }
          var process = {
            nextTick: nextTick,
            title: title,
            browser: browser,
            env: env,
            argv: argv,
            version: version$2,
            versions: versions,
            on: on,
            addListener: addListener,
            once: once,
            off: off,
            removeListener: removeListener,
            removeAllListeners: removeAllListeners,
            emit: emit,
            binding: binding,
            cwd: cwd,
            chdir: chdir,
            umask: umask,
            hrtime: hrtime,
            platform: platform,
            release: release,
            config: config,
            uptime: uptime,
          };

          var semver = createCommonjsModule(function (module, exports) {
            exports = module.exports = SemVer; // The debug function is excluded entirely from the minified version.

            /* nomin */

            var debug;
            /* nomin */

            if (
              _typeof(process) === "object" &&
              /* nomin */
              process.env &&
              /* nomin */
              process.env.NODE_DEBUG &&
              /* nomin */
              /\bsemver\b/i.test(process.env.NODE_DEBUG)
            )
              /* nomin */
              debug = function debug() {
                /* nomin */
                var args = Array.prototype.slice.call(arguments, 0);
                /* nomin */

                args.unshift("SEMVER");
                /* nomin */

                console.log.apply(console, args);
                /* nomin */
              };
            /* nomin */
            /* nomin */ else debug = function debug() {}; // Note: this is the semver.org version of the spec that it implements
            // Not necessarily the package version of this code.

            exports.SEMVER_SPEC_VERSION = "2.0.0";
            var MAX_LENGTH = 256;
            var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991; // The actual regexps go on exports.re

            var re = (exports.re = []);
            var src = (exports.src = []);
            var R = 0; // The following Regular Expressions can be used for tokenizing,
            // validating, and parsing SemVer version strings.
            // ## Numeric Identifier
            // A single `0`, or a non-zero digit followed by zero or more digits.

            var NUMERICIDENTIFIER = R++;
            src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
            var NUMERICIDENTIFIERLOOSE = R++;
            src[NUMERICIDENTIFIERLOOSE] = "[0-9]+"; // ## Non-numeric Identifier
            // Zero or more digits, followed by a letter or hyphen, and then zero or
            // more letters, digits, or hyphens.

            var NONNUMERICIDENTIFIER = R++;
            src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*"; // ## Main Version
            // Three dot-separated numeric identifiers.

            var MAINVERSION = R++;
            src[MAINVERSION] =
              "(" +
              src[NUMERICIDENTIFIER] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIER] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIER] +
              ")";
            var MAINVERSIONLOOSE = R++;
            src[MAINVERSIONLOOSE] =
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")\\." +
              "(" +
              src[NUMERICIDENTIFIERLOOSE] +
              ")"; // ## Pre-release Version Identifier
            // A numeric identifier, or a non-numeric identifier.

            var PRERELEASEIDENTIFIER = R++;
            src[PRERELEASEIDENTIFIER] =
              "(?:" +
              src[NUMERICIDENTIFIER] +
              "|" +
              src[NONNUMERICIDENTIFIER] +
              ")";
            var PRERELEASEIDENTIFIERLOOSE = R++;
            src[PRERELEASEIDENTIFIERLOOSE] =
              "(?:" +
              src[NUMERICIDENTIFIERLOOSE] +
              "|" +
              src[NONNUMERICIDENTIFIER] +
              ")"; // ## Pre-release Version
            // Hyphen, followed by one or more dot-separated pre-release version
            // identifiers.

            var PRERELEASE = R++;
            src[PRERELEASE] =
              "(?:-(" +
              src[PRERELEASEIDENTIFIER] +
              "(?:\\." +
              src[PRERELEASEIDENTIFIER] +
              ")*))";
            var PRERELEASELOOSE = R++;
            src[PRERELEASELOOSE] =
              "(?:-?(" +
              src[PRERELEASEIDENTIFIERLOOSE] +
              "(?:\\." +
              src[PRERELEASEIDENTIFIERLOOSE] +
              ")*))"; // ## Build Metadata Identifier
            // Any combination of digits, letters, or hyphens.

            var BUILDIDENTIFIER = R++;
            src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+"; // ## Build Metadata
            // Plus sign, followed by one or more period-separated build metadata
            // identifiers.

            var BUILD = R++;
            src[BUILD] =
              "(?:\\+(" +
              src[BUILDIDENTIFIER] +
              "(?:\\." +
              src[BUILDIDENTIFIER] +
              ")*))"; // ## Full Version String
            // A main version, followed optionally by a pre-release version and
            // build metadata.
            // Note that the only major, minor, patch, and pre-release sections of
            // the version string are capturing groups.  The build metadata is not a
            // capturing group, because it should not ever be used in version
            // comparison.

            var FULL = R++;
            var FULLPLAIN =
              "v?" +
              src[MAINVERSION] +
              src[PRERELEASE] +
              "?" +
              src[BUILD] +
              "?";
            src[FULL] = "^" + FULLPLAIN + "$"; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
            // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
            // common in the npm registry.

            var LOOSEPLAIN =
              "[v=\\s]*" +
              src[MAINVERSIONLOOSE] +
              src[PRERELEASELOOSE] +
              "?" +
              src[BUILD] +
              "?";
            var LOOSE = R++;
            src[LOOSE] = "^" + LOOSEPLAIN + "$";
            var GTLT = R++;
            src[GTLT] = "((?:<|>)?=?)"; // Something like "2.*" or "1.2.x".
            // Note that "x.x" is a valid xRange identifer, meaning "any version"
            // Only the first item is strictly required.

            var XRANGEIDENTIFIERLOOSE = R++;
            src[XRANGEIDENTIFIERLOOSE] =
              src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
            var XRANGEIDENTIFIER = R++;
            src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
            var XRANGEPLAIN = R++;
            src[XRANGEPLAIN] =
              "[v=\\s]*(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIER] +
              ")" +
              "(?:" +
              src[PRERELEASE] +
              ")?" +
              src[BUILD] +
              "?" +
              ")?)?";
            var XRANGEPLAINLOOSE = R++;
            src[XRANGEPLAINLOOSE] =
              "[v=\\s]*(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:\\.(" +
              src[XRANGEIDENTIFIERLOOSE] +
              ")" +
              "(?:" +
              src[PRERELEASELOOSE] +
              ")?" +
              src[BUILD] +
              "?" +
              ")?)?";
            var XRANGE = R++;
            src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
            var XRANGELOOSE = R++;
            src[XRANGELOOSE] =
              "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$"; // Tilde ranges.
            // Meaning is "reasonably at or greater than"

            var LONETILDE = R++;
            src[LONETILDE] = "(?:~>?)";
            var TILDETRIM = R++;
            src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
            re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
            var tildeTrimReplace = "$1~";
            var TILDE = R++;
            src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
            var TILDELOOSE = R++;
            src[TILDELOOSE] =
              "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$"; // Caret ranges.
            // Meaning is "at least and backwards compatible with"

            var LONECARET = R++;
            src[LONECARET] = "(?:\\^)";
            var CARETTRIM = R++;
            src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
            re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
            var caretTrimReplace = "$1^";
            var CARET = R++;
            src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
            var CARETLOOSE = R++;
            src[CARETLOOSE] =
              "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$"; // A simple gt/lt/eq thing, or just "" to indicate "any version"

            var COMPARATORLOOSE = R++;
            src[COMPARATORLOOSE] =
              "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
            var COMPARATOR = R++;
            src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$"; // An expression to strip any whitespace between the gtlt and the thing
            // it modifies, so that `> 1.2.3` ==> `>1.2.3`

            var COMPARATORTRIM = R++;
            src[COMPARATORTRIM] =
              "(\\s*)" +
              src[GTLT] +
              "\\s*(" +
              LOOSEPLAIN +
              "|" +
              src[XRANGEPLAIN] +
              ")"; // this one has to use the /g flag

            re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
            var comparatorTrimReplace = "$1$2$3"; // Something like `1.2.3 - 1.2.4`
            // Note that these all use the loose form, because they'll be
            // checked against either the strict or loose comparator form
            // later.

            var HYPHENRANGE = R++;
            src[HYPHENRANGE] =
              "^\\s*(" +
              src[XRANGEPLAIN] +
              ")" +
              "\\s+-\\s+" +
              "(" +
              src[XRANGEPLAIN] +
              ")" +
              "\\s*$";
            var HYPHENRANGELOOSE = R++;
            src[HYPHENRANGELOOSE] =
              "^\\s*(" +
              src[XRANGEPLAINLOOSE] +
              ")" +
              "\\s+-\\s+" +
              "(" +
              src[XRANGEPLAINLOOSE] +
              ")" +
              "\\s*$"; // Star ranges basically just allow anything at all.

            var STAR = R++;
            src[STAR] = "(<|>)?=?\\s*\\*"; // Compile to actual regexp objects.
            // All are flag-free, unless they were created above with a flag.

            for (var i = 0; i < R; i++) {
              debug(i, src[i]);
              if (!re[i]) re[i] = new RegExp(src[i]);
            }

            exports.parse = parse;

            function parse(version, loose) {
              if (version instanceof SemVer) return version;
              if (typeof version !== "string") return null;
              if (version.length > MAX_LENGTH) return null;
              var r = loose ? re[LOOSE] : re[FULL];
              if (!r.test(version)) return null;

              try {
                return new SemVer(version, loose);
              } catch (er) {
                return null;
              }
            }

            exports.valid = valid;

            function valid(version, loose) {
              var v = parse(version, loose);
              return v ? v.version : null;
            }

            exports.clean = clean;

            function clean(version, loose) {
              var s = parse(version.trim().replace(/^[=v]+/, ""), loose);
              return s ? s.version : null;
            }

            exports.SemVer = SemVer;

            function SemVer(version, loose) {
              if (version instanceof SemVer) {
                if (version.loose === loose) return version;
                else version = version.version;
              } else if (typeof version !== "string") {
                throw new TypeError("Invalid Version: " + version);
              }

              if (version.length > MAX_LENGTH)
                throw new TypeError(
                  "version is longer than " + MAX_LENGTH + " characters"
                );
              if (!(this instanceof SemVer)) return new SemVer(version, loose);
              debug("SemVer", version, loose);
              this.loose = loose;
              var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);
              if (!m) throw new TypeError("Invalid Version: " + version);
              this.raw = version; // these are actually numbers

              this.major = +m[1];
              this.minor = +m[2];
              this.patch = +m[3];
              if (this.major > MAX_SAFE_INTEGER || this.major < 0)
                throw new TypeError("Invalid major version");
              if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
                throw new TypeError("Invalid minor version");
              if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
                throw new TypeError("Invalid patch version"); // numberify any prerelease numeric ids

              if (!m[4]) this.prerelease = [];
              else
                this.prerelease = m[4].split(".").map(function (id) {
                  if (/^[0-9]+$/.test(id)) {
                    var num = +id;
                    if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
                  }

                  return id;
                });
              this.build = m[5] ? m[5].split(".") : [];
              this.format();
            }

            SemVer.prototype.format = function () {
              this.version = this.major + "." + this.minor + "." + this.patch;
              if (this.prerelease.length)
                this.version += "-" + this.prerelease.join(".");
              return this.version;
            };

            SemVer.prototype.toString = function () {
              return this.version;
            };

            SemVer.prototype.compare = function (other) {
              debug("SemVer.compare", this.version, this.loose, other);
              if (!(other instanceof SemVer))
                other = new SemVer(other, this.loose);
              return this.compareMain(other) || this.comparePre(other);
            };

            SemVer.prototype.compareMain = function (other) {
              if (!(other instanceof SemVer))
                other = new SemVer(other, this.loose);
              return (
                compareIdentifiers(this.major, other.major) ||
                compareIdentifiers(this.minor, other.minor) ||
                compareIdentifiers(this.patch, other.patch)
              );
            };

            SemVer.prototype.comparePre = function (other) {
              if (!(other instanceof SemVer))
                other = new SemVer(other, this.loose); // NOT having a prerelease is > having one

              if (this.prerelease.length && !other.prerelease.length) return -1;
              else if (!this.prerelease.length && other.prerelease.length)
                return 1;
              else if (!this.prerelease.length && !other.prerelease.length)
                return 0;
              var i = 0;

              do {
                var a = this.prerelease[i];
                var b = other.prerelease[i];
                debug("prerelease compare", i, a, b);
                if (a === undefined && b === undefined) return 0;
                else if (b === undefined) return 1;
                else if (a === undefined) return -1;
                else if (a === b) continue;
                else return compareIdentifiers(a, b);
              } while (++i);
            }; // preminor will bump the version up to the next minor release, and immediately
            // down to pre-release. premajor and prepatch work the same way.

            SemVer.prototype.inc = function (release$$1, identifier) {
              switch (release$$1) {
                case "premajor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor = 0;
                  this.major++;
                  this.inc("pre", identifier);
                  break;

                case "preminor":
                  this.prerelease.length = 0;
                  this.patch = 0;
                  this.minor++;
                  this.inc("pre", identifier);
                  break;

                case "prepatch":
                  // If this is already a prerelease, it will bump to the next version
                  // drop any prereleases that might already exist, since they are not
                  // relevant at this point.
                  this.prerelease.length = 0;
                  this.inc("patch", identifier);
                  this.inc("pre", identifier);
                  break;
                // If the input is a non-prerelease version, this acts the same as
                // prepatch.

                case "prerelease":
                  if (this.prerelease.length === 0)
                    this.inc("patch", identifier);
                  this.inc("pre", identifier);
                  break;

                case "major":
                  // If this is a pre-major version, bump up to the same major version.
                  // Otherwise increment major.
                  // 1.0.0-5 bumps to 1.0.0
                  // 1.1.0 bumps to 2.0.0
                  if (
                    this.minor !== 0 ||
                    this.patch !== 0 ||
                    this.prerelease.length === 0
                  )
                    this.major++;
                  this.minor = 0;
                  this.patch = 0;
                  this.prerelease = [];
                  break;

                case "minor":
                  // If this is a pre-minor version, bump up to the same minor version.
                  // Otherwise increment minor.
                  // 1.2.0-5 bumps to 1.2.0
                  // 1.2.1 bumps to 1.3.0
                  if (this.patch !== 0 || this.prerelease.length === 0)
                    this.minor++;
                  this.patch = 0;
                  this.prerelease = [];
                  break;

                case "patch":
                  // If this is not a pre-release version, it will increment the patch.
                  // If it is a pre-release it will bump up to the same patch version.
                  // 1.2.0-5 patches to 1.2.0
                  // 1.2.0 patches to 1.2.1
                  if (this.prerelease.length === 0) this.patch++;
                  this.prerelease = [];
                  break;
                // This probably shouldn't be used publicly.
                // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.

                case "pre":
                  if (this.prerelease.length === 0) this.prerelease = [0];
                  else {
                    var i = this.prerelease.length;

                    while (--i >= 0) {
                      if (typeof this.prerelease[i] === "number") {
                        this.prerelease[i]++;
                        i = -2;
                      }
                    }

                    if (i === -1)
                      // didn't increment anything
                      this.prerelease.push(0);
                  }

                  if (identifier) {
                    // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                    // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                    if (this.prerelease[0] === identifier) {
                      if (isNaN(this.prerelease[1]))
                        this.prerelease = [identifier, 0];
                    } else this.prerelease = [identifier, 0];
                  }

                  break;

                default:
                  throw new Error("invalid increment argument: " + release$$1);
              }

              this.format();
              this.raw = this.version;
              return this;
            };

            exports.inc = inc;

            function inc(version, release$$1, loose, identifier) {
              if (typeof loose === "string") {
                identifier = loose;
                loose = undefined;
              }

              try {
                return new SemVer(version, loose).inc(
                  release$$1,
                  identifier
                ).version;
              } catch (er) {
                return null;
              }
            }

            exports.diff = diff;

            function diff(version1, version2) {
              if (eq(version1, version2)) {
                return null;
              } else {
                var v1 = parse(version1);
                var v2 = parse(version2);

                if (v1.prerelease.length || v2.prerelease.length) {
                  for (var key in v1) {
                    if (key === "major" || key === "minor" || key === "patch") {
                      if (v1[key] !== v2[key]) {
                        return "pre" + key;
                      }
                    }
                  }

                  return "prerelease";
                }

                for (var key in v1) {
                  if (key === "major" || key === "minor" || key === "patch") {
                    if (v1[key] !== v2[key]) {
                      return key;
                    }
                  }
                }
              }
            }

            exports.compareIdentifiers = compareIdentifiers;
            var numeric = /^[0-9]+$/;

            function compareIdentifiers(a, b) {
              var anum = numeric.test(a);
              var bnum = numeric.test(b);

              if (anum && bnum) {
                a = +a;
                b = +b;
              }

              return anum && !bnum
                ? -1
                : bnum && !anum
                ? 1
                : a < b
                ? -1
                : a > b
                ? 1
                : 0;
            }

            exports.rcompareIdentifiers = rcompareIdentifiers;

            function rcompareIdentifiers(a, b) {
              return compareIdentifiers(b, a);
            }

            exports.major = major;

            function major(a, loose) {
              return new SemVer(a, loose).major;
            }

            exports.minor = minor;

            function minor(a, loose) {
              return new SemVer(a, loose).minor;
            }

            exports.patch = patch;

            function patch(a, loose) {
              return new SemVer(a, loose).patch;
            }

            exports.compare = compare;

            function compare(a, b, loose) {
              return new SemVer(a, loose).compare(new SemVer(b, loose));
            }

            exports.compareLoose = compareLoose;

            function compareLoose(a, b) {
              return compare(a, b, true);
            }

            exports.rcompare = rcompare;

            function rcompare(a, b, loose) {
              return compare(b, a, loose);
            }

            exports.sort = sort;

            function sort(list, loose) {
              return list.sort(function (a, b) {
                return exports.compare(a, b, loose);
              });
            }

            exports.rsort = rsort;

            function rsort(list, loose) {
              return list.sort(function (a, b) {
                return exports.rcompare(a, b, loose);
              });
            }

            exports.gt = gt;

            function gt(a, b, loose) {
              return compare(a, b, loose) > 0;
            }

            exports.lt = lt;

            function lt(a, b, loose) {
              return compare(a, b, loose) < 0;
            }

            exports.eq = eq;

            function eq(a, b, loose) {
              return compare(a, b, loose) === 0;
            }

            exports.neq = neq;

            function neq(a, b, loose) {
              return compare(a, b, loose) !== 0;
            }

            exports.gte = gte;

            function gte(a, b, loose) {
              return compare(a, b, loose) >= 0;
            }

            exports.lte = lte;

            function lte(a, b, loose) {
              return compare(a, b, loose) <= 0;
            }

            exports.cmp = cmp;

            function cmp(a, op, b, loose) {
              var ret;

              switch (op) {
                case "===":
                  if (_typeof(a) === "object") a = a.version;
                  if (_typeof(b) === "object") b = b.version;
                  ret = a === b;
                  break;

                case "!==":
                  if (_typeof(a) === "object") a = a.version;
                  if (_typeof(b) === "object") b = b.version;
                  ret = a !== b;
                  break;

                case "":
                case "=":
                case "==":
                  ret = eq(a, b, loose);
                  break;

                case "!=":
                  ret = neq(a, b, loose);
                  break;

                case ">":
                  ret = gt(a, b, loose);
                  break;

                case ">=":
                  ret = gte(a, b, loose);
                  break;

                case "<":
                  ret = lt(a, b, loose);
                  break;

                case "<=":
                  ret = lte(a, b, loose);
                  break;

                default:
                  throw new TypeError("Invalid operator: " + op);
              }

              return ret;
            }

            exports.Comparator = Comparator;

            function Comparator(comp, loose) {
              if (comp instanceof Comparator) {
                if (comp.loose === loose) return comp;
                else comp = comp.value;
              }

              if (!(this instanceof Comparator))
                return new Comparator(comp, loose);
              debug("comparator", comp, loose);
              this.loose = loose;
              this.parse(comp);
              if (this.semver === ANY) this.value = "";
              else this.value = this.operator + this.semver.version;
              debug("comp", this);
            }

            var ANY = {};

            Comparator.prototype.parse = function (comp) {
              var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
              var m = comp.match(r);
              if (!m) throw new TypeError("Invalid comparator: " + comp);
              this.operator = m[1];
              if (this.operator === "=") this.operator = ""; // if it literally is just '>' or '' then allow anything.

              if (!m[2]) this.semver = ANY;
              else this.semver = new SemVer(m[2], this.loose);
            };

            Comparator.prototype.toString = function () {
              return this.value;
            };

            Comparator.prototype.test = function (version) {
              debug("Comparator.test", version, this.loose);
              if (this.semver === ANY) return true;
              if (typeof version === "string")
                version = new SemVer(version, this.loose);
              return cmp(version, this.operator, this.semver, this.loose);
            };

            Comparator.prototype.intersects = function (comp, loose) {
              if (!(comp instanceof Comparator)) {
                throw new TypeError("a Comparator is required");
              }

              var rangeTmp;

              if (this.operator === "") {
                rangeTmp = new Range(comp.value, loose);
                return satisfies(this.value, rangeTmp, loose);
              } else if (comp.operator === "") {
                rangeTmp = new Range(this.value, loose);
                return satisfies(comp.semver, rangeTmp, loose);
              }

              var sameDirectionIncreasing =
                (this.operator === ">=" || this.operator === ">") &&
                (comp.operator === ">=" || comp.operator === ">");
              var sameDirectionDecreasing =
                (this.operator === "<=" || this.operator === "<") &&
                (comp.operator === "<=" || comp.operator === "<");
              var sameSemVer = this.semver.version === comp.semver.version;
              var differentDirectionsInclusive =
                (this.operator === ">=" || this.operator === "<=") &&
                (comp.operator === ">=" || comp.operator === "<=");
              var oppositeDirectionsLessThan =
                cmp(this.semver, "<", comp.semver, loose) &&
                (this.operator === ">=" || this.operator === ">") &&
                (comp.operator === "<=" || comp.operator === "<");
              var oppositeDirectionsGreaterThan =
                cmp(this.semver, ">", comp.semver, loose) &&
                (this.operator === "<=" || this.operator === "<") &&
                (comp.operator === ">=" || comp.operator === ">");
              return (
                sameDirectionIncreasing ||
                sameDirectionDecreasing ||
                (sameSemVer && differentDirectionsInclusive) ||
                oppositeDirectionsLessThan ||
                oppositeDirectionsGreaterThan
              );
            };

            exports.Range = Range;

            function Range(range, loose) {
              if (range instanceof Range) {
                if (range.loose === loose) {
                  return range;
                } else {
                  return new Range(range.raw, loose);
                }
              }

              if (range instanceof Comparator) {
                return new Range(range.value, loose);
              }

              if (!(this instanceof Range)) return new Range(range, loose);
              this.loose = loose; // First, split based on boolean or ||

              this.raw = range;
              this.set = range
                .split(/\s*\|\|\s*/)
                .map(function (range) {
                  return this.parseRange(range.trim());
                }, this)
                .filter(function (c) {
                  // throw out any that are not relevant for whatever reason
                  return c.length;
                });

              if (!this.set.length) {
                throw new TypeError("Invalid SemVer Range: " + range);
              }

              this.format();
            }

            Range.prototype.format = function () {
              this.range = this.set
                .map(function (comps) {
                  return comps.join(" ").trim();
                })
                .join("||")
                .trim();
              return this.range;
            };

            Range.prototype.toString = function () {
              return this.range;
            };

            Range.prototype.parseRange = function (range) {
              var loose = this.loose;
              range = range.trim();
              debug("range", range, loose); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

              var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
              range = range.replace(hr, hyphenReplace);
              debug("hyphen replace", range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

              range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
              debug("comparator trim", range, re[COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

              range = range.replace(re[TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

              range = range.replace(re[CARETTRIM], caretTrimReplace); // normalize spaces

              range = range.split(/\s+/).join(" "); // At this point, the range is completely trimmed and
              // ready to be split into comparators.

              var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
              var set = range
                .split(" ")
                .map(function (comp) {
                  return parseComparator(comp, loose);
                })
                .join(" ")
                .split(/\s+/);

              if (this.loose) {
                // in loose mode, throw out any that are not valid comparators
                set = set.filter(function (comp) {
                  return !!comp.match(compRe);
                });
              }

              set = set.map(function (comp) {
                return new Comparator(comp, loose);
              });
              return set;
            };

            Range.prototype.intersects = function (range, loose) {
              if (!(range instanceof Range)) {
                throw new TypeError("a Range is required");
              }

              return this.set.some(function (thisComparators) {
                return thisComparators.every(function (thisComparator) {
                  return range.set.some(function (rangeComparators) {
                    return rangeComparators.every(function (rangeComparator) {
                      return thisComparator.intersects(rangeComparator, loose);
                    });
                  });
                });
              });
            }; // Mostly just for testing and legacy API reasons

            exports.toComparators = toComparators;

            function toComparators(range, loose) {
              return new Range(range, loose).set.map(function (comp) {
                return comp
                  .map(function (c) {
                    return c.value;
                  })
                  .join(" ")
                  .trim()
                  .split(" ");
              });
            } // comprised of xranges, tildes, stars, and gtlt's at this point.
            // already replaced the hyphen ranges
            // turn into a set of JUST comparators.

            function parseComparator(comp, loose) {
              debug("comp", comp);
              comp = replaceCarets(comp, loose);
              debug("caret", comp);
              comp = replaceTildes(comp, loose);
              debug("tildes", comp);
              comp = replaceXRanges(comp, loose);
              debug("xrange", comp);
              comp = replaceStars(comp, loose);
              debug("stars", comp);
              return comp;
            }

            function isX(id) {
              return !id || id.toLowerCase() === "x" || id === "*";
            } // ~, ~> --> * (any, kinda silly)
            // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
            // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
            // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
            // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
            // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0

            function replaceTildes(comp, loose) {
              return comp
                .trim()
                .split(/\s+/)
                .map(function (comp) {
                  return replaceTilde(comp, loose);
                })
                .join(" ");
            }

            function replaceTilde(comp, loose) {
              var r = loose ? re[TILDELOOSE] : re[TILDE];
              return comp.replace(r, function (_, M, m, p, pr) {
                debug("tilde", comp, _, M, m, p, pr);
                var ret;
                if (isX(M)) ret = "";
                else if (isX(m)) ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                else if (isX(p))
                  // ~1.2 == >=1.2.0 <1.3.0
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                else if (pr) {
                  debug("replaceTilde pr", pr);
                  if (pr.charAt(0) !== "-") pr = "-" + pr;
                  ret =
                    ">=" +
                    M +
                    "." +
                    m +
                    "." +
                    p +
                    pr +
                    " <" +
                    M +
                    "." +
                    (+m + 1) +
                    ".0";
                } // ~1.2.3 == >=1.2.3 <1.3.0
                else
                  ret =
                    ">=" +
                    M +
                    "." +
                    m +
                    "." +
                    p +
                    " <" +
                    M +
                    "." +
                    (+m + 1) +
                    ".0";
                debug("tilde return", ret);
                return ret;
              });
            } // ^ --> * (any, kinda silly)
            // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
            // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
            // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
            // ^1.2.3 --> >=1.2.3 <2.0.0
            // ^1.2.0 --> >=1.2.0 <2.0.0

            function replaceCarets(comp, loose) {
              return comp
                .trim()
                .split(/\s+/)
                .map(function (comp) {
                  return replaceCaret(comp, loose);
                })
                .join(" ");
            }

            function replaceCaret(comp, loose) {
              debug("caret", comp, loose);
              var r = loose ? re[CARETLOOSE] : re[CARET];
              return comp.replace(r, function (_, M, m, p, pr) {
                debug("caret", comp, _, M, m, p, pr);
                var ret;
                if (isX(M)) ret = "";
                else if (isX(m)) ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                else if (isX(p)) {
                  if (M === "0")
                    ret =
                      ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                  else ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
                } else if (pr) {
                  debug("replaceCaret pr", pr);
                  if (pr.charAt(0) !== "-") pr = "-" + pr;

                  if (M === "0") {
                    if (m === "0")
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        pr +
                        " <" +
                        M +
                        "." +
                        m +
                        "." +
                        (+p + 1);
                    else
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        pr +
                        " <" +
                        M +
                        "." +
                        (+m + 1) +
                        ".0";
                  } else
                    ret =
                      ">=" +
                      M +
                      "." +
                      m +
                      "." +
                      p +
                      pr +
                      " <" +
                      (+M + 1) +
                      ".0.0";
                } else {
                  debug("no pr");

                  if (M === "0") {
                    if (m === "0")
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        " <" +
                        M +
                        "." +
                        m +
                        "." +
                        (+p + 1);
                    else
                      ret =
                        ">=" +
                        M +
                        "." +
                        m +
                        "." +
                        p +
                        " <" +
                        M +
                        "." +
                        (+m + 1) +
                        ".0";
                  } else
                    ret =
                      ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
                }
                debug("caret return", ret);
                return ret;
              });
            }

            function replaceXRanges(comp, loose) {
              debug("replaceXRanges", comp, loose);
              return comp
                .split(/\s+/)
                .map(function (comp) {
                  return replaceXRange(comp, loose);
                })
                .join(" ");
            }

            function replaceXRange(comp, loose) {
              comp = comp.trim();
              var r = loose ? re[XRANGELOOSE] : re[XRANGE];
              return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
                debug("xRange", comp, ret, gtlt, M, m, p, pr);
                var xM = isX(M);
                var xm = xM || isX(m);
                var xp = xm || isX(p);
                var anyX = xp;
                if (gtlt === "=" && anyX) gtlt = "";

                if (xM) {
                  if (gtlt === ">" || gtlt === "<") {
                    // nothing is allowed
                    ret = "<0.0.0";
                  } else {
                    // nothing is forbidden
                    ret = "*";
                  }
                } else if (gtlt && anyX) {
                  // replace X with 0
                  if (xm) m = 0;
                  if (xp) p = 0;

                  if (gtlt === ">") {
                    // >1 => >=2.0.0
                    // >1.2 => >=1.3.0
                    // >1.2.3 => >= 1.2.4
                    gtlt = ">=";

                    if (xm) {
                      M = +M + 1;
                      m = 0;
                      p = 0;
                    } else if (xp) {
                      m = +m + 1;
                      p = 0;
                    }
                  } else if (gtlt === "<=") {
                    // <=0.7.x is actually <0.8.0, since any 0.7.x should
                    // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                    gtlt = "<";
                    if (xm) M = +M + 1;
                    else m = +m + 1;
                  }

                  ret = gtlt + M + "." + m + "." + p;
                } else if (xm) {
                  ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
                } else if (xp) {
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                }

                debug("xRange return", ret);
                return ret;
              });
            } // Because * is AND-ed with everything else in the comparator,
            // and '' means "any version", just remove the *s entirely.

            function replaceStars(comp, loose) {
              debug("replaceStars", comp, loose); // Looseness is ignored here.  star is always as loose as it gets!

              return comp.trim().replace(re[STAR], "");
            } // This function is passed to string.replace(re[HYPHENRANGE])
            // M, m, patch, prerelease, build
            // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
            // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
            // 1.2 - 3.4 => >=1.2.0 <3.5.0

            function hyphenReplace(
              $0,
              from,
              fM,
              fm,
              fp,
              fpr,
              fb,
              to,
              tM,
              tm,
              tp,
              tpr,
              tb
            ) {
              if (isX(fM)) from = "";
              else if (isX(fm)) from = ">=" + fM + ".0.0";
              else if (isX(fp)) from = ">=" + fM + "." + fm + ".0";
              else from = ">=" + from;
              if (isX(tM)) to = "";
              else if (isX(tm)) to = "<" + (+tM + 1) + ".0.0";
              else if (isX(tp)) to = "<" + tM + "." + (+tm + 1) + ".0";
              else if (tpr) to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
              else to = "<=" + to;
              return (from + " " + to).trim();
            } // if ANY of the sets match ALL of its comparators, then pass

            Range.prototype.test = function (version) {
              if (!version) return false;
              if (typeof version === "string")
                version = new SemVer(version, this.loose);

              for (var i = 0; i < this.set.length; i++) {
                if (testSet(this.set[i], version)) return true;
              }

              return false;
            };

            function testSet(set, version) {
              for (var i = 0; i < set.length; i++) {
                if (!set[i].test(version)) return false;
              }

              if (version.prerelease.length) {
                // Find the set of versions that are allowed to have prereleases
                // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
                // That should allow `1.2.3-pr.2` to pass.
                // However, `1.2.4-alpha.notready` should NOT be allowed,
                // even though it's within the range set by the comparators.
                for (var i = 0; i < set.length; i++) {
                  debug(set[i].semver);
                  if (set[i].semver === ANY) continue;

                  if (set[i].semver.prerelease.length > 0) {
                    var allowed = set[i].semver;
                    if (
                      allowed.major === version.major &&
                      allowed.minor === version.minor &&
                      allowed.patch === version.patch
                    )
                      return true;
                  }
                } // Version has a -pre, but it's not one of the ones we like.

                return false;
              }

              return true;
            }

            exports.satisfies = satisfies;

            function satisfies(version, range, loose) {
              try {
                range = new Range(range, loose);
              } catch (er) {
                return false;
              }

              return range.test(version);
            }

            exports.maxSatisfying = maxSatisfying;

            function maxSatisfying(versions$$1, range, loose) {
              var max = null;
              var maxSV = null;

              try {
                var rangeObj = new Range(range, loose);
              } catch (er) {
                return null;
              }

              versions$$1.forEach(function (v) {
                if (rangeObj.test(v)) {
                  // satisfies(v, range, loose)
                  if (!max || maxSV.compare(v) === -1) {
                    // compare(max, v, true)
                    max = v;
                    maxSV = new SemVer(max, loose);
                  }
                }
              });
              return max;
            }

            exports.minSatisfying = minSatisfying;

            function minSatisfying(versions$$1, range, loose) {
              var min = null;
              var minSV = null;

              try {
                var rangeObj = new Range(range, loose);
              } catch (er) {
                return null;
              }

              versions$$1.forEach(function (v) {
                if (rangeObj.test(v)) {
                  // satisfies(v, range, loose)
                  if (!min || minSV.compare(v) === 1) {
                    // compare(min, v, true)
                    min = v;
                    minSV = new SemVer(min, loose);
                  }
                }
              });
              return min;
            }

            exports.validRange = validRange;

            function validRange(range, loose) {
              try {
                // Return '*' instead of '' so that truthiness works.
                // This will throw if it's invalid anyway
                return new Range(range, loose).range || "*";
              } catch (er) {
                return null;
              }
            } // Determine if version is less than all the versions possible in the range

            exports.ltr = ltr;

            function ltr(version, range, loose) {
              return outside(version, range, "<", loose);
            } // Determine if version is greater than all the versions possible in the range.

            exports.gtr = gtr;

            function gtr(version, range, loose) {
              return outside(version, range, ">", loose);
            }

            exports.outside = outside;

            function outside(version, range, hilo, loose) {
              version = new SemVer(version, loose);
              range = new Range(range, loose);
              var gtfn, ltefn, ltfn, comp, ecomp;

              switch (hilo) {
                case ">":
                  gtfn = gt;
                  ltefn = lte;
                  ltfn = lt;
                  comp = ">";
                  ecomp = ">=";
                  break;

                case "<":
                  gtfn = lt;
                  ltefn = gte;
                  ltfn = gt;
                  comp = "<";
                  ecomp = "<=";
                  break;

                default:
                  throw new TypeError('Must provide a hilo val of "<" or ">"');
              } // If it satisifes the range it is not outside

              if (satisfies(version, range, loose)) {
                return false;
              } // From now on, variable terms are as if we're in "gtr" mode.
              // but note that everything is flipped for the "ltr" function.

              for (var i = 0; i < range.set.length; ++i) {
                var comparators = range.set[i];
                var high = null;
                var low = null;
                comparators.forEach(function (comparator) {
                  if (comparator.semver === ANY) {
                    comparator = new Comparator(">=0.0.0");
                  }

                  high = high || comparator;
                  low = low || comparator;

                  if (gtfn(comparator.semver, high.semver, loose)) {
                    high = comparator;
                  } else if (ltfn(comparator.semver, low.semver, loose)) {
                    low = comparator;
                  }
                }); // If the edge version comparator has a operator then our version
                // isn't outside it

                if (high.operator === comp || high.operator === ecomp) {
                  return false;
                } // If the lowest version comparator has an operator and our version
                // is less than it then it isn't higher than the range

                if (
                  (!low.operator || low.operator === comp) &&
                  ltefn(version, low.semver)
                ) {
                  return false;
                } else if (
                  low.operator === ecomp &&
                  ltfn(version, low.semver)
                ) {
                  return false;
                }
              }

              return true;
            }

            exports.prerelease = prerelease;

            function prerelease(version, loose) {
              var parsed = parse(version, loose);
              return parsed && parsed.prerelease.length
                ? parsed.prerelease
                : null;
            }

            exports.intersects = intersects;

            function intersects(r1, r2, loose) {
              r1 = new Range(r1, loose);
              r2 = new Range(r2, loose);
              return r1.intersects(r2);
            }
          });

          var arrayify = function arrayify(object, keyName) {
            return Object.keys(object).reduce(function (array, key) {
              return array.concat(
                Object.assign(_defineProperty({}, keyName, key), object[key])
              );
            }, []);
          };

          var dedent_1 = createCommonjsModule(function (module) {
            "use strict";

            function dedent(strings) {
              var raw = void 0;

              if (typeof strings === "string") {
                // dedent can be used as a plain function
                raw = [strings];
              } else {
                raw = strings.raw;
              } // first, perform interpolation

              var result = "";

              for (var i = 0; i < raw.length; i++) {
                result += raw[i] // join lines when there is a suppressed newline
                  .replace(/\\\n[ \t]*/g, "") // handle escaped backticks
                  .replace(/\\`/g, "`");

                if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {
                  result +=
                    arguments.length <= i + 1 ? undefined : arguments[i + 1];
                }
              } // now strip indentation

              var lines = result.split("\n");
              var mindent = null;
              lines.forEach(function (l) {
                var m = l.match(/^(\s+)\S+/);

                if (m) {
                  var indent = m[1].length;

                  if (!mindent) {
                    // this is the first indented line
                    mindent = indent;
                  } else {
                    mindent = Math.min(mindent, indent);
                  }
                }
              });

              if (mindent !== null) {
                result = lines
                  .map(function (l) {
                    return l[0] === " " ? l.slice(mindent) : l;
                  })
                  .join("\n");
              } // dedent eats leading and trailing whitespace too

              result = result.trim(); // handle escaped newlines at the end to ensure they don't get stripped too

              return result.replace(/\\n/g, "\n");
            }

            {
              module.exports = dedent;
            }
          });

          function _templateObject6() {
            var data = _taggedTemplateLiteral([
              "\n      Require either '@prettier' or '@format' to be present in the file's first docblock comment\n      in order for it to be formatted.\n    ",
            ]);

            _templateObject6 = function _templateObject6() {
              return data;
            };

            return data;
          }

          function _templateObject5() {
            var data = _taggedTemplateLiteral([
              "\n      Format code starting at a given character offset.\n      The range will extend backwards to the start of the first line containing the selected statement.\n      This option cannot be used with --cursor-offset.\n    ",
            ]);

            _templateObject5 = function _templateObject5() {
              return data;
            };

            return data;
          }

          function _templateObject4() {
            var data = _taggedTemplateLiteral([
              "\n      Format code ending at a given character offset (exclusive).\n      The range will extend forwards to the end of the selected statement.\n      This option cannot be used with --cursor-offset.\n    ",
            ]);

            _templateObject4 = function _templateObject4() {
              return data;
            };

            return data;
          }

          function _templateObject3() {
            var data = _taggedTemplateLiteral([
              "\n      Custom directory that contains prettier plugins in node_modules subdirectory.\n      Overrides default behavior when plugins are searched relatively to the location of Prettier.\n      Multiple values are accepted.\n    ",
            ]);

            _templateObject3 = function _templateObject3() {
              return data;
            };

            return data;
          }

          function _templateObject2() {
            var data = _taggedTemplateLiteral([
              "\n          Maintain existing\n          (mixed values within one file are normalised by looking at what's used after the first line)\n        ",
            ]);

            _templateObject2 = function _templateObject2() {
              return data;
            };

            return data;
          }

          function _templateObject() {
            var data = _taggedTemplateLiteral([
              "\n      Print (to stderr) where a cursor at the given position would move to after formatting.\n      This option cannot be used with --range-start and --range-end.\n    ",
            ]);

            _templateObject = function _templateObject() {
              return data;
            };

            return data;
          }

          var CATEGORY_CONFIG = "Config";
          var CATEGORY_EDITOR = "Editor";
          var CATEGORY_FORMAT = "Format";
          var CATEGORY_OTHER = "Other";
          var CATEGORY_OUTPUT = "Output";
          var CATEGORY_GLOBAL = "Global";
          var CATEGORY_SPECIAL = "Special";
          /**
           * @typedef {Object} OptionInfo
           * @property {string} since - available since version
           * @property {string} category
           * @property {'int' | 'boolean' | 'choice' | 'path'} type
           * @property {boolean} array - indicate it's an array of the specified type
           * @property {boolean?} deprecated - deprecated since version
           * @property {OptionRedirectInfo?} redirect - redirect deprecated option
           * @property {string} description
           * @property {string?} oppositeDescription - for `false` option
           * @property {OptionValueInfo} default
           * @property {OptionRangeInfo?} range - for type int
           * @property {OptionChoiceInfo?} choices - for type choice
           * @property {(value: any) => boolean} exception
           *
           * @typedef {number | boolean | string} OptionValue
           * @typedef {OptionValue | [{ value: OptionValue[] }] | Array<{ since: string, value: OptionValue}>} OptionValueInfo
           *
           * @typedef {Object} OptionRedirectInfo
           * @property {string} option
           * @property {OptionValue} value
           *
           * @typedef {Object} OptionRangeInfo
           * @property {number} start - recommended range start
           * @property {number} end - recommended range end
           * @property {number} step - recommended range step
           *
           * @typedef {Object} OptionChoiceInfo
           * @property {boolean | string} value - boolean for the option that is originally boolean type
           * @property {string?} description - undefined if redirect
           * @property {string?} since - undefined if available since the first version of the option
           * @property {string?} deprecated - deprecated since version
           * @property {OptionValueInfo?} redirect - redirect deprecated value
           *
           * @property {string?} cliName
           * @property {string?} cliCategory
           * @property {string?} cliDescription
           */

          /** @type {{ [name: string]: OptionInfo } */

          var options$2 = {
            cursorOffset: {
              since: "1.4.0",
              category: CATEGORY_SPECIAL,
              type: "int",
              default: -1,
              range: {
                start: -1,
                end: Infinity,
                step: 1,
              },
              description: dedent_1(_templateObject()),
              cliCategory: CATEGORY_EDITOR,
            },
            endOfLine: {
              since: "1.15.0",
              category: CATEGORY_GLOBAL,
              type: "choice",
              default: "auto",
              description: "Which end of line characters to apply.",
              choices: [
                {
                  value: "auto",
                  description: dedent_1(_templateObject2()),
                },
                {
                  value: "lf",
                  description:
                    "Line Feed only (\\n), common on Linux and macOS as well as inside git repos",
                },
                {
                  value: "crlf",
                  description:
                    "Carriage Return + Line Feed characters (\\r\\n), common on Windows",
                },
                {
                  value: "cr",
                  description:
                    "Carriage Return character only (\\r), used very rarely",
                },
              ],
            },
            filepath: {
              since: "1.4.0",
              category: CATEGORY_SPECIAL,
              type: "path",
              description:
                "Specify the input filepath. This will be used to do parser inference.",
              cliName: "stdin-filepath",
              cliCategory: CATEGORY_OTHER,
              cliDescription:
                "Path to the file to pretend that stdin comes from.",
            },
            insertPragma: {
              since: "1.8.0",
              category: CATEGORY_SPECIAL,
              type: "boolean",
              default: false,
              description:
                "Insert @format pragma into file's first docblock comment.",
              cliCategory: CATEGORY_OTHER,
            },
            parser: {
              since: "0.0.10",
              category: CATEGORY_GLOBAL,
              type: "choice",
              default: [
                {
                  since: "0.0.10",
                  value: "babylon",
                },
                {
                  since: "1.13.0",
                  value: undefined,
                },
              ],
              description: "Which parser to use.",
              exception: function exception(value) {
                return typeof value === "string" || typeof value === "function";
              },
              choices: [
                {
                  value: "flow",
                  description: "Flow",
                },
                {
                  value: "babylon",
                  description: "JavaScript",
                  deprecated: "1.16.0",
                  redirect: "babel",
                },
                {
                  value: "babel",
                  since: "1.16.0",
                  description: "JavaScript",
                },
                {
                  value: "babel-flow",
                  since: "1.16.0",
                  description: "Flow",
                },
                {
                  value: "typescript",
                  since: "1.4.0",
                  description: "TypeScript",
                },
                {
                  value: "css",
                  since: "1.7.1",
                  description: "CSS",
                },
                {
                  value: "postcss",
                  since: "1.4.0",
                  description: "CSS/Less/SCSS",
                  deprecated: "1.7.1",
                  redirect: "css",
                },
                {
                  value: "less",
                  since: "1.7.1",
                  description: "Less",
                },
                {
                  value: "scss",
                  since: "1.7.1",
                  description: "SCSS",
                },
                {
                  value: "json",
                  since: "1.5.0",
                  description: "JSON",
                },
                {
                  value: "json5",
                  since: "1.13.0",
                  description: "JSON5",
                },
                {
                  value: "json-stringify",
                  since: "1.13.0",
                  description: "JSON.stringify",
                },
                {
                  value: "graphql",
                  since: "1.5.0",
                  description: "GraphQL",
                },
                {
                  value: "markdown",
                  since: "1.8.0",
                  description: "Markdown",
                },
                {
                  value: "mdx",
                  since: "1.15.0",
                  description: "MDX",
                },
                {
                  value: "vue",
                  since: "1.10.0",
                  description: "Vue",
                },
                {
                  value: "yaml",
                  since: "1.14.0",
                  description: "YAML",
                },
                {
                  value: "glimmer",
                  since: null,
                  description: "Handlebars",
                },
                {
                  value: "html",
                  since: "1.15.0",
                  description: "HTML",
                },
                {
                  value: "angular",
                  since: "1.15.0",
                  description: "Angular",
                },
                {
                  value: "lwc",
                  since: "1.17.0",
                  description: "Lightning Web Components",
                },
              ],
            },
            plugins: {
              since: "1.10.0",
              type: "path",
              array: true,
              default: [
                {
                  value: [],
                },
              ],
              category: CATEGORY_GLOBAL,
              description:
                "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",
              exception: function exception(value) {
                return typeof value === "string" || _typeof(value) === "object";
              },
              cliName: "plugin",
              cliCategory: CATEGORY_CONFIG,
            },
            pluginSearchDirs: {
              since: "1.13.0",
              type: "path",
              array: true,
              default: [
                {
                  value: [],
                },
              ],
              category: CATEGORY_GLOBAL,
              description: dedent_1(_templateObject3()),
              exception: function exception(value) {
                return typeof value === "string" || _typeof(value) === "object";
              },
              cliName: "plugin-search-dir",
              cliCategory: CATEGORY_CONFIG,
            },
            printWidth: {
              since: "0.0.0",
              category: CATEGORY_GLOBAL,
              type: "int",
              default: 80,
              description: "The line length where Prettier will try wrap.",
              range: {
                start: 0,
                end: Infinity,
                step: 1,
              },
            },
            rangeEnd: {
              since: "1.4.0",
              category: CATEGORY_SPECIAL,
              type: "int",
              default: Infinity,
              range: {
                start: 0,
                end: Infinity,
                step: 1,
              },
              description: dedent_1(_templateObject4()),
              cliCategory: CATEGORY_EDITOR,
            },
            rangeStart: {
              since: "1.4.0",
              category: CATEGORY_SPECIAL,
              type: "int",
              default: 0,
              range: {
                start: 0,
                end: Infinity,
                step: 1,
              },
              description: dedent_1(_templateObject5()),
              cliCategory: CATEGORY_EDITOR,
            },
            requirePragma: {
              since: "1.7.0",
              category: CATEGORY_SPECIAL,
              type: "boolean",
              default: false,
              description: dedent_1(_templateObject6()),
              cliCategory: CATEGORY_OTHER,
            },
            tabWidth: {
              type: "int",
              category: CATEGORY_GLOBAL,
              default: 2,
              description: "Number of spaces per indentation level.",
              range: {
                start: 0,
                end: Infinity,
                step: 1,
              },
            },
            useFlowParser: {
              since: "0.0.0",
              category: CATEGORY_GLOBAL,
              type: "boolean",
              default: [
                {
                  since: "0.0.0",
                  value: false,
                },
                {
                  since: "1.15.0",
                  value: undefined,
                },
              ],
              deprecated: "0.0.10",
              description: "Use flow parser.",
              redirect: {
                option: "parser",
                value: "flow",
              },
              cliName: "flow-parser",
            },
            useTabs: {
              since: "1.0.0",
              category: CATEGORY_GLOBAL,
              type: "boolean",
              default: false,
              description: "Indent with tabs instead of spaces.",
            },
          };
          var coreOptions$1 = {
            CATEGORY_CONFIG: CATEGORY_CONFIG,
            CATEGORY_EDITOR: CATEGORY_EDITOR,
            CATEGORY_FORMAT: CATEGORY_FORMAT,
            CATEGORY_OTHER: CATEGORY_OTHER,
            CATEGORY_OUTPUT: CATEGORY_OUTPUT,
            CATEGORY_GLOBAL: CATEGORY_GLOBAL,
            CATEGORY_SPECIAL: CATEGORY_SPECIAL,
            options: options$2,
          };

          var require$$0 = (_package$1 && _package) || _package$1;

          var currentVersion = require$$0.version;
          var coreOptions = coreOptions$1.options;

          function getSupportInfo$2(version, opts) {
            opts = Object.assign(
              {
                plugins: [],
                showUnreleased: false,
                showDeprecated: false,
                showInternal: false,
              },
              opts
            );

            if (!version) {
              // pre-release version is smaller than the normal version in semver,
              // we need to treat it as the normal one so as to test new features.
              version = currentVersion.split("-", 1)[0];
            }

            var plugins = opts.plugins;
            var options = arrayify(
              Object.assign(
                plugins.reduce(function (currentOptions, plugin) {
                  return Object.assign(currentOptions, plugin.options);
                }, {}),
                coreOptions
              ),
              "name"
            )
              .sort(function (a, b) {
                return a.name === b.name ? 0 : a.name < b.name ? -1 : 1;
              })
              .filter(filterSince)
              .filter(filterDeprecated)
              .map(mapDeprecated)
              .map(mapInternal)
              .map(function (option) {
                var newOption = Object.assign({}, option);

                if (Array.isArray(newOption.default)) {
                  newOption.default =
                    newOption.default.length === 1
                      ? newOption.default[0].value
                      : newOption.default
                          .filter(filterSince)
                          .sort(function (info1, info2) {
                            return semver.compare(info2.since, info1.since);
                          })[0].value;
                }

                if (Array.isArray(newOption.choices)) {
                  newOption.choices = newOption.choices
                    .filter(filterSince)
                    .filter(filterDeprecated)
                    .map(mapDeprecated);
                }

                return newOption;
              })
              .map(function (option) {
                var filteredPlugins = plugins.filter(function (plugin) {
                  return (
                    plugin.defaultOptions && plugin.defaultOptions[option.name]
                  );
                });
                var pluginDefaults = filteredPlugins.reduce(function (
                  reduced,
                  plugin
                ) {
                  reduced[plugin.name] = plugin.defaultOptions[option.name];
                  return reduced;
                },
                {});
                return Object.assign(option, {
                  pluginDefaults: pluginDefaults,
                });
              });
            var usePostCssParser = semver.lt(version, "1.7.1");
            var useBabylonParser = semver.lt(version, "1.16.0");
            var languages = plugins
              .reduce(function (all, plugin) {
                return all.concat(plugin.languages || []);
              }, [])
              .filter(filterSince)
              .map(function (language) {
                // Prevent breaking changes
                if (language.name === "Markdown") {
                  return Object.assign({}, language, {
                    parsers: ["markdown"],
                  });
                }

                if (language.name === "TypeScript") {
                  return Object.assign({}, language, {
                    parsers: ["typescript"],
                  });
                } // "babylon" was renamed to "babel" in 1.16.0

                if (
                  useBabylonParser &&
                  language.parsers.indexOf("babel") !== -1
                ) {
                  return Object.assign({}, language, {
                    parsers: language.parsers.map(function (parser) {
                      return parser === "babel" ? "babylon" : parser;
                    }),
                  });
                }

                if (
                  usePostCssParser &&
                  (language.name === "CSS" || language.group === "CSS")
                ) {
                  return Object.assign({}, language, {
                    parsers: ["postcss"],
                  });
                }

                return language;
              });
            return {
              languages: languages,
              options: options,
            };

            function filterSince(object) {
              return (
                opts.showUnreleased ||
                !("since" in object) ||
                (object.since && semver.gte(version, object.since))
              );
            }

            function filterDeprecated(object) {
              return (
                opts.showDeprecated ||
                !("deprecated" in object) ||
                (object.deprecated && semver.lt(version, object.deprecated))
              );
            }

            function mapDeprecated(object) {
              if (!object.deprecated || opts.showDeprecated) {
                return object;
              }

              var newObject = Object.assign({}, object);
              delete newObject.deprecated;
              delete newObject.redirect;
              return newObject;
            }

            function mapInternal(object) {
              if (opts.showInternal) {
                return object;
              }

              var newObject = Object.assign({}, object);
              delete newObject.cliName;
              delete newObject.cliCategory;
              delete newObject.cliDescription;
              return newObject;
            }
          }

          var support = {
            getSupportInfo: getSupportInfo$2,
          };

          /*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

          /* global Reflect, Promise */
          var _extendStatics = function extendStatics(d, b) {
            _extendStatics =
              Object.setPrototypeOf ||
              ({
                __proto__: [],
              } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };

            return _extendStatics(d, b);
          };

          function __extends(d, b) {
            _extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          }

          var _assign = function __assign() {
            _assign =
              Object.assign ||
              function __assign(t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                  s = arguments[i];

                  for (var p in s) {
                    if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                  }
                }

                return t;
              };

            return _assign.apply(this, arguments);
          };

          function __rest(s, e) {
            var t = {};

            for (var p in s) {
              if (
                Object.prototype.hasOwnProperty.call(s, p) &&
                e.indexOf(p) < 0
              )
                t[p] = s[p];
            }

            if (s != null && typeof Object.getOwnPropertySymbols === "function")
              for (
                var i = 0, p = Object.getOwnPropertySymbols(s);
                i < p.length;
                i++
              ) {
                if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
              }
            return t;
          }
          function __decorate(decorators, target, key, desc) {
            var c = arguments.length,
              r =
                c < 3
                  ? target
                  : desc === null
                  ? (desc = Object.getOwnPropertyDescriptor(target, key))
                  : desc,
              d;
            if (
              (typeof Reflect === "undefined"
                ? "undefined"
                : _typeof(Reflect)) === "object" &&
              typeof Reflect.decorate === "function"
            )
              r = Reflect.decorate(decorators, target, key, desc);
            else
              for (var i = decorators.length - 1; i >= 0; i--) {
                if ((d = decorators[i]))
                  r =
                    (c < 3
                      ? d(r)
                      : c > 3
                      ? d(target, key, r)
                      : d(target, key)) || r;
              }
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          }
          function __param(paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          }
          function __metadata(metadataKey, metadataValue) {
            if (
              (typeof Reflect === "undefined"
                ? "undefined"
                : _typeof(Reflect)) === "object" &&
              typeof Reflect.metadata === "function"
            )
              return Reflect.metadata(metadataKey, metadataValue);
          }
          function __awaiter(thisArg, _arguments, P, generator) {
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done
                  ? resolve(result.value)
                  : new P(function (resolve) {
                      resolve(result.value);
                    }).then(fulfilled, rejected);
              }

              step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
              );
            });
          }
          function __generator(thisArg, body) {
            var _ = {
                label: 0,
                sent: function sent() {
                  if (t[0] & 1) throw t[1];
                  return t[1];
                },
                trys: [],
                ops: [],
              },
              f,
              y,
              t,
              g;
            return (
              (g = {
                next: verb(0),
                throw: verb(1),
                return: verb(2),
              }),
              typeof Symbol === "function" &&
                (g[Symbol.iterator] = function () {
                  return this;
                }),
              g
            );

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) {
                try {
                  if (
                    ((f = 1),
                    y &&
                      (t =
                        op[0] & 2
                          ? y["return"]
                          : op[0]
                          ? y["throw"] || ((t = y["return"]) && t.call(y), 0)
                          : y.next) &&
                      !(t = t.call(y, op[1])).done)
                  )
                    return t;
                  if (((y = 0), t)) op = [op[0] & 2, t.value];

                  switch (op[0]) {
                    case 0:
                    case 1:
                      t = op;
                      break;

                    case 4:
                      _.label++;
                      return {
                        value: op[1],
                        done: false,
                      };

                    case 5:
                      _.label++;
                      y = op[1];
                      op = [0];
                      continue;

                    case 7:
                      op = _.ops.pop();

                      _.trys.pop();

                      continue;

                    default:
                      if (
                        !((t = _.trys),
                        (t = t.length > 0 && t[t.length - 1])) &&
                        (op[0] === 6 || op[0] === 2)
                      ) {
                        _ = 0;
                        continue;
                      }

                      if (
                        op[0] === 3 &&
                        (!t || (op[1] > t[0] && op[1] < t[3]))
                      ) {
                        _.label = op[1];
                        break;
                      }

                      if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                      }

                      if (t && _.label < t[2]) {
                        _.label = t[2];

                        _.ops.push(op);

                        break;
                      }

                      if (t[2]) _.ops.pop();

                      _.trys.pop();

                      continue;
                  }

                  op = body.call(thisArg, _);
                } catch (e) {
                  op = [6, e];
                  y = 0;
                } finally {
                  f = t = 0;
                }
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true,
              };
            }
          }
          function __exportStar(m, exports) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          function __values(o) {
            var m = typeof Symbol === "function" && o[Symbol.iterator],
              i = 0;
            if (m) return m.call(o);
            return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o,
                };
              },
            };
          }
          function __read(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
              r,
              ar = [],
              e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                ar.push(r.value);
              }
            } catch (error) {
              e = {
                error: error,
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          }
          function __spread() {
            for (var ar = [], i = 0; i < arguments.length; i++) {
              ar = ar.concat(__read(arguments[i]));
            }

            return ar;
          }
          function __await(v) {
            return this instanceof __await
              ? ((this.v = v), this)
              : new __await(v);
          }
          function __asyncGenerator(thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator)
              throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
              i,
              q = [];
            return (
              (i = {}),
              verb("next"),
              verb("throw"),
              verb("return"),
              (i[Symbol.asyncIterator] = function () {
                return this;
              }),
              i
            );

            function verb(n) {
              if (g[n])
                i[n] = function (v) {
                  return new Promise(function (a, b) {
                    q.push([n, v, a, b]) > 1 || resume(n, v);
                  });
                };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await
                ? Promise.resolve(r.value.v).then(fulfill, reject)
                : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
            }
          }
          function __asyncDelegator(o) {
            var i, p;
            return (
              (i = {}),
              verb("next"),
              verb("throw", function (e) {
                throw e;
              }),
              verb("return"),
              (i[Symbol.iterator] = function () {
                return this;
              }),
              i
            );

            function verb(n, f) {
              i[n] = o[n]
                ? function (v) {
                    return (p = !p)
                      ? {
                          value: __await(o[n](v)),
                          done: n === "return",
                        }
                      : f
                      ? f(v)
                      : v;
                  }
                : f;
            }
          }
          function __asyncValues(o) {
            if (!Symbol.asyncIterator)
              throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
              i;
            return m
              ? m.call(o)
              : ((o =
                  typeof __values === "function"
                    ? __values(o)
                    : o[Symbol.iterator]()),
                (i = {}),
                verb("next"),
                verb("throw"),
                verb("return"),
                (i[Symbol.asyncIterator] = function () {
                  return this;
                }),
                i);

            function verb(n) {
              i[n] =
                o[n] &&
                function (v) {
                  return new Promise(function (resolve, reject) {
                    (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                  });
                };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d,
                });
              }, reject);
            }
          }
          function __makeTemplateObject(cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw,
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          }

          function __importStar(mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null)
              for (var k in mod) {
                if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
              }
            result.default = mod;
            return result;
          }
          function __importDefault(mod) {
            return mod && mod.__esModule
              ? mod
              : {
                  default: mod,
                };
          }

          var tslib_1 = Object.freeze({
            __extends: __extends,
            get __assign() {
              return _assign;
            },
            __rest: __rest,
            __decorate: __decorate,
            __param: __param,
            __metadata: __metadata,
            __awaiter: __awaiter,
            __generator: __generator,
            __exportStar: __exportStar,
            __values: __values,
            __read: __read,
            __spread: __spread,
            __await: __await,
            __asyncGenerator: __asyncGenerator,
            __asyncDelegator: __asyncDelegator,
            __asyncValues: __asyncValues,
            __makeTemplateObject: __makeTemplateObject,
            __importStar: __importStar,
            __importDefault: __importDefault,
          });

          var api = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.apiDescriptor = {
              key: function key(_key) {
                return /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(_key)
                  ? _key
                  : JSON.stringify(_key);
              },
              value: function value(_value) {
                if (_value === null || _typeof(_value) !== "object") {
                  return JSON.stringify(_value);
                }

                if (Array.isArray(_value)) {
                  return "[".concat(
                    _value
                      .map(function (subValue) {
                        return exports.apiDescriptor.value(subValue);
                      })
                      .join(", "),
                    "]"
                  );
                }

                var keys = Object.keys(_value);
                return keys.length === 0
                  ? "{}"
                  : "{ ".concat(
                      keys
                        .map(function (key) {
                          return ""
                            .concat(exports.apiDescriptor.key(key), ": ")
                            .concat(exports.apiDescriptor.value(_value[key]));
                        })
                        .join(", "),
                      " }"
                    );
              },
              pair: function pair(_ref) {
                var key = _ref.key,
                  value = _ref.value;
                return exports.apiDescriptor.value(
                  _defineProperty({}, key, value)
                );
              },
            };
          });
          unwrapExports(api);

          var descriptors = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            tslib_1.__exportStar(api, exports);
          });
          unwrapExports(descriptors);

          var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

          var escapeStringRegexp = function escapeStringRegexp(str) {
            if (typeof str !== "string") {
              throw new TypeError("Expected a string");
            }

            return str.replace(matchOperatorsRe, "\\$&");
          };

          var colorName = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkgrey: [169, 169, 169],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            grey: [128, 128, 128],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightgrey: [211, 211, 211],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            slategrey: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50],
          };

          var conversions = createCommonjsModule(function (module) {
            /* MIT license */
            // NOTE: conversions should only return primitive values (i.e. arrays, or
            //       values that give correct `typeof` results).
            //       do not use box values types (i.e. Number(), String(), etc.)
            var reverseKeywords = {};

            for (var key in colorName) {
              if (colorName.hasOwnProperty(key)) {
                reverseKeywords[colorName[key]] = key;
              }
            }

            var convert = (module.exports = {
              rgb: {
                channels: 3,
                labels: "rgb",
              },
              hsl: {
                channels: 3,
                labels: "hsl",
              },
              hsv: {
                channels: 3,
                labels: "hsv",
              },
              hwb: {
                channels: 3,
                labels: "hwb",
              },
              cmyk: {
                channels: 4,
                labels: "cmyk",
              },
              xyz: {
                channels: 3,
                labels: "xyz",
              },
              lab: {
                channels: 3,
                labels: "lab",
              },
              lch: {
                channels: 3,
                labels: "lch",
              },
              hex: {
                channels: 1,
                labels: ["hex"],
              },
              keyword: {
                channels: 1,
                labels: ["keyword"],
              },
              ansi16: {
                channels: 1,
                labels: ["ansi16"],
              },
              ansi256: {
                channels: 1,
                labels: ["ansi256"],
              },
              hcg: {
                channels: 3,
                labels: ["h", "c", "g"],
              },
              apple: {
                channels: 3,
                labels: ["r16", "g16", "b16"],
              },
              gray: {
                channels: 1,
                labels: ["gray"],
              },
            }); // hide .channels and .labels properties

            for (var model in convert) {
              if (convert.hasOwnProperty(model)) {
                if (!("channels" in convert[model])) {
                  throw new Error("missing channels property: " + model);
                }

                if (!("labels" in convert[model])) {
                  throw new Error("missing channel labels property: " + model);
                }

                if (convert[model].labels.length !== convert[model].channels) {
                  throw new Error(
                    "channel and label counts mismatch: " + model
                  );
                }

                var channels = convert[model].channels;
                var labels = convert[model].labels;
                delete convert[model].channels;
                delete convert[model].labels;
                Object.defineProperty(convert[model], "channels", {
                  value: channels,
                });
                Object.defineProperty(convert[model], "labels", {
                  value: labels,
                });
              }
            }

            convert.rgb.hsl = function (rgb) {
              var r = rgb[0] / 255;
              var g = rgb[1] / 255;
              var b = rgb[2] / 255;
              var min = Math.min(r, g, b);
              var max = Math.max(r, g, b);
              var delta = max - min;
              var h;
              var s;
              var l;

              if (max === min) {
                h = 0;
              } else if (r === max) {
                h = (g - b) / delta;
              } else if (g === max) {
                h = 2 + (b - r) / delta;
              } else if (b === max) {
                h = 4 + (r - g) / delta;
              }

              h = Math.min(h * 60, 360);

              if (h < 0) {
                h += 360;
              }

              l = (min + max) / 2;

              if (max === min) {
                s = 0;
              } else if (l <= 0.5) {
                s = delta / (max + min);
              } else {
                s = delta / (2 - max - min);
              }

              return [h, s * 100, l * 100];
            };

            convert.rgb.hsv = function (rgb) {
              var r = rgb[0];
              var g = rgb[1];
              var b = rgb[2];
              var min = Math.min(r, g, b);
              var max = Math.max(r, g, b);
              var delta = max - min;
              var h;
              var s;
              var v;

              if (max === 0) {
                s = 0;
              } else {
                s = ((delta / max) * 1000) / 10;
              }

              if (max === min) {
                h = 0;
              } else if (r === max) {
                h = (g - b) / delta;
              } else if (g === max) {
                h = 2 + (b - r) / delta;
              } else if (b === max) {
                h = 4 + (r - g) / delta;
              }

              h = Math.min(h * 60, 360);

              if (h < 0) {
                h += 360;
              }

              v = ((max / 255) * 1000) / 10;
              return [h, s, v];
            };

            convert.rgb.hwb = function (rgb) {
              var r = rgb[0];
              var g = rgb[1];
              var b = rgb[2];
              var h = convert.rgb.hsl(rgb)[0];
              var w = (1 / 255) * Math.min(r, Math.min(g, b));
              b = 1 - (1 / 255) * Math.max(r, Math.max(g, b));
              return [h, w * 100, b * 100];
            };

            convert.rgb.cmyk = function (rgb) {
              var r = rgb[0] / 255;
              var g = rgb[1] / 255;
              var b = rgb[2] / 255;
              var c;
              var m;
              var y;
              var k;
              k = Math.min(1 - r, 1 - g, 1 - b);
              c = (1 - r - k) / (1 - k) || 0;
              m = (1 - g - k) / (1 - k) || 0;
              y = (1 - b - k) / (1 - k) || 0;
              return [c * 100, m * 100, y * 100, k * 100];
            };
            /**
             * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
             * */

            function comparativeDistance(x, y) {
              return (
                Math.pow(x[0] - y[0], 2) +
                Math.pow(x[1] - y[1], 2) +
                Math.pow(x[2] - y[2], 2)
              );
            }

            convert.rgb.keyword = function (rgb) {
              var reversed = reverseKeywords[rgb];

              if (reversed) {
                return reversed;
              }

              var currentClosestDistance = Infinity;
              var currentClosestKeyword;

              for (var keyword in colorName) {
                if (colorName.hasOwnProperty(keyword)) {
                  var value = colorName[keyword]; // Compute comparative distance

                  var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest

                  if (distance < currentClosestDistance) {
                    currentClosestDistance = distance;
                    currentClosestKeyword = keyword;
                  }
                }
              }

              return currentClosestKeyword;
            };

            convert.keyword.rgb = function (keyword) {
              return colorName[keyword];
            };

            convert.rgb.xyz = function (rgb) {
              var r = rgb[0] / 255;
              var g = rgb[1] / 255;
              var b = rgb[2] / 255; // assume sRGB

              r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
              g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
              b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
              var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
              var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
              var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
              return [x * 100, y * 100, z * 100];
            };

            convert.rgb.lab = function (rgb) {
              var xyz = convert.rgb.xyz(rgb);
              var x = xyz[0];
              var y = xyz[1];
              var z = xyz[2];
              var l;
              var a;
              var b;
              x /= 95.047;
              y /= 100;
              z /= 108.883;
              x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
              y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
              z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
              l = 116 * y - 16;
              a = 500 * (x - y);
              b = 200 * (y - z);
              return [l, a, b];
            };

            convert.hsl.rgb = function (hsl) {
              var h = hsl[0] / 360;
              var s = hsl[1] / 100;
              var l = hsl[2] / 100;
              var t1;
              var t2;
              var t3;
              var rgb;
              var val;

              if (s === 0) {
                val = l * 255;
                return [val, val, val];
              }

              if (l < 0.5) {
                t2 = l * (1 + s);
              } else {
                t2 = l + s - l * s;
              }

              t1 = 2 * l - t2;
              rgb = [0, 0, 0];

              for (var i = 0; i < 3; i++) {
                t3 = h + (1 / 3) * -(i - 1);

                if (t3 < 0) {
                  t3++;
                }

                if (t3 > 1) {
                  t3--;
                }

                if (6 * t3 < 1) {
                  val = t1 + (t2 - t1) * 6 * t3;
                } else if (2 * t3 < 1) {
                  val = t2;
                } else if (3 * t3 < 2) {
                  val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                } else {
                  val = t1;
                }

                rgb[i] = val * 255;
              }

              return rgb;
            };

            convert.hsl.hsv = function (hsl) {
              var h = hsl[0];
              var s = hsl[1] / 100;
              var l = hsl[2] / 100;
              var smin = s;
              var lmin = Math.max(l, 0.01);
              var sv;
              var v;
              l *= 2;
              s *= l <= 1 ? l : 2 - l;
              smin *= lmin <= 1 ? lmin : 2 - lmin;
              v = (l + s) / 2;
              sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);
              return [h, sv * 100, v * 100];
            };

            convert.hsv.rgb = function (hsv) {
              var h = hsv[0] / 60;
              var s = hsv[1] / 100;
              var v = hsv[2] / 100;
              var hi = Math.floor(h) % 6;
              var f = h - Math.floor(h);
              var p = 255 * v * (1 - s);
              var q = 255 * v * (1 - s * f);
              var t = 255 * v * (1 - s * (1 - f));
              v *= 255;

              switch (hi) {
                case 0:
                  return [v, t, p];

                case 1:
                  return [q, v, p];

                case 2:
                  return [p, v, t];

                case 3:
                  return [p, q, v];

                case 4:
                  return [t, p, v];

                case 5:
                  return [v, p, q];
              }
            };

            convert.hsv.hsl = function (hsv) {
              var h = hsv[0];
              var s = hsv[1] / 100;
              var v = hsv[2] / 100;
              var vmin = Math.max(v, 0.01);
              var lmin;
              var sl;
              var l;
              l = (2 - s) * v;
              lmin = (2 - s) * vmin;
              sl = s * vmin;
              sl /= lmin <= 1 ? lmin : 2 - lmin;
              sl = sl || 0;
              l /= 2;
              return [h, sl * 100, l * 100];
            }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb

            convert.hwb.rgb = function (hwb) {
              var h = hwb[0] / 360;
              var wh = hwb[1] / 100;
              var bl = hwb[2] / 100;
              var ratio = wh + bl;
              var i;
              var v;
              var f;
              var n; // wh + bl cant be > 1

              if (ratio > 1) {
                wh /= ratio;
                bl /= ratio;
              }

              i = Math.floor(6 * h);
              v = 1 - bl;
              f = 6 * h - i;

              if ((i & 0x01) !== 0) {
                f = 1 - f;
              }

              n = wh + f * (v - wh); // linear interpolation

              var r;
              var g;
              var b;

              switch (i) {
                default:
                case 6:
                case 0:
                  r = v;
                  g = n;
                  b = wh;
                  break;

                case 1:
                  r = n;
                  g = v;
                  b = wh;
                  break;

                case 2:
                  r = wh;
                  g = v;
                  b = n;
                  break;

                case 3:
                  r = wh;
                  g = n;
                  b = v;
                  break;

                case 4:
                  r = n;
                  g = wh;
                  b = v;
                  break;

                case 5:
                  r = v;
                  g = wh;
                  b = n;
                  break;
              }

              return [r * 255, g * 255, b * 255];
            };

            convert.cmyk.rgb = function (cmyk) {
              var c = cmyk[0] / 100;
              var m = cmyk[1] / 100;
              var y = cmyk[2] / 100;
              var k = cmyk[3] / 100;
              var r;
              var g;
              var b;
              r = 1 - Math.min(1, c * (1 - k) + k);
              g = 1 - Math.min(1, m * (1 - k) + k);
              b = 1 - Math.min(1, y * (1 - k) + k);
              return [r * 255, g * 255, b * 255];
            };

            convert.xyz.rgb = function (xyz) {
              var x = xyz[0] / 100;
              var y = xyz[1] / 100;
              var z = xyz[2] / 100;
              var r;
              var g;
              var b;
              r = x * 3.2406 + y * -1.5372 + z * -0.4986;
              g = x * -0.9689 + y * 1.8758 + z * 0.0415;
              b = x * 0.0557 + y * -0.204 + z * 1.057; // assume sRGB

              r =
                r > 0.0031308
                  ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055
                  : r * 12.92;
              g =
                g > 0.0031308
                  ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055
                  : g * 12.92;
              b =
                b > 0.0031308
                  ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055
                  : b * 12.92;
              r = Math.min(Math.max(0, r), 1);
              g = Math.min(Math.max(0, g), 1);
              b = Math.min(Math.max(0, b), 1);
              return [r * 255, g * 255, b * 255];
            };

            convert.xyz.lab = function (xyz) {
              var x = xyz[0];
              var y = xyz[1];
              var z = xyz[2];
              var l;
              var a;
              var b;
              x /= 95.047;
              y /= 100;
              z /= 108.883;
              x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
              y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
              z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
              l = 116 * y - 16;
              a = 500 * (x - y);
              b = 200 * (y - z);
              return [l, a, b];
            };

            convert.lab.xyz = function (lab) {
              var l = lab[0];
              var a = lab[1];
              var b = lab[2];
              var x;
              var y;
              var z;
              y = (l + 16) / 116;
              x = a / 500 + y;
              z = y - b / 200;
              var y2 = Math.pow(y, 3);
              var x2 = Math.pow(x, 3);
              var z2 = Math.pow(z, 3);
              y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
              x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
              z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
              x *= 95.047;
              y *= 100;
              z *= 108.883;
              return [x, y, z];
            };

            convert.lab.lch = function (lab) {
              var l = lab[0];
              var a = lab[1];
              var b = lab[2];
              var hr;
              var h;
              var c;
              hr = Math.atan2(b, a);
              h = (hr * 360) / 2 / Math.PI;

              if (h < 0) {
                h += 360;
              }

              c = Math.sqrt(a * a + b * b);
              return [l, c, h];
            };

            convert.lch.lab = function (lch) {
              var l = lch[0];
              var c = lch[1];
              var h = lch[2];
              var a;
              var b;
              var hr;
              hr = (h / 360) * 2 * Math.PI;
              a = c * Math.cos(hr);
              b = c * Math.sin(hr);
              return [l, a, b];
            };

            convert.rgb.ansi16 = function (args) {
              var r = args[0];
              var g = args[1];
              var b = args[2];
              var value =
                1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

              value = Math.round(value / 50);

              if (value === 0) {
                return 30;
              }

              var ansi =
                30 +
                ((Math.round(b / 255) << 2) |
                  (Math.round(g / 255) << 1) |
                  Math.round(r / 255));

              if (value === 2) {
                ansi += 60;
              }

              return ansi;
            };

            convert.hsv.ansi16 = function (args) {
              // optimization here; we already know the value and don't need to get
              // it converted for us.
              return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
            };

            convert.rgb.ansi256 = function (args) {
              var r = args[0];
              var g = args[1];
              var b = args[2]; // we use the extended greyscale palette here, with the exception of
              // black and white. normal palette only has 4 greyscale shades.

              if (r === g && g === b) {
                if (r < 8) {
                  return 16;
                }

                if (r > 248) {
                  return 231;
                }

                return Math.round(((r - 8) / 247) * 24) + 232;
              }

              var ansi =
                16 +
                36 * Math.round((r / 255) * 5) +
                6 * Math.round((g / 255) * 5) +
                Math.round((b / 255) * 5);
              return ansi;
            };

            convert.ansi16.rgb = function (args) {
              var color = args % 10; // handle greyscale

              if (color === 0 || color === 7) {
                if (args > 50) {
                  color += 3.5;
                }

                color = (color / 10.5) * 255;
                return [color, color, color];
              }

              var mult = (~~(args > 50) + 1) * 0.5;
              var r = (color & 1) * mult * 255;
              var g = ((color >> 1) & 1) * mult * 255;
              var b = ((color >> 2) & 1) * mult * 255;
              return [r, g, b];
            };

            convert.ansi256.rgb = function (args) {
              // handle greyscale
              if (args >= 232) {
                var c = (args - 232) * 10 + 8;
                return [c, c, c];
              }

              args -= 16;
              var rem;
              var r = (Math.floor(args / 36) / 5) * 255;
              var g = (Math.floor((rem = args % 36) / 6) / 5) * 255;
              var b = ((rem % 6) / 5) * 255;
              return [r, g, b];
            };

            convert.rgb.hex = function (args) {
              var integer =
                ((Math.round(args[0]) & 0xff) << 16) +
                ((Math.round(args[1]) & 0xff) << 8) +
                (Math.round(args[2]) & 0xff);
              var string = integer.toString(16).toUpperCase();
              return "000000".substring(string.length) + string;
            };

            convert.hex.rgb = function (args) {
              var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

              if (!match) {
                return [0, 0, 0];
              }

              var colorString = match[0];

              if (match[0].length === 3) {
                colorString = colorString
                  .split("")
                  .map(function (char) {
                    return char + char;
                  })
                  .join("");
              }

              var integer = parseInt(colorString, 16);
              var r = (integer >> 16) & 0xff;
              var g = (integer >> 8) & 0xff;
              var b = integer & 0xff;
              return [r, g, b];
            };

            convert.rgb.hcg = function (rgb) {
              var r = rgb[0] / 255;
              var g = rgb[1] / 255;
              var b = rgb[2] / 255;
              var max = Math.max(Math.max(r, g), b);
              var min = Math.min(Math.min(r, g), b);
              var chroma = max - min;
              var grayscale;
              var hue;

              if (chroma < 1) {
                grayscale = min / (1 - chroma);
              } else {
                grayscale = 0;
              }

              if (chroma <= 0) {
                hue = 0;
              } else if (max === r) {
                hue = ((g - b) / chroma) % 6;
              } else if (max === g) {
                hue = 2 + (b - r) / chroma;
              } else {
                hue = 4 + (r - g) / chroma + 4;
              }

              hue /= 6;
              hue %= 1;
              return [hue * 360, chroma * 100, grayscale * 100];
            };

            convert.hsl.hcg = function (hsl) {
              var s = hsl[1] / 100;
              var l = hsl[2] / 100;
              var c = 1;
              var f = 0;

              if (l < 0.5) {
                c = 2.0 * s * l;
              } else {
                c = 2.0 * s * (1.0 - l);
              }

              if (c < 1.0) {
                f = (l - 0.5 * c) / (1.0 - c);
              }

              return [hsl[0], c * 100, f * 100];
            };

            convert.hsv.hcg = function (hsv) {
              var s = hsv[1] / 100;
              var v = hsv[2] / 100;
              var c = s * v;
              var f = 0;

              if (c < 1.0) {
                f = (v - c) / (1 - c);
              }

              return [hsv[0], c * 100, f * 100];
            };

            convert.hcg.rgb = function (hcg) {
              var h = hcg[0] / 360;
              var c = hcg[1] / 100;
              var g = hcg[2] / 100;

              if (c === 0.0) {
                return [g * 255, g * 255, g * 255];
              }

              var pure = [0, 0, 0];
              var hi = (h % 1) * 6;
              var v = hi % 1;
              var w = 1 - v;
              var mg = 0;

              switch (Math.floor(hi)) {
                case 0:
                  pure[0] = 1;
                  pure[1] = v;
                  pure[2] = 0;
                  break;

                case 1:
                  pure[0] = w;
                  pure[1] = 1;
                  pure[2] = 0;
                  break;

                case 2:
                  pure[0] = 0;
                  pure[1] = 1;
                  pure[2] = v;
                  break;

                case 3:
                  pure[0] = 0;
                  pure[1] = w;
                  pure[2] = 1;
                  break;

                case 4:
                  pure[0] = v;
                  pure[1] = 0;
                  pure[2] = 1;
                  break;

                default:
                  pure[0] = 1;
                  pure[1] = 0;
                  pure[2] = w;
              }

              mg = (1.0 - c) * g;
              return [
                (c * pure[0] + mg) * 255,
                (c * pure[1] + mg) * 255,
                (c * pure[2] + mg) * 255,
              ];
            };

            convert.hcg.hsv = function (hcg) {
              var c = hcg[1] / 100;
              var g = hcg[2] / 100;
              var v = c + g * (1.0 - c);
              var f = 0;

              if (v > 0.0) {
                f = c / v;
              }

              return [hcg[0], f * 100, v * 100];
            };

            convert.hcg.hsl = function (hcg) {
              var c = hcg[1] / 100;
              var g = hcg[2] / 100;
              var l = g * (1.0 - c) + 0.5 * c;
              var s = 0;

              if (l > 0.0 && l < 0.5) {
                s = c / (2 * l);
              } else if (l >= 0.5 && l < 1.0) {
                s = c / (2 * (1 - l));
              }

              return [hcg[0], s * 100, l * 100];
            };

            convert.hcg.hwb = function (hcg) {
              var c = hcg[1] / 100;
              var g = hcg[2] / 100;
              var v = c + g * (1.0 - c);
              return [hcg[0], (v - c) * 100, (1 - v) * 100];
            };

            convert.hwb.hcg = function (hwb) {
              var w = hwb[1] / 100;
              var b = hwb[2] / 100;
              var v = 1 - b;
              var c = v - w;
              var g = 0;

              if (c < 1) {
                g = (v - c) / (1 - c);
              }

              return [hwb[0], c * 100, g * 100];
            };

            convert.apple.rgb = function (apple) {
              return [
                (apple[0] / 65535) * 255,
                (apple[1] / 65535) * 255,
                (apple[2] / 65535) * 255,
              ];
            };

            convert.rgb.apple = function (rgb) {
              return [
                (rgb[0] / 255) * 65535,
                (rgb[1] / 255) * 65535,
                (rgb[2] / 255) * 65535,
              ];
            };

            convert.gray.rgb = function (args) {
              return [
                (args[0] / 100) * 255,
                (args[0] / 100) * 255,
                (args[0] / 100) * 255,
              ];
            };

            convert.gray.hsl = convert.gray.hsv = function (args) {
              return [0, 0, args[0]];
            };

            convert.gray.hwb = function (gray) {
              return [0, 100, gray[0]];
            };

            convert.gray.cmyk = function (gray) {
              return [0, 0, 0, gray[0]];
            };

            convert.gray.lab = function (gray) {
              return [gray[0], 0, 0];
            };

            convert.gray.hex = function (gray) {
              var val = Math.round((gray[0] / 100) * 255) & 0xff;
              var integer = (val << 16) + (val << 8) + val;
              var string = integer.toString(16).toUpperCase();
              return "000000".substring(string.length) + string;
            };

            convert.rgb.gray = function (rgb) {
              var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
              return [(val / 255) * 100];
            };
          });

          /*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/
          // https://jsperf.com/object-keys-vs-for-in-with-closure/3

          var models$1 = Object.keys(conversions);

          function buildGraph() {
            var graph = {};

            for (var len = models$1.length, i = 0; i < len; i++) {
              graph[models$1[i]] = {
                // http://jsperf.com/1-vs-infinity
                // micro-opt, but this is simple.
                distance: -1,
                parent: null,
              };
            }

            return graph;
          } // https://en.wikipedia.org/wiki/Breadth-first_search

          function deriveBFS(fromModel) {
            var graph = buildGraph();
            var queue = [fromModel]; // unshift -> queue -> pop

            graph[fromModel].distance = 0;

            while (queue.length) {
              var current = queue.pop();
              var adjacents = Object.keys(conversions[current]);

              for (var len = adjacents.length, i = 0; i < len; i++) {
                var adjacent = adjacents[i];
                var node = graph[adjacent];

                if (node.distance === -1) {
                  node.distance = graph[current].distance + 1;
                  node.parent = current;
                  queue.unshift(adjacent);
                }
              }
            }

            return graph;
          }

          function link(from, to) {
            return function (args) {
              return to(from(args));
            };
          }

          function wrapConversion(toModel, graph) {
            var path = [graph[toModel].parent, toModel];
            var fn = conversions[graph[toModel].parent][toModel];
            var cur = graph[toModel].parent;

            while (graph[cur].parent) {
              path.unshift(graph[cur].parent);
              fn = link(conversions[graph[cur].parent][cur], fn);
              cur = graph[cur].parent;
            }

            fn.conversion = path;
            return fn;
          }

          var route = function route(fromModel) {
            var graph = deriveBFS(fromModel);
            var conversion = {};
            var models = Object.keys(graph);

            for (var len = models.length, i = 0; i < len; i++) {
              var toModel = models[i];
              var node = graph[toModel];

              if (node.parent === null) {
                // no possible conversion, or this node is the source model.
                continue;
              }

              conversion[toModel] = wrapConversion(toModel, graph);
            }

            return conversion;
          };

          var convert = {};
          var models = Object.keys(conversions);

          function wrapRaw(fn) {
            var wrappedFn = function wrappedFn(args) {
              if (args === undefined || args === null) {
                return args;
              }

              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }

              return fn(args);
            }; // preserve .conversion property if there is one

            if ("conversion" in fn) {
              wrappedFn.conversion = fn.conversion;
            }

            return wrappedFn;
          }

          function wrapRounded(fn) {
            var wrappedFn = function wrappedFn(args) {
              if (args === undefined || args === null) {
                return args;
              }

              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }

              var result = fn(args); // we're assuming the result is an array here.
              // see notice in conversions.js; don't use box types
              // in conversion functions.

              if (_typeof(result) === "object") {
                for (var len = result.length, i = 0; i < len; i++) {
                  result[i] = Math.round(result[i]);
                }
              }

              return result;
            }; // preserve .conversion property if there is one

            if ("conversion" in fn) {
              wrappedFn.conversion = fn.conversion;
            }

            return wrappedFn;
          }

          models.forEach(function (fromModel) {
            convert[fromModel] = {};
            Object.defineProperty(convert[fromModel], "channels", {
              value: conversions[fromModel].channels,
            });
            Object.defineProperty(convert[fromModel], "labels", {
              value: conversions[fromModel].labels,
            });
            var routes = route(fromModel);
            var routeModels = Object.keys(routes);
            routeModels.forEach(function (toModel) {
              var fn = routes[toModel];
              convert[fromModel][toModel] = wrapRounded(fn);
              convert[fromModel][toModel].raw = wrapRaw(fn);
            });
          });
          var colorConvert = convert;

          var ansiStyles = createCommonjsModule(function (module) {
            "use strict";

            var wrapAnsi16 = function wrapAnsi16(fn, offset) {
              return function () {
                var code = fn.apply(colorConvert, arguments);
                return "\x1B[".concat(code + offset, "m");
              };
            };

            var wrapAnsi256 = function wrapAnsi256(fn, offset) {
              return function () {
                var code = fn.apply(colorConvert, arguments);
                return "\x1B[".concat(38 + offset, ";5;").concat(code, "m");
              };
            };

            var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
              return function () {
                var rgb = fn.apply(colorConvert, arguments);
                return "\x1B["
                  .concat(38 + offset, ";2;")
                  .concat(rgb[0], ";")
                  .concat(rgb[1], ";")
                  .concat(rgb[2], "m");
              };
            };

            function assembleStyles() {
              var codes = new Map();
              var styles = {
                modifier: {
                  reset: [0, 0],
                  // 21 isn't widely supported and 22 does the same thing
                  bold: [1, 22],
                  dim: [2, 22],
                  italic: [3, 23],
                  underline: [4, 24],
                  inverse: [7, 27],
                  hidden: [8, 28],
                  strikethrough: [9, 29],
                },
                color: {
                  black: [30, 39],
                  red: [31, 39],
                  green: [32, 39],
                  yellow: [33, 39],
                  blue: [34, 39],
                  magenta: [35, 39],
                  cyan: [36, 39],
                  white: [37, 39],
                  gray: [90, 39],
                  // Bright color
                  redBright: [91, 39],
                  greenBright: [92, 39],
                  yellowBright: [93, 39],
                  blueBright: [94, 39],
                  magentaBright: [95, 39],
                  cyanBright: [96, 39],
                  whiteBright: [97, 39],
                },
                bgColor: {
                  bgBlack: [40, 49],
                  bgRed: [41, 49],
                  bgGreen: [42, 49],
                  bgYellow: [43, 49],
                  bgBlue: [44, 49],
                  bgMagenta: [45, 49],
                  bgCyan: [46, 49],
                  bgWhite: [47, 49],
                  // Bright color
                  bgBlackBright: [100, 49],
                  bgRedBright: [101, 49],
                  bgGreenBright: [102, 49],
                  bgYellowBright: [103, 49],
                  bgBlueBright: [104, 49],
                  bgMagentaBright: [105, 49],
                  bgCyanBright: [106, 49],
                  bgWhiteBright: [107, 49],
                },
              }; // Fix humans

              styles.color.grey = styles.color.gray;

              var _arr = Object.keys(styles);

              for (var _i = 0; _i < _arr.length; _i++) {
                var groupName = _arr[_i];
                var group = styles[groupName];

                var _arr3 = Object.keys(group);

                for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                  var styleName = _arr3[_i3];
                  var style = group[styleName];
                  styles[styleName] = {
                    open: "\x1B[".concat(style[0], "m"),
                    close: "\x1B[".concat(style[1], "m"),
                  };
                  group[styleName] = styles[styleName];
                  codes.set(style[0], style[1]);
                }

                Object.defineProperty(styles, groupName, {
                  value: group,
                  enumerable: false,
                });
                Object.defineProperty(styles, "codes", {
                  value: codes,
                  enumerable: false,
                });
              }

              var ansi2ansi = function ansi2ansi(n) {
                return n;
              };

              var rgb2rgb = function rgb2rgb(r, g, b) {
                return [r, g, b];
              };

              styles.color.close = "\x1B[39m";
              styles.bgColor.close = "\x1B[49m";
              styles.color.ansi = {
                ansi: wrapAnsi16(ansi2ansi, 0),
              };
              styles.color.ansi256 = {
                ansi256: wrapAnsi256(ansi2ansi, 0),
              };
              styles.color.ansi16m = {
                rgb: wrapAnsi16m(rgb2rgb, 0),
              };
              styles.bgColor.ansi = {
                ansi: wrapAnsi16(ansi2ansi, 10),
              };
              styles.bgColor.ansi256 = {
                ansi256: wrapAnsi256(ansi2ansi, 10),
              };
              styles.bgColor.ansi16m = {
                rgb: wrapAnsi16m(rgb2rgb, 10),
              };

              var _arr2 = Object.keys(colorConvert);

              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var key = _arr2[_i2];

                if (_typeof(colorConvert[key]) !== "object") {
                  continue;
                }

                var suite = colorConvert[key];

                if (key === "ansi16") {
                  key = "ansi";
                }

                if ("ansi16" in suite) {
                  styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                  styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
                }

                if ("ansi256" in suite) {
                  styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                  styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
                }

                if ("rgb" in suite) {
                  styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                  styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
                }
              }

              return styles;
            } // Make the export immutable

            Object.defineProperty(module, "exports", {
              enumerable: true,
              get: assembleStyles,
            });
          });

          var os = {
            EOL: "\n",
          };

          var os$1 = Object.freeze({
            default: os,
          });

          var hasFlag = createCommonjsModule(function (module) {
            "use strict";

            module.exports = function (flag, argv$$1) {
              argv$$1 = argv$$1 || process.argv;
              var prefix = flag.startsWith("-")
                ? ""
                : flag.length === 1
                ? "-"
                : "--";
              var pos = argv$$1.indexOf(prefix + flag);
              var terminatorPos = argv$$1.indexOf("--");
              return (
                pos !== -1 &&
                (terminatorPos === -1 ? true : pos < terminatorPos)
              );
            };
          });

          var require$$1$1 = (os$1 && os) || os$1;

          var env$1 = process.env;
          var forceColor;

          if (
            hasFlag("no-color") ||
            hasFlag("no-colors") ||
            hasFlag("color=false")
          ) {
            forceColor = false;
          } else if (
            hasFlag("color") ||
            hasFlag("colors") ||
            hasFlag("color=true") ||
            hasFlag("color=always")
          ) {
            forceColor = true;
          }

          if ("FORCE_COLOR" in env$1) {
            forceColor =
              env$1.FORCE_COLOR.length === 0 ||
              parseInt(env$1.FORCE_COLOR, 10) !== 0;
          }

          function translateLevel(level) {
            if (level === 0) {
              return false;
            }

            return {
              level: level,
              hasBasic: true,
              has256: level >= 2,
              has16m: level >= 3,
            };
          }

          function supportsColor(stream) {
            if (forceColor === false) {
              return 0;
            }

            if (
              hasFlag("color=16m") ||
              hasFlag("color=full") ||
              hasFlag("color=truecolor")
            ) {
              return 3;
            }

            if (hasFlag("color=256")) {
              return 2;
            }

            if (stream && !stream.isTTY && forceColor !== true) {
              return 0;
            }

            var min = forceColor ? 1 : 0;

            if (process.platform === "win32") {
              // Node.js 7.5.0 is the first version of Node.js to include a patch to
              // libuv that enables 256 color output on Windows. Anything earlier and it
              // won't work. However, here we target Node.js 8 at minimum as it is an LTS
              // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
              // release that supports 256 colors. Windows 10 build 14931 is the first release
              // that supports 16m/TrueColor.
              var osRelease = require$$1$1.release().split(".");

              if (
                Number(process.versions.node.split(".")[0]) >= 8 &&
                Number(osRelease[0]) >= 10 &&
                Number(osRelease[2]) >= 10586
              ) {
                return Number(osRelease[2]) >= 14931 ? 3 : 2;
              }

              return 1;
            }

            if ("CI" in env$1) {
              if (
                ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function (
                  sign
                ) {
                  return sign in env$1;
                }) ||
                env$1.CI_NAME === "codeship"
              ) {
                return 1;
              }

              return min;
            }

            if ("TEAMCITY_VERSION" in env$1) {
              return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(
                env$1.TEAMCITY_VERSION
              )
                ? 1
                : 0;
            }

            if (env$1.COLORTERM === "truecolor") {
              return 3;
            }

            if ("TERM_PROGRAM" in env$1) {
              var version = parseInt(
                (env$1.TERM_PROGRAM_VERSION || "").split(".")[0],
                10
              );

              switch (env$1.TERM_PROGRAM) {
                case "iTerm.app":
                  return version >= 3 ? 3 : 2;

                case "Apple_Terminal":
                  return 2;
                // No default
              }
            }

            if (/-256(color)?$/i.test(env$1.TERM)) {
              return 2;
            }

            if (
              /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(
                env$1.TERM
              )
            ) {
              return 1;
            }

            if ("COLORTERM" in env$1) {
              return 1;
            }

            if (env$1.TERM === "dumb") {
              return min;
            }

            return min;
          }

          function getSupportLevel(stream) {
            var level = supportsColor(stream);
            return translateLevel(level);
          }

          var supportsColor_1 = {
            supportsColor: getSupportLevel,
            stdout: getSupportLevel(process.stdout),
            stderr: getSupportLevel(process.stderr),
          };

          var templates = createCommonjsModule(function (module) {
            "use strict";

            var TEMPLATE_REGEX =
              /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
            var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
            var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
            var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
            var ESCAPES = new Map([
              ["n", "\n"],
              ["r", "\r"],
              ["t", "\t"],
              ["b", "\b"],
              ["f", "\f"],
              ["v", "\v"],
              ["0", "\0"],
              ["\\", "\\"],
              ["e", "\x1B"],
              ["a", "\x07"],
            ]);

            function unescape(c) {
              if (
                (c[0] === "u" && c.length === 5) ||
                (c[0] === "x" && c.length === 3)
              ) {
                return String.fromCharCode(parseInt(c.slice(1), 16));
              }

              return ESCAPES.get(c) || c;
            }

            function parseArguments(name, args) {
              var results = [];
              var chunks = args.trim().split(/\s*,\s*/g);
              var matches;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = chunks[Symbol.iterator](), _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var chunk = _step.value;

                  if (!isNaN(chunk)) {
                    results.push(Number(chunk));
                  } else if ((matches = chunk.match(STRING_REGEX))) {
                    results.push(
                      matches[2].replace(
                        ESCAPE_REGEX,
                        function (m, escape, chr) {
                          return escape ? unescape(escape) : chr;
                        }
                      )
                    );
                  } else {
                    throw new Error(
                      "Invalid Chalk template style argument: "
                        .concat(chunk, " (in style '")
                        .concat(name, "')")
                    );
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return results;
            }

            function parseStyle(style) {
              STYLE_REGEX.lastIndex = 0;
              var results = [];
              var matches;

              while ((matches = STYLE_REGEX.exec(style)) !== null) {
                var name = matches[1];

                if (matches[2]) {
                  var args = parseArguments(name, matches[2]);
                  results.push([name].concat(args));
                } else {
                  results.push([name]);
                }
              }

              return results;
            }

            function buildStyle(chalk, styles) {
              var enabled = {};
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (
                  var _iterator2 = styles[Symbol.iterator](), _step2;
                  !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                    .done);
                  _iteratorNormalCompletion2 = true
                ) {
                  var layer = _step2.value;
                  var _iteratorNormalCompletion3 = true;
                  var _didIteratorError3 = false;
                  var _iteratorError3 = undefined;

                  try {
                    for (
                      var _iterator3 = layer.styles[Symbol.iterator](), _step3;
                      !(_iteratorNormalCompletion3 = (_step3 =
                        _iterator3.next()).done);
                      _iteratorNormalCompletion3 = true
                    ) {
                      var style = _step3.value;
                      enabled[style[0]] = layer.inverse ? null : style.slice(1);
                    }
                  } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                  } finally {
                    try {
                      if (
                        !_iteratorNormalCompletion3 &&
                        _iterator3.return != null
                      ) {
                        _iterator3.return();
                      }
                    } finally {
                      if (_didIteratorError3) {
                        throw _iteratorError3;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (
                    !_iteratorNormalCompletion2 &&
                    _iterator2.return != null
                  ) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              var current = chalk;

              var _arr = Object.keys(enabled);

              for (var _i = 0; _i < _arr.length; _i++) {
                var styleName = _arr[_i];

                if (Array.isArray(enabled[styleName])) {
                  if (!(styleName in current)) {
                    throw new Error("Unknown Chalk style: ".concat(styleName));
                  }

                  if (enabled[styleName].length > 0) {
                    current = current[styleName].apply(
                      current,
                      enabled[styleName]
                    );
                  } else {
                    current = current[styleName];
                  }
                }
              }

              return current;
            }

            module.exports = function (chalk, tmp) {
              var styles = [];
              var chunks = [];
              var chunk = []; // eslint-disable-next-line max-params

              tmp.replace(
                TEMPLATE_REGEX,
                function (m, escapeChar, inverse, style, close, chr) {
                  if (escapeChar) {
                    chunk.push(unescape(escapeChar));
                  } else if (style) {
                    var str = chunk.join("");
                    chunk = [];
                    chunks.push(
                      styles.length === 0 ? str : buildStyle(chalk, styles)(str)
                    );
                    styles.push({
                      inverse: inverse,
                      styles: parseStyle(style),
                    });
                  } else if (close) {
                    if (styles.length === 0) {
                      throw new Error(
                        "Found extraneous } in Chalk template literal"
                      );
                    }

                    chunks.push(buildStyle(chalk, styles)(chunk.join("")));
                    chunk = [];
                    styles.pop();
                  } else {
                    chunk.push(chr);
                  }
                }
              );
              chunks.push(chunk.join(""));

              if (styles.length > 0) {
                var errMsg = "Chalk template literal is missing "
                  .concat(styles.length, " closing bracket")
                  .concat(styles.length === 1 ? "" : "s", " (`}`)");
                throw new Error(errMsg);
              }

              return chunks.join("");
            };
          });

          var chalk = createCommonjsModule(function (module) {
            "use strict";

            var stdoutColor = supportsColor_1.stdout;
            var isSimpleWindowsTerm =
              process.platform === "win32" &&
              !(process.env.TERM || "").toLowerCase().startsWith("xterm"); // `supportsColor.level` → `ansiStyles.color[name]` mapping

            var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"]; // `color-convert` models to exclude from the Chalk API due to conflicts and such

            var skipModels = new Set(["gray"]);
            var styles = Object.create(null);

            function applyOptions(obj, options) {
              options = options || {}; // Detect level if not set manually

              var scLevel = stdoutColor ? stdoutColor.level : 0;
              obj.level = options.level === undefined ? scLevel : options.level;
              obj.enabled =
                "enabled" in options ? options.enabled : obj.level > 0;
            }

            function Chalk(options) {
              // We check for this.template here since calling `chalk.constructor()`
              // by itself will have a `this` of a previously constructed chalk object
              if (!this || !(this instanceof Chalk) || this.template) {
                var _chalk = {};
                applyOptions(_chalk, options);

                _chalk.template = function () {
                  var args = [].slice.call(arguments);
                  return chalkTag.apply(null, [_chalk.template].concat(args));
                };

                Object.setPrototypeOf(_chalk, Chalk.prototype);
                Object.setPrototypeOf(_chalk.template, _chalk);
                _chalk.template.constructor = Chalk;
                return _chalk.template;
              }

              applyOptions(this, options);
            } // Use bright blue on Windows as the normal blue color is illegible

            if (isSimpleWindowsTerm) {
              ansiStyles.blue.open = "\x1B[94m";
            }

            var _arr = Object.keys(ansiStyles);

            var _loop = function _loop() {
              var key = _arr[_i];
              ansiStyles[key].closeRe = new RegExp(
                escapeStringRegexp(ansiStyles[key].close),
                "g"
              );
              styles[key] = {
                get: function get() {
                  var codes = ansiStyles[key];
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    this._empty,
                    key
                  );
                },
              };
            };

            for (var _i = 0; _i < _arr.length; _i++) {
              _loop();
            }

            styles.visible = {
              get: function get() {
                return build.call(this, this._styles || [], true, "visible");
              },
            };
            ansiStyles.color.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.color.close),
              "g"
            );

            var _arr2 = Object.keys(ansiStyles.color.ansi);

            var _loop2 = function _loop2() {
              var model = _arr2[_i2];

              if (skipModels.has(model)) {
                return "continue";
              }

              styles[model] = {
                get: function get() {
                  var level = this.level;
                  return function () {
                    var open = ansiStyles.color[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    var codes = {
                      open: open,
                      close: ansiStyles.color.close,
                      closeRe: ansiStyles.color.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            };

            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var _ret = _loop2();

              if (_ret === "continue") continue;
            }

            ansiStyles.bgColor.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.bgColor.close),
              "g"
            );

            var _arr3 = Object.keys(ansiStyles.bgColor.ansi);

            var _loop3 = function _loop3() {
              var model = _arr3[_i3];

              if (skipModels.has(model)) {
                return "continue";
              }

              var bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
              styles[bgModel] = {
                get: function get() {
                  var level = this.level;
                  return function () {
                    var open = ansiStyles.bgColor[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    var codes = {
                      open: open,
                      close: ansiStyles.bgColor.close,
                      closeRe: ansiStyles.bgColor.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            };

            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
              var _ret2 = _loop3();

              if (_ret2 === "continue") continue;
            }

            var proto = Object.defineProperties(function () {}, styles);

            function build(_styles, _empty, key) {
              var builder = function builder() {
                return applyStyle.apply(builder, arguments);
              };

              builder._styles = _styles;
              builder._empty = _empty;
              var self = this;
              Object.defineProperty(builder, "level", {
                enumerable: true,
                get: function get() {
                  return self.level;
                },
                set: function set(level) {
                  self.level = level;
                },
              });
              Object.defineProperty(builder, "enabled", {
                enumerable: true,
                get: function get() {
                  return self.enabled;
                },
                set: function set(enabled) {
                  self.enabled = enabled;
                },
              }); // See below for fix regarding invisible grey/dim combination on Windows

              builder.hasGrey =
                this.hasGrey || key === "gray" || key === "grey"; // `__proto__` is used because we must return a function, but there is
              // no way to create a function with a different prototype

              builder.__proto__ = proto; // eslint-disable-line no-proto

              return builder;
            }

            function applyStyle() {
              // Support varags, but simply cast to string in case there's only one arg
              var args = arguments;
              var argsLen = args.length;
              var str = String(arguments[0]);

              if (argsLen === 0) {
                return "";
              }

              if (argsLen > 1) {
                // Don't slice `arguments`, it prevents V8 optimizations
                for (var a = 1; a < argsLen; a++) {
                  str += " " + args[a];
                }
              }

              if (!this.enabled || this.level <= 0 || !str) {
                return this._empty ? "" : str;
              } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
              // see https://github.com/chalk/chalk/issues/58
              // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.

              var originalDim = ansiStyles.dim.open;

              if (isSimpleWindowsTerm && this.hasGrey) {
                ansiStyles.dim.open = "";
              }

              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = this._styles
                      .slice()
                      .reverse()
                      [Symbol.iterator](),
                    _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var code = _step.value;
                  // Replace any instances already present with a re-opening code
                  // otherwise only the part of the string until said closing code
                  // will be colored, and the rest will simply be 'plain'.
                  str =
                    code.open +
                    str.replace(code.closeRe, code.open) +
                    code.close; // Close the styling before a linebreak and reopen
                  // after next line to fix a bleed issue on macOS
                  // https://github.com/chalk/chalk/pull/92

                  str = str.replace(
                    /\r?\n/g,
                    "".concat(code.close, "$&").concat(code.open)
                  );
                } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              ansiStyles.dim.open = originalDim;
              return str;
            }

            function chalkTag(chalk, strings) {
              if (!Array.isArray(strings)) {
                // If chalk() was called by itself or with a string,
                // return the string itself as a string.
                return [].slice.call(arguments, 1).join(" ");
              }

              var args = [].slice.call(arguments, 2);
              var parts = [strings.raw[0]];

              for (var i = 1; i < strings.length; i++) {
                parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
                parts.push(String(strings.raw[i]));
              }

              return templates(chalk, parts.join(""));
            }

            Object.defineProperties(Chalk.prototype, styles);
            module.exports = Chalk(); // eslint-disable-line new-cap

            module.exports.supportsColor = stdoutColor;
            module.exports.default = module.exports; // For TypeScript
          });

          var common = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            exports.commonDeprecatedHandler = function (
              keyOrPair,
              redirectTo,
              _ref
            ) {
              var descriptor = _ref.descriptor;
              var messages = [
                "".concat(
                  chalk.default.yellow(
                    typeof keyOrPair === "string"
                      ? descriptor.key(keyOrPair)
                      : descriptor.pair(keyOrPair)
                  ),
                  " is deprecated"
                ),
              ];

              if (redirectTo) {
                messages.push(
                  "we now treat it as ".concat(
                    chalk.default.blue(
                      typeof redirectTo === "string"
                        ? descriptor.key(redirectTo)
                        : descriptor.pair(redirectTo)
                    )
                  )
                );
              }

              return messages.join("; ") + ".";
            };
          });
          unwrapExports(common);

          var deprecated = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            tslib_1.__exportStar(common, exports);
          });
          unwrapExports(deprecated);

          var common$2 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            exports.commonInvalidHandler = function (key, value, utils) {
              return [
                "Invalid ".concat(
                  chalk.default.red(utils.descriptor.key(key)),
                  " value."
                ),
                "Expected ".concat(
                  chalk.default.blue(utils.schemas[key].expected(utils)),
                  ","
                ),
                "but received ".concat(
                  chalk.default.red(utils.descriptor.value(value)),
                  "."
                ),
              ].join(" ");
            };
          });
          unwrapExports(common$2);

          var invalid = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            tslib_1.__exportStar(common$2, exports);
          });
          unwrapExports(invalid);

          /* eslint-disable no-nested-ternary */
          var arr = [];
          var charCodeCache = [];

          var leven$1 = function leven(a, b) {
            if (a === b) {
              return 0;
            }

            var swap = a; // Swapping the strings if `a` is longer than `b` so we know which one is the
            // shortest & which one is the longest

            if (a.length > b.length) {
              a = b;
              b = swap;
            }

            var aLen = a.length;
            var bLen = b.length;

            if (aLen === 0) {
              return bLen;
            }

            if (bLen === 0) {
              return aLen;
            } // Performing suffix trimming:
            // We can linearly drop suffix common to both strings since they
            // don't increase distance at all
            // Note: `~-` is the bitwise way to perform a `- 1` operation

            while (aLen > 0 && a.charCodeAt(~-aLen) === b.charCodeAt(~-bLen)) {
              aLen--;
              bLen--;
            }

            if (aLen === 0) {
              return bLen;
            } // Performing prefix trimming
            // We can linearly drop prefix common to both strings since they
            // don't increase distance at all

            var start = 0;

            while (
              start < aLen &&
              a.charCodeAt(start) === b.charCodeAt(start)
            ) {
              start++;
            }

            aLen -= start;
            bLen -= start;

            if (aLen === 0) {
              return bLen;
            }

            var bCharCode;
            var ret;
            var tmp;
            var tmp2;
            var i = 0;
            var j = 0;

            while (i < aLen) {
              charCodeCache[start + i] = a.charCodeAt(start + i);
              arr[i] = ++i;
            }

            while (j < bLen) {
              bCharCode = b.charCodeAt(start + j);
              tmp = j++;
              ret = j;

              for (i = 0; i < aLen; i++) {
                tmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;
                tmp = arr[i];
                ret = arr[i] =
                  tmp > ret
                    ? tmp2 > ret
                      ? ret + 1
                      : tmp2
                    : tmp2 > tmp
                    ? tmp + 1
                    : tmp2;
              }
            }

            return ret;
          };

          var leven_1 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            exports.levenUnknownHandler = function (key, value, _ref) {
              var descriptor = _ref.descriptor,
                logger = _ref.logger,
                schemas = _ref.schemas;
              var messages = [
                "Ignored unknown option ".concat(
                  chalk.default.yellow(
                    descriptor.pair({
                      key: key,
                      value: value,
                    })
                  ),
                  "."
                ),
              ];
              var suggestion = Object.keys(schemas)
                .sort()
                .find(function (knownKey) {
                  return leven$1(key, knownKey) < 3;
                });

              if (suggestion) {
                messages.push(
                  "Did you mean ".concat(
                    chalk.default.blue(descriptor.key(suggestion)),
                    "?"
                  )
                );
              }

              logger.warn(messages.join(" "));
            };
          });
          unwrapExports(leven_1);

          var unknown = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            tslib_1.__exportStar(leven_1, exports);
          });
          unwrapExports(unknown);

          var handlers = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            tslib_1.__exportStar(deprecated, exports);

            tslib_1.__exportStar(invalid, exports);

            tslib_1.__exportStar(unknown, exports);
          });
          unwrapExports(handlers);

          var schema = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            var HANDLER_KEYS = [
              "default",
              "expected",
              "validate",
              "deprecated",
              "forward",
              "redirect",
              "overlap",
              "preprocess",
              "postprocess",
            ];

            function createSchema(SchemaConstructor, parameters) {
              var schema = new SchemaConstructor(parameters);
              var subSchema = Object.create(schema);

              for (var _i = 0; _i < HANDLER_KEYS.length; _i++) {
                var handlerKey = HANDLER_KEYS[_i];

                if (handlerKey in parameters) {
                  subSchema[handlerKey] = normalizeHandler(
                    parameters[handlerKey],
                    schema,
                    Schema.prototype[handlerKey].length
                  );
                }
              }

              return subSchema;
            }

            exports.createSchema = createSchema;

            var Schema =
              /*#__PURE__*/
              (function () {
                function Schema(parameters) {
                  _classCallCheck(this, Schema);

                  this.name = parameters.name;
                }

                _createClass(
                  Schema,
                  [
                    {
                      key: "default",
                      value: function _default(_utils) {
                        return undefined;
                      }, // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`
                    },
                    {
                      key: "expected",
                      value: function expected(_utils) {
                        return "nothing";
                      }, // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`
                    },
                    {
                      key: "validate",
                      value: function validate(_value, _utils) {
                        return false;
                      },
                    },
                    {
                      key: "deprecated",
                      value: function deprecated(_value, _utils) {
                        return false;
                      },
                    },
                    {
                      key: "forward",
                      value: function forward(_value, _utils) {
                        return undefined;
                      },
                    },
                    {
                      key: "redirect",
                      value: function redirect(_value, _utils) {
                        return undefined;
                      },
                    },
                    {
                      key: "overlap",
                      value: function overlap(currentValue, _newValue, _utils) {
                        return currentValue;
                      },
                    },
                    {
                      key: "preprocess",
                      value: function preprocess(value, _utils) {
                        return value;
                      },
                    },
                    {
                      key: "postprocess",
                      value: function postprocess(value, _utils) {
                        return value;
                      },
                    },
                  ],
                  [
                    {
                      key: "create",
                      value: function create(parameters) {
                        // @ts-ignore: https://github.com/Microsoft/TypeScript/issues/5863
                        return createSchema(this, parameters);
                      },
                    },
                  ]
                );

                return Schema;
              })();

            exports.Schema = Schema;

            function normalizeHandler(
              handler,
              superSchema,
              handlerArgumentsLength
            ) {
              return typeof handler === "function"
                ? function () {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                      _key < _len;
                      _key++
                    ) {
                      args[_key] = arguments[_key];
                    }

                    return handler.apply(
                      void 0,
                      _toConsumableArray(
                        args.slice(0, handlerArgumentsLength - 1)
                      ).concat(
                        [superSchema],
                        _toConsumableArray(
                          args.slice(handlerArgumentsLength - 1)
                        )
                      )
                    );
                  }
                : function () {
                    return handler;
                  };
            }
          });
          unwrapExports(schema);

          var alias = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var AliasSchema =
              /*#__PURE__*/
              (function (_schema_1$Schema) {
                _inherits(AliasSchema, _schema_1$Schema);

                function AliasSchema(parameters) {
                  var _this;

                  _classCallCheck(this, AliasSchema);

                  _this = _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(AliasSchema).call(this, parameters)
                  );
                  _this._sourceName = parameters.sourceName;
                  return _this;
                }

                _createClass(AliasSchema, [
                  {
                    key: "expected",
                    value: function expected(utils) {
                      return utils.schemas[this._sourceName].expected(utils);
                    },
                  },
                  {
                    key: "validate",
                    value: function validate(value, utils) {
                      return utils.schemas[this._sourceName].validate(
                        value,
                        utils
                      );
                    },
                  },
                  {
                    key: "redirect",
                    value: function redirect(_value, _utils) {
                      return this._sourceName;
                    },
                  },
                ]);

                return AliasSchema;
              })(schema.Schema);

            exports.AliasSchema = AliasSchema;
          });
          unwrapExports(alias);

          var any = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var AnySchema =
              /*#__PURE__*/
              (function (_schema_1$Schema) {
                _inherits(AnySchema, _schema_1$Schema);

                function AnySchema() {
                  _classCallCheck(this, AnySchema);

                  return _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(AnySchema).apply(this, arguments)
                  );
                }

                _createClass(AnySchema, [
                  {
                    key: "expected",
                    value: function expected() {
                      return "anything";
                    },
                  },
                  {
                    key: "validate",
                    value: function validate() {
                      return true;
                    },
                  },
                ]);

                return AnySchema;
              })(schema.Schema);

            exports.AnySchema = AnySchema;
          });
          unwrapExports(any);

          var array$2 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var ArraySchema =
              /*#__PURE__*/
              (function (_schema_1$Schema) {
                _inherits(ArraySchema, _schema_1$Schema);

                function ArraySchema(_a) {
                  var _this;

                  _classCallCheck(this, ArraySchema);

                  var valueSchema = _a.valueSchema,
                    _a$name = _a.name,
                    name = _a$name === void 0 ? valueSchema.name : _a$name,
                    handlers = tslib_1.__rest(_a, ["valueSchema", "name"]);

                  _this = _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(ArraySchema).call(
                      this,
                      Object.assign({}, handlers, {
                        name: name,
                      })
                    )
                  );
                  _this._valueSchema = valueSchema;
                  return _this;
                }

                _createClass(ArraySchema, [
                  {
                    key: "expected",
                    value: function expected(utils) {
                      return "an array of ".concat(
                        this._valueSchema.expected(utils)
                      );
                    },
                  },
                  {
                    key: "validate",
                    value: function validate(value, utils) {
                      if (!Array.isArray(value)) {
                        return false;
                      }

                      var invalidValues = [];
                      var _iteratorNormalCompletion = true;
                      var _didIteratorError = false;
                      var _iteratorError = undefined;

                      try {
                        for (
                          var _iterator = value[Symbol.iterator](), _step;
                          !(_iteratorNormalCompletion = (_step =
                            _iterator.next()).done);
                          _iteratorNormalCompletion = true
                        ) {
                          var subValue = _step.value;
                          var subValidateResult = utils.normalizeValidateResult(
                            this._valueSchema.validate(subValue, utils),
                            subValue
                          );

                          if (subValidateResult !== true) {
                            invalidValues.push(subValidateResult.value);
                          }
                        }
                      } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion &&
                            _iterator.return != null
                          ) {
                            _iterator.return();
                          }
                        } finally {
                          if (_didIteratorError) {
                            throw _iteratorError;
                          }
                        }
                      }

                      return invalidValues.length === 0
                        ? true
                        : {
                            value: invalidValues,
                          };
                    },
                  },
                  {
                    key: "deprecated",
                    value: function deprecated(value, utils) {
                      var deprecatedResult = [];
                      var _iteratorNormalCompletion2 = true;
                      var _didIteratorError2 = false;
                      var _iteratorError2 = undefined;

                      try {
                        for (
                          var _iterator2 = value[Symbol.iterator](), _step2;
                          !(_iteratorNormalCompletion2 = (_step2 =
                            _iterator2.next()).done);
                          _iteratorNormalCompletion2 = true
                        ) {
                          var subValue = _step2.value;
                          var subDeprecatedResult =
                            utils.normalizeDeprecatedResult(
                              this._valueSchema.deprecated(subValue, utils),
                              subValue
                            );

                          if (subDeprecatedResult !== false) {
                            deprecatedResult.push.apply(
                              deprecatedResult,
                              _toConsumableArray(
                                subDeprecatedResult.map(function (_ref) {
                                  var deprecatedValue = _ref.value;
                                  return {
                                    value: [deprecatedValue],
                                  };
                                })
                              )
                            );
                          }
                        }
                      } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion2 &&
                            _iterator2.return != null
                          ) {
                            _iterator2.return();
                          }
                        } finally {
                          if (_didIteratorError2) {
                            throw _iteratorError2;
                          }
                        }
                      }

                      return deprecatedResult;
                    },
                  },
                  {
                    key: "forward",
                    value: function forward(value, utils) {
                      var forwardResult = [];
                      var _iteratorNormalCompletion3 = true;
                      var _didIteratorError3 = false;
                      var _iteratorError3 = undefined;

                      try {
                        for (
                          var _iterator3 = value[Symbol.iterator](), _step3;
                          !(_iteratorNormalCompletion3 = (_step3 =
                            _iterator3.next()).done);
                          _iteratorNormalCompletion3 = true
                        ) {
                          var subValue = _step3.value;
                          var subForwardResult = utils.normalizeForwardResult(
                            this._valueSchema.forward(subValue, utils),
                            subValue
                          );
                          forwardResult.push.apply(
                            forwardResult,
                            _toConsumableArray(
                              subForwardResult.map(wrapTransferResult)
                            )
                          );
                        }
                      } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion3 &&
                            _iterator3.return != null
                          ) {
                            _iterator3.return();
                          }
                        } finally {
                          if (_didIteratorError3) {
                            throw _iteratorError3;
                          }
                        }
                      }

                      return forwardResult;
                    },
                  },
                  {
                    key: "redirect",
                    value: function redirect(value, utils) {
                      var remain = [];
                      var redirect = [];
                      var _iteratorNormalCompletion4 = true;
                      var _didIteratorError4 = false;
                      var _iteratorError4 = undefined;

                      try {
                        for (
                          var _iterator4 = value[Symbol.iterator](), _step4;
                          !(_iteratorNormalCompletion4 = (_step4 =
                            _iterator4.next()).done);
                          _iteratorNormalCompletion4 = true
                        ) {
                          var subValue = _step4.value;
                          var subRedirectResult = utils.normalizeRedirectResult(
                            this._valueSchema.redirect(subValue, utils),
                            subValue
                          );

                          if ("remain" in subRedirectResult) {
                            remain.push(subRedirectResult.remain);
                          }

                          redirect.push.apply(
                            redirect,
                            _toConsumableArray(
                              subRedirectResult.redirect.map(wrapTransferResult)
                            )
                          );
                        }
                      } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion4 &&
                            _iterator4.return != null
                          ) {
                            _iterator4.return();
                          }
                        } finally {
                          if (_didIteratorError4) {
                            throw _iteratorError4;
                          }
                        }
                      }

                      return remain.length === 0
                        ? {
                            redirect: redirect,
                          }
                        : {
                            redirect: redirect,
                            remain: remain,
                          };
                    },
                  },
                  {
                    key: "overlap",
                    value: function overlap(currentValue, newValue) {
                      return currentValue.concat(newValue);
                    },
                  },
                ]);

                return ArraySchema;
              })(schema.Schema);

            exports.ArraySchema = ArraySchema;

            function wrapTransferResult(_ref2) {
              var from = _ref2.from,
                to = _ref2.to;
              return {
                from: [from],
                to: to,
              };
            }
          });
          unwrapExports(array$2);

          var boolean_1 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var BooleanSchema =
              /*#__PURE__*/
              (function (_schema_1$Schema) {
                _inherits(BooleanSchema, _schema_1$Schema);

                function BooleanSchema() {
                  _classCallCheck(this, BooleanSchema);

                  return _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(BooleanSchema).apply(this, arguments)
                  );
                }

                _createClass(BooleanSchema, [
                  {
                    key: "expected",
                    value: function expected() {
                      return "true or false";
                    },
                  },
                  {
                    key: "validate",
                    value: function validate(value) {
                      return typeof value === "boolean";
                    },
                  },
                ]);

                return BooleanSchema;
              })(schema.Schema);

            exports.BooleanSchema = BooleanSchema;
          });
          unwrapExports(boolean_1);

          var utils = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            function recordFromArray(array, mainKey) {
              var record = Object.create(null);
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = array[Symbol.iterator](), _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var value = _step.value;
                  var key = value[mainKey]; // istanbul ignore next

                  if (record[key]) {
                    throw new Error(
                      "Duplicate "
                        .concat(mainKey, " ")
                        .concat(JSON.stringify(key))
                    );
                  } // @ts-ignore

                  record[key] = value;
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return record;
            }

            exports.recordFromArray = recordFromArray;

            function mapFromArray(array, mainKey) {
              var map = new Map();
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (
                  var _iterator2 = array[Symbol.iterator](), _step2;
                  !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                    .done);
                  _iteratorNormalCompletion2 = true
                ) {
                  var value = _step2.value;
                  var key = value[mainKey]; // istanbul ignore next

                  if (map.has(key)) {
                    throw new Error(
                      "Duplicate "
                        .concat(mainKey, " ")
                        .concat(JSON.stringify(key))
                    );
                  }

                  map.set(key, value);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (
                    !_iteratorNormalCompletion2 &&
                    _iterator2.return != null
                  ) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              return map;
            }

            exports.mapFromArray = mapFromArray;

            function createAutoChecklist() {
              var map = Object.create(null);
              return function (id) {
                var idString = JSON.stringify(id);

                if (map[idString]) {
                  return true;
                }

                map[idString] = true;
                return false;
              };
            }

            exports.createAutoChecklist = createAutoChecklist;

            function partition(array, predicate) {
              var trueArray = [];
              var falseArray = [];
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (
                  var _iterator3 = array[Symbol.iterator](), _step3;
                  !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                    .done);
                  _iteratorNormalCompletion3 = true
                ) {
                  var value = _step3.value;

                  if (predicate(value)) {
                    trueArray.push(value);
                  } else {
                    falseArray.push(value);
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (
                    !_iteratorNormalCompletion3 &&
                    _iterator3.return != null
                  ) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              return [trueArray, falseArray];
            }

            exports.partition = partition;

            function isInt(value) {
              return value === Math.floor(value);
            }

            exports.isInt = isInt;

            function comparePrimitive(a, b) {
              if (a === b) {
                return 0;
              }

              var typeofA = _typeof(a);

              var typeofB = _typeof(b);

              var orders = [
                "undefined",
                "object",
                "boolean",
                "number",
                "string",
              ];

              if (typeofA !== typeofB) {
                return orders.indexOf(typeofA) - orders.indexOf(typeofB);
              }

              if (typeofA !== "string") {
                return Number(a) - Number(b);
              }

              return a.localeCompare(b);
            }

            exports.comparePrimitive = comparePrimitive;

            function normalizeDefaultResult(result) {
              return result === undefined ? {} : result;
            }

            exports.normalizeDefaultResult = normalizeDefaultResult;

            function normalizeValidateResult(result, value) {
              return result === true
                ? true
                : result === false
                ? {
                    value: value,
                  }
                : result;
            }

            exports.normalizeValidateResult = normalizeValidateResult;

            function normalizeDeprecatedResult(result, value) {
              var doNotNormalizeTrue =
                arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : false;
              return result === false
                ? false
                : result === true
                ? doNotNormalizeTrue
                  ? true
                  : [
                      {
                        value: value,
                      },
                    ]
                : "value" in result
                ? [result]
                : result.length === 0
                ? false
                : result;
            }

            exports.normalizeDeprecatedResult = normalizeDeprecatedResult;

            function normalizeTransferResult(result, value) {
              return typeof result === "string" || "key" in result
                ? {
                    from: value,
                    to: result,
                  }
                : "from" in result
                ? {
                    from: result.from,
                    to: result.to,
                  }
                : {
                    from: value,
                    to: result.to,
                  };
            }

            exports.normalizeTransferResult = normalizeTransferResult;

            function normalizeForwardResult(result, value) {
              return result === undefined
                ? []
                : Array.isArray(result)
                ? result.map(function (transferResult) {
                    return normalizeTransferResult(transferResult, value);
                  })
                : [normalizeTransferResult(result, value)];
            }

            exports.normalizeForwardResult = normalizeForwardResult;

            function normalizeRedirectResult(result, value) {
              var redirect = normalizeForwardResult(
                _typeof(result) === "object" && "redirect" in result
                  ? result.redirect
                  : result,
                value
              );
              return redirect.length === 0
                ? {
                    remain: value,
                    redirect: redirect,
                  }
                : _typeof(result) === "object" && "remain" in result
                ? {
                    remain: result.remain,
                    redirect: redirect,
                  }
                : {
                    redirect: redirect,
                  };
            }

            exports.normalizeRedirectResult = normalizeRedirectResult;
          });
          unwrapExports(utils);

          var choice = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var ChoiceSchema =
              /*#__PURE__*/
              (function (_schema_1$Schema) {
                _inherits(ChoiceSchema, _schema_1$Schema);

                function ChoiceSchema(parameters) {
                  var _this;

                  _classCallCheck(this, ChoiceSchema);

                  _this = _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(ChoiceSchema).call(this, parameters)
                  );
                  _this._choices = utils.mapFromArray(
                    parameters.choices.map(function (choice) {
                      return choice && _typeof(choice) === "object"
                        ? choice
                        : {
                            value: choice,
                          };
                    }),
                    "value"
                  );
                  return _this;
                }

                _createClass(ChoiceSchema, [
                  {
                    key: "expected",
                    value: function expected(_ref) {
                      var _this2 = this;

                      var descriptor = _ref.descriptor;
                      var choiceValues = Array.from(this._choices.keys())
                        .map(function (value) {
                          return _this2._choices.get(value);
                        })
                        .filter(function (choiceInfo) {
                          return !choiceInfo.deprecated;
                        })
                        .map(function (choiceInfo) {
                          return choiceInfo.value;
                        })
                        .sort(utils.comparePrimitive)
                        .map(descriptor.value);
                      var head = choiceValues.slice(0, -2);
                      var tail = choiceValues.slice(-2);
                      return head.concat(tail.join(" or ")).join(", ");
                    },
                  },
                  {
                    key: "validate",
                    value: function validate(value) {
                      return this._choices.has(value);
                    },
                  },
                  {
                    key: "deprecated",
                    value: function deprecated(value) {
                      var choiceInfo = this._choices.get(value);

                      return choiceInfo && choiceInfo.deprecated
                        ? {
                            value: value,
                          }
                        : false;
                    },
                  },
                  {
                    key: "forward",
                    value: function forward(value) {
                      var choiceInfo = this._choices.get(value);

                      return choiceInfo ? choiceInfo.forward : undefined;
                    },
                  },
                  {
                    key: "redirect",
                    value: function redirect(value) {
                      var choiceInfo = this._choices.get(value);

                      return choiceInfo ? choiceInfo.redirect : undefined;
                    },
                  },
                ]);

                return ChoiceSchema;
              })(schema.Schema);

            exports.ChoiceSchema = ChoiceSchema;
          });
          unwrapExports(choice);

          var number = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var NumberSchema =
              /*#__PURE__*/
              (function (_schema_1$Schema) {
                _inherits(NumberSchema, _schema_1$Schema);

                function NumberSchema() {
                  _classCallCheck(this, NumberSchema);

                  return _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(NumberSchema).apply(this, arguments)
                  );
                }

                _createClass(NumberSchema, [
                  {
                    key: "expected",
                    value: function expected() {
                      return "a number";
                    },
                  },
                  {
                    key: "validate",
                    value: function validate(value, _utils) {
                      return typeof value === "number";
                    },
                  },
                ]);

                return NumberSchema;
              })(schema.Schema);

            exports.NumberSchema = NumberSchema;
          });
          unwrapExports(number);

          var integer = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var IntegerSchema =
              /*#__PURE__*/
              (function (_number_1$NumberSchem) {
                _inherits(IntegerSchema, _number_1$NumberSchem);

                function IntegerSchema() {
                  _classCallCheck(this, IntegerSchema);

                  return _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(IntegerSchema).apply(this, arguments)
                  );
                }

                _createClass(IntegerSchema, [
                  {
                    key: "expected",
                    value: function expected() {
                      return "an integer";
                    },
                  },
                  {
                    key: "validate",
                    value: function validate(value, utils$$2) {
                      return (
                        utils$$2.normalizeValidateResult(
                          _get(
                            _getPrototypeOf(IntegerSchema.prototype),
                            "validate",
                            this
                          ).call(this, value, utils$$2),
                          value
                        ) === true && utils.isInt(value)
                      );
                    },
                  },
                ]);

                return IntegerSchema;
              })(number.NumberSchema);

            exports.IntegerSchema = IntegerSchema;
          });
          unwrapExports(integer);

          var string = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            var StringSchema =
              /*#__PURE__*/
              (function (_schema_1$Schema) {
                _inherits(StringSchema, _schema_1$Schema);

                function StringSchema() {
                  _classCallCheck(this, StringSchema);

                  return _possibleConstructorReturn(
                    this,
                    _getPrototypeOf(StringSchema).apply(this, arguments)
                  );
                }

                _createClass(StringSchema, [
                  {
                    key: "expected",
                    value: function expected() {
                      return "a string";
                    },
                  },
                  {
                    key: "validate",
                    value: function validate(value) {
                      return typeof value === "string";
                    },
                  },
                ]);

                return StringSchema;
              })(schema.Schema);

            exports.StringSchema = StringSchema;
          });
          unwrapExports(string);

          var schemas = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            tslib_1.__exportStar(alias, exports);

            tslib_1.__exportStar(any, exports);

            tslib_1.__exportStar(array$2, exports);

            tslib_1.__exportStar(boolean_1, exports);

            tslib_1.__exportStar(choice, exports);

            tslib_1.__exportStar(integer, exports);

            tslib_1.__exportStar(number, exports);

            tslib_1.__exportStar(string, exports);
          });
          unwrapExports(schemas);

          var defaults = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.defaultDescriptor = api.apiDescriptor;
            exports.defaultUnknownHandler = leven_1.levenUnknownHandler;
            exports.defaultInvalidHandler = invalid.commonInvalidHandler;
            exports.defaultDeprecatedHandler = common.commonDeprecatedHandler;
          });
          unwrapExports(defaults);

          var normalize$1 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            exports.normalize = function (options, schemas, opts) {
              return new Normalizer(schemas, opts).normalize(options);
            };

            var Normalizer =
              /*#__PURE__*/
              (function () {
                function Normalizer(schemas, opts) {
                  _classCallCheck(this, Normalizer);

                  // istanbul ignore next
                  var _ref = opts || {},
                    _ref$logger = _ref.logger,
                    logger = _ref$logger === void 0 ? console : _ref$logger,
                    _ref$descriptor = _ref.descriptor,
                    descriptor =
                      _ref$descriptor === void 0
                        ? defaults.defaultDescriptor
                        : _ref$descriptor,
                    _ref$unknown = _ref.unknown,
                    unknown =
                      _ref$unknown === void 0
                        ? defaults.defaultUnknownHandler
                        : _ref$unknown,
                    _ref$invalid = _ref.invalid,
                    invalid =
                      _ref$invalid === void 0
                        ? defaults.defaultInvalidHandler
                        : _ref$invalid,
                    _ref$deprecated = _ref.deprecated,
                    deprecated =
                      _ref$deprecated === void 0
                        ? defaults.defaultDeprecatedHandler
                        : _ref$deprecated;

                  this._utils = {
                    descriptor: descriptor,
                    logger:
                      /* istanbul ignore next */
                      logger || {
                        warn: function warn() {},
                      },
                    schemas: utils.recordFromArray(schemas, "name"),
                    normalizeDefaultResult: utils.normalizeDefaultResult,
                    normalizeDeprecatedResult: utils.normalizeDeprecatedResult,
                    normalizeForwardResult: utils.normalizeForwardResult,
                    normalizeRedirectResult: utils.normalizeRedirectResult,
                    normalizeValidateResult: utils.normalizeValidateResult,
                  };
                  this._unknownHandler = unknown;
                  this._invalidHandler = invalid;
                  this._deprecatedHandler = deprecated;
                  this.cleanHistory();
                }

                _createClass(Normalizer, [
                  {
                    key: "cleanHistory",
                    value: function cleanHistory() {
                      this._hasDeprecationWarned = utils.createAutoChecklist();
                    },
                  },
                  {
                    key: "normalize",
                    value: function normalize(options) {
                      var _this = this;

                      var normalized = {};
                      var restOptionsArray = [options];

                      var applyNormalization = function applyNormalization() {
                        while (restOptionsArray.length !== 0) {
                          var currentOptions = restOptionsArray.shift();

                          var transferredOptionsArray =
                            _this._applyNormalization(
                              currentOptions,
                              normalized
                            );

                          restOptionsArray.push.apply(
                            restOptionsArray,
                            _toConsumableArray(transferredOptionsArray)
                          );
                        }
                      };

                      applyNormalization();

                      var _arr = Object.keys(this._utils.schemas);

                      for (var _i = 0; _i < _arr.length; _i++) {
                        var key = _arr[_i];
                        var schema = this._utils.schemas[key];

                        if (!(key in normalized)) {
                          var defaultResult = utils.normalizeDefaultResult(
                            schema.default(this._utils)
                          );

                          if ("value" in defaultResult) {
                            restOptionsArray.push(
                              _defineProperty({}, key, defaultResult.value)
                            );
                          }
                        }
                      }

                      applyNormalization();

                      var _arr2 = Object.keys(this._utils.schemas);

                      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                        var _key = _arr2[_i2];
                        var _schema = this._utils.schemas[_key];

                        if (_key in normalized) {
                          normalized[_key] = _schema.postprocess(
                            normalized[_key],
                            this._utils
                          );
                        }
                      }

                      return normalized;
                    },
                  },
                  {
                    key: "_applyNormalization",
                    value: function _applyNormalization(options, normalized) {
                      var _this2 = this;

                      var transferredOptionsArray = [];

                      var _utils_1$partition = utils.partition(
                          Object.keys(options),
                          function (key) {
                            return key in _this2._utils.schemas;
                          }
                        ),
                        _utils_1$partition2 = _slicedToArray(
                          _utils_1$partition,
                          2
                        ),
                        knownOptionNames = _utils_1$partition2[0],
                        unknownOptionNames = _utils_1$partition2[1];

                      var _iteratorNormalCompletion = true;
                      var _didIteratorError = false;
                      var _iteratorError = undefined;

                      try {
                        var _loop = function _loop() {
                          var key = _step.value;
                          var schema = _this2._utils.schemas[key];
                          var value = schema.preprocess(
                            options[key],
                            _this2._utils
                          );
                          var validateResult = utils.normalizeValidateResult(
                            schema.validate(value, _this2._utils),
                            value
                          );

                          if (validateResult !== true) {
                            var invalidValue = validateResult.value;

                            var errorMessageOrError = _this2._invalidHandler(
                              key,
                              invalidValue,
                              _this2._utils
                            );

                            throw typeof errorMessageOrError === "string"
                              ? new Error(errorMessageOrError)
                              : /* istanbul ignore next*/
                                errorMessageOrError;
                          }

                          var appendTransferredOptions =
                            function appendTransferredOptions(_ref2) {
                              var from = _ref2.from,
                                to = _ref2.to;
                              transferredOptionsArray.push(
                                typeof to === "string"
                                  ? _defineProperty({}, to, from)
                                  : _defineProperty({}, to.key, to.value)
                              );
                            };

                          var warnDeprecated = function warnDeprecated(_ref5) {
                            var currentValue = _ref5.value,
                              redirectTo = _ref5.redirectTo;
                            var deprecatedResult =
                              utils.normalizeDeprecatedResult(
                                schema.deprecated(currentValue, _this2._utils),
                                value,
                                /* doNotNormalizeTrue */
                                true
                              );

                            if (deprecatedResult === false) {
                              return;
                            }

                            if (deprecatedResult === true) {
                              if (!_this2._hasDeprecationWarned(key)) {
                                _this2._utils.logger.warn(
                                  _this2._deprecatedHandler(
                                    key,
                                    redirectTo,
                                    _this2._utils
                                  )
                                );
                              }
                            } else {
                              var _iteratorNormalCompletion3 = true;
                              var _didIteratorError3 = false;
                              var _iteratorError3 = undefined;

                              try {
                                for (
                                  var _iterator3 =
                                      deprecatedResult[Symbol.iterator](),
                                    _step3;
                                  !(_iteratorNormalCompletion3 = (_step3 =
                                    _iterator3.next()).done);
                                  _iteratorNormalCompletion3 = true
                                ) {
                                  var deprecatedValue = _step3.value.value;
                                  var pair = {
                                    key: key,
                                    value: deprecatedValue,
                                  };

                                  if (!_this2._hasDeprecationWarned(pair)) {
                                    var redirectToPair =
                                      typeof redirectTo === "string"
                                        ? {
                                            key: redirectTo,
                                            value: deprecatedValue,
                                          }
                                        : redirectTo;

                                    _this2._utils.logger.warn(
                                      _this2._deprecatedHandler(
                                        pair,
                                        redirectToPair,
                                        _this2._utils
                                      )
                                    );
                                  }
                                }
                              } catch (err) {
                                _didIteratorError3 = true;
                                _iteratorError3 = err;
                              } finally {
                                try {
                                  if (
                                    !_iteratorNormalCompletion3 &&
                                    _iterator3.return != null
                                  ) {
                                    _iterator3.return();
                                  }
                                } finally {
                                  if (_didIteratorError3) {
                                    throw _iteratorError3;
                                  }
                                }
                              }
                            }
                          };

                          var forwardResult = utils.normalizeForwardResult(
                            schema.forward(value, _this2._utils),
                            value
                          );
                          forwardResult.forEach(appendTransferredOptions);
                          var redirectResult = utils.normalizeRedirectResult(
                            schema.redirect(value, _this2._utils),
                            value
                          );
                          redirectResult.redirect.forEach(
                            appendTransferredOptions
                          );

                          if ("remain" in redirectResult) {
                            var remainingValue = redirectResult.remain;
                            normalized[key] =
                              key in normalized
                                ? schema.overlap(
                                    normalized[key],
                                    remainingValue,
                                    _this2._utils
                                  )
                                : remainingValue;
                            warnDeprecated({
                              value: remainingValue,
                            });
                          }

                          var _iteratorNormalCompletion4 = true;
                          var _didIteratorError4 = false;
                          var _iteratorError4 = undefined;

                          try {
                            for (
                              var _iterator4 =
                                  redirectResult.redirect[Symbol.iterator](),
                                _step4;
                              !(_iteratorNormalCompletion4 = (_step4 =
                                _iterator4.next()).done);
                              _iteratorNormalCompletion4 = true
                            ) {
                              var _step4$value = _step4.value,
                                from = _step4$value.from,
                                to = _step4$value.to;
                              warnDeprecated({
                                value: from,
                                redirectTo: to,
                              });
                            }
                          } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                          } finally {
                            try {
                              if (
                                !_iteratorNormalCompletion4 &&
                                _iterator4.return != null
                              ) {
                                _iterator4.return();
                              }
                            } finally {
                              if (_didIteratorError4) {
                                throw _iteratorError4;
                              }
                            }
                          }
                        };

                        for (
                          var _iterator = knownOptionNames[Symbol.iterator](),
                            _step;
                          !(_iteratorNormalCompletion = (_step =
                            _iterator.next()).done);
                          _iteratorNormalCompletion = true
                        ) {
                          _loop();
                        }
                      } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion &&
                            _iterator.return != null
                          ) {
                            _iterator.return();
                          }
                        } finally {
                          if (_didIteratorError) {
                            throw _iteratorError;
                          }
                        }
                      }

                      var _iteratorNormalCompletion2 = true;
                      var _didIteratorError2 = false;
                      var _iteratorError2 = undefined;

                      try {
                        for (
                          var _iterator2 =
                              unknownOptionNames[Symbol.iterator](),
                            _step2;
                          !(_iteratorNormalCompletion2 = (_step2 =
                            _iterator2.next()).done);
                          _iteratorNormalCompletion2 = true
                        ) {
                          var key = _step2.value;
                          var value = options[key];

                          var unknownResult = this._unknownHandler(
                            key,
                            value,
                            this._utils
                          );

                          if (unknownResult) {
                            var _arr3 = Object.keys(unknownResult);

                            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                              var unknownKey = _arr3[_i3];

                              var unknownOption = _defineProperty(
                                {},
                                unknownKey,
                                unknownResult[unknownKey]
                              );

                              if (unknownKey in this._utils.schemas) {
                                transferredOptionsArray.push(unknownOption);
                              } else {
                                Object.assign(normalized, unknownOption);
                              }
                            }
                          }
                        }
                      } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion2 &&
                            _iterator2.return != null
                          ) {
                            _iterator2.return();
                          }
                        } finally {
                          if (_didIteratorError2) {
                            throw _iteratorError2;
                          }
                        }
                      }

                      return transferredOptionsArray;
                    },
                  },
                ]);

                return Normalizer;
              })();

            exports.Normalizer = Normalizer;
          });
          unwrapExports(normalize$1);

          var lib$1 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });

            tslib_1.__exportStar(descriptors, exports);

            tslib_1.__exportStar(handlers, exports);

            tslib_1.__exportStar(schemas, exports);

            tslib_1.__exportStar(normalize$1, exports);

            tslib_1.__exportStar(schema, exports);
          });
          unwrapExports(lib$1);

          var hasFlag$3 = function hasFlag(flag, argv$$1) {
            argv$$1 = argv$$1 || process.argv;
            var terminatorPos = argv$$1.indexOf("--");
            var prefix = /^-{1,2}/.test(flag) ? "" : "--";
            var pos = argv$$1.indexOf(prefix + flag);
            return (
              pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos)
            );
          };

          var supportsColor$1 = createCommonjsModule(function (module) {
            "use strict";

            var env$$1 = process.env;

            var support = function support(level) {
              if (level === 0) {
                return false;
              }

              return {
                level: level,
                hasBasic: true,
                has256: level >= 2,
                has16m: level >= 3,
              };
            };

            var supportLevel = (function () {
              if (
                hasFlag$3("no-color") ||
                hasFlag$3("no-colors") ||
                hasFlag$3("color=false")
              ) {
                return 0;
              }

              if (
                hasFlag$3("color=16m") ||
                hasFlag$3("color=full") ||
                hasFlag$3("color=truecolor")
              ) {
                return 3;
              }

              if (hasFlag$3("color=256")) {
                return 2;
              }

              if (
                hasFlag$3("color") ||
                hasFlag$3("colors") ||
                hasFlag$3("color=true") ||
                hasFlag$3("color=always")
              ) {
                return 1;
              }

              if (process.stdout && !process.stdout.isTTY) {
                return 0;
              }

              if (process.platform === "win32") {
                // Node.js 7.5.0 is the first version of Node.js to include a patch to
                // libuv that enables 256 color output on Windows. Anything earlier and it
                // won't work. However, here we target Node.js 8 at minimum as it is an LTS
                // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
                // release that supports 256 colors.
                var osRelease = require$$1$1.release().split(".");

                if (
                  Number(process.versions.node.split(".")[0]) >= 8 &&
                  Number(osRelease[0]) >= 10 &&
                  Number(osRelease[2]) >= 10586
                ) {
                  return 2;
                }

                return 1;
              }

              if ("CI" in env$$1) {
                if (
                  ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(
                    function (sign) {
                      return sign in env$$1;
                    }
                  ) ||
                  env$$1.CI_NAME === "codeship"
                ) {
                  return 1;
                }

                return 0;
              }

              if ("TEAMCITY_VERSION" in env$$1) {
                return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(
                  env$$1.TEAMCITY_VERSION
                )
                  ? 1
                  : 0;
              }

              if ("TERM_PROGRAM" in env$$1) {
                var version = parseInt(
                  (env$$1.TERM_PROGRAM_VERSION || "").split(".")[0],
                  10
                );

                switch (env$$1.TERM_PROGRAM) {
                  case "iTerm.app":
                    return version >= 3 ? 3 : 2;

                  case "Hyper":
                    return 3;

                  case "Apple_Terminal":
                    return 2;
                  // No default
                }
              }

              if (/-256(color)?$/i.test(env$$1.TERM)) {
                return 2;
              }

              if (
                /^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(
                  env$$1.TERM
                )
              ) {
                return 1;
              }

              if ("COLORTERM" in env$$1) {
                return 1;
              }

              if (env$$1.TERM === "dumb") {
                return 0;
              }

              return 0;
            })();

            if ("FORCE_COLOR" in env$$1) {
              supportLevel =
                parseInt(env$$1.FORCE_COLOR, 10) === 0 ? 0 : supportLevel || 1;
            }

            module.exports = process && support(supportLevel);
          });

          var templates$2 = createCommonjsModule(function (module) {
            "use strict";

            var TEMPLATE_REGEX =
              /(?:\\(u[a-f0-9]{4}|x[a-f0-9]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
            var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
            var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
            var ESCAPE_REGEX = /\\(u[0-9a-f]{4}|x[0-9a-f]{2}|.)|([^\\])/gi;
            var ESCAPES = {
              n: "\n",
              r: "\r",
              t: "\t",
              b: "\b",
              f: "\f",
              v: "\v",
              0: "\0",
              "\\": "\\",
              e: "\x1B",
              a: "\x07",
            };

            function unescape(c) {
              if (
                (c[0] === "u" && c.length === 5) ||
                (c[0] === "x" && c.length === 3)
              ) {
                return String.fromCharCode(parseInt(c.slice(1), 16));
              }

              return ESCAPES[c] || c;
            }

            function parseArguments(name, args) {
              var results = [];
              var chunks = args.trim().split(/\s*,\s*/g);
              var matches;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = chunks[Symbol.iterator](), _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var chunk = _step.value;

                  if (!isNaN(chunk)) {
                    results.push(Number(chunk));
                  } else if ((matches = chunk.match(STRING_REGEX))) {
                    results.push(
                      matches[2].replace(
                        ESCAPE_REGEX,
                        function (m, escape, chr) {
                          return escape ? unescape(escape) : chr;
                        }
                      )
                    );
                  } else {
                    throw new Error(
                      "Invalid Chalk template style argument: "
                        .concat(chunk, " (in style '")
                        .concat(name, "')")
                    );
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return results;
            }

            function parseStyle(style) {
              STYLE_REGEX.lastIndex = 0;
              var results = [];
              var matches;

              while ((matches = STYLE_REGEX.exec(style)) !== null) {
                var name = matches[1];

                if (matches[2]) {
                  var args = parseArguments(name, matches[2]);
                  results.push([name].concat(args));
                } else {
                  results.push([name]);
                }
              }

              return results;
            }

            function buildStyle(chalk, styles) {
              var enabled = {};
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (
                  var _iterator2 = styles[Symbol.iterator](), _step2;
                  !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                    .done);
                  _iteratorNormalCompletion2 = true
                ) {
                  var layer = _step2.value;
                  var _iteratorNormalCompletion3 = true;
                  var _didIteratorError3 = false;
                  var _iteratorError3 = undefined;

                  try {
                    for (
                      var _iterator3 = layer.styles[Symbol.iterator](), _step3;
                      !(_iteratorNormalCompletion3 = (_step3 =
                        _iterator3.next()).done);
                      _iteratorNormalCompletion3 = true
                    ) {
                      var style = _step3.value;
                      enabled[style[0]] = layer.inverse ? null : style.slice(1);
                    }
                  } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                  } finally {
                    try {
                      if (
                        !_iteratorNormalCompletion3 &&
                        _iterator3.return != null
                      ) {
                        _iterator3.return();
                      }
                    } finally {
                      if (_didIteratorError3) {
                        throw _iteratorError3;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (
                    !_iteratorNormalCompletion2 &&
                    _iterator2.return != null
                  ) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              var current = chalk;

              var _arr = Object.keys(enabled);

              for (var _i = 0; _i < _arr.length; _i++) {
                var styleName = _arr[_i];

                if (Array.isArray(enabled[styleName])) {
                  if (!(styleName in current)) {
                    throw new Error("Unknown Chalk style: ".concat(styleName));
                  }

                  if (enabled[styleName].length > 0) {
                    current = current[styleName].apply(
                      current,
                      enabled[styleName]
                    );
                  } else {
                    current = current[styleName];
                  }
                }
              }

              return current;
            }

            module.exports = function (chalk, tmp) {
              var styles = [];
              var chunks = [];
              var chunk = []; // eslint-disable-next-line max-params

              tmp.replace(
                TEMPLATE_REGEX,
                function (m, escapeChar, inverse, style, close, chr) {
                  if (escapeChar) {
                    chunk.push(unescape(escapeChar));
                  } else if (style) {
                    var str = chunk.join("");
                    chunk = [];
                    chunks.push(
                      styles.length === 0 ? str : buildStyle(chalk, styles)(str)
                    );
                    styles.push({
                      inverse: inverse,
                      styles: parseStyle(style),
                    });
                  } else if (close) {
                    if (styles.length === 0) {
                      throw new Error(
                        "Found extraneous } in Chalk template literal"
                      );
                    }

                    chunks.push(buildStyle(chalk, styles)(chunk.join("")));
                    chunk = [];
                    styles.pop();
                  } else {
                    chunk.push(chr);
                  }
                }
              );
              chunks.push(chunk.join(""));

              if (styles.length > 0) {
                var errMsg = "Chalk template literal is missing "
                  .concat(styles.length, " closing bracket")
                  .concat(styles.length === 1 ? "" : "s", " (`}`)");
                throw new Error(errMsg);
              }

              return chunks.join("");
            };
          });

          var isSimpleWindowsTerm =
            process.platform === "win32" &&
            !(process.env.TERM || "").toLowerCase().startsWith("xterm"); // `supportsColor.level` → `ansiStyles.color[name]` mapping

          var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"]; // `color-convert` models to exclude from the Chalk API due to conflicts and such

          var skipModels = new Set(["gray"]);
          var styles = Object.create(null);

          function applyOptions(obj, options) {
            options = options || {}; // Detect level if not set manually

            var scLevel = supportsColor$1 ? supportsColor$1.level : 0;
            obj.level = options.level === undefined ? scLevel : options.level;
            obj.enabled =
              "enabled" in options ? options.enabled : obj.level > 0;
          }

          function Chalk(options) {
            // We check for this.template here since calling `chalk.constructor()`
            // by itself will have a `this` of a previously constructed chalk object
            if (!this || !(this instanceof Chalk) || this.template) {
              var _chalk = {};
              applyOptions(_chalk, options);

              _chalk.template = function () {
                var args = [].slice.call(arguments);
                return chalkTag.apply(null, [_chalk.template].concat(args));
              };

              Object.setPrototypeOf(_chalk, Chalk.prototype);
              Object.setPrototypeOf(_chalk.template, _chalk);
              _chalk.template.constructor = Chalk;
              return _chalk.template;
            }

            applyOptions(this, options);
          } // Use bright blue on Windows as the normal blue color is illegible

          if (isSimpleWindowsTerm) {
            ansiStyles.blue.open = "\x1B[94m";
          }

          var _arr = Object.keys(ansiStyles);

          var _loop = function _loop() {
            var key = _arr[_i];
            ansiStyles[key].closeRe = new RegExp(
              escapeStringRegexp(ansiStyles[key].close),
              "g"
            );
            styles[key] = {
              get: function get() {
                var codes = ansiStyles[key];
                return build.call(
                  this,
                  this._styles ? this._styles.concat(codes) : [codes],
                  key
                );
              },
            };
          };

          for (var _i = 0; _i < _arr.length; _i++) {
            _loop();
          }

          ansiStyles.color.closeRe = new RegExp(
            escapeStringRegexp(ansiStyles.color.close),
            "g"
          );

          var _arr2 = Object.keys(ansiStyles.color.ansi);

          var _loop2 = function _loop2() {
            var model = _arr2[_i2];

            if (skipModels.has(model)) {
              return "continue";
            }

            styles[model] = {
              get: function get() {
                var level = this.level;
                return function () {
                  var open = ansiStyles.color[levelMapping[level]][model].apply(
                    null,
                    arguments
                  );
                  var codes = {
                    open: open,
                    close: ansiStyles.color.close,
                    closeRe: ansiStyles.color.closeRe,
                  };
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    model
                  );
                };
              },
            };
          };

          for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
            var _ret = _loop2();

            if (_ret === "continue") continue;
          }

          ansiStyles.bgColor.closeRe = new RegExp(
            escapeStringRegexp(ansiStyles.bgColor.close),
            "g"
          );

          var _arr3 = Object.keys(ansiStyles.bgColor.ansi);

          var _loop3 = function _loop3() {
            var model = _arr3[_i3];

            if (skipModels.has(model)) {
              return "continue";
            }

            var bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
            styles[bgModel] = {
              get: function get() {
                var level = this.level;
                return function () {
                  var open = ansiStyles.bgColor[levelMapping[level]][
                    model
                  ].apply(null, arguments);
                  var codes = {
                    open: open,
                    close: ansiStyles.bgColor.close,
                    closeRe: ansiStyles.bgColor.closeRe,
                  };
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    model
                  );
                };
              },
            };
          };

          for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
            var _ret2 = _loop3();

            if (_ret2 === "continue") continue;
          }

          var proto = Object.defineProperties(function () {}, styles);

          function build(_styles, key) {
            var builder = function builder() {
              return applyStyle.apply(builder, arguments);
            };

            builder._styles = _styles;
            var self = this;
            Object.defineProperty(builder, "level", {
              enumerable: true,
              get: function get() {
                return self.level;
              },
              set: function set(level) {
                self.level = level;
              },
            });
            Object.defineProperty(builder, "enabled", {
              enumerable: true,
              get: function get() {
                return self.enabled;
              },
              set: function set(enabled) {
                self.enabled = enabled;
              },
            }); // See below for fix regarding invisible grey/dim combination on Windows

            builder.hasGrey = this.hasGrey || key === "gray" || key === "grey"; // `__proto__` is used because we must return a function, but there is
            // no way to create a function with a different prototype

            builder.__proto__ = proto; // eslint-disable-line no-proto

            return builder;
          }

          function applyStyle() {
            // Support varags, but simply cast to string in case there's only one arg
            var args = arguments;
            var argsLen = args.length;
            var str = String(arguments[0]);

            if (argsLen === 0) {
              return "";
            }

            if (argsLen > 1) {
              // Don't slice `arguments`, it prevents V8 optimizations
              for (var a = 1; a < argsLen; a++) {
                str += " " + args[a];
              }
            }

            if (!this.enabled || this.level <= 0 || !str) {
              return str;
            } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
            // see https://github.com/chalk/chalk/issues/58
            // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.

            var originalDim = ansiStyles.dim.open;

            if (isSimpleWindowsTerm && this.hasGrey) {
              ansiStyles.dim.open = "";
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = this._styles
                    .slice()
                    .reverse()
                    [Symbol.iterator](),
                  _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var code = _step.value;
                // Replace any instances already present with a re-opening code
                // otherwise only the part of the string until said closing code
                // will be colored, and the rest will simply be 'plain'.
                str =
                  code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen
                // after next line to fix a bleed issue on macOS
                // https://github.com/chalk/chalk/pull/92

                str = str.replace(
                  /\r?\n/g,
                  "".concat(code.close, "$&").concat(code.open)
                );
              } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            ansiStyles.dim.open = originalDim;
            return str;
          }

          function chalkTag(chalk, strings) {
            if (!Array.isArray(strings)) {
              // If chalk() was called by itself or with a string,
              // return the string itself as a string.
              return [].slice.call(arguments, 1).join(" ");
            }

            var args = [].slice.call(arguments, 2);
            var parts = [strings.raw[0]];

            for (var i = 1; i < strings.length; i++) {
              parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
              parts.push(String(strings.raw[i]));
            }

            return templates$2(chalk, parts.join(""));
          }

          Object.defineProperties(Chalk.prototype, styles);
          var chalk$2 = Chalk(); // eslint-disable-line new-cap

          var supportsColor_1$2 = supportsColor$1;
          chalk$2.supportsColor = supportsColor_1$2;

          var cliDescriptor = {
            key: function key(_key) {
              return _key.length === 1 ? "-".concat(_key) : "--".concat(_key);
            },
            value: function value(_value) {
              return lib$1.apiDescriptor.value(_value);
            },
            pair: function pair(_ref) {
              var key = _ref.key,
                value = _ref.value;
              return value === false
                ? "--no-".concat(key)
                : value === true
                ? cliDescriptor.key(key)
                : value === ""
                ? "".concat(cliDescriptor.key(key), " without an argument")
                : "".concat(cliDescriptor.key(key), "=").concat(value);
            },
          };

          var FlagSchema =
            /*#__PURE__*/
            (function (_vnopts$ChoiceSchema) {
              _inherits(FlagSchema, _vnopts$ChoiceSchema);

              function FlagSchema(_ref2) {
                var _this;

                var name = _ref2.name,
                  flags = _ref2.flags;

                _classCallCheck(this, FlagSchema);

                _this = _possibleConstructorReturn(
                  this,
                  _getPrototypeOf(FlagSchema).call(this, {
                    name: name,
                    choices: flags,
                  })
                );
                _this._flags = flags.slice().sort();
                return _this;
              }

              _createClass(FlagSchema, [
                {
                  key: "preprocess",
                  value: function preprocess(value, utils) {
                    if (
                      typeof value === "string" &&
                      value.length !== 0 &&
                      this._flags.indexOf(value) === -1
                    ) {
                      var suggestion = this._flags.find(function (flag) {
                        return leven$1(flag, value) < 3;
                      });

                      if (suggestion) {
                        utils.logger.warn(
                          [
                            "Unknown flag ".concat(
                              chalk$2.yellow(utils.descriptor.value(value)),
                              ","
                            ),
                            "did you mean ".concat(
                              chalk$2.blue(utils.descriptor.value(suggestion)),
                              "?"
                            ),
                          ].join(" ")
                        );
                        return suggestion;
                      }
                    }

                    return value;
                  },
                },
                {
                  key: "expected",
                  value: function expected() {
                    return "a flag";
                  },
                },
              ]);

              return FlagSchema;
            })(lib$1.ChoiceSchema);

          var hasDeprecationWarned;

          function normalizeOptions$1(options, optionInfos) {
            var _ref3 =
                arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : {},
              logger = _ref3.logger,
              _ref3$isCLI = _ref3.isCLI,
              isCLI = _ref3$isCLI === void 0 ? false : _ref3$isCLI,
              _ref3$passThrough = _ref3.passThrough,
              passThrough =
                _ref3$passThrough === void 0 ? false : _ref3$passThrough;

            var unknown = !passThrough
              ? lib$1.levenUnknownHandler
              : Array.isArray(passThrough)
              ? function (key, value) {
                  return passThrough.indexOf(key) === -1
                    ? undefined
                    : _defineProperty({}, key, value);
                }
              : function (key, value) {
                  return _defineProperty({}, key, value);
                };
            var descriptor = isCLI ? cliDescriptor : lib$1.apiDescriptor;
            var schemas = optionInfosToSchemas(optionInfos, {
              isCLI: isCLI,
            });
            var normalizer = new lib$1.Normalizer(schemas, {
              logger: logger,
              unknown: unknown,
              descriptor: descriptor,
            });
            var shouldSuppressDuplicateDeprecationWarnings = logger !== false;

            if (
              shouldSuppressDuplicateDeprecationWarnings &&
              hasDeprecationWarned
            ) {
              normalizer._hasDeprecationWarned = hasDeprecationWarned;
            }

            var normalized = normalizer.normalize(options);

            if (shouldSuppressDuplicateDeprecationWarnings) {
              hasDeprecationWarned = normalizer._hasDeprecationWarned;
            }

            return normalized;
          }

          function optionInfosToSchemas(optionInfos, _ref6) {
            var isCLI = _ref6.isCLI;
            var schemas = [];

            if (isCLI) {
              schemas.push(
                lib$1.AnySchema.create({
                  name: "_",
                })
              );
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = optionInfos[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var optionInfo = _step.value;
                schemas.push(
                  optionInfoToSchema(optionInfo, {
                    isCLI: isCLI,
                    optionInfos: optionInfos,
                  })
                );

                if (optionInfo.alias && isCLI) {
                  schemas.push(
                    lib$1.AliasSchema.create({
                      name: optionInfo.alias,
                      sourceName: optionInfo.name,
                    })
                  );
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return schemas;
          }

          function optionInfoToSchema(optionInfo, _ref7) {
            var isCLI = _ref7.isCLI,
              optionInfos = _ref7.optionInfos;
            var SchemaConstructor;
            var parameters = {
              name: optionInfo.name,
            };
            var handlers = {};

            switch (optionInfo.type) {
              case "int":
                SchemaConstructor = lib$1.IntegerSchema;

                if (isCLI) {
                  parameters.preprocess = function (value) {
                    return Number(value);
                  };
                }

                break;

              case "choice":
                SchemaConstructor = lib$1.ChoiceSchema;
                parameters.choices = optionInfo.choices.map(function (
                  choiceInfo
                ) {
                  return _typeof(choiceInfo) === "object" && choiceInfo.redirect
                    ? Object.assign({}, choiceInfo, {
                        redirect: {
                          to: {
                            key: optionInfo.name,
                            value: choiceInfo.redirect,
                          },
                        },
                      })
                    : choiceInfo;
                });
                break;

              case "boolean":
                SchemaConstructor = lib$1.BooleanSchema;
                break;

              case "flag":
                SchemaConstructor = FlagSchema;
                parameters.flags = optionInfos
                  .map(function (optionInfo) {
                    return [].concat(
                      optionInfo.alias || [],
                      optionInfo.description ? optionInfo.name : [],
                      optionInfo.oppositeDescription
                        ? "no-".concat(optionInfo.name)
                        : []
                    );
                  })
                  .reduce(function (a, b) {
                    return a.concat(b);
                  }, []);
                break;

              case "path":
                SchemaConstructor = lib$1.StringSchema;
                break;

              default:
                throw new Error("Unexpected type ".concat(optionInfo.type));
            }

            if (optionInfo.exception) {
              parameters.validate = function (value, schema, utils) {
                return (
                  optionInfo.exception(value) || schema.validate(value, utils)
                );
              };
            } else {
              parameters.validate = function (value, schema, utils) {
                return value === undefined || schema.validate(value, utils);
              };
            }

            if (optionInfo.redirect) {
              handlers.redirect = function (value) {
                return !value
                  ? undefined
                  : {
                      to: {
                        key: optionInfo.redirect.option,
                        value: optionInfo.redirect.value,
                      },
                    };
              };
            }

            if (optionInfo.deprecated) {
              handlers.deprecated = true;
            } // allow CLI overriding, e.g., prettier package.json --tab-width 1 --tab-width 2

            if (isCLI && !optionInfo.array) {
              var originalPreprocess =
                parameters.preprocess ||
                function (x) {
                  return x;
                };

              parameters.preprocess = function (value, schema, utils) {
                return schema.preprocess(
                  originalPreprocess(
                    Array.isArray(value) ? value[value.length - 1] : value
                  ),
                  utils
                );
              };
            }

            return optionInfo.array
              ? lib$1.ArraySchema.create(
                  Object.assign(
                    isCLI
                      ? {
                          preprocess: function preprocess(v) {
                            return [].concat(v);
                          },
                        }
                      : {},
                    handlers,
                    {
                      valueSchema: SchemaConstructor.create(parameters),
                    }
                  )
                )
              : SchemaConstructor.create(
                  Object.assign({}, parameters, handlers)
                );
          }

          function normalizeApiOptions(options, optionInfos, opts) {
            return normalizeOptions$1(options, optionInfos, opts);
          }

          function normalizeCliOptions(options, optionInfos, opts) {
            return normalizeOptions$1(
              options,
              optionInfos,
              Object.assign(
                {
                  isCLI: true,
                },
                opts
              )
            );
          }

          var optionsNormalizer = {
            normalizeApiOptions: normalizeApiOptions,
            normalizeCliOptions: normalizeCliOptions,
          };

          var getLast = function getLast(arr) {
            return arr.length > 0 ? arr[arr.length - 1] : null;
          };

          function locStart$1(node, opts) {
            opts = opts || {}; // Handle nodes with decorators. They should start at the first decorator

            if (
              !opts.ignoreDecorators &&
              node.declaration &&
              node.declaration.decorators &&
              node.declaration.decorators.length > 0
            ) {
              return locStart$1(node.declaration.decorators[0]);
            }

            if (
              !opts.ignoreDecorators &&
              node.decorators &&
              node.decorators.length > 0
            ) {
              return locStart$1(node.decorators[0]);
            }

            if (node.__location) {
              return node.__location.startOffset;
            }

            if (node.range) {
              return node.range[0];
            }

            if (typeof node.start === "number") {
              return node.start;
            }

            if (node.loc) {
              return node.loc.start;
            }

            return null;
          }

          function locEnd$1(node) {
            var endNode = node.nodes && getLast(node.nodes);

            if (endNode && node.source && !node.source.end) {
              node = endNode;
            }

            if (node.__location) {
              return node.__location.endOffset;
            }

            var loc = node.range
              ? node.range[1]
              : typeof node.end === "number"
              ? node.end
              : null;

            if (node.typeAnnotation) {
              return Math.max(loc, locEnd$1(node.typeAnnotation));
            }

            if (node.loc && !loc) {
              return node.loc.end;
            }

            return loc;
          }

          var loc = {
            locStart: locStart$1,
            locEnd: locEnd$1,
          };

          var jsTokens = createCommonjsModule(function (module, exports) {
            // Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell
            // License: MIT. (See LICENSE.)
            Object.defineProperty(exports, "__esModule", {
              value: true,
            }); // This regex comes from regex.coffee, and is inserted here by generate-index.js
            // (run `npm run build`).

            exports.default =
              /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

            exports.matchToToken = function (match) {
              var token = {
                type: "invalid",
                value: match[0],
                closed: undefined,
              };
              if (match[1])
                (token.type = "string"),
                  (token.closed = !!(match[3] || match[4]));
              else if (match[5]) token.type = "comment";
              else if (match[6])
                (token.type = "comment"), (token.closed = !!match[7]);
              else if (match[8]) token.type = "regex";
              else if (match[9]) token.type = "number";
              else if (match[10]) token.type = "name";
              else if (match[11]) token.type = "punctuator";
              else if (match[12]) token.type = "whitespace";
              return token;
            };
          });
          unwrapExports(jsTokens);

          var ast = createCommonjsModule(function (module) {
            /*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
  
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
            (function () {
              "use strict";

              function isExpression(node) {
                if (node == null) {
                  return false;
                }

                switch (node.type) {
                  case "ArrayExpression":
                  case "AssignmentExpression":
                  case "BinaryExpression":
                  case "CallExpression":
                  case "ConditionalExpression":
                  case "FunctionExpression":
                  case "Identifier":
                  case "Literal":
                  case "LogicalExpression":
                  case "MemberExpression":
                  case "NewExpression":
                  case "ObjectExpression":
                  case "SequenceExpression":
                  case "ThisExpression":
                  case "UnaryExpression":
                  case "UpdateExpression":
                    return true;
                }

                return false;
              }

              function isIterationStatement(node) {
                if (node == null) {
                  return false;
                }

                switch (node.type) {
                  case "DoWhileStatement":
                  case "ForInStatement":
                  case "ForStatement":
                  case "WhileStatement":
                    return true;
                }

                return false;
              }

              function isStatement(node) {
                if (node == null) {
                  return false;
                }

                switch (node.type) {
                  case "BlockStatement":
                  case "BreakStatement":
                  case "ContinueStatement":
                  case "DebuggerStatement":
                  case "DoWhileStatement":
                  case "EmptyStatement":
                  case "ExpressionStatement":
                  case "ForInStatement":
                  case "ForStatement":
                  case "IfStatement":
                  case "LabeledStatement":
                  case "ReturnStatement":
                  case "SwitchStatement":
                  case "ThrowStatement":
                  case "TryStatement":
                  case "VariableDeclaration":
                  case "WhileStatement":
                  case "WithStatement":
                    return true;
                }

                return false;
              }

              function isSourceElement(node) {
                return (
                  isStatement(node) ||
                  (node != null && node.type === "FunctionDeclaration")
                );
              }

              function trailingStatement(node) {
                switch (node.type) {
                  case "IfStatement":
                    if (node.alternate != null) {
                      return node.alternate;
                    }

                    return node.consequent;

                  case "LabeledStatement":
                  case "ForStatement":
                  case "ForInStatement":
                  case "WhileStatement":
                  case "WithStatement":
                    return node.body;
                }

                return null;
              }

              function isProblematicIfStatement(node) {
                var current;

                if (node.type !== "IfStatement") {
                  return false;
                }

                if (node.alternate == null) {
                  return false;
                }

                current = node.consequent;

                do {
                  if (current.type === "IfStatement") {
                    if (current.alternate == null) {
                      return true;
                    }
                  }

                  current = trailingStatement(current);
                } while (current);

                return false;
              }

              module.exports = {
                isExpression: isExpression,
                isStatement: isStatement,
                isIterationStatement: isIterationStatement,
                isSourceElement: isSourceElement,
                isProblematicIfStatement: isProblematicIfStatement,
                trailingStatement: trailingStatement,
              };
            })();
            /* vim: set sw=4 ts=4 et tw=80 : */
          });

          var code = createCommonjsModule(function (module) {
            /*
    Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
    Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
  
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
            (function () {
              "use strict";

              var ES6Regex,
                ES5Regex,
                NON_ASCII_WHITESPACES,
                IDENTIFIER_START,
                IDENTIFIER_PART,
                ch; // See `tools/generate-identifier-regex.js`.

              ES5Regex = {
                // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
                NonAsciiIdentifierStart:
                  /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
                // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
                NonAsciiIdentifierPart:
                  /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
              };
              ES6Regex = {
                // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
                NonAsciiIdentifierStart:
                  /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
                // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
                NonAsciiIdentifierPart:
                  /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/,
              };

              function isDecimalDigit(ch) {
                return 0x30 <= ch && ch <= 0x39; // 0..9
              }

              function isHexDigit(ch) {
                return (
                  (0x30 <= ch && ch <= 0x39) || // 0..9
                  (0x61 <= ch && ch <= 0x66) || // a..f
                  (0x41 <= ch && ch <= 0x46)
                ); // A..F
              }

              function isOctalDigit(ch) {
                return ch >= 0x30 && ch <= 0x37; // 0..7
              } // 7.2 White Space

              NON_ASCII_WHITESPACES = [
                0x1680, 0x180e, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005,
                0x2006, 0x2007, 0x2008, 0x2009, 0x200a, 0x202f, 0x205f, 0x3000,
                0xfeff,
              ];

              function isWhiteSpace(ch) {
                return (
                  ch === 0x20 ||
                  ch === 0x09 ||
                  ch === 0x0b ||
                  ch === 0x0c ||
                  ch === 0xa0 ||
                  (ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0)
                );
              } // 7.3 Line Terminators

              function isLineTerminator(ch) {
                return (
                  ch === 0x0a || ch === 0x0d || ch === 0x2028 || ch === 0x2029
                );
              } // 7.6 Identifier Names and Identifiers

              function fromCodePoint(cp) {
                if (cp <= 0xffff) {
                  return String.fromCharCode(cp);
                }

                var cu1 = String.fromCharCode(
                  Math.floor((cp - 0x10000) / 0x400) + 0xd800
                );
                var cu2 = String.fromCharCode(
                  ((cp - 0x10000) % 0x400) + 0xdc00
                );
                return cu1 + cu2;
              }

              IDENTIFIER_START = new Array(0x80);

              for (ch = 0; ch < 0x80; ++ch) {
                IDENTIFIER_START[ch] =
                  (ch >= 0x61 && ch <= 0x7a) || // a..z
                  (ch >= 0x41 && ch <= 0x5a) || // A..Z
                  ch === 0x24 ||
                  ch === 0x5f; // $ (dollar) and _ (underscore)
              }

              IDENTIFIER_PART = new Array(0x80);

              for (ch = 0; ch < 0x80; ++ch) {
                IDENTIFIER_PART[ch] =
                  (ch >= 0x61 && ch <= 0x7a) || // a..z
                  (ch >= 0x41 && ch <= 0x5a) || // A..Z
                  (ch >= 0x30 && ch <= 0x39) || // 0..9
                  ch === 0x24 ||
                  ch === 0x5f; // $ (dollar) and _ (underscore)
              }

              function isIdentifierStartES5(ch) {
                return ch < 0x80
                  ? IDENTIFIER_START[ch]
                  : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
              }

              function isIdentifierPartES5(ch) {
                return ch < 0x80
                  ? IDENTIFIER_PART[ch]
                  : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
              }

              function isIdentifierStartES6(ch) {
                return ch < 0x80
                  ? IDENTIFIER_START[ch]
                  : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
              }

              function isIdentifierPartES6(ch) {
                return ch < 0x80
                  ? IDENTIFIER_PART[ch]
                  : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
              }

              module.exports = {
                isDecimalDigit: isDecimalDigit,
                isHexDigit: isHexDigit,
                isOctalDigit: isOctalDigit,
                isWhiteSpace: isWhiteSpace,
                isLineTerminator: isLineTerminator,
                isIdentifierStartES5: isIdentifierStartES5,
                isIdentifierPartES5: isIdentifierPartES5,
                isIdentifierStartES6: isIdentifierStartES6,
                isIdentifierPartES6: isIdentifierPartES6,
              };
            })();
            /* vim: set sw=4 ts=4 et tw=80 : */
          });

          var keyword = createCommonjsModule(function (module) {
            /*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
  
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
            (function () {
              "use strict";

              var code$$1 = code;

              function isStrictModeReservedWordES6(id) {
                switch (id) {
                  case "implements":
                  case "interface":
                  case "package":
                  case "private":
                  case "protected":
                  case "public":
                  case "static":
                  case "let":
                    return true;

                  default:
                    return false;
                }
              }

              function isKeywordES5(id, strict) {
                // yield should not be treated as keyword under non-strict mode.
                if (!strict && id === "yield") {
                  return false;
                }

                return isKeywordES6(id, strict);
              }

              function isKeywordES6(id, strict) {
                if (strict && isStrictModeReservedWordES6(id)) {
                  return true;
                }

                switch (id.length) {
                  case 2:
                    return id === "if" || id === "in" || id === "do";

                  case 3:
                    return (
                      id === "var" ||
                      id === "for" ||
                      id === "new" ||
                      id === "try"
                    );

                  case 4:
                    return (
                      id === "this" ||
                      id === "else" ||
                      id === "case" ||
                      id === "void" ||
                      id === "with" ||
                      id === "enum"
                    );

                  case 5:
                    return (
                      id === "while" ||
                      id === "break" ||
                      id === "catch" ||
                      id === "throw" ||
                      id === "const" ||
                      id === "yield" ||
                      id === "class" ||
                      id === "super"
                    );

                  case 6:
                    return (
                      id === "return" ||
                      id === "typeof" ||
                      id === "delete" ||
                      id === "switch" ||
                      id === "export" ||
                      id === "import"
                    );

                  case 7:
                    return (
                      id === "default" || id === "finally" || id === "extends"
                    );

                  case 8:
                    return (
                      id === "function" ||
                      id === "continue" ||
                      id === "debugger"
                    );

                  case 10:
                    return id === "instanceof";

                  default:
                    return false;
                }
              }

              function isReservedWordES5(id, strict) {
                return (
                  id === "null" ||
                  id === "true" ||
                  id === "false" ||
                  isKeywordES5(id, strict)
                );
              }

              function isReservedWordES6(id, strict) {
                return (
                  id === "null" ||
                  id === "true" ||
                  id === "false" ||
                  isKeywordES6(id, strict)
                );
              }

              function isRestrictedWord(id) {
                return id === "eval" || id === "arguments";
              }

              function isIdentifierNameES5(id) {
                var i, iz, ch;

                if (id.length === 0) {
                  return false;
                }

                ch = id.charCodeAt(0);

                if (!code$$1.isIdentifierStartES5(ch)) {
                  return false;
                }

                for (i = 1, iz = id.length; i < iz; ++i) {
                  ch = id.charCodeAt(i);

                  if (!code$$1.isIdentifierPartES5(ch)) {
                    return false;
                  }
                }

                return true;
              }

              function decodeUtf16(lead, trail) {
                return (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000;
              }

              function isIdentifierNameES6(id) {
                var i, iz, ch, lowCh, check;

                if (id.length === 0) {
                  return false;
                }

                check = code$$1.isIdentifierStartES6;

                for (i = 0, iz = id.length; i < iz; ++i) {
                  ch = id.charCodeAt(i);

                  if (0xd800 <= ch && ch <= 0xdbff) {
                    ++i;

                    if (i >= iz) {
                      return false;
                    }

                    lowCh = id.charCodeAt(i);

                    if (!(0xdc00 <= lowCh && lowCh <= 0xdfff)) {
                      return false;
                    }

                    ch = decodeUtf16(ch, lowCh);
                  }

                  if (!check(ch)) {
                    return false;
                  }

                  check = code$$1.isIdentifierPartES6;
                }

                return true;
              }

              function isIdentifierES5(id, strict) {
                return (
                  isIdentifierNameES5(id) && !isReservedWordES5(id, strict)
                );
              }

              function isIdentifierES6(id, strict) {
                return (
                  isIdentifierNameES6(id) && !isReservedWordES6(id, strict)
                );
              }

              module.exports = {
                isKeywordES5: isKeywordES5,
                isKeywordES6: isKeywordES6,
                isReservedWordES5: isReservedWordES5,
                isReservedWordES6: isReservedWordES6,
                isRestrictedWord: isRestrictedWord,
                isIdentifierNameES5: isIdentifierNameES5,
                isIdentifierNameES6: isIdentifierNameES6,
                isIdentifierES5: isIdentifierES5,
                isIdentifierES6: isIdentifierES6,
              };
            })();
            /* vim: set sw=4 ts=4 et tw=80 : */
          });

          var utils$2 = createCommonjsModule(function (module, exports) {
            /*
    Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
  
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
            (function () {
              "use strict";

              exports.ast = ast;
              exports.code = code;
              exports.keyword = keyword;
            })();
            /* vim: set sw=4 ts=4 et tw=80 : */
          });

          var hasFlag$6 = createCommonjsModule(function (module) {
            "use strict";

            module.exports = function (flag, argv$$1) {
              argv$$1 = argv$$1 || process.argv;
              var prefix = flag.startsWith("-")
                ? ""
                : flag.length === 1
                ? "-"
                : "--";
              var pos = argv$$1.indexOf(prefix + flag);
              var terminatorPos = argv$$1.indexOf("--");
              return (
                pos !== -1 &&
                (terminatorPos === -1 ? true : pos < terminatorPos)
              );
            };
          });

          var env$2 = process.env;
          var forceColor$1;

          if (
            hasFlag$6("no-color") ||
            hasFlag$6("no-colors") ||
            hasFlag$6("color=false")
          ) {
            forceColor$1 = false;
          } else if (
            hasFlag$6("color") ||
            hasFlag$6("colors") ||
            hasFlag$6("color=true") ||
            hasFlag$6("color=always")
          ) {
            forceColor$1 = true;
          }

          if ("FORCE_COLOR" in env$2) {
            forceColor$1 =
              env$2.FORCE_COLOR.length === 0 ||
              parseInt(env$2.FORCE_COLOR, 10) !== 0;
          }

          function translateLevel$1(level) {
            if (level === 0) {
              return false;
            }

            return {
              level: level,
              hasBasic: true,
              has256: level >= 2,
              has16m: level >= 3,
            };
          }

          function supportsColor$4(stream) {
            if (forceColor$1 === false) {
              return 0;
            }

            if (
              hasFlag$6("color=16m") ||
              hasFlag$6("color=full") ||
              hasFlag$6("color=truecolor")
            ) {
              return 3;
            }

            if (hasFlag$6("color=256")) {
              return 2;
            }

            if (stream && !stream.isTTY && forceColor$1 !== true) {
              return 0;
            }

            var min = forceColor$1 ? 1 : 0;

            if (process.platform === "win32") {
              // Node.js 7.5.0 is the first version of Node.js to include a patch to
              // libuv that enables 256 color output on Windows. Anything earlier and it
              // won't work. However, here we target Node.js 8 at minimum as it is an LTS
              // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
              // release that supports 256 colors. Windows 10 build 14931 is the first release
              // that supports 16m/TrueColor.
              var osRelease = require$$1$1.release().split(".");

              if (
                Number(process.versions.node.split(".")[0]) >= 8 &&
                Number(osRelease[0]) >= 10 &&
                Number(osRelease[2]) >= 10586
              ) {
                return Number(osRelease[2]) >= 14931 ? 3 : 2;
              }

              return 1;
            }

            if ("CI" in env$2) {
              if (
                ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function (
                  sign
                ) {
                  return sign in env$2;
                }) ||
                env$2.CI_NAME === "codeship"
              ) {
                return 1;
              }

              return min;
            }

            if ("TEAMCITY_VERSION" in env$2) {
              return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(
                env$2.TEAMCITY_VERSION
              )
                ? 1
                : 0;
            }

            if (env$2.COLORTERM === "truecolor") {
              return 3;
            }

            if ("TERM_PROGRAM" in env$2) {
              var version = parseInt(
                (env$2.TERM_PROGRAM_VERSION || "").split(".")[0],
                10
              );

              switch (env$2.TERM_PROGRAM) {
                case "iTerm.app":
                  return version >= 3 ? 3 : 2;

                case "Apple_Terminal":
                  return 2;
                // No default
              }
            }

            if (/-256(color)?$/i.test(env$2.TERM)) {
              return 2;
            }

            if (
              /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(
                env$2.TERM
              )
            ) {
              return 1;
            }

            if ("COLORTERM" in env$2) {
              return 1;
            }

            if (env$2.TERM === "dumb") {
              return min;
            }

            return min;
          }

          function getSupportLevel$1(stream) {
            var level = supportsColor$4(stream);
            return translateLevel$1(level);
          }

          var supportsColor_1$3 = {
            supportsColor: getSupportLevel$1,
            stdout: getSupportLevel$1(process.stdout),
            stderr: getSupportLevel$1(process.stderr),
          };

          var templates$4 = createCommonjsModule(function (module) {
            "use strict";

            var TEMPLATE_REGEX =
              /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
            var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
            var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
            var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
            var ESCAPES = new Map([
              ["n", "\n"],
              ["r", "\r"],
              ["t", "\t"],
              ["b", "\b"],
              ["f", "\f"],
              ["v", "\v"],
              ["0", "\0"],
              ["\\", "\\"],
              ["e", "\x1B"],
              ["a", "\x07"],
            ]);

            function unescape(c) {
              if (
                (c[0] === "u" && c.length === 5) ||
                (c[0] === "x" && c.length === 3)
              ) {
                return String.fromCharCode(parseInt(c.slice(1), 16));
              }

              return ESCAPES.get(c) || c;
            }

            function parseArguments(name, args) {
              var results = [];
              var chunks = args.trim().split(/\s*,\s*/g);
              var matches;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = chunks[Symbol.iterator](), _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var chunk = _step.value;

                  if (!isNaN(chunk)) {
                    results.push(Number(chunk));
                  } else if ((matches = chunk.match(STRING_REGEX))) {
                    results.push(
                      matches[2].replace(
                        ESCAPE_REGEX,
                        function (m, escape, chr) {
                          return escape ? unescape(escape) : chr;
                        }
                      )
                    );
                  } else {
                    throw new Error(
                      "Invalid Chalk template style argument: "
                        .concat(chunk, " (in style '")
                        .concat(name, "')")
                    );
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return results;
            }

            function parseStyle(style) {
              STYLE_REGEX.lastIndex = 0;
              var results = [];
              var matches;

              while ((matches = STYLE_REGEX.exec(style)) !== null) {
                var name = matches[1];

                if (matches[2]) {
                  var args = parseArguments(name, matches[2]);
                  results.push([name].concat(args));
                } else {
                  results.push([name]);
                }
              }

              return results;
            }

            function buildStyle(chalk, styles) {
              var enabled = {};
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (
                  var _iterator2 = styles[Symbol.iterator](), _step2;
                  !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                    .done);
                  _iteratorNormalCompletion2 = true
                ) {
                  var layer = _step2.value;
                  var _iteratorNormalCompletion3 = true;
                  var _didIteratorError3 = false;
                  var _iteratorError3 = undefined;

                  try {
                    for (
                      var _iterator3 = layer.styles[Symbol.iterator](), _step3;
                      !(_iteratorNormalCompletion3 = (_step3 =
                        _iterator3.next()).done);
                      _iteratorNormalCompletion3 = true
                    ) {
                      var style = _step3.value;
                      enabled[style[0]] = layer.inverse ? null : style.slice(1);
                    }
                  } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                  } finally {
                    try {
                      if (
                        !_iteratorNormalCompletion3 &&
                        _iterator3.return != null
                      ) {
                        _iterator3.return();
                      }
                    } finally {
                      if (_didIteratorError3) {
                        throw _iteratorError3;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (
                    !_iteratorNormalCompletion2 &&
                    _iterator2.return != null
                  ) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              var current = chalk;

              var _arr = Object.keys(enabled);

              for (var _i = 0; _i < _arr.length; _i++) {
                var styleName = _arr[_i];

                if (Array.isArray(enabled[styleName])) {
                  if (!(styleName in current)) {
                    throw new Error("Unknown Chalk style: ".concat(styleName));
                  }

                  if (enabled[styleName].length > 0) {
                    current = current[styleName].apply(
                      current,
                      enabled[styleName]
                    );
                  } else {
                    current = current[styleName];
                  }
                }
              }

              return current;
            }

            module.exports = function (chalk, tmp) {
              var styles = [];
              var chunks = [];
              var chunk = []; // eslint-disable-next-line max-params

              tmp.replace(
                TEMPLATE_REGEX,
                function (m, escapeChar, inverse, style, close, chr) {
                  if (escapeChar) {
                    chunk.push(unescape(escapeChar));
                  } else if (style) {
                    var str = chunk.join("");
                    chunk = [];
                    chunks.push(
                      styles.length === 0 ? str : buildStyle(chalk, styles)(str)
                    );
                    styles.push({
                      inverse: inverse,
                      styles: parseStyle(style),
                    });
                  } else if (close) {
                    if (styles.length === 0) {
                      throw new Error(
                        "Found extraneous } in Chalk template literal"
                      );
                    }

                    chunks.push(buildStyle(chalk, styles)(chunk.join("")));
                    chunk = [];
                    styles.pop();
                  } else {
                    chunk.push(chr);
                  }
                }
              );
              chunks.push(chunk.join(""));

              if (styles.length > 0) {
                var errMsg = "Chalk template literal is missing "
                  .concat(styles.length, " closing bracket")
                  .concat(styles.length === 1 ? "" : "s", " (`}`)");
                throw new Error(errMsg);
              }

              return chunks.join("");
            };
          });

          var chalk$5 = createCommonjsModule(function (module) {
            "use strict";

            var stdoutColor = supportsColor_1$3.stdout;
            var isSimpleWindowsTerm =
              process.platform === "win32" &&
              !(process.env.TERM || "").toLowerCase().startsWith("xterm"); // `supportsColor.level` → `ansiStyles.color[name]` mapping

            var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"]; // `color-convert` models to exclude from the Chalk API due to conflicts and such

            var skipModels = new Set(["gray"]);
            var styles = Object.create(null);

            function applyOptions(obj, options) {
              options = options || {}; // Detect level if not set manually

              var scLevel = stdoutColor ? stdoutColor.level : 0;
              obj.level = options.level === undefined ? scLevel : options.level;
              obj.enabled =
                "enabled" in options ? options.enabled : obj.level > 0;
            }

            function Chalk(options) {
              // We check for this.template here since calling `chalk.constructor()`
              // by itself will have a `this` of a previously constructed chalk object
              if (!this || !(this instanceof Chalk) || this.template) {
                var _chalk = {};
                applyOptions(_chalk, options);

                _chalk.template = function () {
                  var args = [].slice.call(arguments);
                  return chalkTag.apply(null, [_chalk.template].concat(args));
                };

                Object.setPrototypeOf(_chalk, Chalk.prototype);
                Object.setPrototypeOf(_chalk.template, _chalk);
                _chalk.template.constructor = Chalk;
                return _chalk.template;
              }

              applyOptions(this, options);
            } // Use bright blue on Windows as the normal blue color is illegible

            if (isSimpleWindowsTerm) {
              ansiStyles.blue.open = "\x1B[94m";
            }

            var _arr = Object.keys(ansiStyles);

            var _loop = function _loop() {
              var key = _arr[_i];
              ansiStyles[key].closeRe = new RegExp(
                escapeStringRegexp(ansiStyles[key].close),
                "g"
              );
              styles[key] = {
                get: function get() {
                  var codes = ansiStyles[key];
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    this._empty,
                    key
                  );
                },
              };
            };

            for (var _i = 0; _i < _arr.length; _i++) {
              _loop();
            }

            styles.visible = {
              get: function get() {
                return build.call(this, this._styles || [], true, "visible");
              },
            };
            ansiStyles.color.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.color.close),
              "g"
            );

            var _arr2 = Object.keys(ansiStyles.color.ansi);

            var _loop2 = function _loop2() {
              var model = _arr2[_i2];

              if (skipModels.has(model)) {
                return "continue";
              }

              styles[model] = {
                get: function get() {
                  var level = this.level;
                  return function () {
                    var open = ansiStyles.color[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    var codes = {
                      open: open,
                      close: ansiStyles.color.close,
                      closeRe: ansiStyles.color.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            };

            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var _ret = _loop2();

              if (_ret === "continue") continue;
            }

            ansiStyles.bgColor.closeRe = new RegExp(
              escapeStringRegexp(ansiStyles.bgColor.close),
              "g"
            );

            var _arr3 = Object.keys(ansiStyles.bgColor.ansi);

            var _loop3 = function _loop3() {
              var model = _arr3[_i3];

              if (skipModels.has(model)) {
                return "continue";
              }

              var bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
              styles[bgModel] = {
                get: function get() {
                  var level = this.level;
                  return function () {
                    var open = ansiStyles.bgColor[levelMapping[level]][
                      model
                    ].apply(null, arguments);
                    var codes = {
                      open: open,
                      close: ansiStyles.bgColor.close,
                      closeRe: ansiStyles.bgColor.closeRe,
                    };
                    return build.call(
                      this,
                      this._styles ? this._styles.concat(codes) : [codes],
                      this._empty,
                      model
                    );
                  };
                },
              };
            };

            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
              var _ret2 = _loop3();

              if (_ret2 === "continue") continue;
            }

            var proto = Object.defineProperties(function () {}, styles);

            function build(_styles, _empty, key) {
              var builder = function builder() {
                return applyStyle.apply(builder, arguments);
              };

              builder._styles = _styles;
              builder._empty = _empty;
              var self = this;
              Object.defineProperty(builder, "level", {
                enumerable: true,
                get: function get() {
                  return self.level;
                },
                set: function set(level) {
                  self.level = level;
                },
              });
              Object.defineProperty(builder, "enabled", {
                enumerable: true,
                get: function get() {
                  return self.enabled;
                },
                set: function set(enabled) {
                  self.enabled = enabled;
                },
              }); // See below for fix regarding invisible grey/dim combination on Windows

              builder.hasGrey =
                this.hasGrey || key === "gray" || key === "grey"; // `__proto__` is used because we must return a function, but there is
              // no way to create a function with a different prototype

              builder.__proto__ = proto; // eslint-disable-line no-proto

              return builder;
            }

            function applyStyle() {
              // Support varags, but simply cast to string in case there's only one arg
              var args = arguments;
              var argsLen = args.length;
              var str = String(arguments[0]);

              if (argsLen === 0) {
                return "";
              }

              if (argsLen > 1) {
                // Don't slice `arguments`, it prevents V8 optimizations
                for (var a = 1; a < argsLen; a++) {
                  str += " " + args[a];
                }
              }

              if (!this.enabled || this.level <= 0 || !str) {
                return this._empty ? "" : str;
              } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
              // see https://github.com/chalk/chalk/issues/58
              // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.

              var originalDim = ansiStyles.dim.open;

              if (isSimpleWindowsTerm && this.hasGrey) {
                ansiStyles.dim.open = "";
              }

              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = this._styles
                      .slice()
                      .reverse()
                      [Symbol.iterator](),
                    _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var code = _step.value;
                  // Replace any instances already present with a re-opening code
                  // otherwise only the part of the string until said closing code
                  // will be colored, and the rest will simply be 'plain'.
                  str =
                    code.open +
                    str.replace(code.closeRe, code.open) +
                    code.close; // Close the styling before a linebreak and reopen
                  // after next line to fix a bleed issue on macOS
                  // https://github.com/chalk/chalk/pull/92

                  str = str.replace(
                    /\r?\n/g,
                    "".concat(code.close, "$&").concat(code.open)
                  );
                } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              ansiStyles.dim.open = originalDim;
              return str;
            }

            function chalkTag(chalk, strings) {
              if (!Array.isArray(strings)) {
                // If chalk() was called by itself or with a string,
                // return the string itself as a string.
                return [].slice.call(arguments, 1).join(" ");
              }

              var args = [].slice.call(arguments, 2);
              var parts = [strings.raw[0]];

              for (var i = 1; i < strings.length; i++) {
                parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
                parts.push(String(strings.raw[i]));
              }

              return templates$4(chalk, parts.join(""));
            }

            Object.defineProperties(Chalk.prototype, styles);
            module.exports = Chalk(); // eslint-disable-line new-cap

            module.exports.supportsColor = stdoutColor;
            module.exports.default = module.exports; // For TypeScript
          });

          var lib$3 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.shouldHighlight = shouldHighlight;
            exports.getChalk = getChalk;
            exports.default = highlight;

            function _jsTokens() {
              var data = _interopRequireWildcard$$1(jsTokens);

              _jsTokens = function _jsTokens() {
                return data;
              };

              return data;
            }

            function _esutils() {
              var data = _interopRequireDefault$$1(utils$2);

              _esutils = function _esutils() {
                return data;
              };

              return data;
            }

            function _chalk() {
              var data = _interopRequireDefault$$1(chalk$5);

              _chalk = function _chalk() {
                return data;
              };

              return data;
            }

            function _interopRequireDefault$$1(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }

            function _interopRequireWildcard$$1(obj) {
              if (obj && obj.__esModule) {
                return obj;
              } else {
                var newObj = {};

                if (obj != null) {
                  for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                      var desc =
                        Object.defineProperty && Object.getOwnPropertyDescriptor
                          ? Object.getOwnPropertyDescriptor(obj, key)
                          : {};

                      if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                      } else {
                        newObj[key] = obj[key];
                      }
                    }
                  }
                }

                newObj.default = obj;
                return newObj;
              }
            }

            function getDefs(chalk) {
              return {
                keyword: chalk.cyan,
                capitalized: chalk.yellow,
                jsx_tag: chalk.yellow,
                punctuator: chalk.yellow,
                number: chalk.magenta,
                string: chalk.green,
                regex: chalk.magenta,
                comment: chalk.grey,
                invalid: chalk.white.bgRed.bold,
              };
            }

            var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
            var JSX_TAG = /^[a-z][\w-]*$/i;
            var BRACKET = /^[()[\]{}]$/;

            function getTokenType(match) {
              var _match$slice = match.slice(-2),
                _match$slice2 = _slicedToArray(_match$slice, 2),
                offset = _match$slice2[0],
                text = _match$slice2[1];

              var token = (0, _jsTokens().matchToToken)(match);

              if (token.type === "name") {
                if (_esutils().default.keyword.isReservedWordES6(token.value)) {
                  return "keyword";
                }

                if (
                  JSX_TAG.test(token.value) &&
                  (text[offset - 1] === "<" ||
                    text.substr(offset - 2, 2) == "</")
                ) {
                  return "jsx_tag";
                }

                if (token.value[0] !== token.value[0].toLowerCase()) {
                  return "capitalized";
                }
              }

              if (token.type === "punctuator" && BRACKET.test(token.value)) {
                return "bracket";
              }

              if (
                token.type === "invalid" &&
                (token.value === "@" || token.value === "#")
              ) {
                return "punctuator";
              }

              return token.type;
            }

            function highlightTokens(defs, text) {
              return text.replace(_jsTokens().default, function () {
                for (
                  var _len = arguments.length, args = new Array(_len), _key = 0;
                  _key < _len;
                  _key++
                ) {
                  args[_key] = arguments[_key];
                }

                var type = getTokenType(args);
                var colorize = defs[type];

                if (colorize) {
                  return args[0]
                    .split(NEWLINE)
                    .map(function (str) {
                      return colorize(str);
                    })
                    .join("\n");
                } else {
                  return args[0];
                }
              });
            }

            function shouldHighlight(options) {
              return _chalk().default.supportsColor || options.forceColor;
            }

            function getChalk(options) {
              var chalk = _chalk().default;

              if (options.forceColor) {
                chalk = new (_chalk().default.constructor)({
                  enabled: true,
                  level: 1,
                });
              }

              return chalk;
            }

            function highlight(code) {
              var options =
                arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : {};

              if (shouldHighlight(options)) {
                var chalk = getChalk(options);
                var defs = getDefs(chalk);
                return highlightTokens(defs, code);
              } else {
                return code;
              }
            }
          });
          unwrapExports(lib$3);

          var lib$2 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.codeFrameColumns = codeFrameColumns;
            exports.default = _default;

            function _highlight() {
              var data = _interopRequireWildcard(lib$3);

              _highlight = function _highlight() {
                return data;
              };

              return data;
            }

            function _interopRequireWildcard(obj) {
              if (obj && obj.__esModule) {
                return obj;
              } else {
                var newObj = {};

                if (obj != null) {
                  for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                      var desc =
                        Object.defineProperty && Object.getOwnPropertyDescriptor
                          ? Object.getOwnPropertyDescriptor(obj, key)
                          : {};

                      if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                      } else {
                        newObj[key] = obj[key];
                      }
                    }
                  }
                }

                newObj.default = obj;
                return newObj;
              }
            }

            var deprecationWarningShown = false;

            function getDefs(chalk) {
              return {
                gutter: chalk.grey,
                marker: chalk.red.bold,
                message: chalk.red.bold,
              };
            }

            var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

            function getMarkerLines(loc, source, opts) {
              var startLoc = Object.assign(
                {
                  column: 0,
                  line: -1,
                },
                loc.start
              );
              var endLoc = Object.assign({}, startLoc, loc.end);

              var _ref = opts || {},
                _ref$linesAbove = _ref.linesAbove,
                linesAbove = _ref$linesAbove === void 0 ? 2 : _ref$linesAbove,
                _ref$linesBelow = _ref.linesBelow,
                linesBelow = _ref$linesBelow === void 0 ? 3 : _ref$linesBelow;

              var startLine = startLoc.line;
              var startColumn = startLoc.column;
              var endLine = endLoc.line;
              var endColumn = endLoc.column;
              var start = Math.max(startLine - (linesAbove + 1), 0);
              var end = Math.min(source.length, endLine + linesBelow);

              if (startLine === -1) {
                start = 0;
              }

              if (endLine === -1) {
                end = source.length;
              }

              var lineDiff = endLine - startLine;
              var markerLines = {};

              if (lineDiff) {
                for (var i = 0; i <= lineDiff; i++) {
                  var lineNumber = i + startLine;

                  if (!startColumn) {
                    markerLines[lineNumber] = true;
                  } else if (i === 0) {
                    var sourceLength = source[lineNumber - 1].length;
                    markerLines[lineNumber] = [
                      startColumn,
                      sourceLength - startColumn,
                    ];
                  } else if (i === lineDiff) {
                    markerLines[lineNumber] = [0, endColumn];
                  } else {
                    var _sourceLength = source[lineNumber - i].length;
                    markerLines[lineNumber] = [0, _sourceLength];
                  }
                }
              } else {
                if (startColumn === endColumn) {
                  if (startColumn) {
                    markerLines[startLine] = [startColumn, 0];
                  } else {
                    markerLines[startLine] = true;
                  }
                } else {
                  markerLines[startLine] = [
                    startColumn,
                    endColumn - startColumn,
                  ];
                }
              }

              return {
                start: start,
                end: end,
                markerLines: markerLines,
              };
            }

            function codeFrameColumns(rawLines, loc) {
              var opts =
                arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : {};
              var highlighted =
                (opts.highlightCode || opts.forceColor) &&
                (0, _highlight().shouldHighlight)(opts);
              var chalk = (0, _highlight().getChalk)(opts);
              var defs = getDefs(chalk);

              var maybeHighlight = function maybeHighlight(chalkFn, string) {
                return highlighted ? chalkFn(string) : string;
              };

              if (highlighted)
                rawLines = (0, _highlight().default)(rawLines, opts);
              var lines = rawLines.split(NEWLINE);

              var _getMarkerLines = getMarkerLines(loc, lines, opts),
                start = _getMarkerLines.start,
                end = _getMarkerLines.end,
                markerLines = _getMarkerLines.markerLines;

              var hasColumns =
                loc.start && typeof loc.start.column === "number";
              var numberMaxWidth = String(end).length;
              var frame = lines
                .slice(start, end)
                .map(function (line, index) {
                  var number = start + 1 + index;
                  var paddedNumber = " ".concat(number).slice(-numberMaxWidth);
                  var gutter = " ".concat(paddedNumber, " | ");
                  var hasMarker = markerLines[number];
                  var lastMarkerLine = !markerLines[number + 1];

                  if (hasMarker) {
                    var markerLine = "";

                    if (Array.isArray(hasMarker)) {
                      var markerSpacing = line
                        .slice(0, Math.max(hasMarker[0] - 1, 0))
                        .replace(/[^\t]/g, " ");
                      var numberOfMarkers = hasMarker[1] || 1;
                      markerLine = [
                        "\n ",
                        maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")),
                        markerSpacing,
                        maybeHighlight(defs.marker, "^").repeat(
                          numberOfMarkers
                        ),
                      ].join("");

                      if (lastMarkerLine && opts.message) {
                        markerLine +=
                          " " + maybeHighlight(defs.message, opts.message);
                      }
                    }

                    return [
                      maybeHighlight(defs.marker, ">"),
                      maybeHighlight(defs.gutter, gutter),
                      line,
                      markerLine,
                    ].join("");
                  } else {
                    return " "
                      .concat(maybeHighlight(defs.gutter, gutter))
                      .concat(line);
                  }
                })
                .join("\n");

              if (opts.message && !hasColumns) {
                frame = ""
                  .concat(" ".repeat(numberMaxWidth + 1))
                  .concat(opts.message, "\n")
                  .concat(frame);
              }

              if (highlighted) {
                return chalk.reset(frame);
              } else {
                return frame;
              }
            }

            function _default(rawLines, lineNumber, colNumber) {
              var opts =
                arguments.length > 3 && arguments[3] !== undefined
                  ? arguments[3]
                  : {};

              if (!deprecationWarningShown) {
                deprecationWarningShown = true;
                var message =
                  "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";

                if (process.emitWarning) {
                  process.emitWarning(message, "DeprecationWarning");
                } else {
                  var deprecationError = new Error(message);
                  deprecationError.name = "DeprecationWarning";
                  console.warn(new Error(message));
                }
              }

              colNumber = Math.max(colNumber, 0);
              var location = {
                start: {
                  column: colNumber,
                  line: lineNumber,
                },
              };
              return codeFrameColumns(rawLines, location, opts);
            }
          });
          unwrapExports(lib$2);

          var ConfigError$1 = errors.ConfigError;
          var locStart = loc.locStart;
          var locEnd = loc.locEnd; // Use defineProperties()/getOwnPropertyDescriptor() to prevent
          // triggering the parsers getters.

          var ownNames = Object.getOwnPropertyNames;
          var ownDescriptor = Object.getOwnPropertyDescriptor;

          function getParsers(options) {
            var parsers = {};
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = options.plugins[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var plugin = _step.value;

                if (!plugin.parsers) {
                  continue;
                }

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (
                    var _iterator2 = ownNames(plugin.parsers)[
                        Symbol.iterator
                      ](),
                      _step2;
                    !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                      .done);
                    _iteratorNormalCompletion2 = true
                  ) {
                    var name = _step2.value;
                    Object.defineProperty(
                      parsers,
                      name,
                      ownDescriptor(plugin.parsers, name)
                    );
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (
                      !_iteratorNormalCompletion2 &&
                      _iterator2.return != null
                    ) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return parsers;
          }

          function resolveParser$1(opts, parsers) {
            parsers = parsers || getParsers(opts);

            if (typeof opts.parser === "function") {
              // Custom parser API always works with JavaScript.
              return {
                parse: opts.parser,
                astFormat: "estree",
                locStart: locStart,
                locEnd: locEnd,
              };
            }

            if (typeof opts.parser === "string") {
              if (parsers.hasOwnProperty(opts.parser)) {
                return parsers[opts.parser];
              }
              /* istanbul ignore next */

              {
                throw new ConfigError$1(
                  "Couldn't resolve parser \"".concat(
                    opts.parser,
                    '". Parsers must be explicitly added to the standalone bundle.'
                  )
                );
              }
            }
          }

          function parse$2(text, opts) {
            var parsers = getParsers(opts); // Create a new object {parserName: parseFn}. Uses defineProperty() to only call
            // the parsers getters when actually calling the parser `parse` function.

            var parsersForCustomParserApi = Object.keys(parsers).reduce(
              function (object, parserName) {
                return Object.defineProperty(object, parserName, {
                  enumerable: true,
                  get: function get() {
                    return parsers[parserName].parse;
                  },
                });
              },
              {}
            );
            var parser = resolveParser$1(opts, parsers);

            try {
              if (parser.preprocess) {
                text = parser.preprocess(text, opts);
              }

              return {
                text: text,
                ast: parser.parse(text, parsersForCustomParserApi, opts),
              };
            } catch (error) {
              var loc$$1 = error.loc;

              if (loc$$1) {
                var codeFrame = lib$2;
                error.codeFrame = codeFrame.codeFrameColumns(text, loc$$1, {
                  highlightCode: true,
                });
                error.message += "\n" + error.codeFrame;
                throw error;
              }
              /* istanbul ignore next */

              throw error.stack;
            }
          }

          var parser = {
            parse: parse$2,
            resolveParser: resolveParser$1,
          };

          var UndefinedParserError = errors.UndefinedParserError;
          var getSupportInfo$1 = support.getSupportInfo;
          var resolveParser = parser.resolveParser;
          var hiddenDefaults = {
            astFormat: "estree",
            printer: {},
            originalText: undefined,
            locStart: null,
            locEnd: null,
          }; // Copy options and fill in default values.

          function normalize(options, opts) {
            opts = opts || {};
            var rawOptions = Object.assign({}, options);
            var supportOptions = getSupportInfo$1(null, {
              plugins: options.plugins,
              showUnreleased: true,
              showDeprecated: true,
            }).options;
            var defaults = supportOptions.reduce(function (
              reduced,
              optionInfo
            ) {
              return optionInfo.default !== undefined
                ? Object.assign(
                    reduced,
                    _defineProperty({}, optionInfo.name, optionInfo.default)
                  )
                : reduced;
            },
            Object.assign({}, hiddenDefaults));

            if (!rawOptions.parser) {
              if (!rawOptions.filepath) {
                var logger = opts.logger || console;
                logger.warn(
                  "No parser and no filepath given, using 'babel' the parser now " +
                    "but this will throw an error in the future. " +
                    "Please specify a parser or a filepath so one can be inferred."
                );
                rawOptions.parser = "babel";
              } else {
                rawOptions.parser = inferParser(
                  rawOptions.filepath,
                  rawOptions.plugins
                );

                if (!rawOptions.parser) {
                  throw new UndefinedParserError(
                    "No parser could be inferred for file: ".concat(
                      rawOptions.filepath
                    )
                  );
                }
              }
            }

            var parser$$1 = resolveParser(
              optionsNormalizer.normalizeApiOptions(
                rawOptions,
                [
                  supportOptions.find(function (x) {
                    return x.name === "parser";
                  }),
                ],
                {
                  passThrough: true,
                  logger: false,
                }
              )
            );
            rawOptions.astFormat = parser$$1.astFormat;
            rawOptions.locEnd = parser$$1.locEnd;
            rawOptions.locStart = parser$$1.locStart;
            var plugin = getPlugin(rawOptions);
            rawOptions.printer = plugin.printers[rawOptions.astFormat];
            var pluginDefaults = supportOptions
              .filter(function (optionInfo) {
                return (
                  optionInfo.pluginDefaults &&
                  optionInfo.pluginDefaults[plugin.name]
                );
              })
              .reduce(function (reduced, optionInfo) {
                return Object.assign(
                  reduced,
                  _defineProperty(
                    {},
                    optionInfo.name,
                    optionInfo.pluginDefaults[plugin.name]
                  )
                );
              }, {});
            var mixedDefaults = Object.assign({}, defaults, pluginDefaults);
            Object.keys(mixedDefaults).forEach(function (k) {
              if (rawOptions[k] == null) {
                rawOptions[k] = mixedDefaults[k];
              }
            });

            if (rawOptions.parser === "json") {
              rawOptions.trailingComma = "none";
            }

            return optionsNormalizer.normalizeApiOptions(
              rawOptions,
              supportOptions,
              Object.assign(
                {
                  passThrough: Object.keys(hiddenDefaults),
                },
                opts
              )
            );
          }

          function getPlugin(options) {
            var astFormat = options.astFormat;

            if (!astFormat) {
              throw new Error("getPlugin() requires astFormat to be set");
            }

            var printerPlugin = options.plugins.find(function (plugin) {
              return plugin.printers && plugin.printers[astFormat];
            });

            if (!printerPlugin) {
              throw new Error(
                "Couldn't find plugin for AST format \"".concat(astFormat, '"')
              );
            }

            return printerPlugin;
          }

          function getInterpreter(filepath) {
            if (typeof filepath !== "string") {
              return "";
            }

            var fd;

            try {
              fd = fs.openSync(filepath, "r");
            } catch (err) {
              return "";
            }

            try {
              var liner = new readlines(fd);
              var firstLine = liner.next().toString("utf8"); // #!/bin/env node, #!/usr/bin/env node

              var m1 = firstLine.match(/^#!\/(?:usr\/)?bin\/env\s+(\S+)/);

              if (m1) {
                return m1[1];
              } // #!/bin/node, #!/usr/bin/node, #!/usr/local/bin/node

              var m2 = firstLine.match(/^#!\/(?:usr\/(?:local\/)?)?bin\/(\S+)/);

              if (m2) {
                return m2[1];
              }

              return "";
            } catch (err) {
              // There are some weird cases where paths are missing, causing Jest
              // failures. It's unclear what these correspond to in the real world.
              return "";
            } finally {
              try {
                // There are some weird cases where paths are missing, causing Jest
                // failures. It's unclear what these correspond to in the real world.
                fs.closeSync(fd);
              } catch (err) {
                // nop
              }
            }
          }

          function inferParser(filepath, plugins) {
            var filepathParts = normalizePath(filepath).split("/");
            var filename =
              filepathParts[filepathParts.length - 1].toLowerCase(); // If the file has no extension, we can try to infer the language from the
            // interpreter in the shebang line, if any; but since this requires FS access,
            // do it last.

            var language = getSupportInfo$1(null, {
              plugins: plugins,
            }).languages.find(function (language) {
              return (
                language.since !== null &&
                ((language.extensions &&
                  language.extensions.some(function (extension) {
                    return filename.endsWith(extension);
                  })) ||
                  (language.filenames &&
                    language.filenames.find(function (name) {
                      return name.toLowerCase() === filename;
                    })) ||
                  (filename.indexOf(".") === -1 &&
                    language.interpreters &&
                    language.interpreters.indexOf(getInterpreter(filepath)) !==
                      -1))
              );
            });
            return language && language.parsers[0];
          }

          var options = {
            normalize: normalize,
            hiddenDefaults: hiddenDefaults,
            inferParser: inferParser,
          };

          function massageAST(ast, options, parent) {
            if (Array.isArray(ast)) {
              return ast
                .map(function (e) {
                  return massageAST(e, options, parent);
                })
                .filter(function (e) {
                  return e;
                });
            }

            if (!ast || _typeof(ast) !== "object") {
              return ast;
            }

            var newObj = {};

            var _arr = Object.keys(ast);

            for (var _i = 0; _i < _arr.length; _i++) {
              var key = _arr[_i];

              if (typeof ast[key] !== "function") {
                newObj[key] = massageAST(ast[key], options, ast);
              }
            }

            if (options.printer.massageAstNode) {
              var result = options.printer.massageAstNode(ast, newObj, parent);

              if (result === null) {
                return undefined;
              }

              if (result) {
                return result;
              }
            }

            return newObj;
          }

          var massageAst = massageAST;

          function assert() {}

          assert.ok = function () {};

          assert.strictEqual = function () {};

          var assert$2 = Object.freeze({
            default: assert,
          });

          function concat$1(parts) {
            return {
              type: "concat",
              parts: parts,
            };
          }

          function indent$1(contents) {
            return {
              type: "indent",
              contents: contents,
            };
          }

          function align(n, contents) {
            return {
              type: "align",
              contents: contents,
              n: n,
            };
          }

          function group(contents, opts) {
            opts = opts || {};

            return {
              type: "group",
              id: opts.id,
              contents: contents,
              break: !!opts.shouldBreak,
              expandedStates: opts.expandedStates,
            };
          }

          function dedentToRoot(contents) {
            return align(-Infinity, contents);
          }

          function markAsRoot(contents) {
            return align(
              {
                type: "root",
              },
              contents
            );
          }

          function dedent$1(contents) {
            return align(-1, contents);
          }

          function conditionalGroup(states, opts) {
            return group(
              states[0],
              Object.assign(opts || {}, {
                expandedStates: states,
              })
            );
          }

          function fill(parts) {
            return {
              type: "fill",
              parts: parts,
            };
          }

          function ifBreak(breakContents, flatContents, opts) {
            opts = opts || {};

            return {
              type: "if-break",
              breakContents: breakContents,
              flatContents: flatContents,
              groupId: opts.groupId,
            };
          }

          function lineSuffix$1(contents) {
            return {
              type: "line-suffix",
              contents: contents,
            };
          }

          var lineSuffixBoundary = {
            type: "line-suffix-boundary",
          };
          var breakParent$1 = {
            type: "break-parent",
          };
          var trim = {
            type: "trim",
          };
          var line$2 = {
            type: "line",
          };
          var softline = {
            type: "line",
            soft: true,
          };
          var hardline$1 = concat$1([
            {
              type: "line",
              hard: true,
            },
            breakParent$1,
          ]);
          var literalline = concat$1([
            {
              type: "line",
              hard: true,
              literal: true,
            },
            breakParent$1,
          ]);
          var cursor$1 = {
            type: "cursor",
            placeholder: Symbol("cursor"),
          };

          function join$1(sep, arr) {
            var res = [];

            for (var i = 0; i < arr.length; i++) {
              if (i !== 0) {
                res.push(sep);
              }

              res.push(arr[i]);
            }

            return concat$1(res);
          }

          function addAlignmentToDoc(doc, size, tabWidth) {
            var aligned = doc;

            if (size > 0) {
              // Use indent to add tabs for all the levels of tabs we need
              for (var i = 0; i < Math.floor(size / tabWidth); ++i) {
                aligned = indent$1(aligned);
              } // Use align for all the spaces that are needed

              aligned = align(size % tabWidth, aligned); // size is absolute from 0 and not relative to the current
              // indentation, so we use -Infinity to reset the indentation to 0

              aligned = align(-Infinity, aligned);
            }

            return aligned;
          }

          var docBuilders = {
            concat: concat$1,
            join: join$1,
            line: line$2,
            softline: softline,
            hardline: hardline$1,
            literalline: literalline,
            group: group,
            conditionalGroup: conditionalGroup,
            fill: fill,
            lineSuffix: lineSuffix$1,
            lineSuffixBoundary: lineSuffixBoundary,
            cursor: cursor$1,
            breakParent: breakParent$1,
            ifBreak: ifBreak,
            trim: trim,
            indent: indent$1,
            align: align,
            addAlignmentToDoc: addAlignmentToDoc,
            markAsRoot: markAsRoot,
            dedentToRoot: dedentToRoot,
            dedent: dedent$1,
          };

          var ansiRegex = createCommonjsModule(function (module) {
            "use strict";

            module.exports = function (options) {
              options = Object.assign(
                {
                  onlyFirst: false,
                },
                options
              );
              var pattern = [
                "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)",
                "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))",
              ].join("|");
              return new RegExp(pattern, options.onlyFirst ? undefined : "g");
            };
          });

          var stripAnsi = function stripAnsi(input) {
            return typeof input === "string"
              ? input.replace(ansiRegex(), "")
              : input;
          };

          var isFullwidthCodePoint = createCommonjsModule(function (module) {
            "use strict";
            /* eslint-disable yoda */

            module.exports = function (x) {
              if (Number.isNaN(x)) {
                return false;
              } // code points are derived from:
              // http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt

              if (
                x >= 0x1100 &&
                (x <= 0x115f || // Hangul Jamo
                  x === 0x2329 || // LEFT-POINTING ANGLE BRACKET
                  x === 0x232a || // RIGHT-POINTING ANGLE BRACKET
                  // CJK Radicals Supplement .. Enclosed CJK Letters and Months
                  (0x2e80 <= x && x <= 0x3247 && x !== 0x303f) || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
                  (0x3250 <= x && x <= 0x4dbf) || // CJK Unified Ideographs .. Yi Radicals
                  (0x4e00 <= x && x <= 0xa4c6) || // Hangul Jamo Extended-A
                  (0xa960 <= x && x <= 0xa97c) || // Hangul Syllables
                  (0xac00 <= x && x <= 0xd7a3) || // CJK Compatibility Ideographs
                  (0xf900 <= x && x <= 0xfaff) || // Vertical Forms
                  (0xfe10 <= x && x <= 0xfe19) || // CJK Compatibility Forms .. Small Form Variants
                  (0xfe30 <= x && x <= 0xfe6b) || // Halfwidth and Fullwidth Forms
                  (0xff01 <= x && x <= 0xff60) ||
                  (0xffe0 <= x && x <= 0xffe6) || // Kana Supplement
                  (0x1b000 <= x && x <= 0x1b001) || // Enclosed Ideographic Supplement
                  (0x1f200 <= x && x <= 0x1f251) || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
                  (0x20000 <= x && x <= 0x3fffd))
              ) {
                return true;
              }

              return false;
            };
          });

          var emojiRegex = function emojiRegex() {
            // https://mths.be/emoji
            return /\uD83C\uDFF4(?:\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74)\uDB40\uDC7F|\u200D\u2620\uFE0F)|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3]))|\uD83D\uDC69\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83D\uDC69\u200D[\u2695\u2696\u2708])\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC68(?:\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDD1-\uDDDD])/g;
          };

          var stringWidth = createCommonjsModule(function (module) {
            "use strict";

            var emojiRegex$$1 = emojiRegex();

            module.exports = function (input) {
              input = input.replace(emojiRegex$$1, "  ");

              if (typeof input !== "string" || input.length === 0) {
                return 0;
              }

              input = stripAnsi(input);
              var width = 0;

              for (var i = 0; i < input.length; i++) {
                var code = input.codePointAt(i); // Ignore control characters

                if (code <= 0x1f || (code >= 0x7f && code <= 0x9f)) {
                  continue;
                } // Ignore combining characters

                if (code >= 0x300 && code <= 0x36f) {
                  continue;
                } // Surrogates

                if (code > 0xffff) {
                  i++;
                }

                width += isFullwidthCodePoint(code) ? 2 : 1;
              }

              return width;
            };
          });

          var notAsciiRegex = /[^\x20-\x7F]/;

          function isExportDeclaration(node) {
            if (node) {
              switch (node.type) {
                case "ExportDefaultDeclaration":
                case "ExportDefaultSpecifier":
                case "DeclareExportDeclaration":
                case "ExportNamedDeclaration":
                case "ExportAllDeclaration":
                  return true;
              }
            }

            return false;
          }

          function getParentExportDeclaration(path) {
            var parentNode = path.getParentNode();

            if (
              path.getName() === "declaration" &&
              isExportDeclaration(parentNode)
            ) {
              return parentNode;
            }

            return null;
          }

          function getPenultimate(arr) {
            if (arr.length > 1) {
              return arr[arr.length - 2];
            }

            return null;
          }

          function skip(chars) {
            return function (text, index, opts) {
              var backwards = opts && opts.backwards; // Allow `skip` functions to be threaded together without having
              // to check for failures (did someone say monads?).

              if (index === false) {
                return false;
              }

              var length = text.length;
              var cursor = index;

              while (cursor >= 0 && cursor < length) {
                var c = text.charAt(cursor);

                if (chars instanceof RegExp) {
                  if (!chars.test(c)) {
                    return cursor;
                  }
                } else if (chars.indexOf(c) === -1) {
                  return cursor;
                }

                backwards ? cursor-- : cursor++;
              }

              if (cursor === -1 || cursor === length) {
                // If we reached the beginning or end of the file, return the
                // out-of-bounds cursor. It's up to the caller to handle this
                // correctly. We don't want to indicate `false` though if it
                // actually skipped valid characters.
                return cursor;
              }

              return false;
            };
          }

          var skipWhitespace = skip(/\s/);
          var skipSpaces = skip(" \t");
          var skipToLineEnd = skip(",; \t");
          var skipEverythingButNewLine = skip(/[^\r\n]/);

          function skipInlineComment(text, index) {
            if (index === false) {
              return false;
            }

            if (text.charAt(index) === "/" && text.charAt(index + 1) === "*") {
              for (var i = index + 2; i < text.length; ++i) {
                if (text.charAt(i) === "*" && text.charAt(i + 1) === "/") {
                  return i + 2;
                }
              }
            }

            return index;
          }

          function skipTrailingComment(text, index) {
            if (index === false) {
              return false;
            }

            if (text.charAt(index) === "/" && text.charAt(index + 1) === "/") {
              return skipEverythingButNewLine(text, index);
            }

            return index;
          } // This one doesn't use the above helper function because it wants to
          // test \r\n in order and `skip` doesn't support ordering and we only
          // want to skip one newline. It's simple to implement.

          function skipNewline$1(text, index, opts) {
            var backwards = opts && opts.backwards;

            if (index === false) {
              return false;
            }

            var atIndex = text.charAt(index);

            if (backwards) {
              if (text.charAt(index - 1) === "\r" && atIndex === "\n") {
                return index - 2;
              }

              if (
                atIndex === "\n" ||
                atIndex === "\r" ||
                atIndex === "\u2028" ||
                atIndex === "\u2029"
              ) {
                return index - 1;
              }
            } else {
              if (atIndex === "\r" && text.charAt(index + 1) === "\n") {
                return index + 2;
              }

              if (
                atIndex === "\n" ||
                atIndex === "\r" ||
                atIndex === "\u2028" ||
                atIndex === "\u2029"
              ) {
                return index + 1;
              }
            }

            return index;
          }

          function hasNewline$1(text, index, opts) {
            opts = opts || {};
            var idx = skipSpaces(
              text,
              opts.backwards ? index - 1 : index,
              opts
            );
            var idx2 = skipNewline$1(text, idx, opts);
            return idx !== idx2;
          }

          function hasNewlineInRange(text, start, end) {
            for (var i = start; i < end; ++i) {
              if (text.charAt(i) === "\n") {
                return true;
              }
            }

            return false;
          } // Note: this function doesn't ignore leading comments unlike isNextLineEmpty

          function isPreviousLineEmpty$1(text, node, locStart) {
            var idx = locStart(node) - 1;
            idx = skipSpaces(text, idx, {
              backwards: true,
            });
            idx = skipNewline$1(text, idx, {
              backwards: true,
            });
            idx = skipSpaces(text, idx, {
              backwards: true,
            });
            var idx2 = skipNewline$1(text, idx, {
              backwards: true,
            });
            return idx !== idx2;
          }

          function isNextLineEmptyAfterIndex(text, index) {
            var oldIdx = null;
            var idx = index;

            while (idx !== oldIdx) {
              // We need to skip all the potential trailing inline comments
              oldIdx = idx;
              idx = skipToLineEnd(text, idx);
              idx = skipInlineComment(text, idx);
              idx = skipSpaces(text, idx);
            }

            idx = skipTrailingComment(text, idx);
            idx = skipNewline$1(text, idx);
            return hasNewline$1(text, idx);
          }

          function isNextLineEmpty(text, node, locEnd) {
            return isNextLineEmptyAfterIndex(text, locEnd(node));
          }

          function getNextNonSpaceNonCommentCharacterIndexWithStartIndex(
            text,
            idx
          ) {
            var oldIdx = null;

            while (idx !== oldIdx) {
              oldIdx = idx;
              idx = skipSpaces(text, idx);
              idx = skipInlineComment(text, idx);
              idx = skipTrailingComment(text, idx);
              idx = skipNewline$1(text, idx);
            }

            return idx;
          }

          function getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd) {
            return getNextNonSpaceNonCommentCharacterIndexWithStartIndex(
              text,
              locEnd(node)
            );
          }

          function getNextNonSpaceNonCommentCharacter(text, node, locEnd) {
            return text.charAt(
              getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd)
            );
          }

          function hasSpaces(text, index, opts) {
            opts = opts || {};
            var idx = skipSpaces(
              text,
              opts.backwards ? index - 1 : index,
              opts
            );
            return idx !== index;
          }

          function setLocStart(node, index) {
            if (node.range) {
              node.range[0] = index;
            } else {
              node.start = index;
            }
          }

          function setLocEnd(node, index) {
            if (node.range) {
              node.range[1] = index;
            } else {
              node.end = index;
            }
          }

          var PRECEDENCE = {};
          [
            ["|>"],
            ["||", "??"],
            ["&&"],
            ["|"],
            ["^"],
            ["&"],
            ["==", "===", "!=", "!=="],
            ["<", ">", "<=", ">=", "in", "instanceof"],
            [">>", "<<", ">>>"],
            ["+", "-"],
            ["*", "/", "%"],
            ["**"],
          ].forEach(function (tier, i) {
            tier.forEach(function (op) {
              PRECEDENCE[op] = i;
            });
          });

          function getPrecedence(op) {
            return PRECEDENCE[op];
          }

          var equalityOperators = {
            "==": true,
            "!=": true,
            "===": true,
            "!==": true,
          };
          var multiplicativeOperators = {
            "*": true,
            "/": true,
            "%": true,
          };
          var bitshiftOperators = {
            ">>": true,
            ">>>": true,
            "<<": true,
          };

          function shouldFlatten(parentOp, nodeOp) {
            if (getPrecedence(nodeOp) !== getPrecedence(parentOp)) {
              return false;
            } // ** is right-associative
            // x ** y ** z --> x ** (y ** z)

            if (parentOp === "**") {
              return false;
            } // x == y == z --> (x == y) == z

            if (equalityOperators[parentOp] && equalityOperators[nodeOp]) {
              return false;
            } // x * y % z --> (x * y) % z

            if (
              (nodeOp === "%" && multiplicativeOperators[parentOp]) ||
              (parentOp === "%" && multiplicativeOperators[nodeOp])
            ) {
              return false;
            } // x * y / z --> (x * y) / z
            // x / y * z --> (x / y) * z

            if (
              nodeOp !== parentOp &&
              multiplicativeOperators[nodeOp] &&
              multiplicativeOperators[parentOp]
            ) {
              return false;
            } // x << y << z --> (x << y) << z

            if (bitshiftOperators[parentOp] && bitshiftOperators[nodeOp]) {
              return false;
            }

            return true;
          }

          function isBitwiseOperator(operator) {
            return (
              !!bitshiftOperators[operator] ||
              operator === "|" ||
              operator === "^" ||
              operator === "&"
            );
          } // Tests if an expression starts with `{`, or (if forbidFunctionClassAndDoExpr
          // holds) `function`, `class`, or `do {}`. Will be overzealous if there's
          // already necessary grouping parentheses.

          function startsWithNoLookaheadToken(
            node,
            forbidFunctionClassAndDoExpr
          ) {
            node = getLeftMost(node);

            switch (node.type) {
              case "FunctionExpression":
              case "ClassExpression":
              case "DoExpression":
                return forbidFunctionClassAndDoExpr;

              case "ObjectExpression":
                return true;

              case "MemberExpression":
                return startsWithNoLookaheadToken(
                  node.object,
                  forbidFunctionClassAndDoExpr
                );

              case "TaggedTemplateExpression":
                if (node.tag.type === "FunctionExpression") {
                  // IIFEs are always already parenthesized
                  return false;
                }

                return startsWithNoLookaheadToken(
                  node.tag,
                  forbidFunctionClassAndDoExpr
                );

              case "CallExpression":
                if (node.callee.type === "FunctionExpression") {
                  // IIFEs are always already parenthesized
                  return false;
                }

                return startsWithNoLookaheadToken(
                  node.callee,
                  forbidFunctionClassAndDoExpr
                );

              case "ConditionalExpression":
                return startsWithNoLookaheadToken(
                  node.test,
                  forbidFunctionClassAndDoExpr
                );

              case "UpdateExpression":
                return (
                  !node.prefix &&
                  startsWithNoLookaheadToken(
                    node.argument,
                    forbidFunctionClassAndDoExpr
                  )
                );

              case "BindExpression":
                return (
                  node.object &&
                  startsWithNoLookaheadToken(
                    node.object,
                    forbidFunctionClassAndDoExpr
                  )
                );

              case "SequenceExpression":
                return startsWithNoLookaheadToken(
                  node.expressions[0],
                  forbidFunctionClassAndDoExpr
                );

              case "TSAsExpression":
                return startsWithNoLookaheadToken(
                  node.expression,
                  forbidFunctionClassAndDoExpr
                );

              default:
                return false;
            }
          }

          function getLeftMost(node) {
            if (node.left) {
              return getLeftMost(node.left);
            }

            return node;
          }

          function getAlignmentSize(value, tabWidth, startIndex) {
            startIndex = startIndex || 0;
            var size = 0;

            for (var i = startIndex; i < value.length; ++i) {
              if (value[i] === "\t") {
                // Tabs behave in a way that they are aligned to the nearest
                // multiple of tabWidth:
                // 0 -> 4, 1 -> 4, 2 -> 4, 3 -> 4
                // 4 -> 8, 5 -> 8, 6 -> 8, 7 -> 8 ...
                size = size + tabWidth - (size % tabWidth);
              } else {
                size++;
              }
            }

            return size;
          }

          function getIndentSize(value, tabWidth) {
            var lastNewlineIndex = value.lastIndexOf("\n");

            if (lastNewlineIndex === -1) {
              return 0;
            }

            return getAlignmentSize(
              // All the leading whitespaces
              value.slice(lastNewlineIndex + 1).match(/^[ \t]*/)[0],
              tabWidth
            );
          }

          function getPreferredQuote(raw, preferredQuote) {
            // `rawContent` is the string exactly like it appeared in the input source
            // code, without its enclosing quotes.
            var rawContent = raw.slice(1, -1);
            var double = {
              quote: '"',
              regex: /"/g,
            };
            var single = {
              quote: "'",
              regex: /'/g,
            };
            var preferred = preferredQuote === "'" ? single : double;
            var alternate = preferred === single ? double : single;
            var result = preferred.quote; // If `rawContent` contains at least one of the quote preferred for enclosing
            // the string, we might want to enclose with the alternate quote instead, to
            // minimize the number of escaped quotes.

            if (
              rawContent.includes(preferred.quote) ||
              rawContent.includes(alternate.quote)
            ) {
              var numPreferredQuotes = (rawContent.match(preferred.regex) || [])
                .length;
              var numAlternateQuotes = (rawContent.match(alternate.regex) || [])
                .length;
              result =
                numPreferredQuotes > numAlternateQuotes
                  ? alternate.quote
                  : preferred.quote;
            }

            return result;
          }

          function printString(raw, options, isDirectiveLiteral) {
            // `rawContent` is the string exactly like it appeared in the input source
            // code, without its enclosing quotes.
            var rawContent = raw.slice(1, -1); // Check for the alternate quote, to determine if we're allowed to swap
            // the quotes on a DirectiveLiteral.

            var canChangeDirectiveQuotes =
              !rawContent.includes('"') && !rawContent.includes("'");
            var enclosingQuote =
              options.parser === "json"
                ? '"'
                : options.__isInHtmlAttribute
                ? "'"
                : getPreferredQuote(raw, options.singleQuote ? "'" : '"'); // Directives are exact code unit sequences, which means that you can't
            // change the escape sequences they use.
            // See https://github.com/prettier/prettier/issues/1555
            // and https://tc39.github.io/ecma262/#directive-prologue

            if (isDirectiveLiteral) {
              if (canChangeDirectiveQuotes) {
                return enclosingQuote + rawContent + enclosingQuote;
              }

              return raw;
            } // It might sound unnecessary to use `makeString` even if the string already
            // is enclosed with `enclosingQuote`, but it isn't. The string could contain
            // unnecessary escapes (such as in `"\'"`). Always using `makeString` makes
            // sure that we consistently output the minimum amount of escaped quotes.

            return makeString(
              rawContent,
              enclosingQuote,
              !(
                options.parser === "css" ||
                options.parser === "less" ||
                options.parser === "scss" ||
                options.embeddedInHtml
              )
            );
          }

          function makeString(
            rawContent,
            enclosingQuote,
            unescapeUnnecessaryEscapes
          ) {
            var otherQuote = enclosingQuote === '"' ? "'" : '"'; // Matches _any_ escape and unescaped quotes (both single and double).

            var regex = /\\([\s\S])|(['"])/g; // Escape and unescape single and double quotes as needed to be able to
            // enclose `rawContent` with `enclosingQuote`.

            var newContent = rawContent.replace(
              regex,
              function (match, escaped, quote) {
                // If we matched an escape, and the escaped character is a quote of the
                // other type than we intend to enclose the string with, there's no need for
                // it to be escaped, so return it _without_ the backslash.
                if (escaped === otherQuote) {
                  return escaped;
                } // If we matched an unescaped quote and it is of the _same_ type as we
                // intend to enclose the string with, it must be escaped, so return it with
                // a backslash.

                if (quote === enclosingQuote) {
                  return "\\" + quote;
                }

                if (quote) {
                  return quote;
                } // Unescape any unnecessarily escaped character.
                // Adapted from https://github.com/eslint/eslint/blob/de0b4ad7bd820ade41b1f606008bea68683dc11a/lib/rules/no-useless-escape.js#L27

                return unescapeUnnecessaryEscapes &&
                  /^[^\\nrvtbfux\r\n\u2028\u2029"'0-7]$/.test(escaped)
                  ? escaped
                  : "\\" + escaped;
              }
            );
            return enclosingQuote + newContent + enclosingQuote;
          }

          function printNumber(rawNumber) {
            return rawNumber
              .toLowerCase() // Remove unnecessary plus and zeroes from scientific notation.
              .replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(\d)/, "$1$2$3") // Remove unnecessary scientific notation (1e0).
              .replace(/^([+-]?[\d.]+)e[+-]?0+$/, "$1") // Make sure numbers always start with a digit.
              .replace(/^([+-])?\./, "$10.") // Remove extraneous trailing decimal zeroes.
              .replace(/(\.\d+?)0+(?=e|$)/, "$1") // Remove trailing dot.
              .replace(/\.(?=e|$)/, "");
          }

          function getMaxContinuousCount(str, target) {
            var results = str.match(
              new RegExp("(".concat(escapeStringRegexp(target), ")+"), "g")
            );

            if (results === null) {
              return 0;
            }

            return results.reduce(function (maxCount, result) {
              return Math.max(maxCount, result.length / target.length);
            }, 0);
          }

          function getMinNotPresentContinuousCount(str, target) {
            var matches = str.match(
              new RegExp("(".concat(escapeStringRegexp(target), ")+"), "g")
            );

            if (matches === null) {
              return 0;
            }

            var countPresent = new Map();
            var max = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = matches[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var match = _step.value;
                var count = match.length / target.length;
                countPresent.set(count, true);

                if (count > max) {
                  max = count;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            for (var i = 1; i < max; i++) {
              if (!countPresent.get(i)) {
                return i;
              }
            }

            return max + 1;
          }

          function getStringWidth$1(text) {
            if (!text) {
              return 0;
            } // shortcut to avoid needless string `RegExp`s, replacements, and allocations within `string-width`

            if (!notAsciiRegex.test(text)) {
              return text.length;
            }

            return stringWidth(text);
          }

          function hasIgnoreComment(path) {
            var node = path.getValue();
            return hasNodeIgnoreComment(node);
          }

          function hasNodeIgnoreComment(node) {
            return (
              node &&
              node.comments &&
              node.comments.length > 0 &&
              node.comments.some(function (comment) {
                return comment.value.trim() === "prettier-ignore";
              })
            );
          }

          function matchAncestorTypes(path, types, index) {
            index = index || 0;
            types = types.slice();

            while (types.length) {
              var parent = path.getParentNode(index);
              var type = types.shift();

              if (!parent || parent.type !== type) {
                return false;
              }

              index++;
            }

            return true;
          }

          function addCommentHelper(node, comment) {
            var comments = node.comments || (node.comments = []);
            comments.push(comment);
            comment.printed = false; // For some reason, TypeScript parses `// x` inside of JSXText as a comment
            // We already "print" it via the raw text, we don't need to re-print it as a
            // comment

            if (node.type === "JSXText") {
              comment.printed = true;
            }
          }

          function addLeadingComment$1(node, comment) {
            comment.leading = true;
            comment.trailing = false;
            addCommentHelper(node, comment);
          }

          function addDanglingComment$1(node, comment) {
            comment.leading = false;
            comment.trailing = false;
            addCommentHelper(node, comment);
          }

          function addTrailingComment$1(node, comment) {
            comment.leading = false;
            comment.trailing = true;
            addCommentHelper(node, comment);
          }

          function isWithinParentArrayProperty(path, propertyName) {
            var node = path.getValue();
            var parent = path.getParentNode();

            if (parent == null) {
              return false;
            }

            if (!Array.isArray(parent[propertyName])) {
              return false;
            }

            var key = path.getName();
            return parent[propertyName][key] === node;
          }

          function replaceEndOfLineWith(text, replacement) {
            var parts = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (
                var _iterator2 = text.split("\n")[Symbol.iterator](), _step2;
                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                  .done);
                _iteratorNormalCompletion2 = true
              ) {
                var part = _step2.value;

                if (parts.length !== 0) {
                  parts.push(replacement);
                }

                parts.push(part);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return parts;
          }

          var util = {
            replaceEndOfLineWith: replaceEndOfLineWith,
            getStringWidth: getStringWidth$1,
            getMaxContinuousCount: getMaxContinuousCount,
            getMinNotPresentContinuousCount: getMinNotPresentContinuousCount,
            getPrecedence: getPrecedence,
            shouldFlatten: shouldFlatten,
            isBitwiseOperator: isBitwiseOperator,
            isExportDeclaration: isExportDeclaration,
            getParentExportDeclaration: getParentExportDeclaration,
            getPenultimate: getPenultimate,
            getLast: getLast,
            getNextNonSpaceNonCommentCharacterIndexWithStartIndex:
              getNextNonSpaceNonCommentCharacterIndexWithStartIndex,
            getNextNonSpaceNonCommentCharacterIndex:
              getNextNonSpaceNonCommentCharacterIndex,
            getNextNonSpaceNonCommentCharacter:
              getNextNonSpaceNonCommentCharacter,
            skip: skip,
            skipWhitespace: skipWhitespace,
            skipSpaces: skipSpaces,
            skipToLineEnd: skipToLineEnd,
            skipEverythingButNewLine: skipEverythingButNewLine,
            skipInlineComment: skipInlineComment,
            skipTrailingComment: skipTrailingComment,
            skipNewline: skipNewline$1,
            isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex,
            isNextLineEmpty: isNextLineEmpty,
            isPreviousLineEmpty: isPreviousLineEmpty$1,
            hasNewline: hasNewline$1,
            hasNewlineInRange: hasNewlineInRange,
            hasSpaces: hasSpaces,
            setLocStart: setLocStart,
            setLocEnd: setLocEnd,
            startsWithNoLookaheadToken: startsWithNoLookaheadToken,
            getAlignmentSize: getAlignmentSize,
            getIndentSize: getIndentSize,
            getPreferredQuote: getPreferredQuote,
            printString: printString,
            printNumber: printNumber,
            hasIgnoreComment: hasIgnoreComment,
            hasNodeIgnoreComment: hasNodeIgnoreComment,
            makeString: makeString,
            matchAncestorTypes: matchAncestorTypes,
            addLeadingComment: addLeadingComment$1,
            addDanglingComment: addDanglingComment$1,
            addTrailingComment: addTrailingComment$1,
            isWithinParentArrayProperty: isWithinParentArrayProperty,
          };

          function guessEndOfLine$1(text) {
            var index = text.indexOf("\r");

            if (index >= 0) {
              return text.charAt(index + 1) === "\n" ? "crlf" : "cr";
            }

            return "lf";
          }

          function convertEndOfLineToChars$2(value) {
            switch (value) {
              case "cr":
                return "\r";

              case "crlf":
                return "\r\n";

              default:
                return "\n";
            }
          }

          var endOfLine = {
            guessEndOfLine: guessEndOfLine$1,
            convertEndOfLineToChars: convertEndOfLineToChars$2,
          };

          var getStringWidth = util.getStringWidth;
          var convertEndOfLineToChars$1 = endOfLine.convertEndOfLineToChars;
          var concat$2 = docBuilders.concat;
          var fill$1 = docBuilders.fill;
          var cursor$2 = docBuilders.cursor;
          /** @type {{[groupId: PropertyKey]: MODE}} */

          var groupModeMap;
          var MODE_BREAK = 1;
          var MODE_FLAT = 2;

          function rootIndent() {
            return {
              value: "",
              length: 0,
              queue: [],
            };
          }

          function makeIndent(ind, options) {
            return generateInd(
              ind,
              {
                type: "indent",
              },
              options
            );
          }

          function makeAlign(ind, n, options) {
            return n === -Infinity
              ? ind.root || rootIndent()
              : n < 0
              ? generateInd(
                  ind,
                  {
                    type: "dedent",
                  },
                  options
                )
              : !n
              ? ind
              : n.type === "root"
              ? Object.assign({}, ind, {
                  root: ind,
                })
              : typeof n === "string"
              ? generateInd(
                  ind,
                  {
                    type: "stringAlign",
                    n: n,
                  },
                  options
                )
              : generateInd(
                  ind,
                  {
                    type: "numberAlign",
                    n: n,
                  },
                  options
                );
          }

          function generateInd(ind, newPart, options) {
            var queue =
              newPart.type === "dedent"
                ? ind.queue.slice(0, -1)
                : ind.queue.concat(newPart);
            var value = "";
            var length = 0;
            var lastTabs = 0;
            var lastSpaces = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = queue[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var part = _step.value;

                switch (part.type) {
                  case "indent":
                    flush();

                    if (options.useTabs) {
                      addTabs(1);
                    } else {
                      addSpaces(options.tabWidth);
                    }

                    break;

                  case "stringAlign":
                    flush();
                    value += part.n;
                    length += part.n.length;
                    break;

                  case "numberAlign":
                    lastTabs += 1;
                    lastSpaces += part.n;
                    break;

                  /* istanbul ignore next */

                  default:
                    throw new Error("Unexpected type '".concat(part.type, "'"));
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            flushSpaces();
            return Object.assign({}, ind, {
              value: value,
              length: length,
              queue: queue,
            });

            function addTabs(count) {
              value += "\t".repeat(count);
              length += options.tabWidth * count;
            }

            function addSpaces(count) {
              value += " ".repeat(count);
              length += count;
            }

            function flush() {
              if (options.useTabs) {
                flushTabs();
              } else {
                flushSpaces();
              }
            }

            function flushTabs() {
              if (lastTabs > 0) {
                addTabs(lastTabs);
              }

              resetLast();
            }

            function flushSpaces() {
              if (lastSpaces > 0) {
                addSpaces(lastSpaces);
              }

              resetLast();
            }

            function resetLast() {
              lastTabs = 0;
              lastSpaces = 0;
            }
          }

          function trim$1(out) {
            if (out.length === 0) {
              return 0;
            }

            var trimCount = 0; // Trim whitespace at the end of line

            while (
              out.length > 0 &&
              typeof out[out.length - 1] === "string" &&
              out[out.length - 1].match(/^[ \t]*$/)
            ) {
              trimCount += out.pop().length;
            }

            if (out.length && typeof out[out.length - 1] === "string") {
              var trimmed = out[out.length - 1].replace(/[ \t]*$/, "");
              trimCount += out[out.length - 1].length - trimmed.length;
              out[out.length - 1] = trimmed;
            }

            return trimCount;
          }

          function fits(next, restCommands, width, options, mustBeFlat) {
            var restIdx = restCommands.length;
            var cmds = [next]; // `out` is only used for width counting because `trim` requires to look
            // backwards for space characters.

            var out = [];

            while (width >= 0) {
              if (cmds.length === 0) {
                if (restIdx === 0) {
                  return true;
                }

                cmds.push(restCommands[restIdx - 1]);
                restIdx--;
                continue;
              }

              var x = cmds.pop();
              var ind = x[0];
              var mode = x[1];
              var doc = x[2];

              if (typeof doc === "string") {
                out.push(doc);
                width -= getStringWidth(doc);
              } else {
                switch (doc.type) {
                  case "concat":
                    for (var i = doc.parts.length - 1; i >= 0; i--) {
                      cmds.push([ind, mode, doc.parts[i]]);
                    }

                    break;

                  case "indent":
                    cmds.push([makeIndent(ind, options), mode, doc.contents]);
                    break;

                  case "align":
                    cmds.push([
                      makeAlign(ind, doc.n, options),
                      mode,
                      doc.contents,
                    ]);
                    break;

                  case "trim":
                    width += trim$1(out);
                    break;

                  case "group":
                    if (mustBeFlat && doc.break) {
                      return false;
                    }

                    cmds.push([
                      ind,
                      doc.break ? MODE_BREAK : mode,
                      doc.contents,
                    ]);

                    if (doc.id) {
                      groupModeMap[doc.id] = cmds[cmds.length - 1][1];
                    }

                    break;

                  case "fill":
                    for (var _i = doc.parts.length - 1; _i >= 0; _i--) {
                      cmds.push([ind, mode, doc.parts[_i]]);
                    }

                    break;

                  case "if-break": {
                    var groupMode = doc.groupId
                      ? groupModeMap[doc.groupId]
                      : mode;

                    if (groupMode === MODE_BREAK) {
                      if (doc.breakContents) {
                        cmds.push([ind, mode, doc.breakContents]);
                      }
                    }

                    if (groupMode === MODE_FLAT) {
                      if (doc.flatContents) {
                        cmds.push([ind, mode, doc.flatContents]);
                      }
                    }

                    break;
                  }

                  case "line":
                    switch (mode) {
                      // fallthrough
                      case MODE_FLAT:
                        if (!doc.hard) {
                          if (!doc.soft) {
                            out.push(" ");
                            width -= 1;
                          }

                          break;
                        }

                        return true;

                      case MODE_BREAK:
                        return true;
                    }

                    break;
                }
              }
            }

            return false;
          }

          function printDocToString(doc, options) {
            groupModeMap = {};
            var width = options.printWidth;
            var newLine = convertEndOfLineToChars$1(options.endOfLine);
            var pos = 0; // cmds is basically a stack. We've turned a recursive call into a
            // while loop which is much faster. The while loop below adds new
            // cmds to the array instead of recursively calling `print`.

            var cmds = [[rootIndent(), MODE_BREAK, doc]];
            var out = [];
            var shouldRemeasure = false;
            var lineSuffix = [];

            while (cmds.length !== 0) {
              var x = cmds.pop();
              var ind = x[0];
              var mode = x[1];
              var _doc = x[2];

              if (typeof _doc === "string") {
                out.push(_doc);
                pos += getStringWidth(_doc);
              } else {
                switch (_doc.type) {
                  case "cursor":
                    out.push(cursor$2.placeholder);
                    break;

                  case "concat":
                    for (var i = _doc.parts.length - 1; i >= 0; i--) {
                      cmds.push([ind, mode, _doc.parts[i]]);
                    }

                    break;

                  case "indent":
                    cmds.push([makeIndent(ind, options), mode, _doc.contents]);
                    break;

                  case "align":
                    cmds.push([
                      makeAlign(ind, _doc.n, options),
                      mode,
                      _doc.contents,
                    ]);
                    break;

                  case "trim":
                    pos -= trim$1(out);
                    break;

                  case "group":
                    switch (mode) {
                      case MODE_FLAT:
                        if (!shouldRemeasure) {
                          cmds.push([
                            ind,
                            _doc.break ? MODE_BREAK : MODE_FLAT,
                            _doc.contents,
                          ]);
                          break;
                        }

                      // fallthrough

                      case MODE_BREAK: {
                        shouldRemeasure = false;
                        var next = [ind, MODE_FLAT, _doc.contents];
                        var rem = width - pos;

                        if (!_doc.break && fits(next, cmds, rem, options)) {
                          cmds.push(next);
                        } else {
                          // Expanded states are a rare case where a document
                          // can manually provide multiple representations of
                          // itself. It provides an array of documents
                          // going from the least expanded (most flattened)
                          // representation first to the most expanded. If a
                          // group has these, we need to manually go through
                          // these states and find the first one that fits.
                          if (_doc.expandedStates) {
                            var mostExpanded =
                              _doc.expandedStates[
                                _doc.expandedStates.length - 1
                              ];

                            if (_doc.break) {
                              cmds.push([ind, MODE_BREAK, mostExpanded]);
                              break;
                            } else {
                              for (
                                var _i2 = 1;
                                _i2 < _doc.expandedStates.length + 1;
                                _i2++
                              ) {
                                if (_i2 >= _doc.expandedStates.length) {
                                  cmds.push([ind, MODE_BREAK, mostExpanded]);
                                  break;
                                } else {
                                  var state = _doc.expandedStates[_i2];
                                  var cmd = [ind, MODE_FLAT, state];

                                  if (fits(cmd, cmds, rem, options)) {
                                    cmds.push(cmd);
                                    break;
                                  }
                                }
                              }
                            }
                          } else {
                            cmds.push([ind, MODE_BREAK, _doc.contents]);
                          }
                        }

                        break;
                      }
                    }

                    if (_doc.id) {
                      groupModeMap[_doc.id] = cmds[cmds.length - 1][1];
                    }

                    break;
                  // Fills each line with as much code as possible before moving to a new
                  // line with the same indentation.
                  //
                  // Expects doc.parts to be an array of alternating content and
                  // whitespace. The whitespace contains the linebreaks.
                  //
                  // For example:
                  //   ["I", line, "love", line, "monkeys"]
                  // or
                  //   [{ type: group, ... }, softline, { type: group, ... }]
                  //
                  // It uses this parts structure to handle three main layout cases:
                  // * The first two content items fit on the same line without
                  //   breaking
                  //   -> output the first content item and the whitespace "flat".
                  // * Only the first content item fits on the line without breaking
                  //   -> output the first content item "flat" and the whitespace with
                  //   "break".
                  // * Neither content item fits on the line without breaking
                  //   -> output the first content item and the whitespace with "break".

                  case "fill": {
                    var _rem = width - pos;

                    var parts = _doc.parts;

                    if (parts.length === 0) {
                      break;
                    }

                    var content = parts[0];
                    var contentFlatCmd = [ind, MODE_FLAT, content];
                    var contentBreakCmd = [ind, MODE_BREAK, content];
                    var contentFits = fits(
                      contentFlatCmd,
                      [],
                      _rem,
                      options,
                      true
                    );

                    if (parts.length === 1) {
                      if (contentFits) {
                        cmds.push(contentFlatCmd);
                      } else {
                        cmds.push(contentBreakCmd);
                      }

                      break;
                    }

                    var whitespace = parts[1];
                    var whitespaceFlatCmd = [ind, MODE_FLAT, whitespace];
                    var whitespaceBreakCmd = [ind, MODE_BREAK, whitespace];

                    if (parts.length === 2) {
                      if (contentFits) {
                        cmds.push(whitespaceFlatCmd);
                        cmds.push(contentFlatCmd);
                      } else {
                        cmds.push(whitespaceBreakCmd);
                        cmds.push(contentBreakCmd);
                      }

                      break;
                    } // At this point we've handled the first pair (context, separator)
                    // and will create a new fill doc for the rest of the content.
                    // Ideally we wouldn't mutate the array here but coping all the
                    // elements to a new array would make this algorithm quadratic,
                    // which is unusable for large arrays (e.g. large texts in JSX).

                    parts.splice(0, 2);
                    var remainingCmd = [ind, mode, fill$1(parts)];
                    var secondContent = parts[0];
                    var firstAndSecondContentFlatCmd = [
                      ind,
                      MODE_FLAT,
                      concat$2([content, whitespace, secondContent]),
                    ];
                    var firstAndSecondContentFits = fits(
                      firstAndSecondContentFlatCmd,
                      [],
                      _rem,
                      options,
                      true
                    );

                    if (firstAndSecondContentFits) {
                      cmds.push(remainingCmd);
                      cmds.push(whitespaceFlatCmd);
                      cmds.push(contentFlatCmd);
                    } else if (contentFits) {
                      cmds.push(remainingCmd);
                      cmds.push(whitespaceBreakCmd);
                      cmds.push(contentFlatCmd);
                    } else {
                      cmds.push(remainingCmd);
                      cmds.push(whitespaceBreakCmd);
                      cmds.push(contentBreakCmd);
                    }

                    break;
                  }

                  case "if-break": {
                    var groupMode = _doc.groupId
                      ? groupModeMap[_doc.groupId]
                      : mode;

                    if (groupMode === MODE_BREAK) {
                      if (_doc.breakContents) {
                        cmds.push([ind, mode, _doc.breakContents]);
                      }
                    }

                    if (groupMode === MODE_FLAT) {
                      if (_doc.flatContents) {
                        cmds.push([ind, mode, _doc.flatContents]);
                      }
                    }

                    break;
                  }

                  case "line-suffix":
                    lineSuffix.push([ind, mode, _doc.contents]);
                    break;

                  case "line-suffix-boundary":
                    if (lineSuffix.length > 0) {
                      cmds.push([
                        ind,
                        mode,
                        {
                          type: "line",
                          hard: true,
                        },
                      ]);
                    }

                    break;

                  case "line":
                    switch (mode) {
                      case MODE_FLAT:
                        if (!_doc.hard) {
                          if (!_doc.soft) {
                            out.push(" ");
                            pos += 1;
                          }

                          break;
                        } else {
                          // This line was forced into the output even if we
                          // were in flattened mode, so we need to tell the next
                          // group that no matter what, it needs to remeasure
                          // because the previous measurement didn't accurately
                          // capture the entire expression (this is necessary
                          // for nested groups)
                          shouldRemeasure = true;
                        }

                      // fallthrough

                      case MODE_BREAK:
                        if (lineSuffix.length) {
                          cmds.push([ind, mode, _doc]);
                          [].push.apply(cmds, lineSuffix.reverse());
                          lineSuffix = [];
                          break;
                        }

                        if (_doc.literal) {
                          if (ind.root) {
                            out.push(newLine, ind.root.value);
                            pos = ind.root.length;
                          } else {
                            out.push(newLine);
                            pos = 0;
                          }
                        } else {
                          pos -= trim$1(out);
                          out.push(newLine + ind.value);
                          pos = ind.length;
                        }

                        break;
                    }

                    break;

                  default:
                }
              }
            }

            var cursorPlaceholderIndex = out.indexOf(cursor$2.placeholder);

            if (cursorPlaceholderIndex !== -1) {
              var otherCursorPlaceholderIndex = out.indexOf(
                cursor$2.placeholder,
                cursorPlaceholderIndex + 1
              );
              var beforeCursor = out.slice(0, cursorPlaceholderIndex).join("");
              var aroundCursor = out
                .slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex)
                .join("");
              var afterCursor = out
                .slice(otherCursorPlaceholderIndex + 1)
                .join("");
              return {
                formatted: beforeCursor + aroundCursor + afterCursor,
                cursorNodeStart: beforeCursor.length,
                cursorNodeText: aroundCursor,
              };
            }

            return {
              formatted: out.join(""),
            };
          }

          var docPrinter = {
            printDocToString: printDocToString,
          };

          var traverseDocOnExitStackMarker = {};

          function traverseDoc(
            doc,
            onEnter,
            onExit,
            shouldTraverseConditionalGroups
          ) {
            var docsStack = [doc];

            while (docsStack.length !== 0) {
              var _doc = docsStack.pop();

              if (_doc === traverseDocOnExitStackMarker) {
                onExit(docsStack.pop());
                continue;
              }

              var shouldRecurse = true;

              if (onEnter) {
                if (onEnter(_doc) === false) {
                  shouldRecurse = false;
                }
              }

              if (onExit) {
                docsStack.push(_doc);
                docsStack.push(traverseDocOnExitStackMarker);
              }

              if (shouldRecurse) {
                // When there are multiple parts to process,
                // the parts need to be pushed onto the stack in reverse order,
                // so that they are processed in the original order
                // when the stack is popped.
                if (_doc.type === "concat" || _doc.type === "fill") {
                  for (var ic = _doc.parts.length, i = ic - 1; i >= 0; --i) {
                    docsStack.push(_doc.parts[i]);
                  }
                } else if (_doc.type === "if-break") {
                  if (_doc.flatContents) {
                    docsStack.push(_doc.flatContents);
                  }

                  if (_doc.breakContents) {
                    docsStack.push(_doc.breakContents);
                  }
                } else if (_doc.type === "group" && _doc.expandedStates) {
                  if (shouldTraverseConditionalGroups) {
                    for (
                      var _ic = _doc.expandedStates.length, _i = _ic - 1;
                      _i >= 0;
                      --_i
                    ) {
                      docsStack.push(_doc.expandedStates[_i]);
                    }
                  } else {
                    docsStack.push(_doc.contents);
                  }
                } else if (_doc.contents) {
                  docsStack.push(_doc.contents);
                }
              }
            }
          }

          function mapDoc$1(doc, cb) {
            if (doc.type === "concat" || doc.type === "fill") {
              var parts = doc.parts.map(function (part) {
                return mapDoc$1(part, cb);
              });
              return cb(
                Object.assign({}, doc, {
                  parts: parts,
                })
              );
            } else if (doc.type === "if-break") {
              var breakContents =
                doc.breakContents && mapDoc$1(doc.breakContents, cb);
              var flatContents =
                doc.flatContents && mapDoc$1(doc.flatContents, cb);
              return cb(
                Object.assign({}, doc, {
                  breakContents: breakContents,
                  flatContents: flatContents,
                })
              );
            } else if (doc.contents) {
              var contents = mapDoc$1(doc.contents, cb);
              return cb(
                Object.assign({}, doc, {
                  contents: contents,
                })
              );
            }

            return cb(doc);
          }

          function findInDoc(doc, fn, defaultValue) {
            var result = defaultValue;
            var hasStopped = false;

            function findInDocOnEnterFn(doc) {
              var maybeResult = fn(doc);

              if (maybeResult !== undefined) {
                hasStopped = true;
                result = maybeResult;
              }

              if (hasStopped) {
                return false;
              }
            }

            traverseDoc(doc, findInDocOnEnterFn);
            return result;
          }

          function isEmpty(n) {
            return typeof n === "string" && n.length === 0;
          }

          function isLineNextFn(doc) {
            if (typeof doc === "string") {
              return false;
            }

            if (doc.type === "line") {
              return true;
            }
          }

          function isLineNext(doc) {
            return findInDoc(doc, isLineNextFn, false);
          }

          function willBreakFn(doc) {
            if (doc.type === "group" && doc.break) {
              return true;
            }

            if (doc.type === "line" && doc.hard) {
              return true;
            }

            if (doc.type === "break-parent") {
              return true;
            }
          }

          function willBreak(doc) {
            return findInDoc(doc, willBreakFn, false);
          }

          function breakParentGroup(groupStack) {
            if (groupStack.length > 0) {
              var parentGroup = groupStack[groupStack.length - 1]; // Breaks are not propagated through conditional groups because
              // the user is expected to manually handle what breaks.

              if (!parentGroup.expandedStates) {
                parentGroup.break = true;
              }
            }

            return null;
          }

          function propagateBreaks(doc) {
            var alreadyVisitedSet = new Set();
            var groupStack = [];

            function propagateBreaksOnEnterFn(doc) {
              if (doc.type === "break-parent") {
                breakParentGroup(groupStack);
              }

              if (doc.type === "group") {
                groupStack.push(doc);

                if (alreadyVisitedSet.has(doc)) {
                  return false;
                }

                alreadyVisitedSet.add(doc);
              }
            }

            function propagateBreaksOnExitFn(doc) {
              if (doc.type === "group") {
                var group = groupStack.pop();

                if (group.break) {
                  breakParentGroup(groupStack);
                }
              }
            }

            traverseDoc(
              doc,
              propagateBreaksOnEnterFn,
              propagateBreaksOnExitFn,
              /* shouldTraverseConditionalGroups */
              true
            );
          }

          function removeLinesFn(doc) {
            // Force this doc into flat mode by statically converting all
            // lines into spaces (or soft lines into nothing). Hard lines
            // should still output because there's too great of a chance
            // of breaking existing assumptions otherwise.
            if (doc.type === "line" && !doc.hard) {
              return doc.soft ? "" : " ";
            } else if (doc.type === "if-break") {
              return doc.flatContents || "";
            }

            return doc;
          }

          function removeLines(doc) {
            return mapDoc$1(doc, removeLinesFn);
          }

          function stripTrailingHardline(doc) {
            // HACK remove ending hardline, original PR: #1984
            if (doc.type === "concat" && doc.parts.length !== 0) {
              var lastPart = doc.parts[doc.parts.length - 1];

              if (lastPart.type === "concat") {
                if (
                  lastPart.parts.length === 2 &&
                  lastPart.parts[0].hard &&
                  lastPart.parts[1].type === "break-parent"
                ) {
                  return {
                    type: "concat",
                    parts: doc.parts.slice(0, -1),
                  };
                }

                return {
                  type: "concat",
                  parts: doc.parts
                    .slice(0, -1)
                    .concat(stripTrailingHardline(lastPart)),
                };
              }
            }

            return doc;
          }

          var docUtils = {
            isEmpty: isEmpty,
            willBreak: willBreak,
            isLineNext: isLineNext,
            traverseDoc: traverseDoc,
            findInDoc: findInDoc,
            mapDoc: mapDoc$1,
            propagateBreaks: propagateBreaks,
            removeLines: removeLines,
            stripTrailingHardline: stripTrailingHardline,
          };

          function flattenDoc(doc) {
            if (doc.type === "concat") {
              var res = [];

              for (var i = 0; i < doc.parts.length; ++i) {
                var doc2 = doc.parts[i];

                if (typeof doc2 !== "string" && doc2.type === "concat") {
                  [].push.apply(res, flattenDoc(doc2).parts);
                } else {
                  var flattened = flattenDoc(doc2);

                  if (flattened !== "") {
                    res.push(flattened);
                  }
                }
              }

              return Object.assign({}, doc, {
                parts: res,
              });
            } else if (doc.type === "if-break") {
              return Object.assign({}, doc, {
                breakContents:
                  doc.breakContents != null
                    ? flattenDoc(doc.breakContents)
                    : null,
                flatContents:
                  doc.flatContents != null
                    ? flattenDoc(doc.flatContents)
                    : null,
              });
            } else if (doc.type === "group") {
              return Object.assign({}, doc, {
                contents: flattenDoc(doc.contents),
                expandedStates: doc.expandedStates
                  ? doc.expandedStates.map(flattenDoc)
                  : doc.expandedStates,
              });
            } else if (doc.contents) {
              return Object.assign({}, doc, {
                contents: flattenDoc(doc.contents),
              });
            }

            return doc;
          }

          function printDoc(doc) {
            if (typeof doc === "string") {
              return JSON.stringify(doc);
            }

            if (doc.type === "line") {
              if (doc.literal) {
                return "literalline";
              }

              if (doc.hard) {
                return "hardline";
              }

              if (doc.soft) {
                return "softline";
              }

              return "line";
            }

            if (doc.type === "break-parent") {
              return "breakParent";
            }

            if (doc.type === "trim") {
              return "trim";
            }

            if (doc.type === "concat") {
              return "[" + doc.parts.map(printDoc).join(", ") + "]";
            }

            if (doc.type === "indent") {
              return "indent(" + printDoc(doc.contents) + ")";
            }

            if (doc.type === "align") {
              return doc.n === -Infinity
                ? "dedentToRoot(" + printDoc(doc.contents) + ")"
                : doc.n < 0
                ? "dedent(" + printDoc(doc.contents) + ")"
                : doc.n.type === "root"
                ? "markAsRoot(" + printDoc(doc.contents) + ")"
                : "align(" +
                  JSON.stringify(doc.n) +
                  ", " +
                  printDoc(doc.contents) +
                  ")";
            }

            if (doc.type === "if-break") {
              return (
                "ifBreak(" +
                printDoc(doc.breakContents) +
                (doc.flatContents ? ", " + printDoc(doc.flatContents) : "") +
                ")"
              );
            }

            if (doc.type === "group") {
              if (doc.expandedStates) {
                return (
                  "conditionalGroup(" +
                  "[" +
                  doc.expandedStates.map(printDoc).join(",") +
                  "])"
                );
              }

              return (
                (doc.break ? "wrappedGroup" : "group") +
                "(" +
                printDoc(doc.contents) +
                ")"
              );
            }

            if (doc.type === "fill") {
              return "fill" + "(" + doc.parts.map(printDoc).join(", ") + ")";
            }

            if (doc.type === "line-suffix") {
              return "lineSuffix(" + printDoc(doc.contents) + ")";
            }

            if (doc.type === "line-suffix-boundary") {
              return "lineSuffixBoundary";
            }

            throw new Error("Unknown doc type " + doc.type);
          }

          var docDebug = {
            printDocToDebug: function printDocToDebug(doc) {
              return printDoc(flattenDoc(doc));
            },
          };

          var doc = {
            builders: docBuilders,
            printer: docPrinter,
            utils: docUtils,
            debug: docDebug,
          };

          var mapDoc$2 = doc.utils.mapDoc;

          function isNextLineEmpty$1(text, node, options) {
            return util.isNextLineEmpty(text, node, options.locEnd);
          }

          function isPreviousLineEmpty$2(text, node, options) {
            return util.isPreviousLineEmpty(text, node, options.locStart);
          }

          function getNextNonSpaceNonCommentCharacterIndex$1(
            text,
            node,
            options
          ) {
            return util.getNextNonSpaceNonCommentCharacterIndex(
              text,
              node,
              options.locEnd
            );
          }

          var utilShared = {
            getMaxContinuousCount: util.getMaxContinuousCount,
            getStringWidth: util.getStringWidth,
            getAlignmentSize: util.getAlignmentSize,
            getIndentSize: util.getIndentSize,
            skip: util.skip,
            skipWhitespace: util.skipWhitespace,
            skipSpaces: util.skipSpaces,
            skipNewline: util.skipNewline,
            skipToLineEnd: util.skipToLineEnd,
            skipEverythingButNewLine: util.skipEverythingButNewLine,
            skipInlineComment: util.skipInlineComment,
            skipTrailingComment: util.skipTrailingComment,
            hasNewline: util.hasNewline,
            hasNewlineInRange: util.hasNewlineInRange,
            hasSpaces: util.hasSpaces,
            isNextLineEmpty: isNextLineEmpty$1,
            isNextLineEmptyAfterIndex: util.isNextLineEmptyAfterIndex,
            isPreviousLineEmpty: isPreviousLineEmpty$2,
            getNextNonSpaceNonCommentCharacterIndex:
              getNextNonSpaceNonCommentCharacterIndex$1,
            mapDoc: mapDoc$2,
            // TODO: remove in 2.0, we already exposed it in docUtils
            makeString: util.makeString,
            addLeadingComment: util.addLeadingComment,
            addDanglingComment: util.addDanglingComment,
            addTrailingComment: util.addTrailingComment,
          };

          var assert$3 = (assert$2 && assert) || assert$2;

          var _require$$0$builders = doc.builders;
          var concat = _require$$0$builders.concat;
          var hardline = _require$$0$builders.hardline;
          var breakParent = _require$$0$builders.breakParent;
          var indent = _require$$0$builders.indent;
          var lineSuffix = _require$$0$builders.lineSuffix;
          var join = _require$$0$builders.join;
          var cursor = _require$$0$builders.cursor;
          var hasNewline = util.hasNewline;
          var skipNewline = util.skipNewline;
          var isPreviousLineEmpty = util.isPreviousLineEmpty;
          var addLeadingComment = utilShared.addLeadingComment;
          var addDanglingComment = utilShared.addDanglingComment;
          var addTrailingComment = utilShared.addTrailingComment;
          var childNodesCacheKey = Symbol("child-nodes");

          function getSortedChildNodes(node, options, resultArray) {
            if (!node) {
              return;
            }

            var printer = options.printer,
              locStart = options.locStart,
              locEnd = options.locEnd;

            if (resultArray) {
              if (
                node &&
                printer.canAttachComment &&
                printer.canAttachComment(node)
              ) {
                // This reverse insertion sort almost always takes constant
                // time because we almost always (maybe always?) append the
                // nodes in order anyway.
                var i;

                for (i = resultArray.length - 1; i >= 0; --i) {
                  if (
                    locStart(resultArray[i]) <= locStart(node) &&
                    locEnd(resultArray[i]) <= locEnd(node)
                  ) {
                    break;
                  }
                }

                resultArray.splice(i + 1, 0, node);
                return;
              }
            } else if (node[childNodesCacheKey]) {
              return node[childNodesCacheKey];
            }

            var childNodes;

            if (printer.getCommentChildNodes) {
              childNodes = printer.getCommentChildNodes(node);
            } else if (node && _typeof(node) === "object") {
              childNodes = Object.keys(node)
                .filter(function (n) {
                  return (
                    n !== "enclosingNode" &&
                    n !== "precedingNode" &&
                    n !== "followingNode"
                  );
                })
                .map(function (n) {
                  return node[n];
                });
            }

            if (!childNodes) {
              return;
            }

            if (!resultArray) {
              Object.defineProperty(node, childNodesCacheKey, {
                value: (resultArray = []),
                enumerable: false,
              });
            }

            childNodes.forEach(function (childNode) {
              getSortedChildNodes(childNode, options, resultArray);
            });
            return resultArray;
          } // As efficiently as possible, decorate the comment object with
          // .precedingNode, .enclosingNode, and/or .followingNode properties, at
          // least one of which is guaranteed to be defined.

          function decorateComment(node, comment, options) {
            var locStart = options.locStart,
              locEnd = options.locEnd;
            var childNodes = getSortedChildNodes(node, options);
            var precedingNode;
            var followingNode; // Time to dust off the old binary search robes and wizard hat.

            var left = 0;
            var right = childNodes.length;

            while (left < right) {
              var middle = (left + right) >> 1;
              var child = childNodes[middle];

              if (
                locStart(child) - locStart(comment) <= 0 &&
                locEnd(comment) - locEnd(child) <= 0
              ) {
                // The comment is completely contained by this child node.
                comment.enclosingNode = child;
                decorateComment(child, comment, options);
                return; // Abandon the binary search at this level.
              }

              if (locEnd(child) - locStart(comment) <= 0) {
                // This child node falls completely before the comment.
                // Because we will never consider this node or any nodes
                // before it again, this node must be the closest preceding
                // node we have encountered so far.
                precedingNode = child;
                left = middle + 1;
                continue;
              }

              if (locEnd(comment) - locStart(child) <= 0) {
                // This child node falls completely after the comment.
                // Because we will never consider this node or any nodes after
                // it again, this node must be the closest following node we
                // have encountered so far.
                followingNode = child;
                right = middle;
                continue;
              }
              /* istanbul ignore next */

              throw new Error("Comment location overlaps with node location");
            } // We don't want comments inside of different expressions inside of the same
            // template literal to move to another expression.

            if (
              comment.enclosingNode &&
              comment.enclosingNode.type === "TemplateLiteral"
            ) {
              var quasis = comment.enclosingNode.quasis;
              var commentIndex = findExpressionIndexForComment(
                quasis,
                comment,
                options
              );

              if (
                precedingNode &&
                findExpressionIndexForComment(
                  quasis,
                  precedingNode,
                  options
                ) !== commentIndex
              ) {
                precedingNode = null;
              }

              if (
                followingNode &&
                findExpressionIndexForComment(
                  quasis,
                  followingNode,
                  options
                ) !== commentIndex
              ) {
                followingNode = null;
              }
            }

            if (precedingNode) {
              comment.precedingNode = precedingNode;
            }

            if (followingNode) {
              comment.followingNode = followingNode;
            }
          }

          function attach(comments, ast, text, options) {
            if (!Array.isArray(comments)) {
              return;
            }

            var tiesToBreak = [];
            var locStart = options.locStart,
              locEnd = options.locEnd;
            comments.forEach(function (comment, i) {
              if (
                options.parser === "json" ||
                options.parser === "json5" ||
                options.parser === "__js_expression" ||
                options.parser === "__vue_expression"
              ) {
                if (locStart(comment) - locStart(ast) <= 0) {
                  addLeadingComment(ast, comment);
                  return;
                }

                if (locEnd(comment) - locEnd(ast) >= 0) {
                  addTrailingComment(ast, comment);
                  return;
                }
              }

              decorateComment(ast, comment, options);
              var precedingNode = comment.precedingNode,
                enclosingNode = comment.enclosingNode,
                followingNode = comment.followingNode;
              var pluginHandleOwnLineComment =
                options.printer.handleComments &&
                options.printer.handleComments.ownLine
                  ? options.printer.handleComments.ownLine
                  : function () {
                      return false;
                    };
              var pluginHandleEndOfLineComment =
                options.printer.handleComments &&
                options.printer.handleComments.endOfLine
                  ? options.printer.handleComments.endOfLine
                  : function () {
                      return false;
                    };
              var pluginHandleRemainingComment =
                options.printer.handleComments &&
                options.printer.handleComments.remaining
                  ? options.printer.handleComments.remaining
                  : function () {
                      return false;
                    };
              var isLastComment = comments.length - 1 === i;

              if (
                hasNewline(text, locStart(comment), {
                  backwards: true,
                })
              ) {
                // If a comment exists on its own line, prefer a leading comment.
                // We also need to check if it's the first line of the file.
                if (
                  pluginHandleOwnLineComment(
                    comment,
                    text,
                    options,
                    ast,
                    isLastComment
                  )
                ) {
                  // We're good
                } else if (followingNode) {
                  // Always a leading comment.
                  addLeadingComment(followingNode, comment);
                } else if (precedingNode) {
                  addTrailingComment(precedingNode, comment);
                } else if (enclosingNode) {
                  addDanglingComment(enclosingNode, comment);
                } else {
                  // There are no nodes, let's attach it to the root of the ast

                  /* istanbul ignore next */
                  addDanglingComment(ast, comment);
                }
              } else if (hasNewline(text, locEnd(comment))) {
                if (
                  pluginHandleEndOfLineComment(
                    comment,
                    text,
                    options,
                    ast,
                    isLastComment
                  )
                ) {
                  // We're good
                } else if (precedingNode) {
                  // There is content before this comment on the same line, but
                  // none after it, so prefer a trailing comment of the previous node.
                  addTrailingComment(precedingNode, comment);
                } else if (followingNode) {
                  addLeadingComment(followingNode, comment);
                } else if (enclosingNode) {
                  addDanglingComment(enclosingNode, comment);
                } else {
                  // There are no nodes, let's attach it to the root of the ast

                  /* istanbul ignore next */
                  addDanglingComment(ast, comment);
                }
              } else {
                if (
                  pluginHandleRemainingComment(
                    comment,
                    text,
                    options,
                    ast,
                    isLastComment
                  )
                ) {
                  // We're good
                } else if (precedingNode && followingNode) {
                  // Otherwise, text exists both before and after the comment on
                  // the same line. If there is both a preceding and following
                  // node, use a tie-breaking algorithm to determine if it should
                  // be attached to the next or previous node. In the last case,
                  // simply attach the right node;
                  var tieCount = tiesToBreak.length;

                  if (tieCount > 0) {
                    var lastTie = tiesToBreak[tieCount - 1];

                    if (lastTie.followingNode !== comment.followingNode) {
                      breakTies(tiesToBreak, text, options);
                    }
                  }

                  tiesToBreak.push(comment);
                } else if (precedingNode) {
                  addTrailingComment(precedingNode, comment);
                } else if (followingNode) {
                  addLeadingComment(followingNode, comment);
                } else if (enclosingNode) {
                  addDanglingComment(enclosingNode, comment);
                } else {
                  // There are no nodes, let's attach it to the root of the ast

                  /* istanbul ignore next */
                  addDanglingComment(ast, comment);
                }
              }
            });
            breakTies(tiesToBreak, text, options);
            comments.forEach(function (comment) {
              // These node references were useful for breaking ties, but we
              // don't need them anymore, and they create cycles in the AST that
              // may lead to infinite recursion if we don't delete them here.
              delete comment.precedingNode;
              delete comment.enclosingNode;
              delete comment.followingNode;
            });
          }

          function breakTies(tiesToBreak, text, options) {
            var tieCount = tiesToBreak.length;

            if (tieCount === 0) {
              return;
            }

            var _tiesToBreak$ = tiesToBreak[0],
              precedingNode = _tiesToBreak$.precedingNode,
              followingNode = _tiesToBreak$.followingNode;
            var gapEndPos = options.locStart(followingNode); // Iterate backwards through tiesToBreak, examining the gaps
            // between the tied comments. In order to qualify as leading, a
            // comment must be separated from followingNode by an unbroken series of
            // gaps (or other comments). Gaps should only contain whitespace or open
            // parentheses.

            var indexOfFirstLeadingComment;

            for (
              indexOfFirstLeadingComment = tieCount;
              indexOfFirstLeadingComment > 0;
              --indexOfFirstLeadingComment
            ) {
              var comment = tiesToBreak[indexOfFirstLeadingComment - 1];
              assert$3.strictEqual(comment.precedingNode, precedingNode);
              assert$3.strictEqual(comment.followingNode, followingNode);
              var gap = text.slice(options.locEnd(comment), gapEndPos).trim();

              if (gap === "" || /^\(+$/.test(gap)) {
                gapEndPos = options.locStart(comment);
              } else {
                // The gap string contained something other than whitespace or open
                // parentheses.
                break;
              }
            }

            tiesToBreak.forEach(function (comment, i) {
              if (i < indexOfFirstLeadingComment) {
                addTrailingComment(precedingNode, comment);
              } else {
                addLeadingComment(followingNode, comment);
              }
            });
            tiesToBreak.length = 0;
          }

          function printComment(commentPath, options) {
            var comment = commentPath.getValue();
            comment.printed = true;
            return options.printer.printComment(commentPath, options);
          }

          function findExpressionIndexForComment(quasis, comment, options) {
            var startPos = options.locStart(comment) - 1;

            for (var i = 1; i < quasis.length; ++i) {
              if (startPos < getQuasiRange(quasis[i]).start) {
                return i - 1;
              }
            } // We haven't found it, it probably means that some of the locations are off.
            // Let's just return the first one.

            /* istanbul ignore next */

            return 0;
          }

          function getQuasiRange(expr) {
            if (expr.start !== undefined) {
              // Babel
              return {
                start: expr.start,
                end: expr.end,
              };
            } // Flow

            return {
              start: expr.range[0],
              end: expr.range[1],
            };
          }

          function printLeadingComment(commentPath, print, options) {
            var comment = commentPath.getValue();
            var contents = printComment(commentPath, options);

            if (!contents) {
              return "";
            }

            var isBlock =
              options.printer.isBlockComment &&
              options.printer.isBlockComment(comment); // Leading block comments should see if they need to stay on the
            // same line or not.

            if (isBlock) {
              return concat([
                contents,
                hasNewline(options.originalText, options.locEnd(comment))
                  ? hardline
                  : " ",
              ]);
            }

            return concat([contents, hardline]);
          }

          function printTrailingComment(commentPath, print, options) {
            var comment = commentPath.getValue();
            var contents = printComment(commentPath, options);

            if (!contents) {
              return "";
            }

            var isBlock =
              options.printer.isBlockComment &&
              options.printer.isBlockComment(comment); // We don't want the line to break
            // when the parentParentNode is a ClassDeclaration/-Expression
            // And the parentNode is in the superClass property

            var parentNode = commentPath.getNode(1);
            var parentParentNode = commentPath.getNode(2);
            var isParentSuperClass =
              parentParentNode &&
              (parentParentNode.type === "ClassDeclaration" ||
                parentParentNode.type === "ClassExpression") &&
              parentParentNode.superClass === parentNode;

            if (
              hasNewline(options.originalText, options.locStart(comment), {
                backwards: true,
              })
            ) {
              // This allows comments at the end of nested structures:
              // {
              //   x: 1,
              //   y: 2
              //   // A comment
              // }
              // Those kinds of comments are almost always leading comments, but
              // here it doesn't go "outside" the block and turns it into a
              // trailing comment for `2`. We can simulate the above by checking
              // if this a comment on its own line; normal trailing comments are
              // always at the end of another expression.
              var isLineBeforeEmpty = isPreviousLineEmpty(
                options.originalText,
                comment,
                options.locStart
              );
              return lineSuffix(
                concat([hardline, isLineBeforeEmpty ? hardline : "", contents])
              );
            } else if (isBlock || isParentSuperClass) {
              // Trailing block comments never need a newline
              return concat([" ", contents]);
            }

            return concat([
              lineSuffix(concat([" ", contents])),
              !isBlock ? breakParent : "",
            ]);
          }

          function printDanglingComments(path, options, sameIndent, filter) {
            var parts = [];
            var node = path.getValue();

            if (!node || !node.comments) {
              return "";
            }

            path.each(function (commentPath) {
              var comment = commentPath.getValue();

              if (
                comment &&
                !comment.leading &&
                !comment.trailing &&
                (!filter || filter(comment))
              ) {
                parts.push(printComment(commentPath, options));
              }
            }, "comments");

            if (parts.length === 0) {
              return "";
            }

            if (sameIndent) {
              return join(hardline, parts);
            }

            return indent(concat([hardline, join(hardline, parts)]));
          }

          function prependCursorPlaceholder(path, options, printed) {
            if (path.getNode() === options.cursorNode && path.getValue()) {
              return concat([cursor, printed, cursor]);
            }

            return printed;
          }

          function printComments(path, print, options, needsSemi) {
            var value = path.getValue();
            var printed = print(path);
            var comments = value && value.comments;

            if (!comments || comments.length === 0) {
              return prependCursorPlaceholder(path, options, printed);
            }

            var leadingParts = [];
            var trailingParts = [needsSemi ? ";" : "", printed];
            path.each(function (commentPath) {
              var comment = commentPath.getValue();
              var leading = comment.leading,
                trailing = comment.trailing;

              if (leading) {
                var contents = printLeadingComment(commentPath, print, options);

                if (!contents) {
                  return;
                }

                leadingParts.push(contents);
                var text = options.originalText;

                if (
                  hasNewline(text, skipNewline(text, options.locEnd(comment)))
                ) {
                  leadingParts.push(hardline);
                }
              } else if (trailing) {
                trailingParts.push(
                  printTrailingComment(commentPath, print, options)
                );
              }
            }, "comments");
            return prependCursorPlaceholder(
              path,
              options,
              concat(leadingParts.concat(trailingParts))
            );
          }

          var comments = {
            attach: attach,
            printComments: printComments,
            printDanglingComments: printDanglingComments,
            getSortedChildNodes: getSortedChildNodes,
          };

          function FastPath(value) {
            assert$3.ok(this instanceof FastPath);
            this.stack = [value];
          } // The name of the current property is always the penultimate element of
          // this.stack, and always a String.

          FastPath.prototype.getName = function getName() {
            var s = this.stack;
            var len = s.length;

            if (len > 1) {
              return s[len - 2];
            } // Since the name is always a string, null is a safe sentinel value to
            // return if we do not know the name of the (root) value.

            /* istanbul ignore next */

            return null;
          }; // The value of the current property is always the final element of
          // this.stack.

          FastPath.prototype.getValue = function getValue() {
            var s = this.stack;
            return s[s.length - 1];
          };

          function getNodeHelper(path, count) {
            var stackIndex = getNodeStackIndexHelper(path.stack, count);
            return stackIndex === -1 ? null : path.stack[stackIndex];
          }

          function getNodeStackIndexHelper(stack, count) {
            for (var i = stack.length - 1; i >= 0; i -= 2) {
              var value = stack[i];

              if (value && !Array.isArray(value) && --count < 0) {
                return i;
              }
            }

            return -1;
          }

          FastPath.prototype.getNode = function getNode(count) {
            return getNodeHelper(this, ~~count);
          };

          FastPath.prototype.getParentNode = function getParentNode(count) {
            return getNodeHelper(this, ~~count + 1);
          }; // Temporarily push properties named by string arguments given after the
          // callback function onto this.stack, then call the callback with a
          // reference to this (modified) FastPath object. Note that the stack will
          // be restored to its original state after the callback is finished, so it
          // is probably a mistake to retain a reference to the path.

          FastPath.prototype.call = function call(
            callback
            /*, name1, name2, ... */
          ) {
            var s = this.stack;
            var origLen = s.length;
            var value = s[origLen - 1];
            var argc = arguments.length;

            for (var i = 1; i < argc; ++i) {
              var name = arguments[i];
              value = value[name];
              s.push(name, value);
            }

            var result = callback(this);
            s.length = origLen;
            return result;
          };

          FastPath.prototype.callParent = function callParent(callback, count) {
            var stackIndex = getNodeStackIndexHelper(this.stack, ~~count + 1);
            var parentValues = this.stack.splice(stackIndex + 1);
            var result = callback(this);
            Array.prototype.push.apply(this.stack, parentValues);
            return result;
          }; // Similar to FastPath.prototype.call, except that the value obtained by
          // accessing this.getValue()[name1][name2]... should be array-like. The
          // callback will be called with a reference to this path object for each
          // element of the array.

          FastPath.prototype.each = function each(
            callback
            /*, name1, name2, ... */
          ) {
            var s = this.stack;
            var origLen = s.length;
            var value = s[origLen - 1];
            var argc = arguments.length;

            for (var i = 1; i < argc; ++i) {
              var name = arguments[i];
              value = value[name];
              s.push(name, value);
            }

            for (var _i = 0; _i < value.length; ++_i) {
              if (_i in value) {
                s.push(_i, value[_i]); // If the callback needs to know the value of i, call
                // path.getName(), assuming path is the parameter name.

                callback(this);
                s.length -= 2;
              }
            }

            s.length = origLen;
          }; // Similar to FastPath.prototype.each, except that the results of the
          // callback function invocations are stored in an array and returned at
          // the end of the iteration.

          FastPath.prototype.map = function map(
            callback
            /*, name1, name2, ... */
          ) {
            var s = this.stack;
            var origLen = s.length;
            var value = s[origLen - 1];
            var argc = arguments.length;

            for (var i = 1; i < argc; ++i) {
              var name = arguments[i];
              value = value[name];
              s.push(name, value);
            }

            var result = new Array(value.length);

            for (var _i2 = 0; _i2 < value.length; ++_i2) {
              if (_i2 in value) {
                s.push(_i2, value[_i2]);
                result[_i2] = callback(this, _i2);
                s.length -= 2;
              }
            }

            s.length = origLen;
            return result;
          };

          var fastPath = FastPath;

          var normalize$3 = options.normalize;

          function printSubtree(path, print, options$$1, printAstToDoc) {
            if (options$$1.printer.embed) {
              return options$$1.printer.embed(
                path,
                print,
                function (text, partialNextOptions) {
                  return textToDoc(
                    text,
                    partialNextOptions,
                    options$$1,
                    printAstToDoc
                  );
                },
                options$$1
              );
            }
          }

          function textToDoc(
            text,
            partialNextOptions,
            parentOptions,
            printAstToDoc
          ) {
            var nextOptions = normalize$3(
              Object.assign({}, parentOptions, partialNextOptions, {
                parentParser: parentOptions.parser,
                embeddedInHtml: !!(
                  parentOptions.embeddedInHtml ||
                  parentOptions.parser === "html" ||
                  parentOptions.parser === "vue" ||
                  parentOptions.parser === "angular" ||
                  parentOptions.parser === "lwc"
                ),
                originalText: text,
              }),
              {
                passThrough: true,
              }
            );
            var result = parser.parse(text, nextOptions);
            var ast = result.ast;
            text = result.text;
            var astComments = ast.comments;
            delete ast.comments;
            comments.attach(astComments, ast, text, nextOptions);
            return printAstToDoc(ast, nextOptions);
          }

          var multiparser = {
            printSubtree: printSubtree,
          };

          var doc$2 = doc;
          var docBuilders$2 = doc$2.builders;
          var concat$3 = docBuilders$2.concat;
          var hardline$2 = docBuilders$2.hardline;
          var addAlignmentToDoc$1 = docBuilders$2.addAlignmentToDoc;
          var docUtils$2 = doc$2.utils;
          /**
           * Takes an abstract syntax tree (AST) and recursively converts it to a
           * document (series of printing primitives).
           *
           * This is done by descending down the AST recursively. The recursion
           * involves two functions that call each other:
           *
           * 1. printGenerically(), which is defined as an inner function here.
           *    It basically takes care of node caching.
           * 2. callPluginPrintFunction(), which checks for some options, and
           *    ultimately calls the print() function provided by the plugin.
           *
           * The plugin function will call printGenerically() again for child nodes
           * of the current node, which will do its housekeeping, then call the
           * plugin function again, and so on.
           *
           * All the while, these functions pass a "path" variable around, which
           * is a stack-like data structure (FastPath) that maintains the current
           * state of the recursion. It is called "path", because it represents
           * the path to the current node through the Abstract Syntax Tree.
           */

          function printAstToDoc(ast, options) {
            var alignmentSize =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : 0;
            var printer = options.printer;

            if (printer.preprocess) {
              ast = printer.preprocess(ast, options);
            }

            var cache = new Map();

            function printGenerically(path, args) {
              var node = path.getValue();
              var shouldCache =
                node && _typeof(node) === "object" && args === undefined;

              if (shouldCache && cache.has(node)) {
                return cache.get(node);
              } // We let JSXElement print its comments itself because it adds () around
              // UnionTypeAnnotation has to align the child without the comments

              var res;

              if (
                printer.willPrintOwnComments &&
                printer.willPrintOwnComments(path, options)
              ) {
                res = callPluginPrintFunction(
                  path,
                  options,
                  printGenerically,
                  args
                );
              } else {
                // printComments will call the plugin print function and check for
                // comments to print
                res = comments.printComments(
                  path,
                  function (p) {
                    return callPluginPrintFunction(
                      p,
                      options,
                      printGenerically,
                      args
                    );
                  },
                  options,
                  args && args.needsSemi
                );
              }

              if (shouldCache) {
                cache.set(node, res);
              }

              return res;
            }

            var doc$$2 = printGenerically(new fastPath(ast));

            if (alignmentSize > 0) {
              // Add a hardline to make the indents take effect
              // It should be removed in index.js format()
              doc$$2 = addAlignmentToDoc$1(
                concat$3([hardline$2, doc$$2]),
                alignmentSize,
                options.tabWidth
              );
            }

            docUtils$2.propagateBreaks(doc$$2);
            return doc$$2;
          }

          function callPluginPrintFunction(path, options, printPath, args) {
            assert$3.ok(path instanceof fastPath);
            var node = path.getValue();
            var printer = options.printer; // Escape hatch

            if (printer.hasPrettierIgnore && printer.hasPrettierIgnore(path)) {
              return options.originalText.slice(
                options.locStart(node),
                options.locEnd(node)
              );
            }

            if (node) {
              try {
                // Potentially switch to a different parser
                var sub = multiparser.printSubtree(
                  path,
                  printPath,
                  options,
                  printAstToDoc
                );

                if (sub) {
                  return sub;
                }
              } catch (error) {
                /* istanbul ignore if */
                if (commonjsGlobal.PRETTIER_DEBUG) {
                  throw error;
                } // Continue with current parser
              }
            }

            return printer.print(path, options, printPath, args);
          }

          var astToDoc = printAstToDoc;

          function findSiblingAncestors(
            startNodeAndParents,
            endNodeAndParents,
            opts
          ) {
            var resultStartNode = startNodeAndParents.node;
            var resultEndNode = endNodeAndParents.node;

            if (resultStartNode === resultEndNode) {
              return {
                startNode: resultStartNode,
                endNode: resultEndNode,
              };
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator =
                    endNodeAndParents.parentNodes[Symbol.iterator](),
                  _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var endParent = _step.value;

                if (
                  endParent.type !== "Program" &&
                  endParent.type !== "File" &&
                  opts.locStart(endParent) >=
                    opts.locStart(startNodeAndParents.node)
                ) {
                  resultEndNode = endParent;
                } else {
                  break;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (
                var _iterator2 =
                    startNodeAndParents.parentNodes[Symbol.iterator](),
                  _step2;
                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                  .done);
                _iteratorNormalCompletion2 = true
              ) {
                var startParent = _step2.value;

                if (
                  startParent.type !== "Program" &&
                  startParent.type !== "File" &&
                  opts.locEnd(startParent) <=
                    opts.locEnd(endNodeAndParents.node)
                ) {
                  resultStartNode = startParent;
                } else {
                  break;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return {
              startNode: resultStartNode,
              endNode: resultEndNode,
            };
          }

          function findNodeAtOffset(
            node,
            offset,
            options,
            predicate,
            parentNodes
          ) {
            predicate =
              predicate ||
              function () {
                return true;
              };

            parentNodes = parentNodes || [];
            var start = options.locStart(node, options.locStart);
            var end = options.locEnd(node, options.locEnd);

            if (start <= offset && offset <= end) {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (
                  var _iterator3 = comments
                      .getSortedChildNodes(node, options)
                      [Symbol.iterator](),
                    _step3;
                  !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                    .done);
                  _iteratorNormalCompletion3 = true
                ) {
                  var childNode = _step3.value;
                  var childResult = findNodeAtOffset(
                    childNode,
                    offset,
                    options,
                    predicate,
                    [node].concat(parentNodes)
                  );

                  if (childResult) {
                    return childResult;
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (
                    !_iteratorNormalCompletion3 &&
                    _iterator3.return != null
                  ) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              if (predicate(node)) {
                return {
                  node: node,
                  parentNodes: parentNodes,
                };
              }
            }
          } // See https://www.ecma-international.org/ecma-262/5.1/#sec-A.5

          function isSourceElement(opts, node) {
            if (node == null) {
              return false;
            } // JS and JS like to avoid repetitions

            var jsSourceElements = [
              "FunctionDeclaration",
              "BlockStatement",
              "BreakStatement",
              "ContinueStatement",
              "DebuggerStatement",
              "DoWhileStatement",
              "EmptyStatement",
              "ExpressionStatement",
              "ForInStatement",
              "ForStatement",
              "IfStatement",
              "LabeledStatement",
              "ReturnStatement",
              "SwitchStatement",
              "ThrowStatement",
              "TryStatement",
              "VariableDeclaration",
              "WhileStatement",
              "WithStatement",
              "ClassDeclaration", // ES 2015
              "ImportDeclaration", // Module
              "ExportDefaultDeclaration", // Module
              "ExportNamedDeclaration", // Module
              "ExportAllDeclaration", // Module
              "TypeAlias", // Flow
              "InterfaceDeclaration", // Flow, TypeScript
              "TypeAliasDeclaration", // TypeScript
              "ExportAssignment", // TypeScript
              "ExportDeclaration", // TypeScript
            ];
            var jsonSourceElements = [
              "ObjectExpression",
              "ArrayExpression",
              "StringLiteral",
              "NumericLiteral",
              "BooleanLiteral",
              "NullLiteral",
            ];
            var graphqlSourceElements = [
              "OperationDefinition",
              "FragmentDefinition",
              "VariableDefinition",
              "TypeExtensionDefinition",
              "ObjectTypeDefinition",
              "FieldDefinition",
              "DirectiveDefinition",
              "EnumTypeDefinition",
              "EnumValueDefinition",
              "InputValueDefinition",
              "InputObjectTypeDefinition",
              "SchemaDefinition",
              "OperationTypeDefinition",
              "InterfaceTypeDefinition",
              "UnionTypeDefinition",
              "ScalarTypeDefinition",
            ];

            switch (opts.parser) {
              case "flow":
              case "babel":
              case "typescript":
                return jsSourceElements.indexOf(node.type) > -1;

              case "json":
                return jsonSourceElements.indexOf(node.type) > -1;

              case "graphql":
                return graphqlSourceElements.indexOf(node.kind) > -1;

              case "vue":
                return node.tag !== "root";
            }

            return false;
          }

          function calculateRange(text, opts, ast) {
            // Contract the range so that it has non-whitespace characters at its endpoints.
            // This ensures we can format a range that doesn't end on a node.
            var rangeStringOrig = text.slice(opts.rangeStart, opts.rangeEnd);
            var startNonWhitespace = Math.max(
              opts.rangeStart + rangeStringOrig.search(/\S/),
              opts.rangeStart
            );
            var endNonWhitespace;

            for (
              endNonWhitespace = opts.rangeEnd;
              endNonWhitespace > opts.rangeStart;
              --endNonWhitespace
            ) {
              if (text[endNonWhitespace - 1].match(/\S/)) {
                break;
              }
            }

            var startNodeAndParents = findNodeAtOffset(
              ast,
              startNonWhitespace,
              opts,
              function (node) {
                return isSourceElement(opts, node);
              }
            );
            var endNodeAndParents = findNodeAtOffset(
              ast,
              endNonWhitespace,
              opts,
              function (node) {
                return isSourceElement(opts, node);
              }
            );

            if (!startNodeAndParents || !endNodeAndParents) {
              return {
                rangeStart: 0,
                rangeEnd: 0,
              };
            }

            var siblingAncestors = findSiblingAncestors(
              startNodeAndParents,
              endNodeAndParents,
              opts
            );
            var startNode = siblingAncestors.startNode,
              endNode = siblingAncestors.endNode;
            var rangeStart = Math.min(
              opts.locStart(startNode, opts.locStart),
              opts.locStart(endNode, opts.locStart)
            );
            var rangeEnd = Math.max(
              opts.locEnd(startNode, opts.locEnd),
              opts.locEnd(endNode, opts.locEnd)
            );
            return {
              rangeStart: rangeStart,
              rangeEnd: rangeEnd,
            };
          }

          var rangeUtil = {
            calculateRange: calculateRange,
            findNodeAtOffset: findNodeAtOffset,
          };

          var normalizeOptions = options.normalize;
          var guessEndOfLine = endOfLine.guessEndOfLine;
          var convertEndOfLineToChars = endOfLine.convertEndOfLineToChars;
          var mapDoc = doc.utils.mapDoc;
          var _printDocToString = doc.printer.printDocToString;
          var printDocToDebug = doc.debug.printDocToDebug;
          var UTF8BOM = 0xfeff;
          var CURSOR = Symbol("cursor");
          var PLACEHOLDERS = {
            cursorOffset: "<<<PRETTIER_CURSOR>>>",
            rangeStart: "<<<PRETTIER_RANGE_START>>>",
            rangeEnd: "<<<PRETTIER_RANGE_END>>>",
          };

          function ensureAllCommentsPrinted(astComments) {
            if (!astComments) {
              return;
            }

            for (var i = 0; i < astComments.length; ++i) {
              if (astComments[i].value.trim() === "prettier-ignore") {
                // If there's a prettier-ignore, we're not printing that sub-tree so we
                // don't know if the comments was printed or not.
                return;
              }
            }

            astComments.forEach(function (comment) {
              if (!comment.printed) {
                throw new Error(
                  'Comment "' +
                    comment.value.trim() +
                    '" was not printed. Please report this error!'
                );
              }

              delete comment.printed;
            });
          }

          function attachComments(text, ast, opts) {
            var astComments = ast.comments;

            if (astComments) {
              delete ast.comments;
              comments.attach(astComments, ast, text, opts);
            }

            ast.tokens = [];
            opts.originalText =
              opts.parser === "yaml" ? text : text.trimRight();
            return astComments;
          }

          function coreFormat(text, opts, addAlignmentSize) {
            if (!text || !text.trim().length) {
              return {
                formatted: "",
                cursorOffset: 0,
              };
            }

            addAlignmentSize = addAlignmentSize || 0;
            var parsed = parser.parse(text, opts);
            var ast = parsed.ast;
            text = parsed.text;

            if (opts.cursorOffset >= 0) {
              var nodeResult = rangeUtil.findNodeAtOffset(
                ast,
                opts.cursorOffset,
                opts
              );

              if (nodeResult && nodeResult.node) {
                opts.cursorNode = nodeResult.node;
              }
            }

            var astComments = attachComments(text, ast, opts);
            var doc$$1 = astToDoc(ast, opts, addAlignmentSize);
            var eol = convertEndOfLineToChars(opts.endOfLine);

            var result = _printDocToString(
              opts.endOfLine === "lf"
                ? doc$$1
                : mapDoc(doc$$1, function (currentDoc) {
                    return typeof currentDoc === "string" &&
                      currentDoc.indexOf("\n") !== -1
                      ? currentDoc.replace(/\n/g, eol)
                      : currentDoc;
                  }),
              opts
            );

            ensureAllCommentsPrinted(astComments); // Remove extra leading indentation as well as the added indentation after last newline

            if (addAlignmentSize > 0) {
              var trimmed = result.formatted.trim();

              if (result.cursorNodeStart !== undefined) {
                result.cursorNodeStart -= result.formatted.indexOf(trimmed);
              }

              result.formatted =
                trimmed + convertEndOfLineToChars(opts.endOfLine);
            }

            if (opts.cursorOffset >= 0) {
              var oldCursorNodeStart;
              var oldCursorNodeText;
              var cursorOffsetRelativeToOldCursorNode;
              var newCursorNodeStart;
              var newCursorNodeText;

              if (opts.cursorNode && result.cursorNodeText) {
                oldCursorNodeStart = opts.locStart(opts.cursorNode);
                oldCursorNodeText = text.slice(
                  oldCursorNodeStart,
                  opts.locEnd(opts.cursorNode)
                );
                cursorOffsetRelativeToOldCursorNode =
                  opts.cursorOffset - oldCursorNodeStart;
                newCursorNodeStart = result.cursorNodeStart;
                newCursorNodeText = result.cursorNodeText;
              } else {
                oldCursorNodeStart = 0;
                oldCursorNodeText = text;
                cursorOffsetRelativeToOldCursorNode = opts.cursorOffset;
                newCursorNodeStart = 0;
                newCursorNodeText = result.formatted;
              }

              if (oldCursorNodeText === newCursorNodeText) {
                return {
                  formatted: result.formatted,
                  cursorOffset:
                    newCursorNodeStart + cursorOffsetRelativeToOldCursorNode,
                };
              } // diff old and new cursor node texts, with a special cursor
              // symbol inserted to find out where it moves to

              var oldCursorNodeCharArray = oldCursorNodeText.split("");
              oldCursorNodeCharArray.splice(
                cursorOffsetRelativeToOldCursorNode,
                0,
                CURSOR
              );
              var newCursorNodeCharArray = newCursorNodeText.split("");
              var cursorNodeDiff = lib.diffArrays(
                oldCursorNodeCharArray,
                newCursorNodeCharArray
              );
              var cursorOffset = newCursorNodeStart;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = cursorNodeDiff[Symbol.iterator](), _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var entry = _step.value;

                  if (entry.removed) {
                    if (entry.value.indexOf(CURSOR) > -1) {
                      break;
                    }
                  } else {
                    cursorOffset += entry.count;
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return {
                formatted: result.formatted,
                cursorOffset: cursorOffset,
              };
            }

            return {
              formatted: result.formatted,
            };
          }

          function formatRange(text, opts) {
            var parsed = parser.parse(text, opts);
            var ast = parsed.ast;
            text = parsed.text;
            var range = rangeUtil.calculateRange(text, opts, ast);
            var rangeStart = range.rangeStart;
            var rangeEnd = range.rangeEnd;
            var rangeString = text.slice(rangeStart, rangeEnd); // Try to extend the range backwards to the beginning of the line.
            // This is so we can detect indentation correctly and restore it.
            // Use `Math.min` since `lastIndexOf` returns 0 when `rangeStart` is 0

            var rangeStart2 = Math.min(
              rangeStart,
              text.lastIndexOf("\n", rangeStart) + 1
            );
            var indentString = text.slice(rangeStart2, rangeStart);
            var alignmentSize = util.getAlignmentSize(
              indentString,
              opts.tabWidth
            );
            var rangeResult = coreFormat(
              rangeString,
              Object.assign({}, opts, {
                rangeStart: 0,
                rangeEnd: Infinity,
                // track the cursor offset only if it's within our range
                cursorOffset:
                  opts.cursorOffset >= rangeStart &&
                  opts.cursorOffset < rangeEnd
                    ? opts.cursorOffset - rangeStart
                    : -1,
              }),
              alignmentSize
            ); // Since the range contracts to avoid trailing whitespace,
            // we need to remove the newline that was inserted by the `format` call.

            var rangeTrimmed = rangeResult.formatted.trimRight();
            var rangeLeft = text.slice(0, rangeStart);
            var rangeRight = text.slice(rangeEnd);
            var cursorOffset = opts.cursorOffset;

            if (opts.cursorOffset >= rangeEnd) {
              // handle the case where the cursor was past the end of the range
              cursorOffset =
                opts.cursorOffset -
                rangeEnd +
                (rangeStart + rangeTrimmed.length);
            } else if (rangeResult.cursorOffset !== undefined) {
              // handle the case where the cursor was in the range
              cursorOffset = rangeResult.cursorOffset + rangeStart;
            } // keep the cursor as it was if it was before the start of the range

            var formatted;

            if (opts.endOfLine === "lf") {
              formatted = rangeLeft + rangeTrimmed + rangeRight;
            } else {
              var eol = convertEndOfLineToChars(opts.endOfLine);

              if (cursorOffset >= 0) {
                var parts = [rangeLeft, rangeTrimmed, rangeRight];
                var partIndex = 0;
                var partOffset = cursorOffset;

                while (partIndex < parts.length) {
                  var part = parts[partIndex];

                  if (partOffset < part.length) {
                    parts[partIndex] =
                      parts[partIndex].slice(0, partOffset) +
                      PLACEHOLDERS.cursorOffset +
                      parts[partIndex].slice(partOffset);
                    break;
                  }

                  partIndex++;
                  partOffset -= part.length;
                }

                var newRangeLeft = parts[0],
                  newRangeTrimmed = parts[1],
                  newRangeRight = parts[2];
                formatted = (
                  newRangeLeft.replace(/\n/g, eol) +
                  newRangeTrimmed +
                  newRangeRight.replace(/\n/g, eol)
                ).replace(PLACEHOLDERS.cursorOffset, function (_, index) {
                  cursorOffset = index;
                  return "";
                });
              } else {
                formatted =
                  rangeLeft.replace(/\n/g, eol) +
                  rangeTrimmed +
                  rangeRight.replace(/\n/g, eol);
              }
            }

            return {
              formatted: formatted,
              cursorOffset: cursorOffset,
            };
          }

          function format(text, opts) {
            var selectedParser = parser.resolveParser(opts);
            var hasPragma =
              !selectedParser.hasPragma || selectedParser.hasPragma(text);

            if (opts.requirePragma && !hasPragma) {
              return {
                formatted: text,
              };
            }

            if (opts.endOfLine === "auto") {
              opts.endOfLine = guessEndOfLine(text);
            }

            var hasCursor = opts.cursorOffset >= 0;
            var hasRangeStart = opts.rangeStart > 0;
            var hasRangeEnd = opts.rangeEnd < text.length; // get rid of CR/CRLF parsing

            if (text.indexOf("\r") !== -1) {
              var offsetKeys = [
                hasCursor && "cursorOffset",
                hasRangeStart && "rangeStart",
                hasRangeEnd && "rangeEnd",
              ]
                .filter(Boolean)
                .sort(function (aKey, bKey) {
                  return opts[aKey] - opts[bKey];
                });

              for (var i = offsetKeys.length - 1; i >= 0; i--) {
                var key = offsetKeys[i];
                text =
                  text.slice(0, opts[key]) +
                  PLACEHOLDERS[key] +
                  text.slice(opts[key]);
              }

              text = text.replace(/\r\n?/g, "\n");

              var _loop = function _loop(_i) {
                var key = offsetKeys[_i];
                text = text.replace(PLACEHOLDERS[key], function (_, index) {
                  opts[key] = index;
                  return "";
                });
              };

              for (var _i = 0; _i < offsetKeys.length; _i++) {
                _loop(_i);
              }
            }

            var hasUnicodeBOM = text.charCodeAt(0) === UTF8BOM;

            if (hasUnicodeBOM) {
              text = text.substring(1);

              if (hasCursor) {
                opts.cursorOffset++;
              }

              if (hasRangeStart) {
                opts.rangeStart++;
              }

              if (hasRangeEnd) {
                opts.rangeEnd++;
              }
            }

            if (!hasCursor) {
              opts.cursorOffset = -1;
            }

            if (opts.rangeStart < 0) {
              opts.rangeStart = 0;
            }

            if (opts.rangeEnd > text.length) {
              opts.rangeEnd = text.length;
            }

            var result =
              hasRangeStart || hasRangeEnd
                ? formatRange(text, opts)
                : coreFormat(
                    opts.insertPragma && opts.printer.insertPragma && !hasPragma
                      ? opts.printer.insertPragma(text)
                      : text,
                    opts
                  );

            if (hasUnicodeBOM) {
              result.formatted =
                String.fromCharCode(UTF8BOM) + result.formatted;

              if (hasCursor) {
                result.cursorOffset++;
              }
            }

            return result;
          }

          var core = {
            formatWithCursor: function formatWithCursor(text, opts) {
              opts = normalizeOptions(opts);
              return format(text, opts);
            },
            parse: function parse(text, opts, massage) {
              opts = normalizeOptions(opts);

              if (text.indexOf("\r") !== -1) {
                text = text.replace(/\r\n?/g, "\n");
              }

              var parsed = parser.parse(text, opts);

              if (massage) {
                parsed.ast = massageAst(parsed.ast, opts);
              }

              return parsed;
            },
            formatAST: function formatAST(ast, opts) {
              opts = normalizeOptions(opts);
              var doc$$1 = astToDoc(ast, opts);
              return _printDocToString(doc$$1, opts);
            },
            // Doesn't handle shebang for now
            formatDoc: function formatDoc(doc$$1, opts) {
              var debug = printDocToDebug(doc$$1);
              opts = normalizeOptions(
                Object.assign({}, opts, {
                  parser: "babel",
                })
              );
              return format(debug, opts).formatted;
            },
            printToDoc: function printToDoc(text, opts) {
              opts = normalizeOptions(opts);
              var parsed = parser.parse(text, opts);
              var ast = parsed.ast;
              text = parsed.text;
              attachComments(text, ast, opts);
              return astToDoc(ast, opts);
            },
            printDocToString: function printDocToString(doc$$1, opts) {
              return _printDocToString(doc$$1, normalizeOptions(opts));
            },
          };

          var index$11 = [
            "a",
            "abbr",
            "acronym",
            "address",
            "applet",
            "area",
            "article",
            "aside",
            "audio",
            "b",
            "base",
            "basefont",
            "bdi",
            "bdo",
            "bgsound",
            "big",
            "blink",
            "blockquote",
            "body",
            "br",
            "button",
            "canvas",
            "caption",
            "center",
            "cite",
            "code",
            "col",
            "colgroup",
            "command",
            "content",
            "data",
            "datalist",
            "dd",
            "del",
            "details",
            "dfn",
            "dialog",
            "dir",
            "div",
            "dl",
            "dt",
            "element",
            "em",
            "embed",
            "fieldset",
            "figcaption",
            "figure",
            "font",
            "footer",
            "form",
            "frame",
            "frameset",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "head",
            "header",
            "hgroup",
            "hr",
            "html",
            "i",
            "iframe",
            "image",
            "img",
            "input",
            "ins",
            "isindex",
            "kbd",
            "keygen",
            "label",
            "legend",
            "li",
            "link",
            "listing",
            "main",
            "map",
            "mark",
            "marquee",
            "math",
            "menu",
            "menuitem",
            "meta",
            "meter",
            "multicol",
            "nav",
            "nextid",
            "nobr",
            "noembed",
            "noframes",
            "noscript",
            "object",
            "ol",
            "optgroup",
            "option",
            "output",
            "p",
            "param",
            "picture",
            "plaintext",
            "pre",
            "progress",
            "q",
            "rb",
            "rbc",
            "rp",
            "rt",
            "rtc",
            "ruby",
            "s",
            "samp",
            "script",
            "section",
            "select",
            "shadow",
            "slot",
            "small",
            "source",
            "spacer",
            "span",
            "strike",
            "strong",
            "style",
            "sub",
            "summary",
            "sup",
            "svg",
            "table",
            "tbody",
            "td",
            "template",
            "textarea",
            "tfoot",
            "th",
            "thead",
            "time",
            "title",
            "tr",
            "track",
            "tt",
            "u",
            "ul",
            "var",
            "video",
            "wbr",
            "xmp",
          ];

          var htmlTagNames = Object.freeze({
            default: index$11,
          });

          var htmlTagNames$1 = (htmlTagNames && index$11) || htmlTagNames;

          function clean(ast, newObj, parent) {
            [
              "raw", // front-matter
              "raws",
              "sourceIndex",
              "source",
              "before",
              "after",
              "trailingComma",
            ].forEach(function (name) {
              delete newObj[name];
            });

            if (ast.type === "yaml") {
              delete newObj.value;
            } // --insert-pragma

            if (
              ast.type === "css-comment" &&
              parent.type === "css-root" &&
              parent.nodes.length !== 0 && // first non-front-matter comment
              (parent.nodes[0] === ast ||
                ((parent.nodes[0].type === "yaml" ||
                  parent.nodes[0].type === "toml") &&
                  parent.nodes[1] === ast))
            ) {
              /**
               * something
               *
               * @format
               */
              delete newObj.text; // standalone pragma

              if (/^\*\s*@(format|prettier)\s*$/.test(ast.text)) {
                return null;
              }
            }

            if (
              ast.type === "media-query" ||
              ast.type === "media-query-list" ||
              ast.type === "media-feature-expression"
            ) {
              delete newObj.value;
            }

            if (ast.type === "css-rule") {
              delete newObj.params;
            }

            if (ast.type === "selector-combinator") {
              newObj.value = newObj.value.replace(/\s+/g, " ");
            }

            if (ast.type === "media-feature") {
              newObj.value = newObj.value.replace(/ /g, "");
            }

            if (
              (ast.type === "value-word" &&
                ((ast.isColor && ast.isHex) ||
                  ["initial", "inherit", "unset", "revert"].indexOf(
                    newObj.value.replace().toLowerCase()
                  ) !== -1)) ||
              ast.type === "media-feature" ||
              ast.type === "selector-root-invalid" ||
              ast.type === "selector-pseudo"
            ) {
              newObj.value = newObj.value.toLowerCase();
            }

            if (ast.type === "css-decl") {
              newObj.prop = newObj.prop.toLowerCase();
            }

            if (ast.type === "css-atrule" || ast.type === "css-import") {
              newObj.name = newObj.name.toLowerCase();
            }

            if (ast.type === "value-number") {
              newObj.unit = newObj.unit.toLowerCase();
            }

            if (
              (ast.type === "media-feature" ||
                ast.type === "media-keyword" ||
                ast.type === "media-type" ||
                ast.type === "media-unknown" ||
                ast.type === "media-url" ||
                ast.type === "media-value" ||
                ast.type === "selector-attribute" ||
                ast.type === "selector-string" ||
                ast.type === "selector-class" ||
                ast.type === "selector-combinator" ||
                ast.type === "value-string") &&
              newObj.value
            ) {
              newObj.value = cleanCSSStrings(newObj.value);
            }

            if (ast.type === "selector-attribute") {
              newObj.attribute = newObj.attribute.trim();

              if (newObj.namespace) {
                if (typeof newObj.namespace === "string") {
                  newObj.namespace = newObj.namespace.trim();

                  if (newObj.namespace.length === 0) {
                    newObj.namespace = true;
                  }
                }
              }

              if (newObj.value) {
                newObj.value = newObj.value.trim().replace(/^['"]|['"]$/g, "");
                delete newObj.quoted;
              }
            }

            if (
              (ast.type === "media-value" ||
                ast.type === "media-type" ||
                ast.type === "value-number" ||
                ast.type === "selector-root-invalid" ||
                ast.type === "selector-class" ||
                ast.type === "selector-combinator" ||
                ast.type === "selector-tag") &&
              newObj.value
            ) {
              newObj.value = newObj.value.replace(
                /([\d.eE+-]+)([a-zA-Z]*)/g,
                function (match, numStr, unit) {
                  var num = Number(numStr);
                  return isNaN(num) ? match : num + unit.toLowerCase();
                }
              );
            }

            if (ast.type === "selector-tag") {
              var lowercasedValue = ast.value.toLowerCase();

              if (htmlTagNames$1.indexOf(lowercasedValue) !== -1) {
                newObj.value = lowercasedValue;
              }

              if (["from", "to"].indexOf(lowercasedValue) !== -1) {
                newObj.value = lowercasedValue;
              }
            } // Workaround when `postcss-values-parser` parse `not`, `and` or `or` keywords as `value-func`

            if (
              ast.type === "css-atrule" &&
              ast.name.toLowerCase() === "supports"
            ) {
              delete newObj.value;
            } // Workaround for SCSS nested properties

            if (ast.type === "selector-unknown") {
              delete newObj.value;
            }
          }

          function cleanCSSStrings(value) {
            return value.replace(/'/g, '"').replace(/\\([^a-fA-F\d])/g, "$1");
          }

          var clean_1 = clean;

          var _require$$0$builders$1 = doc.builders;
          var hardline$4 = _require$$0$builders$1.hardline;
          var literalline$1 = _require$$0$builders$1.literalline;
          var concat$5 = _require$$0$builders$1.concat;
          var markAsRoot$1 = _require$$0$builders$1.markAsRoot;
          var mapDoc$3 = doc.utils.mapDoc;

          function embed(
            path,
            print,
            textToDoc
            /*, options */
          ) {
            var node = path.getValue();

            if (node.type === "yaml") {
              return markAsRoot$1(
                concat$5([
                  "---",
                  hardline$4,
                  node.value.trim()
                    ? replaceNewlinesWithLiterallines(
                        textToDoc(node.value, {
                          parser: "yaml",
                        })
                      )
                    : "",
                  "---",
                  hardline$4,
                ])
              );
            }

            return null;

            function replaceNewlinesWithLiterallines(doc$$2) {
              return mapDoc$3(doc$$2, function (currentDoc) {
                return typeof currentDoc === "string" &&
                  currentDoc.includes("\n")
                  ? concat$5(
                      currentDoc.split(/(\n)/g).map(function (v, i) {
                        return i % 2 === 0 ? v : literalline$1;
                      })
                    )
                  : currentDoc;
              });
            }
          }

          var embed_1 = embed;

          var detectNewline = createCommonjsModule(function (module) {
            "use strict";

            module.exports = function (str) {
              if (typeof str !== "string") {
                throw new TypeError("Expected a string");
              }

              var newlines = str.match(/(?:\r?\n)/g) || [];

              if (newlines.length === 0) {
                return null;
              }

              var crlf = newlines.filter(function (el) {
                return el === "\r\n";
              }).length;
              var lf = newlines.length - crlf;
              return crlf > lf ? "\r\n" : "\n";
            };

            module.exports.graceful = function (str) {
              return module.exports(str) || "\n";
            };
          });

          var build$1 = createCommonjsModule(function (module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
              value: true,
            });
            exports.extract = extract;
            exports.strip = strip;
            exports.parse = parse;
            exports.parseWithComments = parseWithComments;
            exports.print = print;

            var _detectNewline;

            function _load_detectNewline() {
              return (_detectNewline = _interopRequireDefault(detectNewline));
            }

            var _os;

            function _load_os() {
              return (_os = require$$1$1);
            }

            function _interopRequireDefault(obj) {
              return obj && obj.__esModule
                ? obj
                : {
                    default: obj,
                  };
            }
            /**
             * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             *
             *
             */

            var commentEndRe = /\*\/$/;
            var commentStartRe = /^\/\*\*/;
            var docblockRe = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/;
            var lineCommentRe = /(^|\s+)\/\/([^\r\n]*)/g;
            var ltrimNewlineRe = /^(\r?\n)+/;
            var multilineRe =
              /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g;
            var propertyRe = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g;
            var stringStartRe = /(\r?\n|^) *\* ?/g;

            function extract(contents) {
              var match = contents.match(docblockRe);
              return match ? match[0].trimLeft() : "";
            }

            function strip(contents) {
              var match = contents.match(docblockRe);
              return match && match[0]
                ? contents.substring(match[0].length)
                : contents;
            }

            function parse(docblock) {
              return parseWithComments(docblock).pragmas;
            }

            function parseWithComments(docblock) {
              var line =
                (0, (_detectNewline || _load_detectNewline()).default)(
                  docblock
                ) || (_os || _load_os()).EOL;

              docblock = docblock
                .replace(commentStartRe, "")
                .replace(commentEndRe, "")
                .replace(stringStartRe, "$1"); // Normalize multi-line directives

              var prev = "";

              while (prev !== docblock) {
                prev = docblock;
                docblock = docblock.replace(
                  multilineRe,
                  "".concat(line, "$1 $2").concat(line)
                );
              }

              docblock = docblock.replace(ltrimNewlineRe, "").trimRight();
              var result = Object.create(null);
              var comments = docblock
                .replace(propertyRe, "")
                .replace(ltrimNewlineRe, "")
                .trimRight();
              var match;

              while ((match = propertyRe.exec(docblock))) {
                // strip linecomments from pragmas
                var nextPragma = match[2].replace(lineCommentRe, "");

                if (
                  typeof result[match[1]] === "string" ||
                  Array.isArray(result[match[1]])
                ) {
                  result[match[1]] = [].concat(result[match[1]], nextPragma);
                } else {
                  result[match[1]] = nextPragma;
                }
              }

              return {
                comments: comments,
                pragmas: result,
              };
            }

            function print(_ref) {
              var _ref$comments = _ref.comments;
              var comments = _ref$comments === undefined ? "" : _ref$comments;
              var _ref$pragmas = _ref.pragmas;
              var pragmas = _ref$pragmas === undefined ? {} : _ref$pragmas;

              var line =
                (0, (_detectNewline || _load_detectNewline()).default)(
                  comments
                ) || (_os || _load_os()).EOL;

              var head = "/**";
              var start = " *";
              var tail = " */";
              var keys = Object.keys(pragmas);
              var printedObject = keys
                .map(function (key) {
                  return printKeyValues(key, pragmas[key]);
                })
                .reduce(function (arr, next) {
                  return arr.concat(next);
                }, [])
                .map(function (keyValue) {
                  return start + " " + keyValue + line;
                })
                .join("");

              if (!comments) {
                if (keys.length === 0) {
                  return "";
                }

                if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {
                  var value = pragmas[keys[0]];
                  return ""
                    .concat(head, " ")
                    .concat(printKeyValues(keys[0], value)[0])
                    .concat(tail);
                }
              }

              var printedComments =
                comments
                  .split(line)
                  .map(function (textLine) {
                    return "".concat(start, " ").concat(textLine);
                  })
                  .join(line) + line;
              return (
                head +
                line +
                (comments ? printedComments : "") +
                (comments && keys.length ? start + line : "") +
                printedObject +
                tail
              );
            }

            function printKeyValues(key, valueOrArray) {
              return [].concat(valueOrArray).map(function (value) {
                return "@".concat(key, " ").concat(value).trim();
              });
            }
          });
          unwrapExports(build$1);

          function hasPragma$1(text) {
            var pragmas = Object.keys(build$1.parse(build$1.extract(text)));
            return (
              pragmas.indexOf("prettier") !== -1 ||
              pragmas.indexOf("format") !== -1
            );
          }

          function insertPragma$2(text) {
            var parsedDocblock = build$1.parseWithComments(
              build$1.extract(text)
            );
            var pragmas = Object.assign(
              {
                format: "",
              },
              parsedDocblock.pragmas
            );
            var newDocblock = build$1
              .print({
                pragmas: pragmas,
                comments: parsedDocblock.comments.replace(/^(\s+?\r?\n)+/, ""), // remove leading newlines
              })
              .replace(/(\r\n|\r)/g, "\n"); // normalise newlines (mitigate use of os.EOL by jest-docblock)

            var strippedText = build$1.strip(text);
            var separatingNewlines = strippedText.startsWith("\n")
              ? "\n"
              : "\n\n";
            return newDocblock + separatingNewlines + strippedText;
          }

          var pragma$2 = {
            hasPragma: hasPragma$1,
            insertPragma: insertPragma$2,
          };

          var DELIMITER_MAP = {
            "---": "yaml",
            "+++": "toml",
          };

          function parse$3(text) {
            var delimiterRegex = Object.keys(DELIMITER_MAP)
              .map(escapeStringRegexp)
              .join("|");
            var match = text.match(
              // trailing spaces after delimiters are allowed
              new RegExp(
                "^(".concat(
                  delimiterRegex,
                  ")[^\\n\\S]*\\n(?:([\\s\\S]*?)\\n)?\\1[^\\n\\S]*(\\n|$)"
                )
              )
            );

            if (match === null) {
              return {
                frontMatter: null,
                content: text,
              };
            }

            var raw = match[0].replace(/\n$/, "");
            var delimiter = match[1];
            var value = match[2];
            return {
              frontMatter: {
                type: DELIMITER_MAP[delimiter],
                value: value,
                raw: raw,
              },
              content:
                match[0].replace(/[^\n]/g, " ") + text.slice(match[0].length),
            };
          }

          var frontMatter = parse$3;

          function hasPragma(text) {
            return pragma$2.hasPragma(frontMatter(text).content);
          }

          function insertPragma$1(text) {
            var _parseFrontMatter = frontMatter(text),
              frontMatter$$1 = _parseFrontMatter.frontMatter,
              content = _parseFrontMatter.content;

            return (
              (frontMatter$$1 ? frontMatter$$1.raw + "\n\n" : "") +
              pragma$2.insertPragma(content)
            );
          }

          var pragma = {
            hasPragma: hasPragma,
            insertPragma: insertPragma$1,
          };

          var colorAdjusterFunctions = [
            "red",
            "green",
            "blue",
            "alpha",
            "a",
            "rgb",
            "hue",
            "h",
            "saturation",
            "s",
            "lightness",
            "l",
            "whiteness",
            "w",
            "blackness",
            "b",
            "tint",
            "shade",
            "blend",
            "blenda",
            "contrast",
            "hsl",
            "hsla",
            "hwb",
            "hwba",
          ];

          function getAncestorCounter(path, typeOrTypes) {
            var types = [].concat(typeOrTypes);
            var counter = -1;
            var ancestorNode;

            while ((ancestorNode = path.getParentNode(++counter))) {
              if (types.indexOf(ancestorNode.type) !== -1) {
                return counter;
              }
            }

            return -1;
          }

          function getAncestorNode$1(path, typeOrTypes) {
            var counter = getAncestorCounter(path, typeOrTypes);
            return counter === -1 ? null : path.getParentNode(counter);
          }

          function getPropOfDeclNode$1(path) {
            var declAncestorNode = getAncestorNode$1(path, "css-decl");
            return (
              declAncestorNode &&
              declAncestorNode.prop &&
              declAncestorNode.prop.toLowerCase()
            );
          }

          function isSCSS$1(parser, text) {
            var hasExplicitParserChoice =
              parser === "less" || parser === "scss";
            var IS_POSSIBLY_SCSS = /(\w\s*: [^}:]+|#){|@import[^\n]+(url|,)/;
            return hasExplicitParserChoice
              ? parser === "scss"
              : IS_POSSIBLY_SCSS.test(text);
          }

          function isWideKeywords$1(value) {
            return (
              ["initial", "inherit", "unset", "revert"].indexOf(
                value.toLowerCase()
              ) !== -1
            );
          }

          function isKeyframeAtRuleKeywords$1(path, value) {
            var atRuleAncestorNode = getAncestorNode$1(path, "css-atrule");
            return (
              atRuleAncestorNode &&
              atRuleAncestorNode.name &&
              atRuleAncestorNode.name.toLowerCase().endsWith("keyframes") &&
              ["from", "to"].indexOf(value.toLowerCase()) !== -1
            );
          }

          function maybeToLowerCase$1(value) {
            return value.includes("$") ||
              value.includes("@") ||
              value.includes("#") ||
              value.startsWith("%") ||
              value.startsWith("--") ||
              value.startsWith(":--") ||
              (value.includes("(") && value.includes(")"))
              ? value
              : value.toLowerCase();
          }

          function insideValueFunctionNode$1(path, functionName) {
            var funcAncestorNode = getAncestorNode$1(path, "value-func");
            return (
              funcAncestorNode &&
              funcAncestorNode.value &&
              funcAncestorNode.value.toLowerCase() === functionName
            );
          }

          function insideICSSRuleNode$1(path) {
            var ruleAncestorNode = getAncestorNode$1(path, "css-rule");
            return (
              ruleAncestorNode &&
              ruleAncestorNode.raws &&
              ruleAncestorNode.raws.selector &&
              (ruleAncestorNode.raws.selector.startsWith(":import") ||
                ruleAncestorNode.raws.selector.startsWith(":export"))
            );
          }

          function insideAtRuleNode$1(path, atRuleNameOrAtRuleNames) {
            var atRuleNames = [].concat(atRuleNameOrAtRuleNames);
            var atRuleAncestorNode = getAncestorNode$1(path, "css-atrule");
            return (
              atRuleAncestorNode &&
              atRuleNames.indexOf(atRuleAncestorNode.name.toLowerCase()) !== -1
            );
          }

          function insideURLFunctionInImportAtRuleNode$1(path) {
            var node = path.getValue();
            var atRuleAncestorNode = getAncestorNode$1(path, "css-atrule");
            return (
              atRuleAncestorNode &&
              atRuleAncestorNode.name === "import" &&
              node.groups[0].value === "url" &&
              node.groups.length === 2
            );
          }

          function isURLFunctionNode$1(node) {
            return (
              node.type === "value-func" && node.value.toLowerCase() === "url"
            );
          }

          function isLastNode$1(path, node) {
            var parentNode = path.getParentNode();

            if (!parentNode) {
              return false;
            }

            var nodes = parentNode.nodes;
            return nodes && nodes.indexOf(node) === nodes.length - 1;
          }

          function isHTMLTag$1(value) {
            return htmlTagNames$1.indexOf(value.toLowerCase()) !== -1;
          }

          function isDetachedRulesetDeclarationNode$1(node) {
            // If a Less file ends up being parsed with the SCSS parser, Less
            // variable declarations will be parsed as atrules with names ending
            // with a colon, so keep the original case then.
            if (!node.selector) {
              return false;
            }

            return (
              (typeof node.selector === "string" &&
                /^@.+:.*$/.test(node.selector)) ||
              (node.selector.value && /^@.+:.*$/.test(node.selector.value))
            );
          }

          function isForKeywordNode$1(node) {
            return (
              node.type === "value-word" &&
              ["from", "through", "end"].indexOf(node.value) !== -1
            );
          }

          function isIfElseKeywordNode$1(node) {
            return (
              node.type === "value-word" &&
              ["and", "or", "not"].indexOf(node.value) !== -1
            );
          }

          function isEachKeywordNode$1(node) {
            return node.type === "value-word" && node.value === "in";
          }

          function isMultiplicationNode$1(node) {
            return node.type === "value-operator" && node.value === "*";
          }

          function isDivisionNode$1(node) {
            return node.type === "value-operator" && node.value === "/";
          }

          function isAdditionNode$1(node) {
            return node.type === "value-operator" && node.value === "+";
          }

          function isSubtractionNode$1(node) {
            return node.type === "value-operator" && node.value === "-";
          }

          function isModuloNode(node) {
            return node.type === "value-operator" && node.value === "%";
          }

          function isMathOperatorNode$1(node) {
            return (
              isMultiplicationNode$1(node) ||
              isDivisionNode$1(node) ||
              isAdditionNode$1(node) ||
              isSubtractionNode$1(node) ||
              isModuloNode(node)
            );
          }

          function isEqualityOperatorNode$1(node) {
            return (
              node.type === "value-word" &&
              ["==", "!="].indexOf(node.value) !== -1
            );
          }

          function isRelationalOperatorNode$1(node) {
            return (
              node.type === "value-word" &&
              ["<", ">", "<=", ">="].indexOf(node.value) !== -1
            );
          }

          function isSCSSControlDirectiveNode$1(node) {
            return (
              node.type === "css-atrule" &&
              ["if", "else", "for", "each", "while"].indexOf(node.name) !== -1
            );
          }

          function isSCSSNestedPropertyNode(node) {
            if (!node.selector) {
              return false;
            }

            return node.selector
              .replace(/\/\*.*?\*\//, "")
              .replace(/\/\/.*?\n/, "")
              .trim()
              .endsWith(":");
          }

          function isDetachedRulesetCallNode$1(node) {
            return (
              node.raws &&
              node.raws.params &&
              /^\(\s*\)$/.test(node.raws.params)
            );
          }

          function isTemplatePlaceholderNode$1(node) {
            return node.name.startsWith("prettier-placeholder");
          }

          function isTemplatePropNode$1(node) {
            return node.prop.startsWith("@prettier-placeholder");
          }

          function isPostcssSimpleVarNode$1(currentNode, nextNode) {
            return (
              currentNode.value === "$$" &&
              currentNode.type === "value-func" &&
              nextNode &&
              nextNode.type === "value-word" &&
              !nextNode.raws.before
            );
          }

          function hasComposesNode$1(node) {
            return (
              node.value &&
              node.value.type === "value-root" &&
              node.value.group &&
              node.value.group.type === "value-value" &&
              node.prop.toLowerCase() === "composes"
            );
          }

          function hasParensAroundNode$1(node) {
            return (
              node.value &&
              node.value.group &&
              node.value.group.group &&
              node.value.group.group.type === "value-paren_group" &&
              node.value.group.group.open !== null &&
              node.value.group.group.close !== null
            );
          }

          function hasEmptyRawBefore$1(node) {
            return node.raws && node.raws.before === "";
          }

          function isKeyValuePairNode$1(node) {
            return (
              node.type === "value-comma_group" &&
              node.groups &&
              node.groups[1] &&
              node.groups[1].type === "value-colon"
            );
          }

          function isKeyValuePairInParenGroupNode(node) {
            return (
              node.type === "value-paren_group" &&
              node.groups &&
              node.groups[0] &&
              isKeyValuePairNode$1(node.groups[0])
            );
          }

          function isSCSSMapItemNode$1(path) {
            var node = path.getValue(); // Ignore empty item (i.e. `$key: ()`)

            if (node.groups.length === 0) {
              return false;
            }

            var parentParentNode = path.getParentNode(1); // Check open parens contain key/value pair (i.e. `(key: value)` and `(key: (value, other-value)`)

            if (
              !isKeyValuePairInParenGroupNode(node) &&
              !(
                parentParentNode &&
                isKeyValuePairInParenGroupNode(parentParentNode)
              )
            ) {
              return false;
            }

            var declNode = getAncestorNode$1(path, "css-decl"); // SCSS map declaration (i.e. `$map: (key: value, other-key: other-value)`)

            if (declNode && declNode.prop && declNode.prop.startsWith("$")) {
              return true;
            } // List as value of key inside SCSS map (i.e. `$map: (key: (value other-value other-other-value))`)

            if (isKeyValuePairInParenGroupNode(parentParentNode)) {
              return true;
            } // SCSS Map is argument of function (i.e. `func((key: value, other-key: other-value))`)

            if (parentParentNode.type === "value-func") {
              return true;
            }

            return false;
          }

          function isInlineValueCommentNode$1(node) {
            return node.type === "value-comment" && node.inline;
          }

          function isHashNode$1(node) {
            return node.type === "value-word" && node.value === "#";
          }

          function isLeftCurlyBraceNode$1(node) {
            return node.type === "value-word" && node.value === "{";
          }

          function isRightCurlyBraceNode$1(node) {
            return node.type === "value-word" && node.value === "}";
          }

          function isWordNode$1(node) {
            return ["value-word", "value-atword"].indexOf(node.type) !== -1;
          }

          function isColonNode$1(node) {
            return node.type === "value-colon";
          }

          function isMediaAndSupportsKeywords$1(node) {
            return (
              node.value &&
              ["not", "and", "or"].indexOf(node.value.toLowerCase()) !== -1
            );
          }

          function isColorAdjusterFuncNode$1(node) {
            if (node.type !== "value-func") {
              return false;
            }

            return (
              colorAdjusterFunctions.indexOf(node.value.toLowerCase()) !== -1
            );
          }

          var utils$4 = {
            getAncestorCounter: getAncestorCounter,
            getAncestorNode: getAncestorNode$1,
            getPropOfDeclNode: getPropOfDeclNode$1,
            maybeToLowerCase: maybeToLowerCase$1,
            insideValueFunctionNode: insideValueFunctionNode$1,
            insideICSSRuleNode: insideICSSRuleNode$1,
            insideAtRuleNode: insideAtRuleNode$1,
            insideURLFunctionInImportAtRuleNode:
              insideURLFunctionInImportAtRuleNode$1,
            isKeyframeAtRuleKeywords: isKeyframeAtRuleKeywords$1,
            isHTMLTag: isHTMLTag$1,
            isWideKeywords: isWideKeywords$1,
            isSCSS: isSCSS$1,
            isLastNode: isLastNode$1,
            isSCSSControlDirectiveNode: isSCSSControlDirectiveNode$1,
            isDetachedRulesetDeclarationNode:
              isDetachedRulesetDeclarationNode$1,
            isRelationalOperatorNode: isRelationalOperatorNode$1,
            isEqualityOperatorNode: isEqualityOperatorNode$1,
            isMultiplicationNode: isMultiplicationNode$1,
            isDivisionNode: isDivisionNode$1,
            isAdditionNode: isAdditionNode$1,
            isSubtractionNode: isSubtractionNode$1,
            isModuloNode: isModuloNode,
            isMathOperatorNode: isMathOperatorNode$1,
            isEachKeywordNode: isEachKeywordNode$1,
            isForKeywordNode: isForKeywordNode$1,
            isURLFunctionNode: isURLFunctionNode$1,
            isIfElseKeywordNode: isIfElseKeywordNode$1,
            hasComposesNode: hasComposesNode$1,
            hasParensAroundNode: hasParensAroundNode$1,
            hasEmptyRawBefore: hasEmptyRawBefore$1,
            isSCSSNestedPropertyNode: isSCSSNestedPropertyNode,
            isDetachedRulesetCallNode: isDetachedRulesetCallNode$1,
            isTemplatePlaceholderNode: isTemplatePlaceholderNode$1,
            isTemplatePropNode: isTemplatePropNode$1,
            isPostcssSimpleVarNode: isPostcssSimpleVarNode$1,
            isKeyValuePairNode: isKeyValuePairNode$1,
            isKeyValuePairInParenGroupNode: isKeyValuePairInParenGroupNode,
            isSCSSMapItemNode: isSCSSMapItemNode$1,
            isInlineValueCommentNode: isInlineValueCommentNode$1,
            isHashNode: isHashNode$1,
            isLeftCurlyBraceNode: isLeftCurlyBraceNode$1,
            isRightCurlyBraceNode: isRightCurlyBraceNode$1,
            isWordNode: isWordNode$1,
            isColonNode: isColonNode$1,
            isMediaAndSupportsKeywords: isMediaAndSupportsKeywords$1,
            isColorAdjusterFuncNode: isColorAdjusterFuncNode$1,
          };

          var insertPragma = pragma.insertPragma;
          var printNumber$1 = util.printNumber;
          var printString$1 = util.printString;
          var hasIgnoreComment$1 = util.hasIgnoreComment;
          var hasNewline$2 = util.hasNewline;
          var isNextLineEmpty$2 = utilShared.isNextLineEmpty;
          var _require$$3$builders = doc.builders;
          var concat$4 = _require$$3$builders.concat;
          var join$2 = _require$$3$builders.join;
          var line$3 = _require$$3$builders.line;
          var hardline$3 = _require$$3$builders.hardline;
          var softline$1 = _require$$3$builders.softline;
          var group$1 = _require$$3$builders.group;
          var fill$2 = _require$$3$builders.fill;
          var indent$2 = _require$$3$builders.indent;
          var dedent$2 = _require$$3$builders.dedent;
          var ifBreak$1 = _require$$3$builders.ifBreak;
          var removeLines$1 = doc.utils.removeLines;
          var getAncestorNode = utils$4.getAncestorNode;
          var getPropOfDeclNode = utils$4.getPropOfDeclNode;
          var maybeToLowerCase = utils$4.maybeToLowerCase;
          var insideValueFunctionNode = utils$4.insideValueFunctionNode;
          var insideICSSRuleNode = utils$4.insideICSSRuleNode;
          var insideAtRuleNode = utils$4.insideAtRuleNode;
          var insideURLFunctionInImportAtRuleNode =
            utils$4.insideURLFunctionInImportAtRuleNode;
          var isKeyframeAtRuleKeywords = utils$4.isKeyframeAtRuleKeywords;
          var isHTMLTag = utils$4.isHTMLTag;
          var isWideKeywords = utils$4.isWideKeywords;
          var isSCSS = utils$4.isSCSS;
          var isLastNode = utils$4.isLastNode;
          var isSCSSControlDirectiveNode = utils$4.isSCSSControlDirectiveNode;
          var isDetachedRulesetDeclarationNode =
            utils$4.isDetachedRulesetDeclarationNode;
          var isRelationalOperatorNode = utils$4.isRelationalOperatorNode;
          var isEqualityOperatorNode = utils$4.isEqualityOperatorNode;
          var isMultiplicationNode = utils$4.isMultiplicationNode;
          var isDivisionNode = utils$4.isDivisionNode;
          var isAdditionNode = utils$4.isAdditionNode;
          var isSubtractionNode = utils$4.isSubtractionNode;
          var isMathOperatorNode = utils$4.isMathOperatorNode;
          var isEachKeywordNode = utils$4.isEachKeywordNode;
          var isForKeywordNode = utils$4.isForKeywordNode;
          var isURLFunctionNode = utils$4.isURLFunctionNode;
          var isIfElseKeywordNode = utils$4.isIfElseKeywordNode;
          var hasComposesNode = utils$4.hasComposesNode;
          var hasParensAroundNode = utils$4.hasParensAroundNode;
          var hasEmptyRawBefore = utils$4.hasEmptyRawBefore;
          var isKeyValuePairNode = utils$4.isKeyValuePairNode;
          var isDetachedRulesetCallNode = utils$4.isDetachedRulesetCallNode;
          var isTemplatePlaceholderNode = utils$4.isTemplatePlaceholderNode;
          var isTemplatePropNode = utils$4.isTemplatePropNode;
          var isPostcssSimpleVarNode = utils$4.isPostcssSimpleVarNode;
          var isSCSSMapItemNode = utils$4.isSCSSMapItemNode;
          var isInlineValueCommentNode = utils$4.isInlineValueCommentNode;
          var isHashNode = utils$4.isHashNode;
          var isLeftCurlyBraceNode = utils$4.isLeftCurlyBraceNode;
          var isRightCurlyBraceNode = utils$4.isRightCurlyBraceNode;
          var isWordNode = utils$4.isWordNode;
          var isColonNode = utils$4.isColonNode;
          var isMediaAndSupportsKeywords = utils$4.isMediaAndSupportsKeywords;
          var isColorAdjusterFuncNode = utils$4.isColorAdjusterFuncNode;

          function shouldPrintComma(options) {
            switch (options.trailingComma) {
              case "all":
              case "es5":
                return true;

              case "none":
              default:
                return false;
            }
          }

          function genericPrint(path, options, print) {
            var node = path.getValue();
            /* istanbul ignore if */

            if (!node) {
              return "";
            }

            if (typeof node === "string") {
              return node;
            }

            switch (node.type) {
              case "yaml":
              case "toml":
                return concat$4([node.raw, hardline$3]);

              case "css-root": {
                var nodes = printNodeSequence(path, options, print);

                if (nodes.parts.length) {
                  return concat$4([nodes, hardline$3]);
                }

                return nodes;
              }

              case "css-comment": {
                if (node.raws.content) {
                  return node.raws.content;
                }

                var text = options.originalText.slice(
                  options.locStart(node),
                  options.locEnd(node)
                );
                var rawText = node.raws.text || node.text; // Workaround a bug where the location is off.
                // https://github.com/postcss/postcss-scss/issues/63

                if (text.indexOf(rawText) === -1) {
                  if (node.raws.inline) {
                    return concat$4(["// ", rawText]);
                  }

                  return concat$4(["/* ", rawText, " */"]);
                }

                return text;
              }

              case "css-rule": {
                return concat$4([
                  path.call(print, "selector"),
                  node.important ? " !important" : "",
                  node.nodes
                    ? concat$4([
                        " {",
                        node.nodes.length > 0
                          ? indent$2(
                              concat$4([
                                hardline$3,
                                printNodeSequence(path, options, print),
                              ])
                            )
                          : "",
                        hardline$3,
                        "}",
                        isDetachedRulesetDeclarationNode(node) ? ";" : "",
                      ])
                    : ";",
                ]);
              }

              case "css-decl": {
                var parentNode = path.getParentNode();
                return concat$4([
                  node.raws.before.replace(/[\s;]/g, ""),
                  insideICSSRuleNode(path)
                    ? node.prop
                    : maybeToLowerCase(node.prop),
                  node.raws.between.trim() === ":"
                    ? ":"
                    : node.raws.between.trim(),
                  node.extend ? "" : " ",
                  hasComposesNode(node)
                    ? removeLines$1(path.call(print, "value"))
                    : path.call(print, "value"),
                  node.raws.important
                    ? node.raws.important.replace(
                        /\s*!\s*important/i,
                        " !important"
                      )
                    : node.important
                    ? " !important"
                    : "",
                  node.raws.scssDefault
                    ? node.raws.scssDefault.replace(/\s*!default/i, " !default")
                    : node.scssDefault
                    ? " !default"
                    : "",
                  node.raws.scssGlobal
                    ? node.raws.scssGlobal.replace(/\s*!global/i, " !global")
                    : node.scssGlobal
                    ? " !global"
                    : "",
                  node.nodes
                    ? concat$4([
                        " {",
                        indent$2(
                          concat$4([
                            softline$1,
                            printNodeSequence(path, options, print),
                          ])
                        ),
                        softline$1,
                        "}",
                      ])
                    : isTemplatePropNode(node) &&
                      !parentNode.raws.semicolon &&
                      options.originalText[options.locEnd(node) - 1] !== ";"
                    ? ""
                    : ";",
                ]);
              }

              case "css-atrule": {
                var _parentNode = path.getParentNode();

                return concat$4([
                  "@", // If a Less file ends up being parsed with the SCSS parser, Less
                  // variable declarations will be parsed as at-rules with names ending
                  // with a colon, so keep the original case then.
                  isDetachedRulesetCallNode(node) || node.name.endsWith(":")
                    ? node.name
                    : maybeToLowerCase(node.name),
                  node.params
                    ? concat$4([
                        isDetachedRulesetCallNode(node)
                          ? ""
                          : isTemplatePlaceholderNode(node) &&
                            /^\s*\n/.test(node.raws.afterName)
                          ? /^\s*\n\s*\n/.test(node.raws.afterName)
                            ? concat$4([hardline$3, hardline$3])
                            : hardline$3
                          : " ",
                        path.call(print, "params"),
                      ])
                    : "",
                  node.selector
                    ? indent$2(concat$4([" ", path.call(print, "selector")]))
                    : "",
                  node.value
                    ? group$1(
                        concat$4([
                          " ",
                          path.call(print, "value"),
                          isSCSSControlDirectiveNode(node)
                            ? hasParensAroundNode(node)
                              ? " "
                              : line$3
                            : "",
                        ])
                      )
                    : node.name === "else"
                    ? " "
                    : "",
                  node.nodes
                    ? concat$4([
                        isSCSSControlDirectiveNode(node) ? "" : " ",
                        "{",
                        indent$2(
                          concat$4([
                            node.nodes.length > 0 ? softline$1 : "",
                            printNodeSequence(path, options, print),
                          ])
                        ),
                        softline$1,
                        "}",
                      ])
                    : isTemplatePlaceholderNode(node) &&
                      !_parentNode.raws.semicolon &&
                      options.originalText[options.locEnd(node) - 1] !== ";"
                    ? ""
                    : ";",
                ]);
              }
              // postcss-media-query-parser

              case "media-query-list": {
                var parts = [];
                path.each(function (childPath) {
                  var node = childPath.getValue();

                  if (node.type === "media-query" && node.value === "") {
                    return;
                  }

                  parts.push(childPath.call(print));
                }, "nodes");
                return group$1(indent$2(join$2(line$3, parts)));
              }

              case "media-query": {
                return concat$4([
                  join$2(" ", path.map(print, "nodes")),
                  isLastNode(path, node) ? "" : ",",
                ]);
              }

              case "media-type": {
                return adjustNumbers(adjustStrings(node.value, options));
              }

              case "media-feature-expression": {
                if (!node.nodes) {
                  return node.value;
                }

                return concat$4(["(", concat$4(path.map(print, "nodes")), ")"]);
              }

              case "media-feature": {
                return maybeToLowerCase(
                  adjustStrings(node.value.replace(/ +/g, " "), options)
                );
              }

              case "media-colon": {
                return concat$4([node.value, " "]);
              }

              case "media-value": {
                return adjustNumbers(adjustStrings(node.value, options));
              }

              case "media-keyword": {
                return adjustStrings(node.value, options);
              }

              case "media-url": {
                return adjustStrings(
                  node.value
                    .replace(/^url\(\s+/gi, "url(")
                    .replace(/\s+\)$/gi, ")"),
                  options
                );
              }

              case "media-unknown": {
                return node.value;
              }
              // postcss-selector-parser

              case "selector-root": {
                return group$1(
                  concat$4([
                    insideAtRuleNode(path, "custom-selector")
                      ? concat$4([
                          getAncestorNode(path, "css-atrule").customSelector,
                          line$3,
                        ])
                      : "",
                    join$2(
                      concat$4([
                        ",",
                        insideAtRuleNode(path, [
                          "extend",
                          "custom-selector",
                          "nest",
                        ])
                          ? line$3
                          : hardline$3,
                      ]),
                      path.map(print, "nodes")
                    ),
                  ])
                );
              }

              case "selector-selector": {
                return group$1(indent$2(concat$4(path.map(print, "nodes"))));
              }

              case "selector-comment": {
                return node.value;
              }

              case "selector-string": {
                return adjustStrings(node.value, options);
              }

              case "selector-tag": {
                var _parentNode2 = path.getParentNode();

                var index = _parentNode2 && _parentNode2.nodes.indexOf(node);

                var prevNode = index && _parentNode2.nodes[index - 1];
                return concat$4([
                  node.namespace
                    ? concat$4([
                        node.namespace === true ? "" : node.namespace.trim(),
                        "|",
                      ])
                    : "",
                  prevNode.type === "selector-nesting"
                    ? node.value
                    : adjustNumbers(
                        isHTMLTag(node.value) ||
                          isKeyframeAtRuleKeywords(path, node.value)
                          ? node.value.toLowerCase()
                          : node.value
                      ),
                ]);
              }

              case "selector-id": {
                return concat$4(["#", node.value]);
              }

              case "selector-class": {
                return concat$4([
                  ".",
                  adjustNumbers(adjustStrings(node.value, options)),
                ]);
              }

              case "selector-attribute": {
                return concat$4([
                  "[",
                  node.namespace
                    ? concat$4([
                        node.namespace === true ? "" : node.namespace.trim(),
                        "|",
                      ])
                    : "",
                  node.attribute.trim(),
                  node.operator ? node.operator : "",
                  node.value
                    ? quoteAttributeValue(
                        adjustStrings(node.value.trim(), options),
                        options
                      )
                    : "",
                  node.insensitive ? " i" : "",
                  "]",
                ]);
              }

              case "selector-combinator": {
                if (
                  node.value === "+" ||
                  node.value === ">" ||
                  node.value === "~" ||
                  node.value === ">>>"
                ) {
                  var _parentNode3 = path.getParentNode();

                  var _leading =
                    _parentNode3.type === "selector-selector" &&
                    _parentNode3.nodes[0] === node
                      ? ""
                      : line$3;

                  return concat$4([
                    _leading,
                    node.value,
                    isLastNode(path, node) ? "" : " ",
                  ]);
                }

                var leading = node.value.trim().startsWith("(") ? line$3 : "";
                var value =
                  adjustNumbers(adjustStrings(node.value.trim(), options)) ||
                  line$3;
                return concat$4([leading, value]);
              }

              case "selector-universal": {
                return concat$4([
                  node.namespace
                    ? concat$4([
                        node.namespace === true ? "" : node.namespace.trim(),
                        "|",
                      ])
                    : "",
                  node.value,
                ]);
              }

              case "selector-pseudo": {
                return concat$4([
                  maybeToLowerCase(node.value),
                  node.nodes && node.nodes.length > 0
                    ? concat$4([
                        "(",
                        join$2(", ", path.map(print, "nodes")),
                        ")",
                      ])
                    : "",
                ]);
              }

              case "selector-nesting": {
                return node.value;
              }

              case "selector-unknown": {
                var ruleAncestorNode = getAncestorNode(path, "css-rule"); // Nested SCSS property

                if (ruleAncestorNode && ruleAncestorNode.isSCSSNesterProperty) {
                  return adjustNumbers(
                    adjustStrings(maybeToLowerCase(node.value), options)
                  );
                }

                return node.value;
              }
              // postcss-values-parser

              case "value-value":
              case "value-root": {
                return path.call(print, "group");
              }

              case "value-comment": {
                return concat$4([
                  node.inline ? "//" : "/*",
                  node.value,
                  node.inline ? "" : "*/",
                ]);
              }

              case "value-comma_group": {
                var _parentNode4 = path.getParentNode();

                var parentParentNode = path.getParentNode(1);
                var declAncestorProp = getPropOfDeclNode(path);
                var isGridValue =
                  declAncestorProp &&
                  _parentNode4.type === "value-value" &&
                  (declAncestorProp === "grid" ||
                    declAncestorProp.startsWith("grid-template"));
                var atRuleAncestorNode = getAncestorNode(path, "css-atrule");
                var isControlDirective =
                  atRuleAncestorNode &&
                  isSCSSControlDirectiveNode(atRuleAncestorNode);
                var printed = path.map(print, "groups");
                var _parts = [];
                var insideURLFunction = insideValueFunctionNode(path, "url");
                var insideSCSSInterpolationInString = false;
                var didBreak = false;

                for (var i = 0; i < node.groups.length; ++i) {
                  _parts.push(printed[i]); // Ignore value inside `url()`

                  if (insideURLFunction) {
                    continue;
                  }

                  var iPrevNode = node.groups[i - 1];
                  var iNode = node.groups[i];
                  var iNextNode = node.groups[i + 1];
                  var iNextNextNode = node.groups[i + 2]; // Ignore after latest node (i.e. before semicolon)

                  if (!iNextNode) {
                    continue;
                  } // Ignore spaces before/after string interpolation (i.e. `"#{my-fn("_")}"`)

                  var isStartSCSSinterpolationInString =
                    iNode.type === "value-string" &&
                    iNode.value.startsWith("#{");
                  var isEndingSCSSinterpolationInString =
                    insideSCSSInterpolationInString &&
                    iNextNode.type === "value-string" &&
                    iNextNode.value.endsWith("}");

                  if (
                    isStartSCSSinterpolationInString ||
                    isEndingSCSSinterpolationInString
                  ) {
                    insideSCSSInterpolationInString =
                      !insideSCSSInterpolationInString;
                    continue;
                  }

                  if (insideSCSSInterpolationInString) {
                    continue;
                  } // Ignore colon (i.e. `:`)

                  if (isColonNode(iNode) || isColonNode(iNextNode)) {
                    continue;
                  } // Ignore `@` in Less (i.e. `@@var;`)

                  if (iNode.type === "value-atword" && iNode.value === "") {
                    continue;
                  } // Ignore `~` in Less (i.e. `content: ~"^//* some horrible but needed css hack";`)

                  if (iNode.value === "~") {
                    continue;
                  } // Ignore escape `\`

                  if (
                    iNode.value &&
                    iNode.value.indexOf("\\") !== -1 &&
                    iNextNode &&
                    iNextNode.type !== "value-comment"
                  ) {
                    continue;
                  } // Ignore escaped `/`

                  if (
                    iPrevNode &&
                    iPrevNode.value &&
                    iPrevNode.value.indexOf("\\") ===
                      iPrevNode.value.length - 1 &&
                    iNode.type === "value-operator" &&
                    iNode.value === "/"
                  ) {
                    continue;
                  } // Ignore `\` (i.e. `$variable: \@small;`)

                  if (iNode.value === "\\") {
                    continue;
                  } // Ignore `$$` (i.e. `background-color: $$(style)Color;`)

                  if (isPostcssSimpleVarNode(iNode, iNextNode)) {
                    continue;
                  } // Ignore spaces after `#` and after `{` and before `}` in SCSS interpolation (i.e. `#{variable}`)

                  if (
                    isHashNode(iNode) ||
                    isLeftCurlyBraceNode(iNode) ||
                    isRightCurlyBraceNode(iNextNode) ||
                    (isLeftCurlyBraceNode(iNextNode) &&
                      hasEmptyRawBefore(iNextNode)) ||
                    (isRightCurlyBraceNode(iNode) &&
                      hasEmptyRawBefore(iNextNode))
                  ) {
                    continue;
                  } // Ignore css variables and interpolation in SCSS (i.e. `--#{$var}`)

                  if (iNode.value === "--" && isHashNode(iNextNode)) {
                    continue;
                  } // Formatting math operations

                  var isMathOperator = isMathOperatorNode(iNode);
                  var isNextMathOperator = isMathOperatorNode(iNextNode); // Print spaces before and after math operators beside SCSS interpolation as is
                  // (i.e. `#{$var}+5`, `#{$var} +5`, `#{$var}+ 5`, `#{$var} + 5`)
                  // (i.e. `5+#{$var}`, `5 +#{$var}`, `5+ #{$var}`, `5 + #{$var}`)

                  if (
                    ((isMathOperator && isHashNode(iNextNode)) ||
                      (isNextMathOperator && isRightCurlyBraceNode(iNode))) &&
                    hasEmptyRawBefore(iNextNode)
                  ) {
                    continue;
                  } // Print spaces before and after addition and subtraction math operators as is in `calc` function
                  // due to the fact that it is not valid syntax
                  // (i.e. `calc(1px+1px)`, `calc(1px+ 1px)`, `calc(1px +1px)`, `calc(1px + 1px)`)

                  if (
                    insideValueFunctionNode(path, "calc") &&
                    (isAdditionNode(iNode) ||
                      isAdditionNode(iNextNode) ||
                      isSubtractionNode(iNode) ||
                      isSubtractionNode(iNextNode)) &&
                    hasEmptyRawBefore(iNextNode)
                  ) {
                    continue;
                  } // Print spaces after `+` and `-` in color adjuster functions as is (e.g. `color(red l(+ 20%))`)
                  // Adjusters with signed numbers (e.g. `color(red l(+20%))`) output as-is.

                  var isColorAdjusterNode =
                    (isAdditionNode(iNode) || isSubtractionNode(iNode)) &&
                    i === 0 &&
                    (iNextNode.type === "value-number" || iNextNode.isHex) &&
                    parentParentNode &&
                    isColorAdjusterFuncNode(parentParentNode) &&
                    !hasEmptyRawBefore(iNextNode);
                  var requireSpaceBeforeOperator =
                    (iNextNextNode && iNextNextNode.type === "value-func") ||
                    (iNextNextNode && isWordNode(iNextNextNode)) ||
                    iNode.type === "value-func" ||
                    isWordNode(iNode);
                  var requireSpaceAfterOperator =
                    iNextNode.type === "value-func" ||
                    isWordNode(iNextNode) ||
                    (iPrevNode && iPrevNode.type === "value-func") ||
                    (iPrevNode && isWordNode(iPrevNode)); // Formatting `/`, `+`, `-` sign

                  if (
                    !(
                      isMultiplicationNode(iNextNode) ||
                      isMultiplicationNode(iNode)
                    ) &&
                    !insideValueFunctionNode(path, "calc") &&
                    !isColorAdjusterNode &&
                    ((isDivisionNode(iNextNode) &&
                      !requireSpaceBeforeOperator) ||
                      (isDivisionNode(iNode) && !requireSpaceAfterOperator) ||
                      (isAdditionNode(iNextNode) &&
                        !requireSpaceBeforeOperator) ||
                      (isAdditionNode(iNode) && !requireSpaceAfterOperator) ||
                      isSubtractionNode(iNextNode) ||
                      isSubtractionNode(iNode)) &&
                    (hasEmptyRawBefore(iNextNode) ||
                      (isMathOperator &&
                        (!iPrevNode ||
                          (iPrevNode && isMathOperatorNode(iPrevNode)))))
                  ) {
                    continue;
                  } // Add `hardline` after inline comment (i.e. `// comment\n foo: bar;`)

                  if (isInlineValueCommentNode(iNode)) {
                    _parts.push(hardline$3);

                    continue;
                  } // Handle keywords in SCSS control directive

                  if (
                    isControlDirective &&
                    (isEqualityOperatorNode(iNextNode) ||
                      isRelationalOperatorNode(iNextNode) ||
                      isIfElseKeywordNode(iNextNode) ||
                      isEachKeywordNode(iNode) ||
                      isForKeywordNode(iNode))
                  ) {
                    _parts.push(" ");

                    continue;
                  } // At-rule `namespace` should be in one line

                  if (
                    atRuleAncestorNode &&
                    atRuleAncestorNode.name.toLowerCase() === "namespace"
                  ) {
                    _parts.push(" ");

                    continue;
                  } // Formatting `grid` property

                  if (isGridValue) {
                    if (
                      iNode.source &&
                      iNextNode.source &&
                      iNode.source.start.line !== iNextNode.source.start.line
                    ) {
                      _parts.push(hardline$3);

                      didBreak = true;
                    } else {
                      _parts.push(" ");
                    }

                    continue;
                  } // Add `space` before next math operation
                  // Note: `grip` property have `/` delimiter and it is not math operation, so
                  // `grid` property handles above

                  if (isNextMathOperator) {
                    _parts.push(" ");

                    continue;
                  } // Be default all values go through `line`

                  _parts.push(line$3);
                }

                if (didBreak) {
                  _parts.unshift(hardline$3);
                }

                if (isControlDirective) {
                  return group$1(indent$2(concat$4(_parts)));
                } // Indent is not needed for import url when url is very long
                // and node has two groups
                // when type is value-comma_group
                // example @import url("verylongurl") projection,tv

                if (insideURLFunctionInImportAtRuleNode(path)) {
                  return group$1(fill$2(_parts));
                }

                return group$1(indent$2(fill$2(_parts)));
              }

              case "value-paren_group": {
                var _parentNode5 = path.getParentNode();

                if (
                  _parentNode5 &&
                  isURLFunctionNode(_parentNode5) &&
                  (node.groups.length === 1 ||
                    (node.groups.length > 0 &&
                      node.groups[0].type === "value-comma_group" &&
                      node.groups[0].groups.length > 0 &&
                      node.groups[0].groups[0].type === "value-word" &&
                      node.groups[0].groups[0].value.startsWith("data:")))
                ) {
                  return concat$4([
                    node.open ? path.call(print, "open") : "",
                    join$2(",", path.map(print, "groups")),
                    node.close ? path.call(print, "close") : "",
                  ]);
                }

                if (!node.open) {
                  var _printed = path.map(print, "groups");

                  var res = [];

                  for (var _i = 0; _i < _printed.length; _i++) {
                    if (_i !== 0) {
                      res.push(concat$4([",", line$3]));
                    }

                    res.push(_printed[_i]);
                  }

                  return group$1(indent$2(fill$2(res)));
                }

                var isSCSSMapItem = isSCSSMapItemNode(path);
                return group$1(
                  concat$4([
                    node.open ? path.call(print, "open") : "",
                    indent$2(
                      concat$4([
                        softline$1,
                        join$2(
                          concat$4([",", line$3]),
                          path.map(function (childPath) {
                            var node = childPath.getValue();
                            var printed = print(childPath); // Key/Value pair in open paren already indented

                            if (
                              isKeyValuePairNode(node) &&
                              node.type === "value-comma_group" &&
                              node.groups &&
                              node.groups[2] &&
                              node.groups[2].type === "value-paren_group"
                            ) {
                              printed.contents.contents.parts[1] = group$1(
                                printed.contents.contents.parts[1]
                              );
                              return group$1(dedent$2(printed));
                            }

                            return printed;
                          }, "groups")
                        ),
                      ])
                    ),
                    ifBreak$1(
                      isSCSS(options.parser, options.originalText) &&
                        isSCSSMapItem &&
                        shouldPrintComma(options)
                        ? ","
                        : ""
                    ),
                    softline$1,
                    node.close ? path.call(print, "close") : "",
                  ]),
                  {
                    shouldBreak: isSCSSMapItem,
                  }
                );
              }

              case "value-func": {
                return concat$4([
                  node.value,
                  insideAtRuleNode(path, "supports") &&
                  isMediaAndSupportsKeywords(node)
                    ? " "
                    : "",
                  path.call(print, "group"),
                ]);
              }

              case "value-paren": {
                return node.value;
              }

              case "value-number": {
                return concat$4([
                  printCssNumber(node.value),
                  maybeToLowerCase(node.unit),
                ]);
              }

              case "value-operator": {
                return node.value;
              }

              case "value-word": {
                if (
                  (node.isColor && node.isHex) ||
                  isWideKeywords(node.value)
                ) {
                  return node.value.toLowerCase();
                }

                return node.value;
              }

              case "value-colon": {
                return concat$4([
                  node.value, // Don't add spaces on `:` in `url` function (i.e. `url(fbglyph: cross-outline, fig-white)`)
                  insideValueFunctionNode(path, "url") ? "" : line$3,
                ]);
              }

              case "value-comma": {
                return concat$4([node.value, " "]);
              }

              case "value-string": {
                return printString$1(
                  node.raws.quote + node.value + node.raws.quote,
                  options
                );
              }

              case "value-atword": {
                return concat$4(["@", node.value]);
              }

              case "value-unicode-range": {
                return node.value;
              }

              case "value-unknown": {
                return node.value;
              }

              default:
                /* istanbul ignore next */
                throw new Error(
                  "Unknown postcss type ".concat(JSON.stringify(node.type))
                );
            }
          }

          function printNodeSequence(path, options, print) {
            var node = path.getValue();
            var parts = [];
            var i = 0;
            path.map(function (pathChild) {
              var prevNode = node.nodes[i - 1];

              if (
                prevNode &&
                prevNode.type === "css-comment" &&
                prevNode.text.trim() === "prettier-ignore"
              ) {
                var childNode = pathChild.getValue();
                parts.push(
                  options.originalText.slice(
                    options.locStart(childNode),
                    options.locEnd(childNode)
                  )
                );
              } else {
                parts.push(pathChild.call(print));
              }

              if (i !== node.nodes.length - 1) {
                if (
                  (node.nodes[i + 1].type === "css-comment" &&
                    !hasNewline$2(
                      options.originalText,
                      options.locStart(node.nodes[i + 1]),
                      {
                        backwards: true,
                      }
                    ) &&
                    node.nodes[i].type !== "yaml" &&
                    node.nodes[i].type !== "toml") ||
                  (node.nodes[i + 1].type === "css-atrule" &&
                    node.nodes[i + 1].name === "else" &&
                    node.nodes[i].type !== "css-comment")
                ) {
                  parts.push(" ");
                } else {
                  parts.push(hardline$3);

                  if (
                    isNextLineEmpty$2(
                      options.originalText,
                      pathChild.getValue(),
                      options
                    ) &&
                    node.nodes[i].type !== "yaml" &&
                    node.nodes[i].type !== "toml"
                  ) {
                    parts.push(hardline$3);
                  }
                }
              }

              i++;
            }, "nodes");
            return concat$4(parts);
          }

          var STRING_REGEX = /(['"])(?:(?!\1)[^\\]|\\[\s\S])*\1/g;
          var NUMBER_REGEX = /(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g;
          var STANDARD_UNIT_REGEX = /[a-zA-Z]+/g;
          var WORD_PART_REGEX =
            /[$@]?[a-zA-Z_\u0080-\uFFFF][\w\-\u0080-\uFFFF]*/g;
          var ADJUST_NUMBERS_REGEX = RegExp(
            STRING_REGEX.source +
              "|" +
              "(".concat(WORD_PART_REGEX.source, ")?") +
              "(".concat(NUMBER_REGEX.source, ")") +
              "(".concat(STANDARD_UNIT_REGEX.source, ")?"),
            "g"
          );

          function adjustStrings(value, options) {
            return value.replace(STRING_REGEX, function (match) {
              return printString$1(match, options);
            });
          }

          function quoteAttributeValue(value, options) {
            var quote = options.singleQuote ? "'" : '"';
            return value.includes('"') || value.includes("'")
              ? value
              : quote + value + quote;
          }

          function adjustNumbers(value) {
            return value.replace(
              ADJUST_NUMBERS_REGEX,
              function (match, quote, wordPart, number, unit) {
                return !wordPart && number
                  ? (wordPart || "") +
                      printCssNumber(number) +
                      maybeToLowerCase(unit || "")
                  : match;
              }
            );
          }

          function printCssNumber(rawNumber) {
            return printNumber$1(rawNumber) // Remove trailing `.0`.
              .replace(/\.0(?=$|e)/, "");
          }

          var printerPostcss = {
            print: genericPrint,
            embed: embed_1,
            insertPragma: insertPragma,
            hasPrettierIgnore: hasIgnoreComment$1,
            massageAstNode: clean_1,
          };

          var CATEGORY_COMMON = "Common"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js

          var commonOptions = {
            bracketSpacing: {
              since: "0.0.0",
              category: CATEGORY_COMMON,
              type: "boolean",
              default: true,
              description: "Print spaces between brackets.",
              oppositeDescription: "Do not print spaces between brackets.",
            },
            singleQuote: {
              since: "0.0.0",
              category: CATEGORY_COMMON,
              type: "boolean",
              default: false,
              description: "Use single quotes instead of double quotes.",
            },
            proseWrap: {
              since: "1.8.2",
              category: CATEGORY_COMMON,
              type: "choice",
              default: [
                {
                  since: "1.8.2",
                  value: true,
                },
                {
                  since: "1.9.0",
                  value: "preserve",
                },
              ],
              description: "How to wrap prose.",
              choices: [
                {
                  since: "1.9.0",
                  value: "always",
                  description: "Wrap prose if it exceeds the print width.",
                },
                {
                  since: "1.9.0",
                  value: "never",
                  description: "Do not wrap prose.",
                },
                {
                  since: "1.9.0",
                  value: "preserve",
                  description: "Wrap prose as-is.",
                },
                {
                  value: false,
                  deprecated: "1.9.0",
                  redirect: "never",
                },
                {
                  value: true,
                  deprecated: "1.9.0",
                  redirect: "always",
                },
              ],
            },
          };

          var options$3 = {
            singleQuote: commonOptions.singleQuote,
          };

          var createLanguage = function createLanguage(linguistData, _ref) {
            var extend = _ref.extend,
              override = _ref.override;
            var language = {};

            for (var key in linguistData) {
              var newKey = key === "languageId" ? "linguistLanguageId" : key;
              language[newKey] = linguistData[key];
            }

            if (extend) {
              for (var _key in extend) {
                language[_key] = (language[_key] || []).concat(extend[_key]);
              }
            }

            for (var _key2 in override) {
              language[_key2] = override[_key2];
            }

            return language;
          };

          var name$1 = "CSS";
          var type = "markup";
          var tmScope = "source.css";
          var aceMode = "css";
          var codemirrorMode = "css";
          var codemirrorMimeType = "text/css";
          var color = "#563d7c";
          var extensions = [".css"];
          var languageId = 50;
          var css$2 = {
            name: name$1,
            type: type,
            tmScope: tmScope,
            aceMode: aceMode,
            codemirrorMode: codemirrorMode,
            codemirrorMimeType: codemirrorMimeType,
            color: color,
            extensions: extensions,
            languageId: languageId,
          };

          var css$3 = Object.freeze({
            name: name$1,
            type: type,
            tmScope: tmScope,
            aceMode: aceMode,
            codemirrorMode: codemirrorMode,
            codemirrorMimeType: codemirrorMimeType,
            color: color,
            extensions: extensions,
            languageId: languageId,
            default: css$2,
          });

          var name$2 = "PostCSS";
          var type$1 = "markup";
          var tmScope$1 = "source.postcss";
          var group$2 = "CSS";
          var extensions$1 = [".pcss"];
          var aceMode$1 = "text";
          var languageId$1 = 262764437;
          var postcss = {
            name: name$2,
            type: type$1,
            tmScope: tmScope$1,
            group: group$2,
            extensions: extensions$1,
            aceMode: aceMode$1,
            languageId: languageId$1,
          };

          var postcss$1 = Object.freeze({
            name: name$2,
            type: type$1,
            tmScope: tmScope$1,
            group: group$2,
            extensions: extensions$1,
            aceMode: aceMode$1,
            languageId: languageId$1,
            default: postcss,
          });

          var name$3 = "Less";
          var type$2 = "markup";
          var group$3 = "CSS";
          var extensions$2 = [".less"];
          var tmScope$2 = "source.css.less";
          var aceMode$2 = "less";
          var codemirrorMode$1 = "css";
          var codemirrorMimeType$1 = "text/css";
          var languageId$2 = 198;
          var less = {
            name: name$3,
            type: type$2,
            group: group$3,
            extensions: extensions$2,
            tmScope: tmScope$2,
            aceMode: aceMode$2,
            codemirrorMode: codemirrorMode$1,
            codemirrorMimeType: codemirrorMimeType$1,
            languageId: languageId$2,
          };

          var less$1 = Object.freeze({
            name: name$3,
            type: type$2,
            group: group$3,
            extensions: extensions$2,
            tmScope: tmScope$2,
            aceMode: aceMode$2,
            codemirrorMode: codemirrorMode$1,
            codemirrorMimeType: codemirrorMimeType$1,
            languageId: languageId$2,
            default: less,
          });

          var name$4 = "SCSS";
          var type$3 = "markup";
          var tmScope$3 = "source.scss";
          var group$4 = "CSS";
          var aceMode$3 = "scss";
          var codemirrorMode$2 = "css";
          var codemirrorMimeType$2 = "text/x-scss";
          var extensions$3 = [".scss"];
          var languageId$3 = 329;
          var scss = {
            name: name$4,
            type: type$3,
            tmScope: tmScope$3,
            group: group$4,
            aceMode: aceMode$3,
            codemirrorMode: codemirrorMode$2,
            codemirrorMimeType: codemirrorMimeType$2,
            extensions: extensions$3,
            languageId: languageId$3,
          };

          var scss$1 = Object.freeze({
            name: name$4,
            type: type$3,
            tmScope: tmScope$3,
            group: group$4,
            aceMode: aceMode$3,
            codemirrorMode: codemirrorMode$2,
            codemirrorMimeType: codemirrorMimeType$2,
            extensions: extensions$3,
            languageId: languageId$3,
            default: scss,
          });

          var require$$0$17 = (css$3 && css$2) || css$3;

          var require$$1$8 = (postcss$1 && postcss) || postcss$1;

          var require$$2$9 = (less$1 && less) || less$1;

          var require$$3$4 = (scss$1 && scss) || scss$1;

          var languages = [
            createLanguage(require$$0$17, {
              override: {
                since: "1.4.0",
                parsers: ["css"],
                vscodeLanguageIds: ["css"],
              },
            }),
            createLanguage(require$$1$8, {
              override: {
                since: "1.4.0",
                parsers: ["css"],
                vscodeLanguageIds: ["postcss"],
              },
              extend: {
                extensions: [".postcss"],
              },
            }),
            createLanguage(require$$2$9, {
              override: {
                since: "1.4.0",
                parsers: ["less"],
                vscodeLanguageIds: ["less"],
              },
            }),
            createLanguage(require$$3$4, {
              override: {
                since: "1.4.0",
                parsers: ["scss"],
                vscodeLanguageIds: ["scss"],
              },
            }),
          ];
          var printers = {
            postcss: printerPostcss,
          };
          var languageCss = {
            languages: languages,
            options: options$3,
            printers: printers,
          };

          function hasPragma$2(text) {
            return /^\s*#[^\n\S]*@(format|prettier)\s*(\n|$)/.test(text);
          }

          function insertPragma$4(text) {
            return "# @format\n\n" + text;
          }

          var pragma$4 = {
            hasPragma: hasPragma$2,
            insertPragma: insertPragma$4,
          };

          var _require$$0$builders$2 = doc.builders;
          var concat$6 = _require$$0$builders$2.concat;
          var join$3 = _require$$0$builders$2.join;
          var hardline$5 = _require$$0$builders$2.hardline;
          var line$4 = _require$$0$builders$2.line;
          var softline$2 = _require$$0$builders$2.softline;
          var group$5 = _require$$0$builders$2.group;
          var indent$3 = _require$$0$builders$2.indent;
          var ifBreak$2 = _require$$0$builders$2.ifBreak;
          var hasIgnoreComment$2 = util.hasIgnoreComment;
          var isNextLineEmpty$3 = utilShared.isNextLineEmpty;
          var insertPragma$3 = pragma$4.insertPragma;

          function genericPrint$1(path, options, print) {
            var n = path.getValue();

            if (!n) {
              return "";
            }

            if (typeof n === "string") {
              return n;
            }

            switch (n.kind) {
              case "Document": {
                var parts = [];
                path.map(function (pathChild, index) {
                  parts.push(concat$6([pathChild.call(print)]));

                  if (index !== n.definitions.length - 1) {
                    parts.push(hardline$5);

                    if (
                      isNextLineEmpty$3(
                        options.originalText,
                        pathChild.getValue(),
                        options
                      )
                    ) {
                      parts.push(hardline$5);
                    }
                  }
                }, "definitions");
                return concat$6([concat$6(parts), hardline$5]);
              }

              case "OperationDefinition": {
                var hasOperation =
                  options.originalText[options.locStart(n)] !== "{";
                var hasName = !!n.name;
                return concat$6([
                  hasOperation ? n.operation : "",
                  hasOperation && hasName
                    ? concat$6([" ", path.call(print, "name")])
                    : "",
                  n.variableDefinitions && n.variableDefinitions.length
                    ? group$5(
                        concat$6([
                          "(",
                          indent$3(
                            concat$6([
                              softline$2,
                              join$3(
                                concat$6([ifBreak$2("", ", "), softline$2]),
                                path.map(print, "variableDefinitions")
                              ),
                            ])
                          ),
                          softline$2,
                          ")",
                        ])
                      )
                    : "",
                  printDirectives(path, print, n),
                  n.selectionSet ? (!hasOperation && !hasName ? "" : " ") : "",
                  path.call(print, "selectionSet"),
                ]);
              }

              case "FragmentDefinition": {
                return concat$6([
                  "fragment ",
                  path.call(print, "name"),
                  n.variableDefinitions && n.variableDefinitions.length
                    ? group$5(
                        concat$6([
                          "(",
                          indent$3(
                            concat$6([
                              softline$2,
                              join$3(
                                concat$6([ifBreak$2("", ", "), softline$2]),
                                path.map(print, "variableDefinitions")
                              ),
                            ])
                          ),
                          softline$2,
                          ")",
                        ])
                      )
                    : "",
                  " on ",
                  path.call(print, "typeCondition"),
                  printDirectives(path, print, n),
                  " ",
                  path.call(print, "selectionSet"),
                ]);
              }

              case "SelectionSet": {
                return concat$6([
                  "{",
                  indent$3(
                    concat$6([
                      hardline$5,
                      join$3(
                        hardline$5,
                        path.call(function (selectionsPath) {
                          return printSequence(selectionsPath, options, print);
                        }, "selections")
                      ),
                    ])
                  ),
                  hardline$5,
                  "}",
                ]);
              }

              case "Field": {
                return group$5(
                  concat$6([
                    n.alias ? concat$6([path.call(print, "alias"), ": "]) : "",
                    path.call(print, "name"),
                    n.arguments.length > 0
                      ? group$5(
                          concat$6([
                            "(",
                            indent$3(
                              concat$6([
                                softline$2,
                                join$3(
                                  concat$6([ifBreak$2("", ", "), softline$2]),
                                  path.call(function (argsPath) {
                                    return printSequence(
                                      argsPath,
                                      options,
                                      print
                                    );
                                  }, "arguments")
                                ),
                              ])
                            ),
                            softline$2,
                            ")",
                          ])
                        )
                      : "",
                    printDirectives(path, print, n),
                    n.selectionSet ? " " : "",
                    path.call(print, "selectionSet"),
                  ])
                );
              }

              case "Name": {
                return n.value;
              }

              case "StringValue": {
                if (n.block) {
                  return concat$6([
                    '"""',
                    hardline$5,
                    join$3(
                      hardline$5,
                      n.value.replace(/"""/g, "\\$&").split("\n")
                    ),
                    hardline$5,
                    '"""',
                  ]);
                }

                return concat$6([
                  '"',
                  n.value.replace(/["\\]/g, "\\$&").replace(/\n/g, "\\n"),
                  '"',
                ]);
              }

              case "IntValue":
              case "FloatValue":
              case "EnumValue": {
                return n.value;
              }

              case "BooleanValue": {
                return n.value ? "true" : "false";
              }

              case "NullValue": {
                return "null";
              }

              case "Variable": {
                return concat$6(["$", path.call(print, "name")]);
              }

              case "ListValue": {
                return group$5(
                  concat$6([
                    "[",
                    indent$3(
                      concat$6([
                        softline$2,
                        join$3(
                          concat$6([ifBreak$2("", ", "), softline$2]),
                          path.map(print, "values")
                        ),
                      ])
                    ),
                    softline$2,
                    "]",
                  ])
                );
              }

              case "ObjectValue": {
                return group$5(
                  concat$6([
                    "{",
                    options.bracketSpacing && n.fields.length > 0 ? " " : "",
                    indent$3(
                      concat$6([
                        softline$2,
                        join$3(
                          concat$6([ifBreak$2("", ", "), softline$2]),
                          path.map(print, "fields")
                        ),
                      ])
                    ),
                    softline$2,
                    ifBreak$2(
                      "",
                      options.bracketSpacing && n.fields.length > 0 ? " " : ""
                    ),
                    "}",
                  ])
                );
              }

              case "ObjectField":
              case "Argument": {
                return concat$6([
                  path.call(print, "name"),
                  ": ",
                  path.call(print, "value"),
                ]);
              }

              case "Directive": {
                return concat$6([
                  "@",
                  path.call(print, "name"),
                  n.arguments.length > 0
                    ? group$5(
                        concat$6([
                          "(",
                          indent$3(
                            concat$6([
                              softline$2,
                              join$3(
                                concat$6([ifBreak$2("", ", "), softline$2]),
                                path.call(function (argsPath) {
                                  return printSequence(
                                    argsPath,
                                    options,
                                    print
                                  );
                                }, "arguments")
                              ),
                            ])
                          ),
                          softline$2,
                          ")",
                        ])
                      )
                    : "",
                ]);
              }

              case "NamedType": {
                return path.call(print, "name");
              }

              case "VariableDefinition": {
                return concat$6([
                  path.call(print, "variable"),
                  ": ",
                  path.call(print, "type"),
                  n.defaultValue
                    ? concat$6([" = ", path.call(print, "defaultValue")])
                    : "",
                  printDirectives(path, print, n),
                ]);
              }

              case "TypeExtensionDefinition": {
                return concat$6(["extend ", path.call(print, "definition")]);
              }

              case "ObjectTypeExtension":
              case "ObjectTypeDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  n.kind === "ObjectTypeExtension" ? "extend " : "",
                  "type ",
                  path.call(print, "name"),
                  n.interfaces.length > 0
                    ? concat$6([
                        " implements ",
                        join$3(
                          determineInterfaceSeparator(
                            options.originalText.substr(
                              options.locStart(n),
                              options.locEnd(n)
                            )
                          ),
                          path.map(print, "interfaces")
                        ),
                      ])
                    : "",
                  printDirectives(path, print, n),
                  n.fields.length > 0
                    ? concat$6([
                        " {",
                        indent$3(
                          concat$6([
                            hardline$5,
                            join$3(
                              hardline$5,
                              path.call(function (fieldsPath) {
                                return printSequence(
                                  fieldsPath,
                                  options,
                                  print
                                );
                              }, "fields")
                            ),
                          ])
                        ),
                        hardline$5,
                        "}",
                      ])
                    : "",
                ]);
              }

              case "FieldDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  path.call(print, "name"),
                  n.arguments.length > 0
                    ? group$5(
                        concat$6([
                          "(",
                          indent$3(
                            concat$6([
                              softline$2,
                              join$3(
                                concat$6([ifBreak$2("", ", "), softline$2]),
                                path.call(function (argsPath) {
                                  return printSequence(
                                    argsPath,
                                    options,
                                    print
                                  );
                                }, "arguments")
                              ),
                            ])
                          ),
                          softline$2,
                          ")",
                        ])
                      )
                    : "",
                  ": ",
                  path.call(print, "type"),
                  printDirectives(path, print, n),
                ]);
              }

              case "DirectiveDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  "directive ",
                  "@",
                  path.call(print, "name"),
                  n.arguments.length > 0
                    ? group$5(
                        concat$6([
                          "(",
                          indent$3(
                            concat$6([
                              softline$2,
                              join$3(
                                concat$6([ifBreak$2("", ", "), softline$2]),
                                path.call(function (argsPath) {
                                  return printSequence(
                                    argsPath,
                                    options,
                                    print
                                  );
                                }, "arguments")
                              ),
                            ])
                          ),
                          softline$2,
                          ")",
                        ])
                      )
                    : "",
                  concat$6([
                    " on ",
                    join$3(" | ", path.map(print, "locations")),
                  ]),
                ]);
              }

              case "EnumTypeExtension":
              case "EnumTypeDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  n.kind === "EnumTypeExtension" ? "extend " : "",
                  "enum ",
                  path.call(print, "name"),
                  printDirectives(path, print, n),
                  n.values.length > 0
                    ? concat$6([
                        " {",
                        indent$3(
                          concat$6([
                            hardline$5,
                            join$3(
                              hardline$5,
                              path.call(function (valuesPath) {
                                return printSequence(
                                  valuesPath,
                                  options,
                                  print
                                );
                              }, "values")
                            ),
                          ])
                        ),
                        hardline$5,
                        "}",
                      ])
                    : "",
                ]);
              }

              case "EnumValueDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  path.call(print, "name"),
                  printDirectives(path, print, n),
                ]);
              }

              case "InputValueDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description
                    ? n.description.block
                      ? hardline$5
                      : line$4
                    : "",
                  path.call(print, "name"),
                  ": ",
                  path.call(print, "type"),
                  n.defaultValue
                    ? concat$6([" = ", path.call(print, "defaultValue")])
                    : "",
                  printDirectives(path, print, n),
                ]);
              }

              case "InputObjectTypeExtension":
              case "InputObjectTypeDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  n.kind === "InputObjectTypeExtension" ? "extend " : "",
                  "input ",
                  path.call(print, "name"),
                  printDirectives(path, print, n),
                  n.fields.length > 0
                    ? concat$6([
                        " {",
                        indent$3(
                          concat$6([
                            hardline$5,
                            join$3(
                              hardline$5,
                              path.call(function (fieldsPath) {
                                return printSequence(
                                  fieldsPath,
                                  options,
                                  print
                                );
                              }, "fields")
                            ),
                          ])
                        ),
                        hardline$5,
                        "}",
                      ])
                    : "",
                ]);
              }

              case "SchemaDefinition": {
                return concat$6([
                  "schema",
                  printDirectives(path, print, n),
                  " {",
                  n.operationTypes.length > 0
                    ? indent$3(
                        concat$6([
                          hardline$5,
                          join$3(
                            hardline$5,
                            path.call(function (opsPath) {
                              return printSequence(opsPath, options, print);
                            }, "operationTypes")
                          ),
                        ])
                      )
                    : "",
                  hardline$5,
                  "}",
                ]);
              }

              case "OperationTypeDefinition": {
                return concat$6([
                  path.call(print, "operation"),
                  ": ",
                  path.call(print, "type"),
                ]);
              }

              case "InterfaceTypeExtension":
              case "InterfaceTypeDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  n.kind === "InterfaceTypeExtension" ? "extend " : "",
                  "interface ",
                  path.call(print, "name"),
                  printDirectives(path, print, n),
                  n.fields.length > 0
                    ? concat$6([
                        " {",
                        indent$3(
                          concat$6([
                            hardline$5,
                            join$3(
                              hardline$5,
                              path.call(function (fieldsPath) {
                                return printSequence(
                                  fieldsPath,
                                  options,
                                  print
                                );
                              }, "fields")
                            ),
                          ])
                        ),
                        hardline$5,
                        "}",
                      ])
                    : "",
                ]);
              }

              case "FragmentSpread": {
                return concat$6([
                  "...",
                  path.call(print, "name"),
                  printDirectives(path, print, n),
                ]);
              }

              case "InlineFragment": {
                return concat$6([
                  "...",
                  n.typeCondition
                    ? concat$6([" on ", path.call(print, "typeCondition")])
                    : "",
                  printDirectives(path, print, n),
                  " ",
                  path.call(print, "selectionSet"),
                ]);
              }

              case "UnionTypeExtension":
              case "UnionTypeDefinition": {
                return group$5(
                  concat$6([
                    path.call(print, "description"),
                    n.description ? hardline$5 : "",
                    group$5(
                      concat$6([
                        n.kind === "UnionTypeExtension" ? "extend " : "",
                        "union ",
                        path.call(print, "name"),
                        printDirectives(path, print, n),
                        n.types.length > 0
                          ? concat$6([
                              " =",
                              ifBreak$2("", " "),
                              indent$3(
                                concat$6([
                                  ifBreak$2(concat$6([line$4, "  "])),
                                  join$3(
                                    concat$6([line$4, "| "]),
                                    path.map(print, "types")
                                  ),
                                ])
                              ),
                            ])
                          : "",
                      ])
                    ),
                  ])
                );
              }

              case "ScalarTypeExtension":
              case "ScalarTypeDefinition": {
                return concat$6([
                  path.call(print, "description"),
                  n.description ? hardline$5 : "",
                  n.kind === "ScalarTypeExtension" ? "extend " : "",
                  "scalar ",
                  path.call(print, "name"),
                  printDirectives(path, print, n),
                ]);
              }

              case "NonNullType": {
                return concat$6([path.call(print, "type"), "!"]);
              }

              case "ListType": {
                return concat$6(["[", path.call(print, "type"), "]"]);
              }

              default:
                /* istanbul ignore next */
                throw new Error(
                  "unknown graphql type: " + JSON.stringify(n.kind)
                );
            }
          }

          function printDirectives(path, print, n) {
            if (n.directives.length === 0) {
              return "";
            }

            return concat$6([
              " ",
              group$5(
                indent$3(
                  concat$6([
                    softline$2,
                    join$3(
                      concat$6([ifBreak$2("", " "), softline$2]),
                      path.map(print, "directives")
                    ),
                  ])
                )
              ),
            ]);
          }

          function printSequence(sequencePath, options, print) {
            var count = sequencePath.getValue().length;
            return sequencePath.map(function (path, i) {
              var printed = print(path);

              if (
                isNextLineEmpty$3(
                  options.originalText,
                  path.getValue(),
                  options
                ) &&
                i < count - 1
              ) {
                return concat$6([printed, hardline$5]);
              }

              return printed;
            });
          }

          function canAttachComment(node) {
            return node.kind && node.kind !== "Comment";
          }

          function printComment$1(commentPath) {
            var comment = commentPath.getValue();

            if (comment.kind === "Comment") {
              return "#" + comment.value.trimRight();
            }

            throw new Error("Not a comment: " + JSON.stringify(comment));
          }

          function determineInterfaceSeparator(originalSource) {
            var start = originalSource.indexOf("implements");

            if (start === -1) {
              throw new Error("Must implement interfaces: " + originalSource);
            }

            var end = originalSource.indexOf("{");

            if (end === -1) {
              end = originalSource.length;
            }

            return originalSource.substr(start, end).includes("&")
              ? " & "
              : ", ";
          }

          function clean$2(
            node,
            newNode
            /*, parent*/
          ) {
            delete newNode.loc;
            delete newNode.comments;
          }

          var printerGraphql = {
            print: genericPrint$1,
            massageAstNode: clean$2,
            hasPrettierIgnore: hasIgnoreComment$2,
            insertPragma: insertPragma$3,
            printComment: printComment$1,
            canAttachComment: canAttachComment,
          };

          var options$6 = {
            bracketSpacing: commonOptions.bracketSpacing,
          };

          var name$5 = "GraphQL";
          var type$4 = "data";
          var extensions$4 = [".graphql", ".gql"];
          var tmScope$4 = "source.graphql";
          var aceMode$4 = "text";
          var languageId$4 = 139;
          var graphql = {
            name: name$5,
            type: type$4,
            extensions: extensions$4,
            tmScope: tmScope$4,
            aceMode: aceMode$4,
            languageId: languageId$4,
          };

          var graphql$1 = Object.freeze({
            name: name$5,
            type: type$4,
            extensions: extensions$4,
            tmScope: tmScope$4,
            aceMode: aceMode$4,
            languageId: languageId$4,
            default: graphql,
          });

          var require$$0$18 = (graphql$1 && graphql) || graphql$1;

          var languages$1 = [
            createLanguage(require$$0$18, {
              override: {
                since: "1.5.0",
                parsers: ["graphql"],
                vscodeLanguageIds: ["graphql"],
              },
            }),
          ];
          var printers$1 = {
            graphql: printerGraphql,
          };
          var languageGraphql = {
            languages: languages$1,
            options: options$6,
            printers: printers$1,
          };

          var _require$$0$builders$3 = doc.builders;
          var concat$7 = _require$$0$builders$3.concat;
          var join$4 = _require$$0$builders$3.join;
          var softline$3 = _require$$0$builders$3.softline;
          var hardline$6 = _require$$0$builders$3.hardline;
          var line$5 = _require$$0$builders$3.line;
          var group$6 = _require$$0$builders$3.group;
          var indent$4 = _require$$0$builders$3.indent;
          var ifBreak$3 = _require$$0$builders$3.ifBreak; // http://w3c.github.io/html/single-page.html#void-elements

          var voidTags = [
            "area",
            "base",
            "br",
            "col",
            "embed",
            "hr",
            "img",
            "input",
            "link",
            "meta",
            "param",
            "source",
            "track",
            "wbr",
          ]; // Formatter based on @glimmerjs/syntax's built-in test formatter:
          // https://github.com/glimmerjs/glimmer-vm/blob/master/packages/%40glimmer/syntax/lib/generation/print.ts

          function print(path, options, print) {
            var n = path.getValue();
            /* istanbul ignore if*/

            if (!n) {
              return "";
            }

            switch (n.type) {
              case "Program": {
                return group$6(
                  join$4(
                    softline$3,
                    path.map(print, "body").filter(function (text) {
                      return text !== "";
                    })
                  )
                );
              }

              case "ElementNode": {
                var tagFirstChar = n.tag[0];
                var isLocal = n.tag.indexOf(".") !== -1;
                var isGlimmerComponent =
                  tagFirstChar.toUpperCase() === tagFirstChar || isLocal;
                var hasChildren = n.children.length > 0;
                var isVoid =
                  (isGlimmerComponent && !hasChildren) ||
                  voidTags.indexOf(n.tag) !== -1;
                var closeTagForNoBreak = isVoid
                  ? concat$7([" />", softline$3])
                  : ">";
                var closeTagForBreak = isVoid ? "/>" : ">";

                var _getParams = function _getParams(path, print) {
                  return indent$4(
                    concat$7([
                      n.attributes.length ? line$5 : "",
                      join$4(line$5, path.map(print, "attributes")),
                      n.modifiers.length ? line$5 : "",
                      join$4(line$5, path.map(print, "modifiers")),
                      n.comments.length ? line$5 : "",
                      join$4(line$5, path.map(print, "comments")),
                    ])
                  );
                };

                return concat$7([
                  group$6(
                    concat$7([
                      "<",
                      n.tag,
                      _getParams(path, print),
                      n.blockParams.length
                        ? " as |".concat(n.blockParams.join(" "), "|")
                        : "",
                      ifBreak$3(softline$3, ""),
                      ifBreak$3(closeTagForBreak, closeTagForNoBreak),
                    ])
                  ),
                  group$6(
                    concat$7([
                      indent$4(
                        join$4(
                          softline$3,
                          [""].concat(path.map(print, "children"))
                        )
                      ),
                      ifBreak$3(hasChildren ? hardline$6 : "", ""),
                      !isVoid ? concat$7(["</", n.tag, ">"]) : "",
                    ])
                  ),
                ]);
              }

              case "BlockStatement": {
                var pp = path.getParentNode(1);
                var isElseIf =
                  pp &&
                  pp.inverse &&
                  pp.inverse.body.length === 1 &&
                  pp.inverse.body[0] === n &&
                  pp.inverse.body[0].path.parts[0] === "if";
                var hasElseIf =
                  n.inverse &&
                  n.inverse.body.length === 1 &&
                  n.inverse.body[0].type === "BlockStatement" &&
                  n.inverse.body[0].path.parts[0] === "if";
                var indentElse = hasElseIf
                  ? function (a) {
                      return a;
                    }
                  : indent$4;

                if (n.inverse) {
                  return concat$7([
                    isElseIf
                      ? concat$7([
                          "{{else ",
                          printPathParams(path, print),
                          "}}",
                        ])
                      : printOpenBlock(path, print),
                    indent$4(
                      concat$7([hardline$6, path.call(print, "program")])
                    ),
                    n.inverse && !hasElseIf
                      ? concat$7([hardline$6, "{{else}}"])
                      : "",
                    n.inverse
                      ? indentElse(
                          concat$7([hardline$6, path.call(print, "inverse")])
                        )
                      : "",
                    isElseIf
                      ? ""
                      : concat$7([hardline$6, printCloseBlock(path, print)]),
                  ]);
                } else if (isElseIf) {
                  return concat$7([
                    concat$7(["{{else ", printPathParams(path, print), "}}"]),
                    indent$4(
                      concat$7([hardline$6, path.call(print, "program")])
                    ),
                  ]);
                }
                /**
                 * I want this boolean to be: if params are going to cause a break,
                 * not that it has params.
                 */

                var hasParams = n.params.length > 0 || n.hash.pairs.length > 0;

                var _hasChildren = n.program.body.length > 0;

                return concat$7([
                  printOpenBlock(path, print),
                  group$6(
                    concat$7([
                      indent$4(
                        concat$7([softline$3, path.call(print, "program")])
                      ),
                      hasParams && _hasChildren ? hardline$6 : softline$3,
                      printCloseBlock(path, print),
                    ])
                  ),
                ]);
              }

              case "ElementModifierStatement":
              case "MustacheStatement": {
                var _pp = path.getParentNode(1);

                var isConcat = _pp && _pp.type === "ConcatStatement";
                return group$6(
                  concat$7([
                    n.escaped === false ? "{{{" : "{{",
                    printPathParams(path, print),
                    isConcat ? "" : softline$3,
                    n.escaped === false ? "}}}" : "}}",
                  ])
                );
              }

              case "SubExpression": {
                var params = getParams(path, print);
                var printedParams =
                  params.length > 0
                    ? indent$4(
                        concat$7([line$5, group$6(join$4(line$5, params))])
                      )
                    : "";
                return group$6(
                  concat$7([
                    "(",
                    printPath(path, print),
                    printedParams,
                    softline$3,
                    ")",
                  ])
                );
              }

              case "AttrNode": {
                var isText = n.value.type === "TextNode";

                if (
                  isText &&
                  n.value.loc.start.column === n.value.loc.end.column
                ) {
                  return concat$7([n.name]);
                }

                var quote = isText ? '"' : "";
                return concat$7([
                  n.name,
                  "=",
                  quote,
                  path.call(print, "value"),
                  quote,
                ]);
              }

              case "ConcatStatement": {
                return concat$7([
                  '"',
                  group$6(
                    indent$4(
                      join$4(
                        softline$3,
                        path
                          .map(function (partPath) {
                            return print(partPath);
                          }, "parts")
                          .filter(function (a) {
                            return a !== "";
                          })
                      )
                    )
                  ),
                  '"',
                ]);
              }

              case "Hash": {
                return concat$7([join$4(line$5, path.map(print, "pairs"))]);
              }

              case "HashPair": {
                return concat$7([n.key, "=", path.call(print, "value")]);
              }

              case "TextNode": {
                var leadingSpace = "";
                var trailingSpace = ""; // preserve a space inside of an attribute node where whitespace present, when next to mustache statement.

                var inAttrNode = path.stack.indexOf("attributes") >= 0;

                if (inAttrNode) {
                  var parentNode = path.getParentNode(0);

                  var _isConcat = parentNode.type === "ConcatStatement";

                  if (_isConcat) {
                    var parts = parentNode.parts;
                    var partIndex = parts.indexOf(n);

                    if (partIndex > 0) {
                      var partType = parts[partIndex - 1].type;
                      var isMustache = partType === "MustacheStatement";

                      if (isMustache) {
                        leadingSpace = " ";
                      }
                    }

                    if (partIndex < parts.length - 1) {
                      var _partType = parts[partIndex + 1].type;

                      var _isMustache = _partType === "MustacheStatement";

                      if (_isMustache) {
                        trailingSpace = " ";
                      }
                    }
                  }
                }

                return n.chars
                  .replace(/^\s+/, leadingSpace)
                  .replace(/\s+$/, trailingSpace);
              }

              case "MustacheCommentStatement": {
                var dashes = n.value.indexOf("}}") > -1 ? "--" : "";
                return concat$7(["{{!", dashes, n.value, dashes, "}}"]);
              }

              case "PathExpression": {
                return n.original;
              }

              case "BooleanLiteral": {
                return String(n.value);
              }

              case "CommentStatement": {
                return concat$7(["<!--", n.value, "-->"]);
              }

              case "StringLiteral": {
                return printStringLiteral(n.value, options);
              }

              case "NumberLiteral": {
                return String(n.value);
              }

              case "UndefinedLiteral": {
                return "undefined";
              }

              case "NullLiteral": {
                return "null";
              }

              /* istanbul ignore next */

              default:
                throw new Error(
                  "unknown glimmer type: " + JSON.stringify(n.type)
                );
            }
          }
          /**
           * Prints a string literal with the correct surrounding quotes based on
           * `options.singleQuote` and the number of escaped quotes contained in
           * the string literal. This function is the glimmer equivalent of `printString`
           * in `common/util`, but has differences because of the way escaped characters
           * are treated in hbs string literals.
           * @param {string} stringLiteral - the string literal value
           * @param {object} options - the prettier options object
           */

          function printStringLiteral(stringLiteral, options) {
            var double = {
              quote: '"',
              regex: /"/g,
            };
            var single = {
              quote: "'",
              regex: /'/g,
            };
            var preferred = options.singleQuote ? single : double;
            var alternate = preferred === single ? double : single;
            var shouldUseAlternateQuote = false; // If `stringLiteral` contains at least one of the quote preferred for
            // enclosing the string, we might want to enclose with the alternate quote
            // instead, to minimize the number of escaped quotes.

            if (
              stringLiteral.includes(preferred.quote) ||
              stringLiteral.includes(alternate.quote)
            ) {
              var numPreferredQuotes = (
                stringLiteral.match(preferred.regex) || []
              ).length;
              var numAlternateQuotes = (
                stringLiteral.match(alternate.regex) || []
              ).length;
              shouldUseAlternateQuote = numPreferredQuotes > numAlternateQuotes;
            }

            var enclosingQuote = shouldUseAlternateQuote
              ? alternate
              : preferred;
            var escapedStringLiteral = stringLiteral.replace(
              enclosingQuote.regex,
              "\\".concat(enclosingQuote.quote)
            );
            return ""
              .concat(enclosingQuote.quote)
              .concat(escapedStringLiteral)
              .concat(enclosingQuote.quote);
          }

          function printPath(path, print) {
            return path.call(print, "path");
          }

          function getParams(path, print) {
            var node = path.getValue();
            var parts = [];

            if (node.params.length > 0) {
              parts = parts.concat(path.map(print, "params"));
            }

            if (node.hash && node.hash.pairs.length > 0) {
              parts.push(path.call(print, "hash"));
            }

            return parts;
          }

          function printPathParams(path, print) {
            var parts = [];
            parts.push(printPath(path, print));
            parts = parts.concat(getParams(path, print));
            return indent$4(group$6(join$4(line$5, parts)));
          }

          function printBlockParams(path) {
            var block = path.getValue();

            if (!block.program || !block.program.blockParams.length) {
              return "";
            }

            return concat$7([
              " as |",
              block.program.blockParams.join(" "),
              "|",
            ]);
          }

          function printOpenBlock(path, print) {
            return group$6(
              concat$7([
                "{{#",
                printPathParams(path, print),
                printBlockParams(path),
                softline$3,
                "}}",
              ])
            );
          }

          function printCloseBlock(path, print) {
            return concat$7(["{{/", path.call(print, "path"), "}}"]);
          }

          function clean$3(ast, newObj) {
            delete newObj.loc; // (Glimmer/HTML) ignore TextNode whitespace

            if (ast.type === "TextNode") {
              if (ast.chars.replace(/\s+/, "") === "") {
                return null;
              }

              newObj.chars = ast.chars.replace(/^\s+/, "").replace(/\s+$/, "");
            }
          }

          var printerGlimmer = {
            print: print,
            massageAstNode: clean$3,
          };

          var name$6 = "Handlebars";
          var type$5 = "markup";
          var group$7 = "HTML";
          var aliases = ["hbs", "htmlbars"];
          var extensions$5 = [".handlebars", ".hbs"];
          var tmScope$5 = "text.html.handlebars";
          var aceMode$5 = "handlebars";
          var languageId$5 = 155;
          var handlebars = {
            name: name$6,
            type: type$5,
            group: group$7,
            aliases: aliases,
            extensions: extensions$5,
            tmScope: tmScope$5,
            aceMode: aceMode$5,
            languageId: languageId$5,
          };

          var handlebars$1 = Object.freeze({
            name: name$6,
            type: type$5,
            group: group$7,
            aliases: aliases,
            extensions: extensions$5,
            tmScope: tmScope$5,
            aceMode: aceMode$5,
            languageId: languageId$5,
            default: handlebars,
          });

          var require$$0$19 = (handlebars$1 && handlebars) || handlebars$1;

          var languages$2 = [
            createLanguage(require$$0$19, {
              override: {
                since: null,
                // unreleased
                parsers: ["glimmer"],
                vscodeLanguageIds: ["handlebars"],
              },
            }),
          ];
          var printers$2 = {
            glimmer: printerGlimmer,
          };
          var languageHandlebars = {
            languages: languages$2,
            printers: printers$2,
          };

          var clean$4 = function clean(ast, newNode) {
            delete newNode.sourceSpan;
            delete newNode.startSourceSpan;
            delete newNode.endSourceSpan;
            delete newNode.nameSpan;
            delete newNode.valueSpan;

            if (ast.type === "text" || ast.type === "comment") {
              return null;
            } // may be formatted by multiparser

            if (ast.type === "yaml" || ast.type === "toml") {
              return null;
            }

            if (ast.type === "attribute") {
              delete newNode.value;
            }

            if (ast.type === "docType") {
              delete newNode.value;
            }
          };

          var a = [
            "accesskey",
            "charset",
            "coords",
            "download",
            "href",
            "hreflang",
            "name",
            "ping",
            "referrerpolicy",
            "rel",
            "rev",
            "shape",
            "tabindex",
            "target",
            "type",
          ];
          var abbr = ["title"];
          var applet = [
            "align",
            "alt",
            "archive",
            "code",
            "codebase",
            "height",
            "hspace",
            "name",
            "object",
            "vspace",
            "width",
          ];
          var area = [
            "accesskey",
            "alt",
            "coords",
            "download",
            "href",
            "hreflang",
            "nohref",
            "ping",
            "referrerpolicy",
            "rel",
            "shape",
            "tabindex",
            "target",
            "type",
          ];
          var audio = [
            "autoplay",
            "controls",
            "crossorigin",
            "loop",
            "muted",
            "preload",
            "src",
          ];
          var base$2 = ["href", "target"];
          var basefont = ["color", "face", "size"];
          var bdo = ["dir"];
          var blockquote = ["cite"];
          var body = [
            "alink",
            "background",
            "bgcolor",
            "link",
            "text",
            "vlink",
          ];
          var br = ["clear"];
          var button = [
            "accesskey",
            "autofocus",
            "disabled",
            "form",
            "formaction",
            "formenctype",
            "formmethod",
            "formnovalidate",
            "formtarget",
            "name",
            "tabindex",
            "type",
            "value",
          ];
          var canvas = ["height", "width"];
          var caption = ["align"];
          var col = ["align", "char", "charoff", "span", "valign", "width"];
          var colgroup = [
            "align",
            "char",
            "charoff",
            "span",
            "valign",
            "width",
          ];
          var data = ["value"];
          var del = ["cite", "datetime"];
          var details = ["open"];
          var dfn = ["title"];
          var dialog = ["open"];
          var dir = ["compact"];
          var div = ["align"];
          var dl = ["compact"];
          var embed$3 = ["height", "src", "type", "width"];
          var fieldset = ["disabled", "form", "name"];
          var font = ["color", "face", "size"];
          var form = [
            "accept",
            "accept-charset",
            "action",
            "autocomplete",
            "enctype",
            "method",
            "name",
            "novalidate",
            "target",
          ];
          var frame = [
            "frameborder",
            "longdesc",
            "marginheight",
            "marginwidth",
            "name",
            "noresize",
            "scrolling",
            "src",
          ];
          var frameset = ["cols", "rows"];
          var h1 = ["align"];
          var h2 = ["align"];
          var h3 = ["align"];
          var h4 = ["align"];
          var h5 = ["align"];
          var h6 = ["align"];
          var head = ["profile"];
          var hr = ["align", "noshade", "size", "width"];
          var html = ["manifest", "version"];
          var iframe = [
            "align",
            "allowfullscreen",
            "allowpaymentrequest",
            "allowusermedia",
            "frameborder",
            "height",
            "longdesc",
            "marginheight",
            "marginwidth",
            "name",
            "referrerpolicy",
            "sandbox",
            "scrolling",
            "src",
            "srcdoc",
            "width",
          ];
          var img = [
            "align",
            "alt",
            "border",
            "crossorigin",
            "decoding",
            "height",
            "hspace",
            "ismap",
            "longdesc",
            "name",
            "referrerpolicy",
            "sizes",
            "src",
            "srcset",
            "usemap",
            "vspace",
            "width",
          ];
          var input = [
            "accept",
            "accesskey",
            "align",
            "alt",
            "autocomplete",
            "autofocus",
            "checked",
            "dirname",
            "disabled",
            "form",
            "formaction",
            "formenctype",
            "formmethod",
            "formnovalidate",
            "formtarget",
            "height",
            "ismap",
            "list",
            "max",
            "maxlength",
            "min",
            "minlength",
            "multiple",
            "name",
            "pattern",
            "placeholder",
            "readonly",
            "required",
            "size",
            "src",
            "step",
            "tabindex",
            "title",
            "type",
            "usemap",
            "value",
            "width",
          ];
          var ins = ["cite", "datetime"];
          var isindex = ["prompt"];
          var label = ["accesskey", "for", "form"];
          var legend = ["accesskey", "align"];
          var li = ["type", "value"];
          var link$1 = [
            "as",
            "charset",
            "color",
            "crossorigin",
            "href",
            "hreflang",
            "integrity",
            "media",
            "nonce",
            "referrerpolicy",
            "rel",
            "rev",
            "sizes",
            "target",
            "title",
            "type",
          ];
          var map = ["name"];
          var menu = ["compact"];
          var meta = ["charset", "content", "http-equiv", "name", "scheme"];
          var meter = ["high", "low", "max", "min", "optimum", "value"];
          var object = [
            "align",
            "archive",
            "border",
            "classid",
            "codebase",
            "codetype",
            "data",
            "declare",
            "form",
            "height",
            "hspace",
            "name",
            "standby",
            "tabindex",
            "type",
            "typemustmatch",
            "usemap",
            "vspace",
            "width",
          ];
          var ol = ["compact", "reversed", "start", "type"];
          var optgroup = ["disabled", "label"];
          var option = ["disabled", "label", "selected", "value"];
          var output = ["for", "form", "name"];
          var p = ["align"];
          var param = ["name", "type", "value", "valuetype"];
          var pre = ["width"];
          var progress = ["max", "value"];
          var q = ["cite"];
          var script = [
            "async",
            "charset",
            "crossorigin",
            "defer",
            "integrity",
            "language",
            "nomodule",
            "nonce",
            "referrerpolicy",
            "src",
            "type",
          ];
          var select = [
            "autocomplete",
            "autofocus",
            "disabled",
            "form",
            "multiple",
            "name",
            "required",
            "size",
            "tabindex",
          ];
          var slot = ["name"];
          var source = ["media", "sizes", "src", "srcset", "type"];
          var style = ["media", "nonce", "title", "type"];
          var table = [
            "align",
            "bgcolor",
            "border",
            "cellpadding",
            "cellspacing",
            "frame",
            "rules",
            "summary",
            "width",
          ];
          var tbody = ["align", "char", "charoff", "valign"];
          var td = [
            "abbr",
            "align",
            "axis",
            "bgcolor",
            "char",
            "charoff",
            "colspan",
            "headers",
            "height",
            "nowrap",
            "rowspan",
            "scope",
            "valign",
            "width",
          ];
          var textarea = [
            "accesskey",
            "autocomplete",
            "autofocus",
            "cols",
            "dirname",
            "disabled",
            "form",
            "maxlength",
            "minlength",
            "name",
            "placeholder",
            "readonly",
            "required",
            "rows",
            "tabindex",
            "wrap",
          ];
          var tfoot = ["align", "char", "charoff", "valign"];
          var th = [
            "abbr",
            "align",
            "axis",
            "bgcolor",
            "char",
            "charoff",
            "colspan",
            "headers",
            "height",
            "nowrap",
            "rowspan",
            "scope",
            "valign",
            "width",
          ];
          var thead = ["align", "char", "charoff", "valign"];
          var time = ["datetime"];
          var tr = ["align", "bgcolor", "char", "charoff", "valign"];
          var track = ["default", "kind", "label", "src", "srclang"];
          var ul = ["compact", "type"];
          var video = [
            "autoplay",
            "controls",
            "crossorigin",
            "height",
            "loop",
            "muted",
            "playsinline",
            "poster",
            "preload",
            "src",
            "width",
          ];
          var index$13 = {
            a: a,
            abbr: abbr,
            applet: applet,
            area: area,
            audio: audio,
            base: base$2,
            basefont: basefont,
            bdo: bdo,
            blockquote: blockquote,
            body: body,
            br: br,
            button: button,
            canvas: canvas,
            caption: caption,
            col: col,
            colgroup: colgroup,
            data: data,
            del: del,
            details: details,
            dfn: dfn,
            dialog: dialog,
            dir: dir,
            div: div,
            dl: dl,
            embed: embed$3,
            fieldset: fieldset,
            font: font,
            form: form,
            frame: frame,
            frameset: frameset,
            h1: h1,
            h2: h2,
            h3: h3,
            h4: h4,
            h5: h5,
            h6: h6,
            head: head,
            hr: hr,
            html: html,
            iframe: iframe,
            img: img,
            input: input,
            ins: ins,
            isindex: isindex,
            label: label,
            legend: legend,
            li: li,
            link: link$1,
            map: map,
            menu: menu,
            meta: meta,
            meter: meter,
            object: object,
            ol: ol,
            optgroup: optgroup,
            option: option,
            output: output,
            p: p,
            param: param,
            pre: pre,
            progress: progress,
            q: q,
            script: script,
            select: select,
            slot: slot,
            source: source,
            style: style,
            table: table,
            tbody: tbody,
            td: td,
            textarea: textarea,
            tfoot: tfoot,
            th: th,
            thead: thead,
            time: time,
            tr: tr,
            track: track,
            ul: ul,
            video: video,
            "*": [
              "accesskey",
              "autocapitalize",
              "class",
              "contenteditable",
              "dir",
              "draggable",
              "hidden",
              "id",
              "inputmode",
              "is",
              "itemid",
              "itemprop",
              "itemref",
              "itemscope",
              "itemtype",
              "lang",
              "nonce",
              "slot",
              "spellcheck",
              "style",
              "tabindex",
              "title",
              "translate",
            ],
          };

          var htmlElementAttributes = Object.freeze({
            a: a,
            abbr: abbr,
            applet: applet,
            area: area,
            audio: audio,
            base: base$2,
            basefont: basefont,
            bdo: bdo,
            blockquote: blockquote,
            body: body,
            br: br,
            button: button,
            canvas: canvas,
            caption: caption,
            col: col,
            colgroup: colgroup,
            data: data,
            del: del,
            details: details,
            dfn: dfn,
            dialog: dialog,
            dir: dir,
            div: div,
            dl: dl,
            embed: embed$3,
            fieldset: fieldset,
            font: font,
            form: form,
            frame: frame,
            frameset: frameset,
            h1: h1,
            h2: h2,
            h3: h3,
            h4: h4,
            h5: h5,
            h6: h6,
            head: head,
            hr: hr,
            html: html,
            iframe: iframe,
            img: img,
            input: input,
            ins: ins,
            isindex: isindex,
            label: label,
            legend: legend,
            li: li,
            link: link$1,
            map: map,
            menu: menu,
            meta: meta,
            meter: meter,
            object: object,
            ol: ol,
            optgroup: optgroup,
            option: option,
            output: output,
            p: p,
            param: param,
            pre: pre,
            progress: progress,
            q: q,
            script: script,
            select: select,
            slot: slot,
            source: source,
            style: style,
            table: table,
            tbody: tbody,
            td: td,
            textarea: textarea,
            tfoot: tfoot,
            th: th,
            thead: thead,
            time: time,
            tr: tr,
            track: track,
            ul: ul,
            video: video,
            default: index$13,
          });

          var json$4 = {
            CSS_DISPLAY_TAGS: {
              area: "none",
              base: "none",
              basefont: "none",
              datalist: "none",
              head: "none",
              link: "none",
              meta: "none",
              noembed: "none",
              noframes: "none",
              param: "none",
              rp: "none",
              script: "none",
              source: "block",
              style: "none",
              template: "inline",
              track: "block",
              title: "none",
              html: "block",
              body: "block",
              address: "block",
              blockquote: "block",
              center: "block",
              div: "block",
              figure: "block",
              figcaption: "block",
              footer: "block",
              form: "block",
              header: "block",
              hr: "block",
              legend: "block",
              listing: "block",
              main: "block",
              p: "block",
              plaintext: "block",
              pre: "block",
              xmp: "block",
              slot: "contents",
              ruby: "ruby",
              rt: "ruby-text",
              article: "block",
              aside: "block",
              h1: "block",
              h2: "block",
              h3: "block",
              h4: "block",
              h5: "block",
              h6: "block",
              hgroup: "block",
              nav: "block",
              section: "block",
              dir: "block",
              dd: "block",
              dl: "block",
              dt: "block",
              ol: "block",
              ul: "block",
              li: "list-item",
              table: "table",
              caption: "table-caption",
              colgroup: "table-column-group",
              col: "table-column",
              thead: "table-header-group",
              tbody: "table-row-group",
              tfoot: "table-footer-group",
              tr: "table-row",
              td: "table-cell",
              th: "table-cell",
              fieldset: "block",
              button: "inline-block",
              video: "inline-block",
              audio: "inline-block",
            },
            CSS_DISPLAY_DEFAULT: "inline",
            CSS_WHITE_SPACE_TAGS: {
              listing: "pre",
              plaintext: "pre",
              pre: "pre",
              xmp: "pre",
              nobr: "nowrap",
              table: "initial",
              textarea: "pre-wrap",
            },
            CSS_WHITE_SPACE_DEFAULT: "normal",
          };

          var htmlElementAttributes$1 =
            (htmlElementAttributes && index$13) || htmlElementAttributes;

          var CSS_DISPLAY_TAGS = json$4.CSS_DISPLAY_TAGS;
          var CSS_DISPLAY_DEFAULT = json$4.CSS_DISPLAY_DEFAULT;
          var CSS_WHITE_SPACE_TAGS = json$4.CSS_WHITE_SPACE_TAGS;
          var CSS_WHITE_SPACE_DEFAULT = json$4.CSS_WHITE_SPACE_DEFAULT;
          var HTML_TAGS = arrayToMap(htmlTagNames$1);
          var HTML_ELEMENT_ATTRIBUTES = mapObject(
            htmlElementAttributes$1,
            arrayToMap
          );

          function arrayToMap(array) {
            var map = Object.create(null);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = array[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var value = _step.value;
                map[value] = true;
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return map;
          }

          function mapObject(object, fn) {
            var newObject = Object.create(null);

            var _arr = Object.keys(object);

            for (var _i = 0; _i < _arr.length; _i++) {
              var key = _arr[_i];
              newObject[key] = fn(object[key], key);
            }

            return newObject;
          }

          function shouldPreserveContent$1(node, options) {
            if (
              node.type === "element" &&
              node.fullName === "template" &&
              node.attrMap.lang &&
              node.attrMap.lang !== "html"
            ) {
              return true;
            } // unterminated node in ie conditional comment
            // e.g. <!--[if lt IE 9]><html><![endif]-->

            if (
              node.type === "ieConditionalComment" &&
              node.lastChild &&
              !node.lastChild.isSelfClosing &&
              !node.lastChild.endSourceSpan
            ) {
              return true;
            } // incomplete html in ie conditional comment
            // e.g. <!--[if lt IE 9]></div><![endif]-->

            if (node.type === "ieConditionalComment" && !node.complete) {
              return true;
            } // top-level elements (excluding <template>, <style> and <script>) in Vue SFC are considered custom block
            // custom blocks can be written in other languages so we should preserve them to not break the code

            if (
              options.parser === "vue" &&
              node.type === "element" &&
              node.parent.type === "root" &&
              [
                "template",
                "style",
                "script", // vue parser can be used for vue dom template as well, so we should still format top-level <html>
                "html",
              ].indexOf(node.fullName) === -1
            ) {
              return true;
            } // TODO: handle non-text children in <pre>

            if (
              isPreLikeNode(node) &&
              node.children.some(function (child) {
                return child.type !== "text" && child.type !== "interpolation";
              })
            ) {
              return true;
            }

            return false;
          }

          function hasPrettierIgnore$1(node) {
            if (node.type === "attribute" || isTextLikeNode$1(node)) {
              return false;
            }

            if (!node.parent) {
              return false;
            }

            if (typeof node.index !== "number" || node.index === 0) {
              return false;
            }

            var prevNode = node.parent.children[node.index - 1];
            return isPrettierIgnore(prevNode);
          }

          function isPrettierIgnore(node) {
            return (
              node.type === "comment" && node.value.trim() === "prettier-ignore"
            );
          }

          function getPrettierIgnoreAttributeCommentData$1(value) {
            var match = value
              .trim()
              .match(/^prettier-ignore-attribute(?:\s+([^]+))?$/);

            if (!match) {
              return false;
            }

            if (!match[1]) {
              return true;
            }

            return match[1].split(/\s+/);
          }
          /** there's no opening/closing tag or it's considered not breakable */

          function isTextLikeNode$1(node) {
            return node.type === "text" || node.type === "comment";
          }

          function isScriptLikeTag$1(node) {
            return (
              node.type === "element" &&
              (node.fullName === "script" ||
                node.fullName === "style" ||
                node.fullName === "svg:style")
            );
          }

          function isFrontMatterNode(node) {
            return node.type === "yaml" || node.type === "toml";
          }

          function canHaveInterpolation(node) {
            return node.children && !isScriptLikeTag$1(node);
          }

          function isWhitespaceSensitiveNode(node) {
            return (
              isScriptLikeTag$1(node) ||
              node.type === "interpolation" ||
              isIndentationSensitiveNode(node)
            );
          }

          function isIndentationSensitiveNode(node) {
            return getNodeCssStyleWhiteSpace(node).startsWith("pre");
          }

          function isLeadingSpaceSensitiveNode(node) {
            var isLeadingSpaceSensitive = _isLeadingSpaceSensitiveNode();

            if (
              isLeadingSpaceSensitive &&
              !node.prev &&
              node.parent &&
              node.parent.tagDefinition &&
              node.parent.tagDefinition.ignoreFirstLf
            ) {
              return node.type === "interpolation";
            }

            return isLeadingSpaceSensitive;

            function _isLeadingSpaceSensitiveNode() {
              if (isFrontMatterNode(node)) {
                return false;
              }

              if (
                (node.type === "text" || node.type === "interpolation") &&
                node.prev &&
                (node.prev.type === "text" ||
                  node.prev.type === "interpolation")
              ) {
                return true;
              }

              if (!node.parent || node.parent.cssDisplay === "none") {
                return false;
              }

              if (isPreLikeNode(node.parent)) {
                return true;
              }

              if (
                !node.prev &&
                (node.parent.type === "root" ||
                  isScriptLikeTag$1(node.parent) ||
                  !isFirstChildLeadingSpaceSensitiveCssDisplay(
                    node.parent.cssDisplay
                  ))
              ) {
                return false;
              }

              if (
                node.prev &&
                !isNextLeadingSpaceSensitiveCssDisplay(node.prev.cssDisplay)
              ) {
                return false;
              }

              return true;
            }
          }

          function isTrailingSpaceSensitiveNode(node) {
            if (isFrontMatterNode(node)) {
              return false;
            }

            if (
              (node.type === "text" || node.type === "interpolation") &&
              node.next &&
              (node.next.type === "text" || node.next.type === "interpolation")
            ) {
              return true;
            }

            if (!node.parent || node.parent.cssDisplay === "none") {
              return false;
            }

            if (isPreLikeNode(node.parent)) {
              return true;
            }

            if (
              !node.next &&
              (node.parent.type === "root" ||
                isScriptLikeTag$1(node.parent) ||
                !isLastChildTrailingSpaceSensitiveCssDisplay(
                  node.parent.cssDisplay
                ))
            ) {
              return false;
            }

            if (
              node.next &&
              !isPrevTrailingSpaceSensitiveCssDisplay(node.next.cssDisplay)
            ) {
              return false;
            }

            return true;
          }

          function isDanglingSpaceSensitiveNode(node) {
            return (
              isDanglingSpaceSensitiveCssDisplay(node.cssDisplay) &&
              !isScriptLikeTag$1(node)
            );
          }

          function forceNextEmptyLine$1(node) {
            return (
              isFrontMatterNode(node) ||
              (node.next &&
                node.sourceSpan.end.line + 1 < node.next.sourceSpan.start.line)
            );
          }
          /** firstChild leadingSpaces and lastChild trailingSpaces */

          function forceBreakContent$1(node) {
            return (
              forceBreakChildren$1(node) ||
              (node.type === "element" &&
                node.children.length !== 0 &&
                (["body", "template", "script", "style"].indexOf(node.name) !==
                  -1 ||
                  node.children.some(function (child) {
                    return hasNonTextChild(child);
                  }))) ||
              (node.firstChild &&
                node.firstChild === node.lastChild &&
                hasLeadingLineBreak(node.firstChild) &&
                (!node.lastChild.isTrailingSpaceSensitive ||
                  hasTrailingLineBreak(node.lastChild)))
            );
          }
          /** spaces between children */

          function forceBreakChildren$1(node) {
            return (
              node.type === "element" &&
              node.children.length !== 0 &&
              (["html", "head", "ul", "ol", "select"].indexOf(node.name) !==
                -1 ||
                (node.cssDisplay.startsWith("table") &&
                  node.cssDisplay !== "table-cell"))
            );
          }

          function preferHardlineAsLeadingSpaces$1(node) {
            return (
              preferHardlineAsSurroundingSpaces(node) ||
              (node.prev && preferHardlineAsTrailingSpaces(node.prev)) ||
              hasSurroundingLineBreak(node)
            );
          }

          function preferHardlineAsTrailingSpaces(node) {
            return (
              preferHardlineAsSurroundingSpaces(node) ||
              (node.type === "element" && node.fullName === "br") ||
              hasSurroundingLineBreak(node)
            );
          }

          function hasSurroundingLineBreak(node) {
            return hasLeadingLineBreak(node) && hasTrailingLineBreak(node);
          }

          function hasLeadingLineBreak(node) {
            return (
              node.hasLeadingSpaces &&
              (node.prev
                ? node.prev.sourceSpan.end.line < node.sourceSpan.start.line
                : node.parent.type === "root" ||
                  node.parent.startSourceSpan.end.line <
                    node.sourceSpan.start.line)
            );
          }

          function hasTrailingLineBreak(node) {
            return (
              node.hasTrailingSpaces &&
              (node.next
                ? node.next.sourceSpan.start.line > node.sourceSpan.end.line
                : node.parent.type === "root" ||
                  node.parent.endSourceSpan.start.line >
                    node.sourceSpan.end.line)
            );
          }

          function preferHardlineAsSurroundingSpaces(node) {
            switch (node.type) {
              case "ieConditionalComment":
              case "comment":
              case "directive":
                return true;

              case "element":
                return ["script", "select"].indexOf(node.name) !== -1;
            }

            return false;
          }

          function getLastDescendant$1(node) {
            return node.lastChild ? getLastDescendant$1(node.lastChild) : node;
          }

          function hasNonTextChild(node) {
            return (
              node.children &&
              node.children.some(function (child) {
                return child.type !== "text";
              })
            );
          }

          function inferScriptParser$1(node) {
            if (node.name === "script" && !node.attrMap.src) {
              if (
                (!node.attrMap.lang && !node.attrMap.type) ||
                node.attrMap.type === "module" ||
                node.attrMap.type === "text/javascript" ||
                node.attrMap.type === "text/babel" ||
                node.attrMap.type === "application/javascript"
              ) {
                return "babel";
              }

              if (
                node.attrMap.type === "application/x-typescript" ||
                node.attrMap.lang === "ts" ||
                node.attrMap.lang === "tsx"
              ) {
                return "typescript";
              }

              if (node.attrMap.type === "text/markdown") {
                return "markdown";
              }

              if (node.attrMap.type === "application/ld+json") {
                return "json";
              }
            }

            if (node.name === "style") {
              if (!node.attrMap.lang || node.attrMap.lang === "postcss") {
                return "css";
              }

              if (node.attrMap.lang === "scss") {
                return "scss";
              }

              if (node.attrMap.lang === "less") {
                return "less";
              }
            }

            return null;
          }

          function isBlockLikeCssDisplay(cssDisplay) {
            return (
              cssDisplay === "block" ||
              cssDisplay === "list-item" ||
              cssDisplay.startsWith("table")
            );
          }

          function isFirstChildLeadingSpaceSensitiveCssDisplay(cssDisplay) {
            return (
              !isBlockLikeCssDisplay(cssDisplay) &&
              cssDisplay !== "inline-block"
            );
          }

          function isLastChildTrailingSpaceSensitiveCssDisplay(cssDisplay) {
            return (
              !isBlockLikeCssDisplay(cssDisplay) &&
              cssDisplay !== "inline-block"
            );
          }

          function isPrevTrailingSpaceSensitiveCssDisplay(cssDisplay) {
            return !isBlockLikeCssDisplay(cssDisplay);
          }

          function isNextLeadingSpaceSensitiveCssDisplay(cssDisplay) {
            return !isBlockLikeCssDisplay(cssDisplay);
          }

          function isDanglingSpaceSensitiveCssDisplay(cssDisplay) {
            return (
              !isBlockLikeCssDisplay(cssDisplay) &&
              cssDisplay !== "inline-block"
            );
          }

          function isPreLikeNode(node) {
            return getNodeCssStyleWhiteSpace(node).startsWith("pre");
          }

          function countParents$1(path) {
            var predicate =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : function () {
                    return true;
                  };
            var counter = 0;

            for (var i = path.stack.length - 1; i >= 0; i--) {
              var value = path.stack[i];

              if (
                value &&
                _typeof(value) === "object" &&
                !Array.isArray(value) &&
                predicate(value)
              ) {
                counter++;
              }
            }

            return counter;
          }

          function hasParent(node, fn) {
            var current = node;

            while (current) {
              if (fn(current)) {
                return true;
              }

              current = current.parent;
            }

            return false;
          }

          function getNodeCssStyleDisplay(node, options) {
            if (node.prev && node.prev.type === "comment") {
              // <!-- display: block -->
              var match = node.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/);

              if (match) {
                return match[1];
              }
            }

            var isInSvgForeignObject = false;

            if (node.type === "element" && node.namespace === "svg") {
              if (
                hasParent(node, function (parent) {
                  return parent.fullName === "svg:foreignObject";
                })
              ) {
                isInSvgForeignObject = true;
              } else {
                return node.name === "svg" ? "inline-block" : "block";
              }
            }

            switch (options.htmlWhitespaceSensitivity) {
              case "strict":
                return "inline";

              case "ignore":
                return "block";

              default:
                return (
                  (node.type === "element" &&
                    (!node.namespace || isInSvgForeignObject) &&
                    CSS_DISPLAY_TAGS[node.name]) ||
                  CSS_DISPLAY_DEFAULT
                );
            }
          }

          function getNodeCssStyleWhiteSpace(node) {
            return (
              (node.type === "element" &&
                !node.namespace &&
                CSS_WHITE_SPACE_TAGS[node.name]) ||
              CSS_WHITE_SPACE_DEFAULT
            );
          }

          function getMinIndentation(text) {
            var minIndentation = Infinity;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (
                var _iterator2 = text.split("\n")[Symbol.iterator](), _step2;
                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                  .done);
                _iteratorNormalCompletion2 = true
              ) {
                var lineText = _step2.value;

                if (lineText.length === 0) {
                  continue;
                }

                if (/\S/.test(lineText[0])) {
                  return 0;
                }

                var indentation = lineText.match(/^\s*/)[0].length;

                if (lineText.length === indentation) {
                  continue;
                }

                if (indentation < minIndentation) {
                  minIndentation = indentation;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return minIndentation === Infinity ? 0 : minIndentation;
          }

          function dedentString$1(text) {
            var minIndent =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : getMinIndentation(text);
            return minIndent === 0
              ? text
              : text
                  .split("\n")
                  .map(function (lineText) {
                    return lineText.slice(minIndent);
                  })
                  .join("\n");
          }

          function normalizeParts$1(parts) {
            var newParts = [];
            var restParts = parts.slice();

            while (restParts.length !== 0) {
              var part = restParts.shift();

              if (!part) {
                continue;
              }

              if (part.type === "concat") {
                Array.prototype.unshift.apply(restParts, part.parts);
                continue;
              }

              if (
                newParts.length !== 0 &&
                typeof newParts[newParts.length - 1] === "string" &&
                typeof part === "string"
              ) {
                newParts.push(newParts.pop() + part);
                continue;
              }

              newParts.push(part);
            }

            return newParts;
          }

          function identity(x) {
            return x;
          }

          function shouldNotPrintClosingTag$1(node, options) {
            return (
              !node.isSelfClosing &&
              !node.endSourceSpan &&
              (hasPrettierIgnore$1(node) ||
                shouldPreserveContent$1(node.parent, options))
            );
          }

          function countChars$1(text, char) {
            var counter = 0;

            for (var i = 0; i < text.length; i++) {
              if (text[i] === char) {
                counter++;
              }
            }

            return counter;
          }

          function unescapeQuoteEntities$1(text) {
            return text.replace(/&apos;/g, "'").replace(/&quot;/g, '"');
          }

          var utils$6 = {
            HTML_ELEMENT_ATTRIBUTES: HTML_ELEMENT_ATTRIBUTES,
            HTML_TAGS: HTML_TAGS,
            canHaveInterpolation: canHaveInterpolation,
            countChars: countChars$1,
            countParents: countParents$1,
            dedentString: dedentString$1,
            forceBreakChildren: forceBreakChildren$1,
            forceBreakContent: forceBreakContent$1,
            forceNextEmptyLine: forceNextEmptyLine$1,
            getLastDescendant: getLastDescendant$1,
            getNodeCssStyleDisplay: getNodeCssStyleDisplay,
            getNodeCssStyleWhiteSpace: getNodeCssStyleWhiteSpace,
            getPrettierIgnoreAttributeCommentData:
              getPrettierIgnoreAttributeCommentData$1,
            hasPrettierIgnore: hasPrettierIgnore$1,
            identity: identity,
            inferScriptParser: inferScriptParser$1,
            isDanglingSpaceSensitiveNode: isDanglingSpaceSensitiveNode,
            isFrontMatterNode: isFrontMatterNode,
            isIndentationSensitiveNode: isIndentationSensitiveNode,
            isLeadingSpaceSensitiveNode: isLeadingSpaceSensitiveNode,
            isPreLikeNode: isPreLikeNode,
            isScriptLikeTag: isScriptLikeTag$1,
            isTextLikeNode: isTextLikeNode$1,
            isTrailingSpaceSensitiveNode: isTrailingSpaceSensitiveNode,
            isWhitespaceSensitiveNode: isWhitespaceSensitiveNode,
            normalizeParts: normalizeParts$1,
            preferHardlineAsLeadingSpaces: preferHardlineAsLeadingSpaces$1,
            preferHardlineAsTrailingSpaces: preferHardlineAsTrailingSpaces,
            shouldNotPrintClosingTag: shouldNotPrintClosingTag$1,
            shouldPreserveContent: shouldPreserveContent$1,
            unescapeQuoteEntities: unescapeQuoteEntities$1,
          };

          var canHaveInterpolation$1 = utils$6.canHaveInterpolation;
          var getNodeCssStyleDisplay$1 = utils$6.getNodeCssStyleDisplay;
          var isDanglingSpaceSensitiveNode$1 =
            utils$6.isDanglingSpaceSensitiveNode;
          var isIndentationSensitiveNode$1 = utils$6.isIndentationSensitiveNode;
          var isLeadingSpaceSensitiveNode$1 =
            utils$6.isLeadingSpaceSensitiveNode;
          var isTrailingSpaceSensitiveNode$1 =
            utils$6.isTrailingSpaceSensitiveNode;
          var isWhitespaceSensitiveNode$1 = utils$6.isWhitespaceSensitiveNode;
          var PREPROCESS_PIPELINE = [
            removeIgnorableFirstLf,
            mergeIeConditonalStartEndCommentIntoElementOpeningTag,
            mergeCdataIntoText,
            extractInterpolation,
            extractWhitespaces,
            addCssDisplay,
            addIsSelfClosing,
            addHasHtmComponentClosingTag,
            addIsSpaceSensitive,
            mergeSimpleElementIntoText,
          ];

          function preprocess(ast, options) {
            for (var _i = 0; _i < PREPROCESS_PIPELINE.length; _i++) {
              var fn = PREPROCESS_PIPELINE[_i];
              ast = fn(ast, options);
            }

            return ast;
          }

          function removeIgnorableFirstLf(
            ast
            /*, options */
          ) {
            return ast.map(function (node) {
              if (
                node.type === "element" &&
                node.tagDefinition.ignoreFirstLf &&
                node.children.length !== 0 &&
                node.children[0].type === "text" &&
                node.children[0].value[0] === "\n"
              ) {
                var text = node.children[0];
                return node.clone({
                  children:
                    text.value.length === 1
                      ? node.children.slice(1)
                      : [].concat(
                          text.clone({
                            value: text.value.slice(1),
                          }),
                          node.children.slice(1)
                        ),
                });
              }

              return node;
            });
          }

          function mergeIeConditonalStartEndCommentIntoElementOpeningTag(
            ast
            /*, options */
          ) {
            /**
             *     <!--[if ...]><!--><target><!--<![endif]-->
             */
            var isTarget = function isTarget(node) {
              return (
                node.type === "element" &&
                node.prev &&
                node.prev.type === "ieConditionalStartComment" &&
                node.prev.sourceSpan.end.offset ===
                  node.startSourceSpan.start.offset &&
                node.firstChild &&
                node.firstChild.type === "ieConditionalEndComment" &&
                node.firstChild.sourceSpan.start.offset ===
                  node.startSourceSpan.end.offset
              );
            };

            return ast.map(function (node) {
              if (node.children) {
                var isTargetResults = node.children.map(isTarget);

                if (isTargetResults.some(Boolean)) {
                  var newChildren = [];

                  for (var i = 0; i < node.children.length; i++) {
                    var child = node.children[i];

                    if (isTargetResults[i + 1]) {
                      // ieConditionalStartComment
                      continue;
                    }

                    if (isTargetResults[i]) {
                      var ieConditionalStartComment = child.prev;
                      var ieConditionalEndComment = child.firstChild;
                      var ParseSourceSpan = child.sourceSpan.constructor;
                      var startSourceSpan = new ParseSourceSpan(
                        ieConditionalStartComment.sourceSpan.start,
                        ieConditionalEndComment.sourceSpan.end
                      );
                      var sourceSpan = new ParseSourceSpan(
                        startSourceSpan.start,
                        child.sourceSpan.end
                      );
                      newChildren.push(
                        child.clone({
                          condition: ieConditionalStartComment.condition,
                          sourceSpan: sourceSpan,
                          startSourceSpan: startSourceSpan,
                          children: child.children.slice(1),
                        })
                      );
                      continue;
                    }

                    newChildren.push(child);
                  }

                  return node.clone({
                    children: newChildren,
                  });
                }
              }

              return node;
            });
          }

          function mergeNodeIntoText(ast, shouldMerge, getValue) {
            return ast.map(function (node) {
              if (node.children) {
                var shouldMergeResults = node.children.map(shouldMerge);

                if (shouldMergeResults.some(Boolean)) {
                  var newChildren = [];

                  for (var i = 0; i < node.children.length; i++) {
                    var child = node.children[i];

                    if (child.type !== "text" && !shouldMergeResults[i]) {
                      newChildren.push(child);
                      continue;
                    }

                    var newChild =
                      child.type === "text"
                        ? child
                        : child.clone({
                            type: "text",
                            value: getValue(child),
                          });

                    if (
                      newChildren.length === 0 ||
                      newChildren[newChildren.length - 1].type !== "text"
                    ) {
                      newChildren.push(newChild);
                      continue;
                    }

                    var lastChild = newChildren.pop();
                    var ParseSourceSpan = lastChild.sourceSpan.constructor;
                    newChildren.push(
                      lastChild.clone({
                        value: lastChild.value + newChild.value,
                        sourceSpan: new ParseSourceSpan(
                          lastChild.sourceSpan.start,
                          newChild.sourceSpan.end
                        ),
                      })
                    );
                  }

                  return node.clone({
                    children: newChildren,
                  });
                }
              }

              return node;
            });
          }

          function mergeCdataIntoText(
            ast
            /*, options */
          ) {
            return mergeNodeIntoText(
              ast,
              function (node) {
                return node.type === "cdata";
              },
              function (node) {
                return "<![CDATA[".concat(node.value, "]]>");
              }
            );
          }

          function mergeSimpleElementIntoText(
            ast
            /*, options */
          ) {
            var isSimpleElement = function isSimpleElement(node) {
              return (
                node.type === "element" &&
                node.attrs.length === 0 &&
                node.children.length === 1 &&
                node.firstChild.type === "text" && // \xA0: non-breaking whitespace
                !/[^\S\xA0]/.test(node.children[0].value) &&
                !node.firstChild.hasLeadingSpaces &&
                !node.firstChild.hasTrailingSpaces &&
                node.isLeadingSpaceSensitive &&
                !node.hasLeadingSpaces &&
                node.isTrailingSpaceSensitive &&
                !node.hasTrailingSpaces &&
                node.prev &&
                node.prev.type === "text" &&
                node.next &&
                node.next.type === "text"
              );
            };

            return ast.map(function (node) {
              if (node.children) {
                var isSimpleElementResults = node.children.map(isSimpleElement);

                if (isSimpleElementResults.some(Boolean)) {
                  var newChildren = [];

                  for (var i = 0; i < node.children.length; i++) {
                    var child = node.children[i];

                    if (isSimpleElementResults[i]) {
                      var lastChild = newChildren.pop();
                      var nextChild = node.children[++i];
                      var ParseSourceSpan = node.sourceSpan.constructor;
                      var isTrailingSpaceSensitive =
                          nextChild.isTrailingSpaceSensitive,
                        hasTrailingSpaces = nextChild.hasTrailingSpaces;
                      newChildren.push(
                        lastChild.clone({
                          value:
                            lastChild.value +
                            "<".concat(child.rawName, ">") +
                            child.firstChild.value +
                            "</".concat(child.rawName, ">") +
                            nextChild.value,
                          sourceSpan: new ParseSourceSpan(
                            lastChild.sourceSpan.start,
                            nextChild.sourceSpan.end
                          ),
                          isTrailingSpaceSensitive: isTrailingSpaceSensitive,
                          hasTrailingSpaces: hasTrailingSpaces,
                        })
                      );
                    } else {
                      newChildren.push(child);
                    }
                  }

                  return node.clone({
                    children: newChildren,
                  });
                }
              }

              return node;
            });
          }

          function extractInterpolation(ast, options) {
            if (options.parser === "html") {
              return ast;
            }

            var interpolationRegex = /\{\{([\s\S]+?)\}\}/g;
            return ast.map(function (node) {
              if (!canHaveInterpolation$1(node)) {
                return node;
              }

              var newChildren = [];
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = node.children[Symbol.iterator](), _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var child = _step.value;

                  if (child.type !== "text") {
                    newChildren.push(child);
                    continue;
                  }

                  var ParseSourceSpan = child.sourceSpan.constructor;
                  var startSourceSpan = child.sourceSpan.start;
                  var endSourceSpan = null;
                  var components = child.value.split(interpolationRegex);

                  for (
                    var i = 0;
                    i < components.length;
                    i++, startSourceSpan = endSourceSpan
                  ) {
                    var value = components[i];

                    if (i % 2 === 0) {
                      endSourceSpan = startSourceSpan.moveBy(value.length);

                      if (value.length !== 0) {
                        newChildren.push({
                          type: "text",
                          value: value,
                          sourceSpan: new ParseSourceSpan(
                            startSourceSpan,
                            endSourceSpan
                          ),
                        });
                      }

                      continue;
                    }

                    endSourceSpan = startSourceSpan.moveBy(value.length + 4); // `{{` + `}}`

                    newChildren.push({
                      type: "interpolation",
                      sourceSpan: new ParseSourceSpan(
                        startSourceSpan,
                        endSourceSpan
                      ),
                      children:
                        value.length === 0
                          ? []
                          : [
                              {
                                type: "text",
                                value: value,
                                sourceSpan: new ParseSourceSpan(
                                  startSourceSpan.moveBy(2),
                                  endSourceSpan.moveBy(-2)
                                ),
                              },
                            ],
                    });
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return node.clone({
                children: newChildren,
              });
            });
          }
          /**
           * - add `hasLeadingSpaces` field
           * - add `hasTrailingSpaces` field
           * - add `hasDanglingSpaces` field for parent nodes
           * - add `isWhitespaceSensitive`, `isIndentationSensitive` field for text nodes
           * - remove insensitive whitespaces
           */

          function extractWhitespaces(
            ast
            /*, options*/
          ) {
            var TYPE_WHITESPACE = "whitespace";
            return ast.map(function (node) {
              if (!node.children) {
                return node;
              }

              if (
                node.children.length === 0 ||
                (node.children.length === 1 &&
                  node.children[0].type === "text" &&
                  node.children[0].value.trim().length === 0)
              ) {
                return node.clone({
                  children: [],
                  hasDanglingSpaces: node.children.length !== 0,
                });
              }

              var isWhitespaceSensitive = isWhitespaceSensitiveNode$1(node);
              var isIndentationSensitive = isIndentationSensitiveNode$1(node);
              return node.clone({
                isWhitespaceSensitive: isWhitespaceSensitive,
                isIndentationSensitive: isIndentationSensitive,
                children: node.children // extract whitespace nodes
                  .reduce(function (newChildren, child) {
                    if (child.type !== "text" || isWhitespaceSensitive) {
                      return newChildren.concat(child);
                    }

                    var localChildren = [];

                    var _child$value$match = child.value.match(
                        /^(\s*)([\s\S]*?)(\s*)$/
                      ),
                      _child$value$match2 = _slicedToArray(
                        _child$value$match,
                        4
                      ),
                      leadingSpaces = _child$value$match2[1],
                      text = _child$value$match2[2],
                      trailingSpaces = _child$value$match2[3];

                    if (leadingSpaces) {
                      localChildren.push({
                        type: TYPE_WHITESPACE,
                      });
                    }

                    var ParseSourceSpan = child.sourceSpan.constructor;

                    if (text) {
                      localChildren.push({
                        type: "text",
                        value: text,
                        sourceSpan: new ParseSourceSpan(
                          child.sourceSpan.start.moveBy(leadingSpaces.length),
                          child.sourceSpan.end.moveBy(-trailingSpaces.length)
                        ),
                      });
                    }

                    if (trailingSpaces) {
                      localChildren.push({
                        type: TYPE_WHITESPACE,
                      });
                    }

                    return newChildren.concat(localChildren);
                  }, []) // set hasLeadingSpaces/hasTrailingSpaces and filter whitespace nodes
                  .reduce(function (newChildren, child, i, children) {
                    if (child.type === TYPE_WHITESPACE) {
                      return newChildren;
                    }

                    var hasLeadingSpaces =
                      i !== 0 && children[i - 1].type === TYPE_WHITESPACE;
                    var hasTrailingSpaces =
                      i !== children.length - 1 &&
                      children[i + 1].type === TYPE_WHITESPACE;
                    return newChildren.concat(
                      Object.assign({}, child, {
                        hasLeadingSpaces: hasLeadingSpaces,
                        hasTrailingSpaces: hasTrailingSpaces,
                      })
                    );
                  }, []),
              });
            });
          }

          function addIsSelfClosing(
            ast
            /*, options */
          ) {
            return ast.map(function (node) {
              return Object.assign(node, {
                isSelfClosing:
                  !node.children ||
                  (node.type === "element" &&
                    (node.tagDefinition.isVoid || // self-closing
                      node.startSourceSpan === node.endSourceSpan)),
              });
            });
          }

          function addHasHtmComponentClosingTag(ast, options) {
            return ast.map(function (node) {
              return node.type !== "element"
                ? node
                : Object.assign(node, {
                    hasHtmComponentClosingTag:
                      node.endSourceSpan &&
                      /^<\s*\/\s*\/\s*>$/.test(
                        options.originalText.slice(
                          node.endSourceSpan.start.offset,
                          node.endSourceSpan.end.offset
                        )
                      ),
                  });
            });
          }

          function addCssDisplay(ast, options) {
            return ast.map(function (node) {
              return Object.assign(node, {
                cssDisplay: getNodeCssStyleDisplay$1(node, options),
              });
            });
          }
          /**
           * - add `isLeadingSpaceSensitive` field
           * - add `isTrailingSpaceSensitive` field
           * - add `isDanglingSpaceSensitive` field for parent nodes
           */

          function addIsSpaceSensitive(
            ast
            /*, options */
          ) {
            return ast.map(function (node) {
              if (!node.children) {
                return node;
              }

              if (node.children.length === 0) {
                return node.clone({
                  isDanglingSpaceSensitive:
                    isDanglingSpaceSensitiveNode$1(node),
                });
              }

              return node.clone({
                children: node.children
                  .map(function (child) {
                    return Object.assign({}, child, {
                      isLeadingSpaceSensitive:
                        isLeadingSpaceSensitiveNode$1(child),
                      isTrailingSpaceSensitive:
                        isTrailingSpaceSensitiveNode$1(child),
                    });
                  })
                  .map(function (child, index, children) {
                    return Object.assign({}, child, {
                      isLeadingSpaceSensitive:
                        index === 0
                          ? child.isLeadingSpaceSensitive
                          : children[index - 1].isTrailingSpaceSensitive &&
                            child.isLeadingSpaceSensitive,
                      isTrailingSpaceSensitive:
                        index === children.length - 1
                          ? child.isTrailingSpaceSensitive
                          : children[index + 1].isLeadingSpaceSensitive &&
                            child.isTrailingSpaceSensitive,
                    });
                  }),
              });
            });
          }

          var preprocess_1 = preprocess;

          function hasPragma$3(text) {
            return /^\s*<!--\s*@(format|prettier)\s*-->/.test(text);
          }

          function insertPragma$6(text) {
            return "<!-- @format -->\n\n" + text.replace(/^\s*\n/, "");
          }

          var pragma$6 = {
            hasPragma: hasPragma$3,
            insertPragma: insertPragma$6,
          };

          var _require$$0$builders$4 = doc.builders;
          var concat$9 = _require$$0$builders$4.concat;
          var group$9 = _require$$0$builders$4.group;
          /**
           *     v-for="... in ..."
           *     v-for="... of ..."
           *     v-for="(..., ...) in ..."
           *     v-for="(..., ...) of ..."
           */

          function printVueFor$1(value, textToDoc) {
            var _parseVueFor = parseVueFor(value),
              left = _parseVueFor.left,
              operator = _parseVueFor.operator,
              right = _parseVueFor.right;

            return concat$9([
              group$9(
                textToDoc("function _(".concat(left, ") {}"), {
                  parser: "babel",
                  __isVueForBindingLeft: true,
                })
              ),
              " ",
              operator,
              " ",
              textToDoc(right, {
                parser: "__js_expression",
              }),
            ]);
          } // modified from https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/parser/index.js#L370-L387

          function parseVueFor(value) {
            var forAliasRE = /([^]*?)\s+(in|of)\s+([^]*)/;
            var forIteratorRE = /,([^,}\]]*)(?:,([^,}\]]*))?$/;
            var stripParensRE = /^\(|\)$/g;
            var inMatch = value.match(forAliasRE);

            if (!inMatch) {
              return;
            }

            var res = {};
            res.for = inMatch[3].trim();
            var alias = inMatch[1].trim().replace(stripParensRE, "");
            var iteratorMatch = alias.match(forIteratorRE);

            if (iteratorMatch) {
              res.alias = alias.replace(forIteratorRE, "");
              res.iterator1 = iteratorMatch[1].trim();

              if (iteratorMatch[2]) {
                res.iterator2 = iteratorMatch[2].trim();
              }
            } else {
              res.alias = alias;
            }

            return {
              left: "".concat(
                [res.alias, res.iterator1, res.iterator2]
                  .filter(Boolean)
                  .join(",")
              ),
              operator: inMatch[2],
              right: res.for,
            };
          }

          function printVueSlotScope$1(value, textToDoc) {
            return textToDoc("function _(".concat(value, ") {}"), {
              parser: "babel",
              __isVueSlotScope: true,
            });
          }

          function isVueEventBindingExpression$1(eventBindingValue) {
            // https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/codegen/events.js#L3-L4
            // arrow function or anonymous function
            var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/; // simple member expression chain (a, a.b, a['b'], a["b"], a[0], a[b])

            var simplePathRE =
              /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/helpers.js#L104

            var value = eventBindingValue.trim();
            return fnExpRE.test(value) || simplePathRE.test(value);
          }

          var syntaxVue = {
            isVueEventBindingExpression: isVueEventBindingExpression$1,
            printVueFor: printVueFor$1,
            printVueSlotScope: printVueSlotScope$1,
          };

          var parseSrcset = createCommonjsModule(function (module) {
            /**
             * Srcset Parser
             *
             * By Alex Bell |  MIT License
             *
             * JS Parser for the string value that appears in markup <img srcset="here">
             *
             * @returns Array [{url: _, d: _, w: _, h:_}, ...]
             *
             * Based super duper closely on the reference algorithm at:
             * https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-srcset-attribute
             *
             * Most comments are copied in directly from the spec
             * (except for comments in parens).
             */
            (function (root, factory) {
              if (false) {
              } else if (true && module.exports) {
                // Node. Does not work with strict CommonJS, but
                // only CommonJS-like environments that support module.exports,
                // like Node.
                module.exports = factory();
              } else {
                // Browser globals (root is window)
                root.parseSrcset = factory();
              }
            })(commonjsGlobal, function () {
              // 1. Let input be the value passed to this algorithm.
              return function (input, options) {
                var logger = (options && options.logger) || console; // UTILITY FUNCTIONS
                // Manual is faster than RegEx
                // http://bjorn.tipling.com/state-and-regular-expressions-in-javascript
                // http://jsperf.com/whitespace-character/5

                function isSpace(c) {
                  return (
                    c === " " || // space
                    c === "\t" || // horizontal tab
                    c === "\n" || // new line
                    c === "\f" || // form feed
                    c === "\r"
                  ); // carriage return
                }

                function collectCharacters(regEx) {
                  var chars,
                    match = regEx.exec(input.substring(pos));

                  if (match) {
                    chars = match[0];
                    pos += chars.length;
                    return chars;
                  }
                }

                var inputLength = input.length,
                  // (Don't use \s, to avoid matching non-breaking space)
                  regexLeadingSpaces = /^[ \t\n\r\u000c]+/,
                  regexLeadingCommasOrSpaces = /^[, \t\n\r\u000c]+/,
                  regexLeadingNotSpaces = /^[^ \t\n\r\u000c]+/,
                  regexTrailingCommas = /[,]+$/,
                  regexNonNegativeInteger = /^\d+$/,
                  // ( Positive or negative or unsigned integers or decimals, without or without exponents.
                  // Must include at least one digit.
                  // According to spec tests any decimal point must be followed by a digit.
                  // No leading plus sign is allowed.)
                  // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-floating-point-number
                  regexFloatingPoint =
                    /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/,
                  url,
                  descriptors,
                  currentDescriptor,
                  state,
                  c,
                  // 2. Let position be a pointer into input, initially pointing at the start
                  //    of the string.
                  pos = 0,
                  // 3. Let candidates be an initially empty source set.
                  candidates = []; // 4. Splitting loop: Collect a sequence of characters that are space
                //    characters or U+002C COMMA characters. If any U+002C COMMA characters
                //    were collected, that is a parse error.

                while (true) {
                  collectCharacters(regexLeadingCommasOrSpaces); // 5. If position is past the end of input, return candidates and abort these steps.

                  if (pos >= inputLength) {
                    return candidates; // (we're done, this is the sole return path)
                  } // 6. Collect a sequence of characters that are not space characters,
                  //    and let that be url.

                  url = collectCharacters(regexLeadingNotSpaces); // 7. Let descriptors be a new empty list.

                  descriptors = []; // 8. If url ends with a U+002C COMMA character (,), follow these substeps:
                  //		(1). Remove all trailing U+002C COMMA characters from url. If this removed
                  //         more than one character, that is a parse error.

                  if (url.slice(-1) === ",") {
                    url = url.replace(regexTrailingCommas, ""); // (Jump ahead to step 9 to skip tokenization and just push the candidate).

                    parseDescriptors(); //	Otherwise, follow these substeps:
                  } else {
                    tokenize();
                  } // (close else of step 8)
                  // 16. Return to the step labeled splitting loop.
                } // (Close of big while loop.)

                /**
                 * Tokenizes descriptor properties prior to parsing
                 * Returns undefined.
                 */

                function tokenize() {
                  // 8.1. Descriptor tokeniser: Skip whitespace
                  collectCharacters(regexLeadingSpaces); // 8.2. Let current descriptor be the empty string.

                  currentDescriptor = ""; // 8.3. Let state be in descriptor.

                  state = "in descriptor";

                  while (true) {
                    // 8.4. Let c be the character at position.
                    c = input.charAt(pos); //  Do the following depending on the value of state.
                    //  For the purpose of this step, "EOF" is a special character representing
                    //  that position is past the end of input.
                    // In descriptor

                    if (state === "in descriptor") {
                      // Do the following, depending on the value of c:
                      // Space character
                      // If current descriptor is not empty, append current descriptor to
                      // descriptors and let current descriptor be the empty string.
                      // Set state to after descriptor.
                      if (isSpace(c)) {
                        if (currentDescriptor) {
                          descriptors.push(currentDescriptor);
                          currentDescriptor = "";
                          state = "after descriptor";
                        } // U+002C COMMA (,)
                        // Advance position to the next character in input. If current descriptor
                        // is not empty, append current descriptor to descriptors. Jump to the step
                        // labeled descriptor parser.
                      } else if (c === ",") {
                        pos += 1;

                        if (currentDescriptor) {
                          descriptors.push(currentDescriptor);
                        }

                        parseDescriptors();
                        return; // U+0028 LEFT PARENTHESIS (()
                        // Append c to current descriptor. Set state to in parens.
                      } else if (c === "(") {
                        currentDescriptor = currentDescriptor + c;
                        state = "in parens"; // EOF
                        // If current descriptor is not empty, append current descriptor to
                        // descriptors. Jump to the step labeled descriptor parser.
                      } else if (c === "") {
                        if (currentDescriptor) {
                          descriptors.push(currentDescriptor);
                        }

                        parseDescriptors();
                        return; // Anything else
                        // Append c to current descriptor.
                      } else {
                        currentDescriptor = currentDescriptor + c;
                      } // (end "in descriptor"
                      // In parens
                    } else if (state === "in parens") {
                      // U+0029 RIGHT PARENTHESIS ())
                      // Append c to current descriptor. Set state to in descriptor.
                      if (c === ")") {
                        currentDescriptor = currentDescriptor + c;
                        state = "in descriptor"; // EOF
                        // Append current descriptor to descriptors. Jump to the step labeled
                        // descriptor parser.
                      } else if (c === "") {
                        descriptors.push(currentDescriptor);
                        parseDescriptors();
                        return; // Anything else
                        // Append c to current descriptor.
                      } else {
                        currentDescriptor = currentDescriptor + c;
                      } // After descriptor
                    } else if (state === "after descriptor") {
                      // Do the following, depending on the value of c:
                      // Space character: Stay in this state.
                      if (isSpace(c)) {
                        // EOF: Jump to the step labeled descriptor parser.
                      } else if (c === "") {
                        parseDescriptors();
                        return; // Anything else
                        // Set state to in descriptor. Set position to the previous character in input.
                      } else {
                        state = "in descriptor";
                        pos -= 1;
                      }
                    } // Advance position to the next character in input.

                    pos += 1; // Repeat this step.
                  } // (close while true loop)
                }
                /**
                 * Adds descriptor properties to a candidate, pushes to the candidates array
                 * @return undefined
                 */
                // Declared outside of the while loop so that it's only created once.

                function parseDescriptors() {
                  // 9. Descriptor parser: Let error be no.
                  var pError = false,
                    // 10. Let width be absent.
                    // 11. Let density be absent.
                    // 12. Let future-compat-h be absent. (We're implementing it now as h)
                    w,
                    d,
                    h,
                    i,
                    candidate = {},
                    desc,
                    lastChar,
                    value,
                    intVal,
                    floatVal; // 13. For each descriptor in descriptors, run the appropriate set of steps
                  // from the following list:

                  for (i = 0; i < descriptors.length; i++) {
                    desc = descriptors[i];
                    lastChar = desc[desc.length - 1];
                    value = desc.substring(0, desc.length - 1);
                    intVal = parseInt(value, 10);
                    floatVal = parseFloat(value); // If the descriptor consists of a valid non-negative integer followed by
                    // a U+0077 LATIN SMALL LETTER W character

                    if (
                      regexNonNegativeInteger.test(value) &&
                      lastChar === "w"
                    ) {
                      // If width and density are not both absent, then let error be yes.
                      if (w || d) {
                        pError = true;
                      } // Apply the rules for parsing non-negative integers to the descriptor.
                      // If the result is zero, let error be yes.
                      // Otherwise, let width be the result.

                      if (intVal === 0) {
                        pError = true;
                      } else {
                        w = intVal;
                      } // If the descriptor consists of a valid floating-point number followed by
                      // a U+0078 LATIN SMALL LETTER X character
                    } else if (
                      regexFloatingPoint.test(value) &&
                      lastChar === "x"
                    ) {
                      // If width, density and future-compat-h are not all absent, then let error
                      // be yes.
                      if (w || d || h) {
                        pError = true;
                      } // Apply the rules for parsing floating-point number values to the descriptor.
                      // If the result is less than zero, let error be yes. Otherwise, let density
                      // be the result.

                      if (floatVal < 0) {
                        pError = true;
                      } else {
                        d = floatVal;
                      } // If the descriptor consists of a valid non-negative integer followed by
                      // a U+0068 LATIN SMALL LETTER H character
                    } else if (
                      regexNonNegativeInteger.test(value) &&
                      lastChar === "h"
                    ) {
                      // If height and density are not both absent, then let error be yes.
                      if (h || d) {
                        pError = true;
                      } // Apply the rules for parsing non-negative integers to the descriptor.
                      // If the result is zero, let error be yes. Otherwise, let future-compat-h
                      // be the result.

                      if (intVal === 0) {
                        pError = true;
                      } else {
                        h = intVal;
                      } // Anything else, Let error be yes.
                    } else {
                      pError = true;
                    }
                  } // (close step 13 for loop)
                  // 15. If error is still no, then append a new image source to candidates whose
                  // URL is url, associated with a width width if not absent and a pixel
                  // density density if not absent. Otherwise, there is a parse error.

                  if (!pError) {
                    candidate.url = url;

                    if (w) {
                      candidate.w = w;
                    }

                    if (d) {
                      candidate.d = d;
                    }

                    if (h) {
                      candidate.h = h;
                    }

                    candidates.push(candidate);
                  } else if (logger && logger.error) {
                    logger.error(
                      "Invalid srcset descriptor found in '" +
                        input +
                        "' at '" +
                        desc +
                        "'."
                    );
                  }
                } // (close parseDescriptors fn)
              };
            });
          });

          var _require$$0$builders$5 = doc.builders;
          var concat$10 = _require$$0$builders$5.concat;
          var ifBreak$5 = _require$$0$builders$5.ifBreak;
          var join$6 = _require$$0$builders$5.join;
          var line$7 = _require$$0$builders$5.line;

          function printImgSrcset$1(value) {
            var srcset = parseSrcset(value, {
              logger: {
                error: function error(message) {
                  throw new Error(message);
                },
              },
            });
            var hasW = srcset.some(function (src) {
              return src.w;
            });
            var hasH = srcset.some(function (src) {
              return src.h;
            });
            var hasX = srcset.some(function (src) {
              return src.d;
            });

            if (hasW + hasH + hasX !== 1) {
              throw new Error("Mixed descriptor in srcset is not supported");
            }

            var key = hasW ? "w" : hasH ? "h" : "d";
            var unit = hasW ? "w" : hasH ? "h" : "x";

            var getMax = function getMax(values) {
              return Math.max.apply(Math, values);
            };

            var urls = srcset.map(function (src) {
              return src.url;
            });
            var maxUrlLength = getMax(
              urls.map(function (url) {
                return url.length;
              })
            );
            var descriptors = srcset
              .map(function (src) {
                return src[key];
              })
              .map(function (descriptor) {
                return descriptor ? descriptor.toString() : "";
              });
            var descriptorLeftLengths = descriptors.map(function (descriptor) {
              var index = descriptor.indexOf(".");
              return index === -1 ? descriptor.length : index;
            });
            var maxDescriptorLeftLength = getMax(descriptorLeftLengths);
            return join$6(
              concat$10([",", line$7]),
              urls.map(function (url, index) {
                var parts = [url];
                var descriptor = descriptors[index];

                if (descriptor) {
                  var urlPadding = maxUrlLength - url.length + 1;
                  var descriptorPadding =
                    maxDescriptorLeftLength - descriptorLeftLengths[index];
                  var alignment = " ".repeat(urlPadding + descriptorPadding);
                  parts.push(ifBreak$5(alignment, " "), descriptor + unit);
                }

                return concat$10(parts);
              })
            );
          }

          var syntaxAttribute = {
            printImgSrcset: printImgSrcset$1,
          };

          var builders = doc.builders;
          var _require$$0$utils = doc.utils;
          var stripTrailingHardline$1 = _require$$0$utils.stripTrailingHardline;
          var mapDoc$4 = _require$$0$utils.mapDoc;
          var breakParent$2 = builders.breakParent;
          var dedentToRoot$1 = builders.dedentToRoot;
          var fill$3 = builders.fill;
          var group$8 = builders.group;
          var hardline$7 = builders.hardline;
          var ifBreak$4 = builders.ifBreak;
          var indent$5 = builders.indent;
          var join$5 = builders.join;
          var line$6 = builders.line;
          var literalline$2 = builders.literalline;
          var markAsRoot$2 = builders.markAsRoot;
          var softline$4 = builders.softline;
          var countChars = utils$6.countChars;
          var countParents = utils$6.countParents;
          var dedentString = utils$6.dedentString;
          var forceBreakChildren = utils$6.forceBreakChildren;
          var forceBreakContent = utils$6.forceBreakContent;
          var forceNextEmptyLine = utils$6.forceNextEmptyLine;
          var getLastDescendant = utils$6.getLastDescendant;
          var getPrettierIgnoreAttributeCommentData =
            utils$6.getPrettierIgnoreAttributeCommentData;
          var hasPrettierIgnore = utils$6.hasPrettierIgnore;
          var inferScriptParser = utils$6.inferScriptParser;
          var isScriptLikeTag = utils$6.isScriptLikeTag;
          var isTextLikeNode = utils$6.isTextLikeNode;
          var normalizeParts = utils$6.normalizeParts;
          var preferHardlineAsLeadingSpaces =
            utils$6.preferHardlineAsLeadingSpaces;
          var shouldNotPrintClosingTag = utils$6.shouldNotPrintClosingTag;
          var shouldPreserveContent = utils$6.shouldPreserveContent;
          var unescapeQuoteEntities = utils$6.unescapeQuoteEntities;
          var replaceEndOfLineWith$1 = util.replaceEndOfLineWith;
          var insertPragma$5 = pragma$6.insertPragma;
          var printVueFor = syntaxVue.printVueFor;
          var printVueSlotScope = syntaxVue.printVueSlotScope;
          var isVueEventBindingExpression =
            syntaxVue.isVueEventBindingExpression;
          var printImgSrcset = syntaxAttribute.printImgSrcset;

          function concat$8(parts) {
            var newParts = normalizeParts(parts);
            return newParts.length === 0
              ? ""
              : newParts.length === 1
              ? newParts[0]
              : builders.concat(newParts);
          }

          function embed$2(path, print, textToDoc, options) {
            var node = path.getValue();

            switch (node.type) {
              case "text": {
                if (isScriptLikeTag(node.parent)) {
                  var parser = inferScriptParser(node.parent);

                  if (parser) {
                    var value =
                      parser === "markdown"
                        ? dedentString(node.value.replace(/^[^\S\n]*?\n/, ""))
                        : node.value;
                    return builders.concat([
                      concat$8([
                        breakParent$2,
                        printOpeningTagPrefix(node, options),
                        stripTrailingHardline$1(
                          textToDoc(value, {
                            parser: parser,
                          })
                        ),
                        printClosingTagSuffix(node, options),
                      ]),
                    ]);
                  }
                } else if (node.parent.type === "interpolation") {
                  return concat$8([
                    indent$5(
                      concat$8([
                        line$6,
                        textToDoc(
                          node.value,
                          Object.assign(
                            {
                              __isInHtmlInterpolation: true, // to avoid unexpected `}}`
                            },
                            options.parser === "angular"
                              ? {
                                  parser: "__ng_interpolation",
                                  trailingComma: "none",
                                }
                              : options.parser === "vue"
                              ? {
                                  parser: "__vue_expression",
                                }
                              : {
                                  parser: "__js_expression",
                                }
                          )
                        ),
                      ])
                    ),
                    node.parent.next &&
                    needsToBorrowPrevClosingTagEndMarker(node.parent.next)
                      ? " "
                      : line$6,
                  ]);
                }

                break;
              }

              case "attribute": {
                if (!node.value) {
                  break;
                } // lit-html: html`<my-element obj=${obj}></my-element>`

                if (
                  /^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(
                    options.originalText.slice(
                      node.valueSpan.start.offset,
                      node.valueSpan.end.offset
                    )
                  )
                ) {
                  return concat$8([node.rawName, "=", node.value]);
                } // lwc: html`<my-element data-for={value}></my-elememt>`

                if (options.parser === "lwc") {
                  var interpolationRegex = /^\{[\s\S]*\}$/;

                  if (
                    interpolationRegex.test(
                      options.originalText.slice(
                        node.valueSpan.start.offset,
                        node.valueSpan.end.offset
                      )
                    )
                  ) {
                    return concat$8([node.rawName, "=", node.value]);
                  }
                }

                var embeddedAttributeValueDoc = printEmbeddedAttributeValue(
                  node,
                  function (code, opts) {
                    return (
                      // strictly prefer single quote to avoid unnecessary html entity escape
                      textToDoc(
                        code,
                        Object.assign(
                          {
                            __isInHtmlAttribute: true,
                          },
                          opts
                        )
                      )
                    );
                  },
                  options
                );

                if (embeddedAttributeValueDoc) {
                  return concat$8([
                    node.rawName,
                    '="',
                    group$8(
                      mapDoc$4(embeddedAttributeValueDoc, function (doc$$2) {
                        return typeof doc$$2 === "string"
                          ? doc$$2.replace(/"/g, "&quot;")
                          : doc$$2;
                      })
                    ),
                    '"',
                  ]);
                }

                break;
              }

              case "yaml":
                return markAsRoot$2(
                  concat$8([
                    "---",
                    hardline$7,
                    node.value.trim().length === 0
                      ? ""
                      : textToDoc(node.value, {
                          parser: "yaml",
                        }),
                    "---",
                  ])
                );
            }
          }

          function genericPrint$2(path, options, print) {
            var node = path.getValue();

            switch (node.type) {
              case "root":
                // use original concat to not break stripTrailingHardline
                return builders.concat([
                  group$8(printChildren(path, options, print)),
                  hardline$7,
                ]);

              case "element":
              case "ieConditionalComment": {
                /**
                 * do not break:
                 *
                 *     <div>{{
                 *         ~
                 *       interpolation
                 *     }}</div>
                 *            ~
                 *
                 * exception: break if the opening tag breaks
                 *
                 *     <div
                 *       long
                 *           ~
                 *       >{{
                 *         interpolation
                 *       }}</div
                 *              ~
                 *     >
                 */
                var shouldHugContent =
                  node.children.length === 1 &&
                  node.firstChild.type === "interpolation" &&
                  node.firstChild.isLeadingSpaceSensitive &&
                  !node.firstChild.hasLeadingSpaces &&
                  node.lastChild.isTrailingSpaceSensitive &&
                  !node.lastChild.hasTrailingSpaces;
                var attrGroupId = Symbol("element-attr-group-id");
                return concat$8([
                  group$8(
                    concat$8([
                      group$8(printOpeningTag(path, options, print), {
                        id: attrGroupId,
                      }),
                      node.children.length === 0
                        ? node.hasDanglingSpaces &&
                          node.isDanglingSpaceSensitive
                          ? line$6
                          : ""
                        : concat$8([
                            forceBreakContent(node) ? breakParent$2 : "",
                            (function (childrenDoc) {
                              return shouldHugContent
                                ? ifBreak$4(
                                    indent$5(childrenDoc),
                                    childrenDoc,
                                    {
                                      groupId: attrGroupId,
                                    }
                                  )
                                : isScriptLikeTag(node) &&
                                  node.parent.type === "root" &&
                                  options.parser === "vue"
                                ? childrenDoc
                                : indent$5(childrenDoc);
                            })(
                              concat$8([
                                shouldHugContent
                                  ? ifBreak$4(softline$4, "", {
                                      groupId: attrGroupId,
                                    })
                                  : node.firstChild.hasLeadingSpaces &&
                                    node.firstChild.isLeadingSpaceSensitive
                                  ? line$6
                                  : node.firstChild.type === "text" &&
                                    node.isWhitespaceSensitive &&
                                    node.isIndentationSensitive
                                  ? dedentToRoot$1(softline$4)
                                  : softline$4,
                                printChildren(path, options, print),
                              ])
                            ),
                            (
                              node.next
                                ? needsToBorrowPrevClosingTagEndMarker(
                                    node.next
                                  )
                                : needsToBorrowLastChildClosingTagEndMarker(
                                    node.parent
                                  )
                            )
                              ? node.lastChild.hasTrailingSpaces &&
                                node.lastChild.isTrailingSpaceSensitive
                                ? " "
                                : ""
                              : shouldHugContent
                              ? ifBreak$4(softline$4, "", {
                                  groupId: attrGroupId,
                                })
                              : node.lastChild.hasTrailingSpaces &&
                                node.lastChild.isTrailingSpaceSensitive
                              ? line$6
                              : (node.lastChild.type === "comment" ||
                                  (node.lastChild.type === "text" &&
                                    node.isWhitespaceSensitive &&
                                    node.isIndentationSensitive)) &&
                                new RegExp(
                                  "\\n\\s{".concat(
                                    options.tabWidth *
                                      countParents(path, function (n) {
                                        return (
                                          n.parent && n.parent.type !== "root"
                                        );
                                      }),
                                    "}$"
                                  )
                                ).test(node.lastChild.value)
                              ? /**
                                 *     <div>
                                 *       <pre>
                                 *         something
                                 *       </pre>
                                 *            ~
                                 *     </div>
                                 */
                                ""
                              : softline$4,
                          ]),
                    ])
                  ),
                  printClosingTag(node, options),
                ]);
              }

              case "ieConditionalStartComment":
              case "ieConditionalEndComment":
                return concat$8([
                  printOpeningTagStart(node),
                  printClosingTagEnd(node),
                ]);

              case "interpolation":
                return concat$8([
                  printOpeningTagStart(node, options),
                  concat$8(path.map(print, "children")),
                  printClosingTagEnd(node, options),
                ]);

              case "text": {
                if (node.parent.type === "interpolation") {
                  // replace the trailing literalline with hardline for better readability
                  var trailingNewlineRegex = /\n[^\S\n]*?$/;
                  var hasTrailingNewline = trailingNewlineRegex.test(
                    node.value
                  );
                  var value = hasTrailingNewline
                    ? node.value.replace(trailingNewlineRegex, "")
                    : node.value;
                  return concat$8([
                    concat$8(replaceEndOfLineWith$1(value, literalline$2)),
                    hasTrailingNewline ? hardline$7 : "",
                  ]);
                }

                return fill$3(
                  normalizeParts(
                    [].concat(
                      printOpeningTagPrefix(node, options),
                      getTextValueParts(node),
                      printClosingTagSuffix(node, options)
                    )
                  )
                );
              }

              case "docType":
                return concat$8([
                  group$8(
                    concat$8([
                      printOpeningTagStart(node, options),
                      " ",
                      node.value
                        .replace(/^html\b/i, "html")
                        .replace(/\s+/g, " "),
                    ])
                  ),
                  printClosingTagEnd(node, options),
                ]);

              case "comment": {
                return concat$8([
                  printOpeningTagPrefix(node, options),
                  concat$8(
                    replaceEndOfLineWith$1(
                      options.originalText.slice(
                        options.locStart(node),
                        options.locEnd(node)
                      ),
                      literalline$2
                    )
                  ),
                  printClosingTagSuffix(node, options),
                ]);
              }

              case "attribute": {
                if (node.value === null) {
                  return node.rawName;
                }

                var _value = unescapeQuoteEntities(node.value);

                var singleQuoteCount = countChars(_value, "'");
                var doubleQuoteCount = countChars(_value, '"');
                var quote = singleQuoteCount < doubleQuoteCount ? "'" : '"';
                return concat$8([
                  node.rawName,
                  concat$8([
                    "=",
                    quote,
                    concat$8(
                      replaceEndOfLineWith$1(
                        quote === '"'
                          ? _value.replace(/"/g, "&quot;")
                          : _value.replace(/'/g, "&apos;"),
                        literalline$2
                      )
                    ),
                    quote,
                  ]),
                ]);
              }

              case "yaml":
              case "toml":
                return concat$8(
                  replaceEndOfLineWith$1(node.raw, literalline$2)
                );

              default:
                throw new Error("Unexpected node type ".concat(node.type));
            }
          }

          function printChildren(path, options, print) {
            var node = path.getValue();

            if (forceBreakChildren(node)) {
              return concat$8([
                breakParent$2,
                concat$8(
                  path.map(function (childPath) {
                    var childNode = childPath.getValue();
                    var prevBetweenLine = !childNode.prev
                      ? ""
                      : printBetweenLine(childNode.prev, childNode);
                    return concat$8([
                      !prevBetweenLine
                        ? ""
                        : concat$8([
                            prevBetweenLine,
                            forceNextEmptyLine(childNode.prev)
                              ? hardline$7
                              : "",
                          ]),
                      printChild(childPath),
                    ]);
                  }, "children")
                ),
              ]);
            }

            var groupIds = node.children.map(function () {
              return Symbol("");
            });
            return concat$8(
              path.map(function (childPath, childIndex) {
                var childNode = childPath.getValue();

                if (isTextLikeNode(childNode)) {
                  if (childNode.prev && isTextLikeNode(childNode.prev)) {
                    var _prevBetweenLine = printBetweenLine(
                      childNode.prev,
                      childNode
                    );

                    if (_prevBetweenLine) {
                      if (forceNextEmptyLine(childNode.prev)) {
                        return concat$8([
                          hardline$7,
                          hardline$7,
                          printChild(childPath),
                        ]);
                      }

                      return concat$8([
                        _prevBetweenLine,
                        printChild(childPath),
                      ]);
                    }
                  }

                  return printChild(childPath);
                }

                var prevParts = [];
                var leadingParts = [];
                var trailingParts = [];
                var nextParts = [];
                var prevBetweenLine = childNode.prev
                  ? printBetweenLine(childNode.prev, childNode)
                  : "";
                var nextBetweenLine = childNode.next
                  ? printBetweenLine(childNode, childNode.next)
                  : "";

                if (prevBetweenLine) {
                  if (forceNextEmptyLine(childNode.prev)) {
                    prevParts.push(hardline$7, hardline$7);
                  } else if (prevBetweenLine === hardline$7) {
                    prevParts.push(hardline$7);
                  } else {
                    if (isTextLikeNode(childNode.prev)) {
                      leadingParts.push(prevBetweenLine);
                    } else {
                      leadingParts.push(
                        ifBreak$4("", softline$4, {
                          groupId: groupIds[childIndex - 1],
                        })
                      );
                    }
                  }
                }

                if (nextBetweenLine) {
                  if (forceNextEmptyLine(childNode)) {
                    if (isTextLikeNode(childNode.next)) {
                      nextParts.push(hardline$7, hardline$7);
                    }
                  } else if (nextBetweenLine === hardline$7) {
                    if (isTextLikeNode(childNode.next)) {
                      nextParts.push(hardline$7);
                    }
                  } else {
                    trailingParts.push(nextBetweenLine);
                  }
                }

                return concat$8(
                  [].concat(
                    prevParts,
                    group$8(
                      concat$8([
                        concat$8(leadingParts),
                        group$8(
                          concat$8([
                            printChild(childPath),
                            concat$8(trailingParts),
                          ]),
                          {
                            id: groupIds[childIndex],
                          }
                        ),
                      ])
                    ),
                    nextParts
                  )
                );
              }, "children")
            );

            function printChild(childPath) {
              var child = childPath.getValue();

              if (hasPrettierIgnore(child)) {
                return concat$8(
                  [].concat(
                    printOpeningTagPrefix(child, options),
                    replaceEndOfLineWith$1(
                      options.originalText.slice(
                        options.locStart(child) +
                          (child.prev &&
                          needsToBorrowNextOpeningTagStartMarker(child.prev)
                            ? printOpeningTagStartMarker(child).length
                            : 0),
                        options.locEnd(child) -
                          (child.next &&
                          needsToBorrowPrevClosingTagEndMarker(child.next)
                            ? printClosingTagEndMarker(child, options).length
                            : 0)
                      ),
                      literalline$2
                    ),
                    printClosingTagSuffix(child, options)
                  )
                );
              }

              if (shouldPreserveContent(child, options)) {
                return concat$8(
                  [].concat(
                    printOpeningTagPrefix(child, options),
                    group$8(printOpeningTag(childPath, options, print)),
                    replaceEndOfLineWith$1(
                      options.originalText.slice(
                        child.startSourceSpan.end.offset +
                          (child.firstChild &&
                          needsToBorrowParentOpeningTagEndMarker(
                            child.firstChild
                          )
                            ? -printOpeningTagEndMarker(child).length
                            : 0),
                        child.endSourceSpan.start.offset +
                          (child.lastChild &&
                          needsToBorrowParentClosingTagStartMarker(
                            child.lastChild
                          )
                            ? printClosingTagStartMarker(child, options).length
                            : needsToBorrowLastChildClosingTagEndMarker(child)
                            ? -printClosingTagEndMarker(
                                child.lastChild,
                                options
                              ).length
                            : 0)
                      ),
                      literalline$2
                    ),
                    printClosingTag(child, options),
                    printClosingTagSuffix(child, options)
                  )
                );
              }

              return print(childPath);
            }

            function printBetweenLine(prevNode, nextNode) {
              return isTextLikeNode(prevNode) && isTextLikeNode(nextNode)
                ? prevNode.isTrailingSpaceSensitive
                  ? prevNode.hasTrailingSpaces
                    ? preferHardlineAsLeadingSpaces(nextNode)
                      ? hardline$7
                      : line$6
                    : ""
                  : preferHardlineAsLeadingSpaces(nextNode)
                  ? hardline$7
                  : softline$4
                : (needsToBorrowNextOpeningTagStartMarker(prevNode) &&
                    /**
                     *     123<a
                     *          ~
                     *       ><b>
                     */
                    (nextNode.firstChild ||
                      /**
                       *     123<!--
                       *            ~
                       *     -->
                       */
                      nextNode.isSelfClosing ||
                      /**
                       *     123<span
                       *             ~
                       *       attr
                       */
                      (nextNode.type === "element" &&
                        nextNode.attrs.length !== 0))) ||
                  /**
                   *     <img
                   *       src="long"
                   *                 ~
                   *     />123
                   */
                  (prevNode.type === "element" &&
                    prevNode.isSelfClosing &&
                    needsToBorrowPrevClosingTagEndMarker(nextNode))
                ? ""
                : !nextNode.isLeadingSpaceSensitive ||
                  preferHardlineAsLeadingSpaces(nextNode) ||
                  /**
                   *       Want to write us a letter? Use our<a
                   *         ><b><a>mailing address</a></b></a
                   *                                          ~
                   *       >.
                   */
                  (needsToBorrowPrevClosingTagEndMarker(nextNode) &&
                    prevNode.lastChild &&
                    needsToBorrowParentClosingTagStartMarker(
                      prevNode.lastChild
                    ) &&
                    prevNode.lastChild.lastChild &&
                    needsToBorrowParentClosingTagStartMarker(
                      prevNode.lastChild.lastChild
                    ))
                ? hardline$7
                : nextNode.hasLeadingSpaces
                ? line$6
                : softline$4;
            }
          }

          function printOpeningTag(path, options, print) {
            var node = path.getValue();
            var forceNotToBreakAttrContent =
              node.type === "element" &&
              node.fullName === "script" &&
              node.attrs.length === 1 &&
              node.attrs[0].fullName === "src" &&
              node.children.length === 0;
            return concat$8([
              printOpeningTagStart(node, options),
              !node.attrs || node.attrs.length === 0
                ? node.isSelfClosing
                  ? /**
                     *     <br />
                     *        ^
                     */
                    " "
                  : ""
                : concat$8([
                    indent$5(
                      concat$8([
                        forceNotToBreakAttrContent ? " " : line$6,
                        join$5(
                          line$6,
                          (function (ignoreAttributeData) {
                            var hasPrettierIgnoreAttribute =
                              typeof ignoreAttributeData === "boolean"
                                ? function () {
                                    return ignoreAttributeData;
                                  }
                                : Array.isArray(ignoreAttributeData)
                                ? function (attr) {
                                    return (
                                      ignoreAttributeData.indexOf(
                                        attr.rawName
                                      ) !== -1
                                    );
                                  }
                                : function () {
                                    return false;
                                  };
                            return path.map(function (attrPath) {
                              var attr = attrPath.getValue();
                              return hasPrettierIgnoreAttribute(attr)
                                ? concat$8(
                                    replaceEndOfLineWith$1(
                                      options.originalText.slice(
                                        options.locStart(attr),
                                        options.locEnd(attr)
                                      ),
                                      literalline$2
                                    )
                                  )
                                : print(attrPath);
                            }, "attrs");
                          })(
                            node.prev &&
                              node.prev.type === "comment" &&
                              getPrettierIgnoreAttributeCommentData(
                                node.prev.value
                              )
                          )
                        ),
                      ])
                    ),
                    /**
                     *     123<a
                     *       attr
                     *           ~
                     *       >456
                     */
                    (node.firstChild &&
                      needsToBorrowParentOpeningTagEndMarker(
                        node.firstChild
                      )) ||
                    /**
                     *     <span
                     *       >123<meta
                     *                ~
                     *     /></span>
                     */
                    (node.isSelfClosing &&
                      needsToBorrowLastChildClosingTagEndMarker(node.parent))
                      ? ""
                      : node.isSelfClosing
                      ? forceNotToBreakAttrContent
                        ? " "
                        : line$6
                      : forceNotToBreakAttrContent
                      ? ""
                      : softline$4,
                  ]),
              node.isSelfClosing ? "" : printOpeningTagEnd(node),
            ]);
          }

          function printOpeningTagStart(node, options) {
            return node.prev &&
              needsToBorrowNextOpeningTagStartMarker(node.prev)
              ? ""
              : concat$8([
                  printOpeningTagPrefix(node, options),
                  printOpeningTagStartMarker(node),
                ]);
          }

          function printOpeningTagEnd(node) {
            return node.firstChild &&
              needsToBorrowParentOpeningTagEndMarker(node.firstChild)
              ? ""
              : printOpeningTagEndMarker(node);
          }

          function printClosingTag(node, options) {
            return concat$8([
              node.isSelfClosing ? "" : printClosingTagStart(node, options),
              printClosingTagEnd(node, options),
            ]);
          }

          function printClosingTagStart(node, options) {
            return node.lastChild &&
              needsToBorrowParentClosingTagStartMarker(node.lastChild)
              ? ""
              : concat$8([
                  printClosingTagPrefix(node, options),
                  printClosingTagStartMarker(node, options),
                ]);
          }

          function printClosingTagEnd(node, options) {
            return (
              node.next
                ? needsToBorrowPrevClosingTagEndMarker(node.next)
                : needsToBorrowLastChildClosingTagEndMarker(node.parent)
            )
              ? ""
              : concat$8([
                  printClosingTagEndMarker(node, options),
                  printClosingTagSuffix(node, options),
                ]);
          }

          function needsToBorrowNextOpeningTagStartMarker(node) {
            /**
             *     123<p
             *        ^^
             *     >
             */
            return (
              node.next &&
              !isTextLikeNode(node.next) &&
              isTextLikeNode(node) &&
              node.isTrailingSpaceSensitive &&
              !node.hasTrailingSpaces
            );
          }

          function needsToBorrowParentOpeningTagEndMarker(node) {
            /**
             *     <p
             *       >123
             *       ^
             *
             *     <p
             *       ><a
             *       ^
             */
            return (
              !node.prev &&
              node.isLeadingSpaceSensitive &&
              !node.hasLeadingSpaces
            );
          }

          function needsToBorrowPrevClosingTagEndMarker(node) {
            /**
             *     <p></p
             *     >123
             *     ^
             *
             *     <p></p
             *     ><a
             *     ^
             */
            return (
              node.prev &&
              !isTextLikeNode(node.prev) &&
              node.isLeadingSpaceSensitive &&
              !node.hasLeadingSpaces
            );
          }

          function needsToBorrowLastChildClosingTagEndMarker(node) {
            /**
             *     <p
             *       ><a></a
             *       ></p
             *       ^
             *     >
             */
            return (
              node.lastChild &&
              node.lastChild.isTrailingSpaceSensitive &&
              !node.lastChild.hasTrailingSpaces &&
              !isTextLikeNode(getLastDescendant(node.lastChild))
            );
          }

          function needsToBorrowParentClosingTagStartMarker(node) {
            /**
             *     <p>
             *       123</p
             *          ^^^
             *     >
             *
             *         123</b
             *       ></a
             *        ^^^
             *     >
             */
            return (
              !node.next &&
              !node.hasTrailingSpaces &&
              node.isTrailingSpaceSensitive &&
              isTextLikeNode(getLastDescendant(node))
            );
          }

          function printOpeningTagPrefix(node, options) {
            return needsToBorrowParentOpeningTagEndMarker(node)
              ? printOpeningTagEndMarker(node.parent)
              : needsToBorrowPrevClosingTagEndMarker(node)
              ? printClosingTagEndMarker(node.prev, options)
              : "";
          }

          function printClosingTagPrefix(node, options) {
            return needsToBorrowLastChildClosingTagEndMarker(node)
              ? printClosingTagEndMarker(node.lastChild, options)
              : "";
          }

          function printClosingTagSuffix(node, options) {
            return needsToBorrowParentClosingTagStartMarker(node)
              ? printClosingTagStartMarker(node.parent, options)
              : needsToBorrowNextOpeningTagStartMarker(node)
              ? printOpeningTagStartMarker(node.next)
              : "";
          }

          function printOpeningTagStartMarker(node) {
            switch (node.type) {
              case "ieConditionalComment":
              case "ieConditionalStartComment":
                return "<!--[if ".concat(node.condition);

              case "ieConditionalEndComment":
                return "<!--<!";

              case "interpolation":
                return "{{";

              case "docType":
                return "<!DOCTYPE";

              case "element":
                if (node.condition) {
                  return "<!--[if "
                    .concat(node.condition, "]><!--><")
                    .concat(node.rawName);
                }

              // fall through

              default:
                return "<".concat(node.rawName);
            }
          }

          function printOpeningTagEndMarker(node) {
            assert$3(!node.isSelfClosing);

            switch (node.type) {
              case "ieConditionalComment":
                return "]>";

              case "element":
                if (node.condition) {
                  return "><!--<![endif]-->";
                }

              // fall through

              default:
                return ">";
            }
          }

          function printClosingTagStartMarker(node, options) {
            assert$3(!node.isSelfClosing);

            if (shouldNotPrintClosingTag(node, options)) {
              return "";
            }

            switch (node.type) {
              case "ieConditionalComment":
                return "<!";

              case "element":
                if (node.hasHtmComponentClosingTag) {
                  return "<//";
                }

              // fall through

              default:
                return "</".concat(node.rawName);
            }
          }

          function printClosingTagEndMarker(node, options) {
            if (shouldNotPrintClosingTag(node, options)) {
              return "";
            }

            switch (node.type) {
              case "ieConditionalComment":
              case "ieConditionalEndComment":
                return "[endif]-->";

              case "ieConditionalStartComment":
                return "]><!-->";

              case "interpolation":
                return "}}";

              case "element":
                if (node.isSelfClosing) {
                  return "/>";
                }

              // fall through

              default:
                return ">";
            }
          }

          function getTextValueParts(node) {
            var value =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : node.value;
            return node.parent.isWhitespaceSensitive
              ? node.parent.isIndentationSensitive
                ? replaceEndOfLineWith$1(value, literalline$2)
                : replaceEndOfLineWith$1(
                    dedentString(value.replace(/^\s*?\n|\n\s*?$/g, "")),
                    hardline$7
                  ) // https://infra.spec.whatwg.org/#ascii-whitespace
              : join$5(line$6, value.split(/[\t\n\f\r ]+/)).parts;
          }

          function printEmbeddedAttributeValue(
            node,
            originalTextToDoc,
            options
          ) {
            var isKeyMatched = function isKeyMatched(patterns) {
              return new RegExp(patterns.join("|")).test(node.fullName);
            };

            var getValue = function getValue() {
              return unescapeQuoteEntities(node.value);
            };

            var shouldHug = false;

            var __onHtmlBindingRoot = function __onHtmlBindingRoot(root) {
              var rootNode =
                root.type === "NGRoot"
                  ? root.node.type === "NGMicrosyntax" &&
                    root.node.body.length === 1 &&
                    root.node.body[0].type === "NGMicrosyntaxExpression"
                    ? root.node.body[0].expression
                    : root.node
                  : root.type === "JsExpressionRoot"
                  ? root.node
                  : root;

              if (
                rootNode &&
                (rootNode.type === "ObjectExpression" ||
                  rootNode.type === "ArrayExpression")
              ) {
                shouldHug = true;
              }
            };

            var printHug = function printHug(doc$$2) {
              return group$8(doc$$2);
            };

            var printExpand = function printExpand(doc$$2) {
              return group$8(
                concat$8([indent$5(concat$8([softline$4, doc$$2])), softline$4])
              );
            };

            var printMaybeHug = function printMaybeHug(doc$$2) {
              return shouldHug ? printHug(doc$$2) : printExpand(doc$$2);
            };

            var textToDoc = function textToDoc(code, opts) {
              return originalTextToDoc(
                code,
                Object.assign(
                  {
                    __onHtmlBindingRoot: __onHtmlBindingRoot,
                  },
                  opts
                )
              );
            };

            if (
              node.fullName === "srcset" &&
              (node.parent.fullName === "img" ||
                node.parent.fullName === "source")
            ) {
              return printExpand(printImgSrcset(getValue()));
            }

            if (options.parser === "vue") {
              if (node.fullName === "v-for") {
                return printVueFor(getValue(), textToDoc);
              }

              if (node.fullName === "slot-scope") {
                return printVueSlotScope(getValue(), textToDoc);
              }
              /**
               *     @click="jsStatement"
               *     @click="jsExpression"
               *     v-on:click="jsStatement"
               *     v-on:click="jsExpression"
               */

              var vueEventBindingPatterns = ["^@", "^v-on:"];
              /**
               *     :class="vueExpression"
               *     v-bind:id="vueExpression"
               */

              var vueExpressionBindingPatterns = ["^:", "^v-bind:"];
              /**
               *     v-if="jsExpression"
               */

              var jsExpressionBindingPatterns = ["^v-"];

              if (isKeyMatched(vueEventBindingPatterns)) {
                var value = getValue();
                return printMaybeHug(
                  isVueEventBindingExpression(value)
                    ? textToDoc(value, {
                        parser: "__js_expression",
                      })
                    : stripTrailingHardline$1(
                        textToDoc(value, {
                          parser: "__vue_event_binding",
                        })
                      )
                );
              }

              if (isKeyMatched(vueExpressionBindingPatterns)) {
                return printMaybeHug(
                  textToDoc(getValue(), {
                    parser: "__vue_expression",
                  })
                );
              }

              if (isKeyMatched(jsExpressionBindingPatterns)) {
                return printMaybeHug(
                  textToDoc(getValue(), {
                    parser: "__js_expression",
                  })
                );
              }
            }

            if (options.parser === "angular") {
              var ngTextToDoc = function ngTextToDoc(code, opts) {
                return (
                  // angular does not allow trailing comma
                  textToDoc(
                    code,
                    Object.assign(
                      {
                        trailingComma: "none",
                      },
                      opts
                    )
                  )
                );
              };
              /**
               *     *directive="angularDirective"
               */

              var ngDirectiveBindingPatterns = ["^\\*"];
              /**
               *     (click)="angularStatement"
               *     on-click="angularStatement"
               */

              var ngStatementBindingPatterns = ["^\\(.+\\)$", "^on-"];
              /**
               *     [target]="angularExpression"
               *     bind-target="angularExpression"
               *     [(target)]="angularExpression"
               *     bindon-target="angularExpression"
               */

              var ngExpressionBindingPatterns = ["^\\[.+\\]$", "^bind(on)?-"];

              if (isKeyMatched(ngStatementBindingPatterns)) {
                return printMaybeHug(
                  ngTextToDoc(getValue(), {
                    parser: "__ng_action",
                  })
                );
              }

              if (isKeyMatched(ngExpressionBindingPatterns)) {
                return printMaybeHug(
                  ngTextToDoc(getValue(), {
                    parser: "__ng_binding",
                  })
                );
              }

              if (isKeyMatched(ngDirectiveBindingPatterns)) {
                return printMaybeHug(
                  ngTextToDoc(getValue(), {
                    parser: "__ng_directive",
                  })
                );
              }

              var interpolationRegex = /\{\{([\s\S]+?)\}\}/g;

              var _value2 = getValue();

              if (interpolationRegex.test(_value2)) {
                var parts = [];

                _value2
                  .split(interpolationRegex)
                  .forEach(function (part, index) {
                    if (index % 2 === 0) {
                      parts.push(
                        concat$8(replaceEndOfLineWith$1(part, literalline$2))
                      );
                    } else {
                      try {
                        parts.push(
                          group$8(
                            concat$8([
                              "{{",
                              indent$5(
                                concat$8([
                                  line$6,
                                  ngTextToDoc(part, {
                                    parser: "__ng_interpolation",
                                    __isInHtmlInterpolation: true, // to avoid unexpected `}}`
                                  }),
                                ])
                              ),
                              line$6,
                              "}}",
                            ])
                          )
                        );
                      } catch (e) {
                        parts.push(
                          "{{",
                          concat$8(replaceEndOfLineWith$1(part, literalline$2)),
                          "}}"
                        );
                      }
                    }
                  });

                return group$8(concat$8(parts));
              }
            }

            return null;
          }

          var printerHtml = {
            preprocess: preprocess_1,
            print: genericPrint$2,
            insertPragma: insertPragma$5,
            massageAstNode: clean$4,
            embed: embed$2,
          };

          var CATEGORY_HTML = "HTML"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js

          var options$9 = {
            htmlWhitespaceSensitivity: {
              since: "1.15.0",
              category: CATEGORY_HTML,
              type: "choice",
              default: "css",
              description: "How to handle whitespaces in HTML.",
              choices: [
                {
                  value: "css",
                  description:
                    "Respect the default value of CSS display property.",
                },
                {
                  value: "strict",
                  description: "Whitespaces are considered sensitive.",
                },
                {
                  value: "ignore",
                  description: "Whitespaces are considered insensitive.",
                },
              ],
            },
          };

          var name$7 = "HTML";
          var type$6 = "markup";
          var tmScope$6 = "text.html.basic";
          var aceMode$6 = "html";
          var codemirrorMode$3 = "htmlmixed";
          var codemirrorMimeType$3 = "text/html";
          var color$1 = "#e34c26";
          var aliases$1 = ["xhtml"];
          var extensions$6 = [
            ".html",
            ".htm",
            ".html.hl",
            ".inc",
            ".st",
            ".xht",
            ".xhtml",
          ];
          var languageId$6 = 146;
          var html$1 = {
            name: name$7,
            type: type$6,
            tmScope: tmScope$6,
            aceMode: aceMode$6,
            codemirrorMode: codemirrorMode$3,
            codemirrorMimeType: codemirrorMimeType$3,
            color: color$1,
            aliases: aliases$1,
            extensions: extensions$6,
            languageId: languageId$6,
          };

          var html$2 = Object.freeze({
            name: name$7,
            type: type$6,
            tmScope: tmScope$6,
            aceMode: aceMode$6,
            codemirrorMode: codemirrorMode$3,
            codemirrorMimeType: codemirrorMimeType$3,
            color: color$1,
            aliases: aliases$1,
            extensions: extensions$6,
            languageId: languageId$6,
            default: html$1,
          });

          var name$8 = "Vue";
          var type$7 = "markup";
          var color$2 = "#2c3e50";
          var extensions$7 = [".vue"];
          var tmScope$7 = "text.html.vue";
          var aceMode$7 = "html";
          var languageId$7 = 391;
          var vue = {
            name: name$8,
            type: type$7,
            color: color$2,
            extensions: extensions$7,
            tmScope: tmScope$7,
            aceMode: aceMode$7,
            languageId: languageId$7,
          };

          var vue$1 = Object.freeze({
            name: name$8,
            type: type$7,
            color: color$2,
            extensions: extensions$7,
            tmScope: tmScope$7,
            aceMode: aceMode$7,
            languageId: languageId$7,
            default: vue,
          });

          var require$$0$22 = (html$2 && html$1) || html$2;

          var require$$1$9 = (vue$1 && vue) || vue$1;

          var languages$3 = [
            createLanguage(require$$0$22, {
              override: {
                name: "Angular",
                since: "1.15.0",
                parsers: ["angular"],
                vscodeLanguageIds: ["html"],
                extensions: [".component.html"],
                filenames: [],
              },
            }),
            createLanguage(require$$0$22, {
              override: {
                since: "1.15.0",
                parsers: ["html"],
                vscodeLanguageIds: ["html"],
              },
              extend: {
                extensions: [
                  ".mjml", // MJML is considered XML in Linguist but it should be formatted as HTML
                ],
              },
            }),
            createLanguage(require$$0$22, {
              override: {
                name: "Lightning Web Components",
                since: "1.17.0",
                parsers: ["lwc"],
                vscodeLanguageIds: ["html"],
                extensions: [],
                filenames: [],
              },
            }),
            createLanguage(require$$1$9, {
              override: {
                since: "1.10.0",
                parsers: ["vue"],
                vscodeLanguageIds: ["vue"],
              },
            }),
          ];
          var printers$3 = {
            html: printerHtml,
          };
          var languageHtml = {
            languages: languages$3,
            printers: printers$3,
            options: options$9,
          };

          var addLeadingComment$2 = utilShared.addLeadingComment;
          var addTrailingComment$2 = utilShared.addTrailingComment;
          var addDanglingComment$2 = utilShared.addDanglingComment;

          function handleOwnLineComment(
            comment,
            text,
            options,
            ast,
            isLastComment
          ) {
            var precedingNode = comment.precedingNode,
              enclosingNode = comment.enclosingNode,
              followingNode = comment.followingNode;

            if (
              handleLastFunctionArgComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleMemberExpressionComments(
                enclosingNode,
                followingNode,
                comment
              ) ||
              handleIfStatementComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleWhileComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleTryStatementComments(
                enclosingNode,
                precedingNode,
                followingNode,
                comment
              ) ||
              handleClassComments(
                enclosingNode,
                precedingNode,
                followingNode,
                comment
              ) ||
              handleImportSpecifierComments(enclosingNode, comment) ||
              handleForComments(enclosingNode, precedingNode, comment) ||
              handleUnionTypeComments(
                precedingNode,
                enclosingNode,
                followingNode,
                comment
              ) ||
              handleOnlyComments(enclosingNode, ast, comment, isLastComment) ||
              handleImportDeclarationComments(
                text,
                enclosingNode,
                precedingNode,
                comment,
                options
              ) ||
              handleAssignmentPatternComments(enclosingNode, comment) ||
              handleMethodNameComments(
                text,
                enclosingNode,
                precedingNode,
                comment,
                options
              )
            ) {
              return true;
            }

            return false;
          }

          function handleEndOfLineComment(
            comment,
            text,
            options,
            ast,
            isLastComment
          ) {
            var precedingNode = comment.precedingNode,
              enclosingNode = comment.enclosingNode,
              followingNode = comment.followingNode;

            if (
              handleLastFunctionArgComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleConditionalExpressionComments(
                enclosingNode,
                precedingNode,
                followingNode,
                comment,
                text,
                options
              ) ||
              handleImportSpecifierComments(enclosingNode, comment) ||
              handleIfStatementComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleWhileComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleTryStatementComments(
                enclosingNode,
                precedingNode,
                followingNode,
                comment
              ) ||
              handleClassComments(
                enclosingNode,
                precedingNode,
                followingNode,
                comment
              ) ||
              handleLabeledStatementComments(enclosingNode, comment) ||
              handleCallExpressionComments(
                precedingNode,
                enclosingNode,
                comment
              ) ||
              handlePropertyComments(enclosingNode, comment) ||
              handleOnlyComments(enclosingNode, ast, comment, isLastComment) ||
              handleTypeAliasComments(enclosingNode, followingNode, comment) ||
              handleVariableDeclaratorComments(
                enclosingNode,
                followingNode,
                comment
              )
            ) {
              return true;
            }

            return false;
          }

          function handleRemainingComment(
            comment,
            text,
            options,
            ast,
            isLastComment
          ) {
            var precedingNode = comment.precedingNode,
              enclosingNode = comment.enclosingNode,
              followingNode = comment.followingNode;

            if (
              handleIfStatementComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleWhileComments(
                text,
                precedingNode,
                enclosingNode,
                followingNode,
                comment,
                options
              ) ||
              handleObjectPropertyAssignment(
                enclosingNode,
                precedingNode,
                comment
              ) ||
              handleCommentInEmptyParens(
                text,
                enclosingNode,
                comment,
                options
              ) ||
              handleMethodNameComments(
                text,
                enclosingNode,
                precedingNode,
                comment,
                options
              ) ||
              handleOnlyComments(enclosingNode, ast, comment, isLastComment) ||
              handleCommentAfterArrowParams(
                text,
                enclosingNode,
                comment,
                options
              ) ||
              handleFunctionNameComments(
                text,
                enclosingNode,
                precedingNode,
                comment,
                options
              ) ||
              handleTSMappedTypeComments(
                text,
                enclosingNode,
                precedingNode,
                followingNode,
                comment
              ) ||
              handleBreakAndContinueStatementComments(enclosingNode, comment)
            ) {
              return true;
            }

            return false;
          }

          function addBlockStatementFirstComment(node, comment) {
            var body = node.body.filter(function (n) {
              return n.type !== "EmptyStatement";
            });

            if (body.length === 0) {
              addDanglingComment$2(node, comment);
            } else {
              addLeadingComment$2(body[0], comment);
            }
          }

          function addBlockOrNotComment(node, comment) {
            if (node.type === "BlockStatement") {
              addBlockStatementFirstComment(node, comment);
            } else {
              addLeadingComment$2(node, comment);
            }
          } // There are often comments before the else clause of if statements like
          //
          //   if (1) { ... }
          //   // comment
          //   else { ... }
          //
          // They are being attached as leading comments of the BlockExpression which
          // is not well printed. What we want is to instead move the comment inside
          // of the block and make it leadingComment of the first element of the block
          // or dangling comment of the block if there is nothing inside
          //
          //   if (1) { ... }
          //   else {
          //     // comment
          //     ...
          //   }

          function handleIfStatementComments(
            text,
            precedingNode,
            enclosingNode,
            followingNode,
            comment,
            options
          ) {
            if (
              !enclosingNode ||
              enclosingNode.type !== "IfStatement" ||
              !followingNode
            ) {
              return false;
            } // We unfortunately have no way using the AST or location of nodes to know
            // if the comment is positioned before the condition parenthesis:
            //   if (a /* comment */) {}
            // The only workaround I found is to look at the next character to see if
            // it is a ).

            var nextCharacter = util.getNextNonSpaceNonCommentCharacter(
              text,
              comment,
              options.locEnd
            );

            if (nextCharacter === ")") {
              addTrailingComment$2(precedingNode, comment);
              return true;
            } // Comments before `else`:
            // - treat as trailing comments of the consequent, if it's a BlockStatement
            // - treat as a dangling comment otherwise

            if (
              precedingNode === enclosingNode.consequent &&
              followingNode === enclosingNode.alternate
            ) {
              if (precedingNode.type === "BlockStatement") {
                addTrailingComment$2(precedingNode, comment);
              } else {
                addDanglingComment$2(enclosingNode, comment);
              }

              return true;
            }

            if (followingNode.type === "BlockStatement") {
              addBlockStatementFirstComment(followingNode, comment);
              return true;
            }

            if (followingNode.type === "IfStatement") {
              addBlockOrNotComment(followingNode.consequent, comment);
              return true;
            } // For comments positioned after the condition parenthesis in an if statement
            // before the consequent without brackets on, such as
            // if (a) /* comment */ true,
            // we look at the next character to see if the following node
            // is the consequent for the if statement

            if (enclosingNode.consequent === followingNode) {
              addLeadingComment$2(followingNode, comment);
              return true;
            }

            return false;
          }

          function handleWhileComments(
            text,
            precedingNode,
            enclosingNode,
            followingNode,
            comment,
            options
          ) {
            if (
              !enclosingNode ||
              enclosingNode.type !== "WhileStatement" ||
              !followingNode
            ) {
              return false;
            } // We unfortunately have no way using the AST or location of nodes to know
            // if the comment is positioned before the condition parenthesis:
            //   while (a /* comment */) {}
            // The only workaround I found is to look at the next character to see if
            // it is a ).

            var nextCharacter = util.getNextNonSpaceNonCommentCharacter(
              text,
              comment,
              options.locEnd
            );

            if (nextCharacter === ")") {
              addTrailingComment$2(precedingNode, comment);
              return true;
            }

            if (followingNode.type === "BlockStatement") {
              addBlockStatementFirstComment(followingNode, comment);
              return true;
            }

            return false;
          } // Same as IfStatement but for TryStatement

          function handleTryStatementComments(
            enclosingNode,
            precedingNode,
            followingNode,
            comment
          ) {
            if (
              !enclosingNode ||
              (enclosingNode.type !== "TryStatement" &&
                enclosingNode.type !== "CatchClause") ||
              !followingNode
            ) {
              return false;
            }

            if (enclosingNode.type === "CatchClause" && precedingNode) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            }

            if (followingNode.type === "BlockStatement") {
              addBlockStatementFirstComment(followingNode, comment);
              return true;
            }

            if (followingNode.type === "TryStatement") {
              addBlockOrNotComment(followingNode.finalizer, comment);
              return true;
            }

            if (followingNode.type === "CatchClause") {
              addBlockOrNotComment(followingNode.body, comment);
              return true;
            }

            return false;
          }

          function handleMemberExpressionComments(
            enclosingNode,
            followingNode,
            comment
          ) {
            if (
              enclosingNode &&
              enclosingNode.type === "MemberExpression" &&
              followingNode &&
              followingNode.type === "Identifier"
            ) {
              addLeadingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleConditionalExpressionComments(
            enclosingNode,
            precedingNode,
            followingNode,
            comment,
            text,
            options
          ) {
            var isSameLineAsPrecedingNode =
              precedingNode &&
              !util.hasNewlineInRange(
                text,
                options.locEnd(precedingNode),
                options.locStart(comment)
              );

            if (
              (!precedingNode || !isSameLineAsPrecedingNode) &&
              enclosingNode &&
              enclosingNode.type === "ConditionalExpression" &&
              followingNode
            ) {
              addLeadingComment$2(followingNode, comment);
              return true;
            }

            return false;
          }

          function handleObjectPropertyAssignment(
            enclosingNode,
            precedingNode,
            comment
          ) {
            if (
              enclosingNode &&
              (enclosingNode.type === "ObjectProperty" ||
                enclosingNode.type === "Property") &&
              enclosingNode.shorthand &&
              enclosingNode.key === precedingNode &&
              enclosingNode.value.type === "AssignmentPattern"
            ) {
              addTrailingComment$2(enclosingNode.value.left, comment);
              return true;
            }

            return false;
          }

          function handleClassComments(
            enclosingNode,
            precedingNode,
            followingNode,
            comment
          ) {
            if (
              enclosingNode &&
              (enclosingNode.type === "ClassDeclaration" ||
                enclosingNode.type === "ClassExpression") &&
              enclosingNode.decorators &&
              enclosingNode.decorators.length > 0 &&
              !(followingNode && followingNode.type === "Decorator")
            ) {
              if (
                !enclosingNode.decorators ||
                enclosingNode.decorators.length === 0
              ) {
                addLeadingComment$2(enclosingNode, comment);
              } else {
                addTrailingComment$2(
                  enclosingNode.decorators[enclosingNode.decorators.length - 1],
                  comment
                );
              }

              return true;
            }

            return false;
          }

          function handleMethodNameComments(
            text,
            enclosingNode,
            precedingNode,
            comment,
            options
          ) {
            // This is only needed for estree parsers (flow, typescript) to attach
            // after a method name:
            // obj = { fn /*comment*/() {} };
            if (
              enclosingNode &&
              precedingNode &&
              (enclosingNode.type === "Property" ||
                enclosingNode.type === "MethodDefinition") &&
              precedingNode.type === "Identifier" &&
              enclosingNode.key === precedingNode && // special Property case: { key: /*comment*/(value) };
              // comment should be attached to value instead of key
              util.getNextNonSpaceNonCommentCharacter(
                text,
                precedingNode,
                options.locEnd
              ) !== ":"
            ) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            } // Print comments between decorators and class methods as a trailing comment
            // on the decorator node instead of the method node

            if (
              precedingNode &&
              enclosingNode &&
              precedingNode.type === "Decorator" &&
              (enclosingNode.type === "ClassMethod" ||
                enclosingNode.type === "ClassProperty" ||
                enclosingNode.type === "TSAbstractClassProperty" ||
                enclosingNode.type === "TSAbstractMethodDefinition" ||
                enclosingNode.type === "MethodDefinition")
            ) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            }

            return false;
          }

          function handleFunctionNameComments(
            text,
            enclosingNode,
            precedingNode,
            comment,
            options
          ) {
            if (
              util.getNextNonSpaceNonCommentCharacter(
                text,
                comment,
                options.locEnd
              ) !== "("
            ) {
              return false;
            }

            if (
              precedingNode &&
              enclosingNode &&
              (enclosingNode.type === "FunctionDeclaration" ||
                enclosingNode.type === "FunctionExpression" ||
                enclosingNode.type === "ClassMethod" ||
                enclosingNode.type === "MethodDefinition" ||
                enclosingNode.type === "ObjectMethod")
            ) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            }

            return false;
          }

          function handleCommentAfterArrowParams(
            text,
            enclosingNode,
            comment,
            options
          ) {
            if (
              !(
                enclosingNode &&
                enclosingNode.type === "ArrowFunctionExpression"
              )
            ) {
              return false;
            }

            var index = utilShared.getNextNonSpaceNonCommentCharacterIndex(
              text,
              comment,
              options
            );

            if (text.substr(index, 2) === "=>") {
              addDanglingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleCommentInEmptyParens(
            text,
            enclosingNode,
            comment,
            options
          ) {
            if (
              util.getNextNonSpaceNonCommentCharacter(
                text,
                comment,
                options.locEnd
              ) !== ")"
            ) {
              return false;
            } // Only add dangling comments to fix the case when no params are present,
            // i.e. a function without any argument.

            if (
              enclosingNode &&
              (((enclosingNode.type === "FunctionDeclaration" ||
                enclosingNode.type === "FunctionExpression" ||
                enclosingNode.type === "ArrowFunctionExpression" ||
                enclosingNode.type === "ClassMethod" ||
                enclosingNode.type === "ObjectMethod") &&
                enclosingNode.params.length === 0) ||
                ((enclosingNode.type === "CallExpression" ||
                  enclosingNode.type === "NewExpression") &&
                  enclosingNode.arguments.length === 0))
            ) {
              addDanglingComment$2(enclosingNode, comment);
              return true;
            }

            if (
              enclosingNode &&
              enclosingNode.type === "MethodDefinition" &&
              enclosingNode.value.params.length === 0
            ) {
              addDanglingComment$2(enclosingNode.value, comment);
              return true;
            }

            return false;
          }

          function handleLastFunctionArgComments(
            text,
            precedingNode,
            enclosingNode,
            followingNode,
            comment,
            options
          ) {
            // Type definitions functions
            if (
              precedingNode &&
              precedingNode.type === "FunctionTypeParam" &&
              enclosingNode &&
              enclosingNode.type === "FunctionTypeAnnotation" &&
              followingNode &&
              followingNode.type !== "FunctionTypeParam"
            ) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            } // Real functions

            if (
              precedingNode &&
              (precedingNode.type === "Identifier" ||
                precedingNode.type === "AssignmentPattern") &&
              enclosingNode &&
              (enclosingNode.type === "ArrowFunctionExpression" ||
                enclosingNode.type === "FunctionExpression" ||
                enclosingNode.type === "FunctionDeclaration" ||
                enclosingNode.type === "ObjectMethod" ||
                enclosingNode.type === "ClassMethod") &&
              util.getNextNonSpaceNonCommentCharacter(
                text,
                comment,
                options.locEnd
              ) === ")"
            ) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            }

            if (
              enclosingNode &&
              enclosingNode.type === "FunctionDeclaration" &&
              followingNode &&
              followingNode.type === "BlockStatement"
            ) {
              var functionParamRightParenIndex = (function () {
                if (enclosingNode.params.length !== 0) {
                  return util.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(
                    text,
                    options.locEnd(util.getLast(enclosingNode.params))
                  );
                }

                var functionParamLeftParenIndex =
                  util.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(
                    text,
                    options.locEnd(enclosingNode.id)
                  );
                return util.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(
                  text,
                  functionParamLeftParenIndex + 1
                );
              })();

              if (options.locStart(comment) > functionParamRightParenIndex) {
                addBlockStatementFirstComment(followingNode, comment);
                return true;
              }
            }

            return false;
          }

          function handleImportSpecifierComments(enclosingNode, comment) {
            if (enclosingNode && enclosingNode.type === "ImportSpecifier") {
              addLeadingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleLabeledStatementComments(enclosingNode, comment) {
            if (enclosingNode && enclosingNode.type === "LabeledStatement") {
              addLeadingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleBreakAndContinueStatementComments(
            enclosingNode,
            comment
          ) {
            if (
              enclosingNode &&
              (enclosingNode.type === "ContinueStatement" ||
                enclosingNode.type === "BreakStatement") &&
              !enclosingNode.label
            ) {
              addTrailingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleCallExpressionComments(
            precedingNode,
            enclosingNode,
            comment
          ) {
            if (
              enclosingNode &&
              enclosingNode.type === "CallExpression" &&
              precedingNode &&
              enclosingNode.callee === precedingNode &&
              enclosingNode.arguments.length > 0
            ) {
              addLeadingComment$2(enclosingNode.arguments[0], comment);
              return true;
            }

            return false;
          }

          function handleUnionTypeComments(
            precedingNode,
            enclosingNode,
            followingNode,
            comment
          ) {
            if (
              enclosingNode &&
              (enclosingNode.type === "UnionTypeAnnotation" ||
                enclosingNode.type === "TSUnionType")
            ) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            }

            return false;
          }

          function handlePropertyComments(enclosingNode, comment) {
            if (
              enclosingNode &&
              (enclosingNode.type === "Property" ||
                enclosingNode.type === "ObjectProperty")
            ) {
              addLeadingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleOnlyComments(
            enclosingNode,
            ast,
            comment,
            isLastComment
          ) {
            // With Flow the enclosingNode is undefined so use the AST instead.
            if (ast && ast.body && ast.body.length === 0) {
              if (isLastComment) {
                addDanglingComment$2(ast, comment);
              } else {
                addLeadingComment$2(ast, comment);
              }

              return true;
            } else if (
              enclosingNode &&
              enclosingNode.type === "Program" &&
              enclosingNode.body.length === 0 &&
              enclosingNode.directives &&
              enclosingNode.directives.length === 0
            ) {
              if (isLastComment) {
                addDanglingComment$2(enclosingNode, comment);
              } else {
                addLeadingComment$2(enclosingNode, comment);
              }

              return true;
            }

            return false;
          }

          function handleForComments(enclosingNode, precedingNode, comment) {
            if (
              enclosingNode &&
              (enclosingNode.type === "ForInStatement" ||
                enclosingNode.type === "ForOfStatement")
            ) {
              addLeadingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleImportDeclarationComments(
            text,
            enclosingNode,
            precedingNode,
            comment,
            options
          ) {
            if (
              precedingNode &&
              precedingNode.type === "ImportSpecifier" &&
              enclosingNode &&
              enclosingNode.type === "ImportDeclaration" &&
              util.hasNewline(text, options.locEnd(comment))
            ) {
              addTrailingComment$2(precedingNode, comment);
              return true;
            }

            return false;
          }

          function handleAssignmentPatternComments(enclosingNode, comment) {
            if (enclosingNode && enclosingNode.type === "AssignmentPattern") {
              addLeadingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleTypeAliasComments(
            enclosingNode,
            followingNode,
            comment
          ) {
            if (enclosingNode && enclosingNode.type === "TypeAlias") {
              addLeadingComment$2(enclosingNode, comment);
              return true;
            }

            return false;
          }

          function handleVariableDeclaratorComments(
            enclosingNode,
            followingNode,
            comment
          ) {
            if (
              enclosingNode &&
              (enclosingNode.type === "VariableDeclarator" ||
                enclosingNode.type === "AssignmentExpression") &&
              followingNode &&
              (followingNode.type === "ObjectExpression" ||
                followingNode.type === "ArrayExpression" ||
                followingNode.type === "TemplateLiteral" ||
                followingNode.type === "TaggedTemplateExpression")
            ) {
              addLeadingComment$2(followingNode, comment);
              return true;
            }

            return false;
          }

          function handleTSMappedTypeComments(
            text,
            enclosingNode,
            precedingNode,
            followingNode,
            comment
          ) {
            if (!enclosingNode || enclosingNode.type !== "TSMappedType") {
              return false;
            }

            if (
              followingNode &&
              followingNode.type === "TSTypeParameter" &&
              followingNode.name
            ) {
              addLeadingComment$2(followingNode.name, comment);
              return true;
            }

            if (
              precedingNode &&
              precedingNode.type === "TSTypeParameter" &&
              precedingNode.constraint
            ) {
              addTrailingComment$2(precedingNode.constraint, comment);
              return true;
            }

            return false;
          }

          function isBlockComment$1(comment) {
            return comment.type === "Block" || comment.type === "CommentBlock";
          }

          function hasLeadingComment$2(node) {
            var fn =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : function () {
                    return true;
                  };

            if (node.leadingComments) {
              return node.leadingComments.some(fn);
            }

            if (node.comments) {
              return node.comments.some(function (comment) {
                return comment.leading && fn(comment);
              });
            }

            return false;
          }

          var comments$3 = {
            handleOwnLineComment: handleOwnLineComment,
            handleEndOfLineComment: handleEndOfLineComment,
            handleRemainingComment: handleRemainingComment,
            hasLeadingComment: hasLeadingComment$2,
            isBlockComment: isBlockComment$1,
          };

          var isBlockComment = comments$3.isBlockComment;
          var hasLeadingComment$1 = comments$3.hasLeadingComment;
          var _require$$1$builders = doc.builders;
          var indent$7 = _require$$1$builders.indent;
          var join$8 = _require$$1$builders.join;
          var hardline$9 = _require$$1$builders.hardline;
          var softline$6 = _require$$1$builders.softline;
          var literalline$4 = _require$$1$builders.literalline;
          var concat$12 = _require$$1$builders.concat;
          var group$11 = _require$$1$builders.group;
          var dedentToRoot$2 = _require$$1$builders.dedentToRoot;
          var _require$$1$utils = doc.utils;
          var mapDoc$5 = _require$$1$utils.mapDoc;
          var stripTrailingHardline$2 = _require$$1$utils.stripTrailingHardline;

          function embed$4(path, print, textToDoc, options) {
            var node = path.getValue();
            var parent = path.getParentNode();
            var parentParent = path.getParentNode(1);

            switch (node.type) {
              case "TemplateLiteral": {
                var isCss = [
                  isStyledJsx,
                  isStyledComponents,
                  isCssProp,
                  isAngularComponentStyles,
                ].some(function (isIt) {
                  return isIt(path);
                });

                if (isCss) {
                  // Get full template literal with expressions replaced by placeholders
                  var rawQuasis = node.quasis.map(function (q) {
                    return q.value.raw;
                  });
                  var placeholderID = 0;
                  var text = rawQuasis.reduce(function (prevVal, currVal, idx) {
                    return idx == 0
                      ? currVal
                      : prevVal +
                          "@prettier-placeholder-" +
                          placeholderID++ +
                          "-id" +
                          currVal;
                  }, "");
                  var doc$$2 = textToDoc(text, {
                    parser: "css",
                  });
                  return transformCssDoc(doc$$2, path, print);
                }
                /*
                 * react-relay and graphql-tag
                 * graphql`...`
                 * graphql.experimental`...`
                 * gql`...`
                 *
                 * This intentionally excludes Relay Classic tags, as Prettier does not
                 * support Relay Classic formatting.
                 */

                if (isGraphQL(path)) {
                  var expressionDocs = node.expressions
                    ? path.map(print, "expressions")
                    : [];
                  var numQuasis = node.quasis.length;

                  if (
                    numQuasis === 1 &&
                    node.quasis[0].value.raw.trim() === ""
                  ) {
                    return "``";
                  }

                  var parts = [];

                  for (var i = 0; i < numQuasis; i++) {
                    var templateElement = node.quasis[i];
                    var isFirst = i === 0;
                    var isLast = i === numQuasis - 1;
                    var _text = templateElement.value.cooked; // Bail out if any of the quasis have an invalid escape sequence
                    // (which would make the `cooked` value be `null` or `undefined`)

                    if (typeof _text !== "string") {
                      return null;
                    }

                    var lines = _text.split("\n");

                    var numLines = lines.length;
                    var expressionDoc = expressionDocs[i];
                    var startsWithBlankLine =
                      numLines > 2 &&
                      lines[0].trim() === "" &&
                      lines[1].trim() === "";
                    var endsWithBlankLine =
                      numLines > 2 &&
                      lines[numLines - 1].trim() === "" &&
                      lines[numLines - 2].trim() === "";
                    var commentsAndWhitespaceOnly = lines.every(function (
                      line
                    ) {
                      return /^\s*(?:#[^\r\n]*)?$/.test(line);
                    }); // Bail out if an interpolation occurs within a comment.

                    if (!isLast && /#[^\r\n]*$/.test(lines[numLines - 1])) {
                      return null;
                    }

                    var _doc = null;

                    if (commentsAndWhitespaceOnly) {
                      _doc = printGraphqlComments(lines);
                    } else {
                      _doc = stripTrailingHardline$2(
                        textToDoc(_text, {
                          parser: "graphql",
                        })
                      );
                    }

                    if (_doc) {
                      _doc = escapeTemplateCharacters(_doc, false);

                      if (!isFirst && startsWithBlankLine) {
                        parts.push("");
                      }

                      parts.push(_doc);

                      if (!isLast && endsWithBlankLine) {
                        parts.push("");
                      }
                    } else if (!isFirst && !isLast && startsWithBlankLine) {
                      parts.push("");
                    }

                    if (expressionDoc) {
                      parts.push(concat$12(["${", expressionDoc, "}"]));
                    }
                  }

                  return concat$12([
                    "`",
                    indent$7(
                      concat$12([hardline$9, join$8(hardline$9, parts)])
                    ),
                    hardline$9,
                    "`",
                  ]);
                }

                var htmlParser = isHtml(path)
                  ? "html"
                  : isAngularComponentTemplate(path)
                  ? "angular"
                  : undefined;

                if (htmlParser) {
                  return printHtmlTemplateLiteral(
                    path,
                    print,
                    textToDoc,
                    htmlParser,
                    options.embeddedInHtml
                  );
                }

                break;
              }

              case "TemplateElement": {
                /**
                 * md`...`
                 * markdown`...`
                 */
                if (
                  parentParent &&
                  parentParent.type === "TaggedTemplateExpression" &&
                  parent.quasis.length === 1 &&
                  parentParent.tag.type === "Identifier" &&
                  (parentParent.tag.name === "md" ||
                    parentParent.tag.name === "markdown")
                ) {
                  var _text2 = parent.quasis[0].value.raw.replace(
                    /((?:\\\\)*)\\`/g,
                    function (_, backslashes) {
                      return "\\".repeat(backslashes.length / 2) + "`";
                    }
                  );

                  var indentation = getIndentation(_text2);
                  var hasIndent = indentation !== "";
                  return concat$12([
                    hasIndent
                      ? indent$7(
                          concat$12([
                            softline$6,
                            printMarkdown(
                              _text2.replace(
                                new RegExp("^".concat(indentation), "gm"),
                                ""
                              )
                            ),
                          ])
                        )
                      : concat$12([
                          literalline$4,
                          dedentToRoot$2(printMarkdown(_text2)),
                        ]),
                    softline$6,
                  ]);
                }

                break;
              }
            }

            function printMarkdown(text) {
              var doc$$2 = textToDoc(text, {
                parser: "markdown",
                __inJsTemplate: true,
              });
              return stripTrailingHardline$2(
                escapeTemplateCharacters(doc$$2, true)
              );
            }
          }

          function getIndentation(str) {
            var firstMatchedIndent = str.match(/^([^\S\n]*)\S/m);
            return firstMatchedIndent === null ? "" : firstMatchedIndent[1];
          }

          function uncook(cookedValue) {
            return cookedValue.replace(/([\\`]|\$\{)/g, "\\$1");
          }

          function escapeTemplateCharacters(doc$$2, raw) {
            return mapDoc$5(doc$$2, function (currentDoc) {
              if (!currentDoc.parts) {
                return currentDoc;
              }

              var parts = [];
              currentDoc.parts.forEach(function (part) {
                if (typeof part === "string") {
                  parts.push(
                    raw ? part.replace(/(\\*)`/g, "$1$1\\`") : uncook(part)
                  );
                } else {
                  parts.push(part);
                }
              });
              return Object.assign({}, currentDoc, {
                parts: parts,
              });
            });
          }

          function transformCssDoc(quasisDoc, path, print) {
            var parentNode = path.getValue();
            var isEmpty =
              parentNode.quasis.length === 1 &&
              !parentNode.quasis[0].value.raw.trim();

            if (isEmpty) {
              return "``";
            }

            var expressionDocs = parentNode.expressions
              ? path.map(print, "expressions")
              : [];
            var newDoc = replacePlaceholders(quasisDoc, expressionDocs);
            /* istanbul ignore if */

            if (!newDoc) {
              throw new Error("Couldn't insert all the expressions");
            }

            return concat$12([
              "`",
              indent$7(
                concat$12([hardline$9, stripTrailingHardline$2(newDoc)])
              ),
              softline$6,
              "`",
            ]);
          } // Search all the placeholders in the quasisDoc tree
          // and replace them with the expression docs one by one
          // returns a new doc with all the placeholders replaced,
          // or null if it couldn't replace any expression

          function replacePlaceholders(quasisDoc, expressionDocs) {
            if (!expressionDocs || !expressionDocs.length) {
              return quasisDoc;
            }

            var expressions = expressionDocs.slice();
            var replaceCounter = 0;
            var newDoc = mapDoc$5(quasisDoc, function (doc$$2) {
              if (!doc$$2 || !doc$$2.parts || !doc$$2.parts.length) {
                return doc$$2;
              }

              var parts = doc$$2.parts;
              var atIndex = parts.indexOf("@");
              var placeholderIndex = atIndex + 1;

              if (
                atIndex > -1 &&
                typeof parts[placeholderIndex] === "string" &&
                parts[placeholderIndex].startsWith("prettier-placeholder")
              ) {
                // If placeholder is split, join it
                var at = parts[atIndex];
                var placeholder = parts[placeholderIndex];
                var rest = parts.slice(placeholderIndex + 1);
                parts = parts
                  .slice(0, atIndex)
                  .concat([at + placeholder])
                  .concat(rest);
              }

              var atPlaceholderIndex = parts.findIndex(function (part) {
                return (
                  typeof part === "string" &&
                  part.startsWith("@prettier-placeholder")
                );
              });

              if (atPlaceholderIndex > -1) {
                var _placeholder = parts[atPlaceholderIndex];

                var _rest = parts.slice(atPlaceholderIndex + 1);

                var placeholderMatch = _placeholder.match(
                  /@prettier-placeholder-(.+)-id([\s\S]*)/
                );

                var placeholderID = placeholderMatch[1]; // When the expression has a suffix appended, like:
                // animation: linear ${time}s ease-out;

                var suffix = placeholderMatch[2];
                var expression = expressions[placeholderID];
                replaceCounter++;
                parts = parts
                  .slice(0, atPlaceholderIndex)
                  .concat(["${", expression, "}" + suffix])
                  .concat(_rest);
              }

              return Object.assign({}, doc$$2, {
                parts: parts,
              });
            });
            return expressions.length === replaceCounter ? newDoc : null;
          }

          function printGraphqlComments(lines) {
            var parts = [];
            var seenComment = false;
            lines
              .map(function (textLine) {
                return textLine.trim();
              })
              .forEach(function (textLine, i, array) {
                // Lines are either whitespace only, or a comment (with poential whitespace
                // around it). Drop whitespace-only lines.
                if (textLine === "") {
                  return;
                }

                if (array[i - 1] === "" && seenComment) {
                  // If a non-first comment is preceded by a blank (whitespace only) line,
                  // add in a blank line.
                  parts.push(concat$12([hardline$9, textLine]));
                } else {
                  parts.push(textLine);
                }

                seenComment = true;
              }); // If `lines` was whitespace only, return `null`.

            return parts.length === 0 ? null : join$8(hardline$9, parts);
          }
          /**
           * Template literal in these contexts:
           * <style jsx>{`div{color:red}`}</style>
           * css``
           * css.global``
           * css.resolve``
           */

          function isStyledJsx(path) {
            var node = path.getValue();
            var parent = path.getParentNode();
            var parentParent = path.getParentNode(1);
            return (
              (parentParent &&
                node.quasis &&
                parent.type === "JSXExpressionContainer" &&
                parentParent.type === "JSXElement" &&
                parentParent.openingElement.name.name === "style" &&
                parentParent.openingElement.attributes.some(function (
                  attribute
                ) {
                  return attribute.name.name === "jsx";
                })) ||
              (parent &&
                parent.type === "TaggedTemplateExpression" &&
                parent.tag.type === "Identifier" &&
                parent.tag.name === "css") ||
              (parent &&
                parent.type === "TaggedTemplateExpression" &&
                parent.tag.type === "MemberExpression" &&
                parent.tag.object.name === "css" &&
                (parent.tag.property.name === "global" ||
                  parent.tag.property.name === "resolve"))
            );
          }
          /**
           * Angular Components can have:
           * - Inline HTML template
           * - Inline CSS styles
           *
           * ...which are both within template literals somewhere
           * inside of the Component decorator factory.
           *
           * E.g.
           * @Component({
           *  template: `<div>...</div>`,
           *  styles: [`h1 { color: blue; }`]
           * })
           */

          function isAngularComponentStyles(path) {
            return isPathMatch(
              path,
              [
                function (node) {
                  return node.type === "TemplateLiteral";
                },
                function (node, name) {
                  return node.type === "ArrayExpression" && name === "elements";
                },
                function (node, name) {
                  return (
                    node.type === "Property" &&
                    node.key.type === "Identifier" &&
                    node.key.name === "styles" &&
                    name === "value"
                  );
                },
              ].concat(getAngularComponentObjectExpressionPredicates())
            );
          }

          function isAngularComponentTemplate(path) {
            return isPathMatch(
              path,
              [
                function (node) {
                  return node.type === "TemplateLiteral";
                },
                function (node, name) {
                  return (
                    node.type === "Property" &&
                    node.key.type === "Identifier" &&
                    node.key.name === "template" &&
                    name === "value"
                  );
                },
              ].concat(getAngularComponentObjectExpressionPredicates())
            );
          }

          function getAngularComponentObjectExpressionPredicates() {
            return [
              function (node, name) {
                return (
                  node.type === "ObjectExpression" && name === "properties"
                );
              },
              function (node, name) {
                return (
                  node.type === "CallExpression" &&
                  node.callee.type === "Identifier" &&
                  node.callee.name === "Component" &&
                  name === "arguments"
                );
              },
              function (node, name) {
                return node.type === "Decorator" && name === "expression";
              },
            ];
          }
          /**
           * styled-components template literals
           */

          function isStyledComponents(path) {
            var parent = path.getParentNode();

            if (!parent || parent.type !== "TaggedTemplateExpression") {
              return false;
            }

            var tag = parent.tag;

            switch (tag.type) {
              case "MemberExpression":
                return (
                  // styled.foo``
                  isStyledIdentifier(tag.object) || // Component.extend``
                  isStyledExtend(tag)
                );

              case "CallExpression":
                return (
                  // styled(Component)``
                  isStyledIdentifier(tag.callee) ||
                  (tag.callee.type === "MemberExpression" &&
                    ((tag.callee.object.type === "MemberExpression" && // styled.foo.attrs({})``
                      (isStyledIdentifier(tag.callee.object.object) || // Component.extend.attrs({})``
                        isStyledExtend(tag.callee.object))) || // styled(Component).attrs({})``
                      (tag.callee.object.type === "CallExpression" &&
                        isStyledIdentifier(tag.callee.object.callee))))
                );

              case "Identifier":
                // css``
                return tag.name === "css";

              default:
                return false;
            }
          }
          /**
           * JSX element with CSS prop
           */

          function isCssProp(path) {
            var parent = path.getParentNode();
            var parentParent = path.getParentNode(1);
            return (
              parentParent &&
              parent.type === "JSXExpressionContainer" &&
              parentParent.type === "JSXAttribute" &&
              parentParent.name.type === "JSXIdentifier" &&
              parentParent.name.name === "css"
            );
          }

          function isStyledIdentifier(node) {
            return node.type === "Identifier" && node.name === "styled";
          }

          function isStyledExtend(node) {
            return (
              /^[A-Z]/.test(node.object.name) && node.property.name === "extend"
            );
          }
          /*
           * react-relay and graphql-tag
           * graphql`...`
           * graphql.experimental`...`
           * gql`...`
           * GraphQL comment block
           *
           * This intentionally excludes Relay Classic tags, as Prettier does not
           * support Relay Classic formatting.
           */

          function isGraphQL(path) {
            var node = path.getValue();
            var parent = path.getParentNode();
            return (
              hasLanguageComment(node, "GraphQL") ||
              (parent &&
                ((parent.type === "TaggedTemplateExpression" &&
                  ((parent.tag.type === "MemberExpression" &&
                    parent.tag.object.name === "graphql" &&
                    parent.tag.property.name === "experimental") ||
                    (parent.tag.type === "Identifier" &&
                      (parent.tag.name === "gql" ||
                        parent.tag.name === "graphql")))) ||
                  (parent.type === "CallExpression" &&
                    parent.callee.type === "Identifier" &&
                    parent.callee.name === "graphql")))
            );
          }

          function hasLanguageComment(node, languageName) {
            // This checks for a leading comment that is exactly `/* GraphQL */`
            // In order to be in line with other implementations of this comment tag
            // we will not trim the comment value and we will expect exactly one space on
            // either side of the GraphQL string
            // Also see ./clean.js
            return hasLeadingComment$1(node, function (comment) {
              return (
                isBlockComment(comment) &&
                comment.value === " ".concat(languageName, " ")
              );
            });
          }

          function isPathMatch(path, predicateStack) {
            var stack = path.stack.slice();
            var name = null;
            var node = stack.pop();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = predicateStack[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var predicate = _step.value;

                if (node === undefined) {
                  return false;
                } // skip index/array

                if (typeof name === "number") {
                  name = stack.pop();
                  node = stack.pop();
                }

                if (!predicate(node, name)) {
                  return false;
                }

                name = stack.pop();
                node = stack.pop();
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return true;
          }
          /**
           *     - html`...`
           *     - HTML comment block
           */

          function isHtml(path) {
            var node = path.getValue();
            return (
              hasLanguageComment(node, "HTML") ||
              isPathMatch(path, [
                function (node) {
                  return node.type === "TemplateLiteral";
                },
                function (node, name) {
                  return (
                    node.type === "TaggedTemplateExpression" &&
                    node.tag.type === "Identifier" &&
                    node.tag.name === "html" &&
                    name === "quasi"
                  );
                },
              ])
            );
          } // The counter is needed to distinguish nested embeds.

          var htmlTemplateLiteralCounter = 0;

          function printHtmlTemplateLiteral(
            path,
            print,
            textToDoc,
            parser,
            escapeClosingScriptTag
          ) {
            var node = path.getValue();
            var counter = htmlTemplateLiteralCounter;
            htmlTemplateLiteralCounter = (htmlTemplateLiteralCounter + 1) >>> 0;

            var composePlaceholder = function composePlaceholder(index) {
              return "PRETTIER_HTML_PLACEHOLDER_"
                .concat(index, "_")
                .concat(counter, "_IN_JS");
            };

            var text = node.quasis
              .map(function (quasi, index, quasis) {
                return index === quasis.length - 1
                  ? quasi.value.cooked
                  : quasi.value.cooked + composePlaceholder(index);
              })
              .join("");
            var expressionDocs = path.map(print, "expressions");

            if (expressionDocs.length === 0 && text.trim().length === 0) {
              return "``";
            }

            var placeholderRegex = RegExp(composePlaceholder("(\\d+)"), "g");
            var contentDoc = mapDoc$5(
              stripTrailingHardline$2(
                textToDoc(text, {
                  parser: parser,
                })
              ),
              function (doc$$2) {
                if (typeof doc$$2 !== "string") {
                  return doc$$2;
                }

                var parts = [];
                var components = doc$$2.split(placeholderRegex);

                for (var i = 0; i < components.length; i++) {
                  var component = components[i];

                  if (i % 2 === 0) {
                    if (component) {
                      component = uncook(component);

                      if (escapeClosingScriptTag) {
                        component = component.replace(
                          /<\/(script)\b/gi,
                          "<\\/$1"
                        );
                      }

                      parts.push(component);
                    }

                    continue;
                  }

                  var placeholderIndex = +component;
                  parts.push(
                    concat$12([
                      "${",
                      group$11(expressionDocs[placeholderIndex]),
                      "}",
                    ])
                  );
                }

                return concat$12(parts);
              }
            );
            return group$11(
              concat$12([
                "`",
                indent$7(concat$12([hardline$9, group$11(contentDoc)])),
                softline$6,
                "`",
              ])
            );
          }

          var embed_1$2 = embed$4;

          function clean$7(ast, newObj, parent) {
            [
              "range",
              "raw",
              "comments",
              "leadingComments",
              "trailingComments",
              "extra",
              "start",
              "end",
              "flags",
            ].forEach(function (name) {
              delete newObj[name];
            });

            if (ast.type === "BigIntLiteral") {
              newObj.value = newObj.value.toLowerCase();
            } // We remove extra `;` and add them when needed

            if (ast.type === "EmptyStatement") {
              return null;
            } // We move text around, including whitespaces and add {" "}

            if (ast.type === "JSXText") {
              return null;
            }

            if (
              ast.type === "JSXExpressionContainer" &&
              ast.expression.type === "Literal" &&
              ast.expression.value === " "
            ) {
              return null;
            } // (TypeScript) Ignore `static` in `constructor(static p) {}`
            // and `export` in `constructor(export p) {}`

            if (
              ast.type === "TSParameterProperty" &&
              ast.accessibility === null &&
              !ast.readonly
            ) {
              return {
                type: "Identifier",
                name: ast.parameter.name,
                typeAnnotation: newObj.parameter.typeAnnotation,
                decorators: newObj.decorators,
              };
            } // (TypeScript) ignore empty `specifiers` array

            if (
              ast.type === "TSNamespaceExportDeclaration" &&
              ast.specifiers &&
              ast.specifiers.length === 0
            ) {
              delete newObj.specifiers;
            } // (TypeScript) bypass TSParenthesizedType

            if (ast.type === "TSParenthesizedType") {
              return newObj.typeAnnotation;
            } // We convert <div></div> to <div />

            if (ast.type === "JSXOpeningElement") {
              delete newObj.selfClosing;
            }

            if (ast.type === "JSXElement") {
              delete newObj.closingElement;
            } // We change {'key': value} into {key: value}

            if (
              (ast.type === "Property" ||
                ast.type === "ObjectProperty" ||
                ast.type === "MethodDefinition" ||
                ast.type === "ClassProperty" ||
                ast.type === "TSPropertySignature" ||
                ast.type === "ObjectTypeProperty") &&
              _typeof(ast.key) === "object" &&
              ast.key &&
              (ast.key.type === "Literal" ||
                ast.key.type === "StringLiteral" ||
                ast.key.type === "Identifier")
            ) {
              delete newObj.key;
            }

            if (
              ast.type === "OptionalMemberExpression" &&
              ast.optional === false
            ) {
              newObj.type = "MemberExpression";
              delete newObj.optional;
            } // Remove raw and cooked values from TemplateElement when it's CSS
            // styled-jsx

            if (
              ast.type === "JSXElement" &&
              ast.openingElement.name.name === "style" &&
              ast.openingElement.attributes.some(function (attr) {
                return attr.name.name === "jsx";
              })
            ) {
              var templateLiterals = newObj.children
                .filter(function (child) {
                  return (
                    child.type === "JSXExpressionContainer" &&
                    child.expression.type === "TemplateLiteral"
                  );
                })
                .map(function (container) {
                  return container.expression;
                });
              var quasis = templateLiterals.reduce(function (
                quasis,
                templateLiteral
              ) {
                return quasis.concat(templateLiteral.quasis);
              },
              []);
              quasis.forEach(function (q) {
                return delete q.value;
              });
            } // CSS template literals in css prop

            if (
              ast.type === "JSXAttribute" &&
              ast.name.name === "css" &&
              ast.value.type === "JSXExpressionContainer" &&
              ast.value.expression.type === "TemplateLiteral"
            ) {
              newObj.value.expression.quasis.forEach(function (q) {
                return delete q.value;
              });
            } // Angular Components: Inline HTML template and Inline CSS styles

            var expression = ast.expression || ast.callee;

            if (
              ast.type === "Decorator" &&
              expression.type === "CallExpression" &&
              expression.callee.name === "Component" &&
              expression.arguments.length === 1
            ) {
              var astProps = ast.expression.arguments[0].properties;
              newObj.expression.arguments[0].properties.forEach(function (
                prop,
                index
              ) {
                var templateLiteral = null;

                switch (astProps[index].key.name) {
                  case "styles":
                    if (prop.value.type === "ArrayExpression") {
                      templateLiteral = prop.value.elements[0];
                    }

                    break;

                  case "template":
                    if (prop.value.type === "TemplateLiteral") {
                      templateLiteral = prop.value;
                    }

                    break;
                }

                if (templateLiteral) {
                  templateLiteral.quasis.forEach(function (q) {
                    return delete q.value;
                  });
                }
              });
            } // styled-components, graphql, markdown

            if (
              ast.type === "TaggedTemplateExpression" &&
              (ast.tag.type === "MemberExpression" ||
                (ast.tag.type === "Identifier" &&
                  (ast.tag.name === "gql" ||
                    ast.tag.name === "graphql" ||
                    ast.tag.name === "css" ||
                    ast.tag.name === "md" ||
                    ast.tag.name === "markdown" ||
                    ast.tag.name === "html")) ||
                ast.tag.type === "CallExpression")
            ) {
              newObj.quasi.quasis.forEach(function (quasi) {
                return delete quasi.value;
              });
            }

            if (ast.type === "TemplateLiteral") {
              // This checks for a leading comment that is exactly `/* GraphQL */`
              // In order to be in line with other implementations of this comment tag
              // we will not trim the comment value and we will expect exactly one space on
              // either side of the GraphQL string
              // Also see ./embed.js
              var hasLanguageComment =
                ast.leadingComments &&
                ast.leadingComments.some(function (comment) {
                  return (
                    comment.type === "CommentBlock" &&
                    ["GraphQL", "HTML"].some(function (languageName) {
                      return comment.value === " ".concat(languageName, " ");
                    })
                  );
                });

              if (
                hasLanguageComment ||
                (parent.type === "CallExpression" &&
                  parent.callee.name === "graphql")
              ) {
                newObj.quasis.forEach(function (quasi) {
                  return delete quasi.value;
                });
              }
            }
          }

          var clean_1$2 = clean$7;

          // Flow annotation comments cannot be split across lines. For example:
          //
          // (this /*
          // : any */).foo = 5;
          //
          // is not picked up by Flow (see https://github.com/facebook/flow/issues/7050), so
          // removing the newline would create a type annotation that the user did not intend
          // to create.

          var NON_LINE_TERMINATING_WHITE_SPACE = "(?:(?=.)\\s)";
          var FLOW_SHORTHAND_ANNOTATION = new RegExp(
            "^".concat(NON_LINE_TERMINATING_WHITE_SPACE, "*:")
          );
          var FLOW_ANNOTATION = new RegExp(
            "^".concat(NON_LINE_TERMINATING_WHITE_SPACE, "*::")
          );

          function hasFlowShorthandAnnotationComment$2(node) {
            // https://flow.org/en/docs/types/comments/
            // Syntax example: const r = new (window.Request /*: Class<Request> */)("");
            return (
              node.extra &&
              node.extra.parenthesized &&
              node.trailingComments &&
              node.trailingComments[0].value.match(FLOW_SHORTHAND_ANNOTATION)
            );
          }

          function hasFlowAnnotationComment$1(comments) {
            return comments && comments[0].value.match(FLOW_ANNOTATION);
          }

          function hasNode$1(node, fn) {
            if (!node || _typeof(node) !== "object") {
              return false;
            }

            if (Array.isArray(node)) {
              return node.some(function (value) {
                return hasNode$1(value, fn);
              });
            }

            var result = fn(node);
            return typeof result === "boolean"
              ? result
              : Object.keys(node).some(function (key) {
                  return hasNode$1(node[key], fn);
                });
          }

          function hasNakedLeftSide$2(node) {
            return (
              node.type === "AssignmentExpression" ||
              node.type === "BinaryExpression" ||
              node.type === "LogicalExpression" ||
              node.type === "NGPipeExpression" ||
              node.type === "ConditionalExpression" ||
              node.type === "CallExpression" ||
              node.type === "OptionalCallExpression" ||
              node.type === "MemberExpression" ||
              node.type === "OptionalMemberExpression" ||
              node.type === "SequenceExpression" ||
              node.type === "TaggedTemplateExpression" ||
              node.type === "BindExpression" ||
              (node.type === "UpdateExpression" && !node.prefix) ||
              node.type === "TSAsExpression" ||
              node.type === "TSNonNullExpression"
            );
          }

          function getLeftSide$1(node) {
            if (node.expressions) {
              return node.expressions[0];
            }

            return (
              node.left ||
              node.test ||
              node.callee ||
              node.object ||
              node.tag ||
              node.argument ||
              node.expression
            );
          }

          function getLeftSidePathName$2(path, node) {
            if (node.expressions) {
              return ["expressions", 0];
            }

            if (node.left) {
              return ["left"];
            }

            if (node.test) {
              return ["test"];
            }

            if (node.object) {
              return ["object"];
            }

            if (node.callee) {
              return ["callee"];
            }

            if (node.tag) {
              return ["tag"];
            }

            if (node.argument) {
              return ["argument"];
            }

            if (node.expression) {
              return ["expression"];
            }

            throw new Error("Unexpected node has no left side", node);
          }

          var utils$8 = {
            getLeftSide: getLeftSide$1,
            getLeftSidePathName: getLeftSidePathName$2,
            hasNakedLeftSide: hasNakedLeftSide$2,
            hasNode: hasNode$1,
            hasFlowShorthandAnnotationComment:
              hasFlowShorthandAnnotationComment$2,
            hasFlowAnnotationComment: hasFlowAnnotationComment$1,
          };

          var getLeftSidePathName$1 = utils$8.getLeftSidePathName;
          var hasNakedLeftSide$1 = utils$8.hasNakedLeftSide;
          var hasFlowShorthandAnnotationComment$1 =
            utils$8.hasFlowShorthandAnnotationComment;

          function hasClosureCompilerTypeCastComment(text, path) {
            // https://github.com/google/closure-compiler/wiki/Annotating-Types#type-casts
            // Syntax example: var x = /** @type {string} */ (fruit);
            var n = path.getValue();
            return (
              isParenthesized(n) &&
              (hasTypeCastComment(n) || hasAncestorTypeCastComment(0))
            ); // for sub-item: /** @type {array} */ (numberOrString).map(x => x);

            function hasAncestorTypeCastComment(index) {
              var ancestor = path.getParentNode(index);
              return ancestor && !isParenthesized(ancestor)
                ? hasTypeCastComment(ancestor) ||
                    hasAncestorTypeCastComment(index + 1)
                : false;
            }

            function hasTypeCastComment(node) {
              return (
                node.comments &&
                node.comments.some(function (comment) {
                  return (
                    comment.leading &&
                    comments$3.isBlockComment(comment) &&
                    isTypeCastComment(comment.value)
                  );
                })
              );
            }

            function isParenthesized(node) {
              // Closure typecast comments only really make sense when _not_ using
              // typescript or flow parsers, so we take advantage of the babel parser's
              // parenthesized expressions.
              return node.extra && node.extra.parenthesized;
            }

            function isTypeCastComment(comment) {
              var cleaned = comment
                .trim()
                .split("\n")
                .map(function (line) {
                  return line.replace(/^[\s*]+/, "");
                })
                .join(" ")
                .trim();

              if (!/^@type\s*\{[^]+\}$/.test(cleaned)) {
                return false;
              }

              var isCompletelyClosed = false;
              var unpairedBracketCount = 0;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (
                  var _iterator = cleaned[Symbol.iterator](), _step;
                  !(_iteratorNormalCompletion = (_step = _iterator.next())
                    .done);
                  _iteratorNormalCompletion = true
                ) {
                  var char = _step.value;

                  if (char === "{") {
                    if (isCompletelyClosed) {
                      return false;
                    }

                    unpairedBracketCount++;
                  } else if (char === "}") {
                    if (unpairedBracketCount === 0) {
                      return false;
                    }

                    unpairedBracketCount--;

                    if (unpairedBracketCount === 0) {
                      isCompletelyClosed = true;
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return unpairedBracketCount === 0;
            }
          }

          function needsParens(path, options) {
            var parent = path.getParentNode();

            if (!parent) {
              return false;
            }

            var name = path.getName();
            var node = path.getNode(); // If the value of this path is some child of a Node and not a Node
            // itself, then it doesn't need parentheses. Only Node objects (in
            // fact, only Expression nodes) need parentheses.

            if (path.getValue() !== node) {
              return false;
            } // to avoid unexpected `}}` in HTML interpolations

            if (
              options.__isInHtmlInterpolation &&
              !options.bracketSpacing &&
              endsWithRightBracket(node) &&
              isFollowedByRightBracket(path)
            ) {
              return true;
            } // Only statements don't need parentheses.

            if (isStatement(node)) {
              return false;
            } // Closure compiler requires that type casted expressions to be surrounded by
            // parentheses.

            if (hasClosureCompilerTypeCastComment(options.originalText, path)) {
              return true;
            }

            if (
              // Preserve parens if we have a Flow annotation comment, unless we're using the Flow
              // parser. The Flow parser turns Flow comments into type annotation nodes in its
              // AST, which we handle separately.
              options.parser !== "flow" &&
              hasFlowShorthandAnnotationComment$1(path.getValue())
            ) {
              return true;
            } // Identifiers never need parentheses.

            if (node.type === "Identifier") {
              // ...unless those identifiers are embed placeholders. They might be substituted by complex
              // expressions, so the parens around them should not be dropped. Example (JS-in-HTML-in-JS):
              //     let tpl = html`<script> f((${expr}) / 2); </script>`;
              // If the inner JS formatter removes the parens, the expression might change its meaning:
              //     f((a + b) / 2)  vs  f(a + b / 2)
              if (
                node.extra &&
                node.extra.parenthesized &&
                /^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(node.name)
              ) {
                return true;
              }

              return false;
            }

            if (parent.type === "ParenthesizedExpression") {
              return false;
            } // Add parens around the extends clause of a class. It is needed for almost
            // all expressions.

            if (
              (parent.type === "ClassDeclaration" ||
                parent.type === "ClassExpression") &&
              parent.superClass === node &&
              (node.type === "ArrowFunctionExpression" ||
                node.type === "AssignmentExpression" ||
                node.type === "AwaitExpression" ||
                node.type === "BinaryExpression" ||
                node.type === "ConditionalExpression" ||
                node.type === "LogicalExpression" ||
                node.type === "NewExpression" ||
                node.type === "ObjectExpression" ||
                node.type === "ParenthesizedExpression" ||
                node.type === "SequenceExpression" ||
                node.type === "TaggedTemplateExpression" ||
                node.type === "UnaryExpression" ||
                node.type === "UpdateExpression" ||
                node.type === "YieldExpression")
            ) {
              return true;
            } // `export default function` or `export default class` can't be followed by
            // anything after. So an expression like `export default (function(){}).toString()`
            // needs to be followed by a parentheses

            if (parent.type === "ExportDefaultDeclaration") {
              return shouldWrapFunctionForExportDefault(path, options);
            }

            if (parent.type === "Decorator" && parent.expression === node) {
              var hasCallExpression = false;
              var hasMemberExpression = false;
              var current = node;

              while (current) {
                switch (current.type) {
                  case "MemberExpression":
                    hasMemberExpression = true;
                    current = current.object;
                    break;

                  case "CallExpression":
                    if (
                      /** @(x().y) */
                      hasMemberExpression ||
                      /** @(x().y()) */
                      hasCallExpression
                    ) {
                      return true;
                    }

                    hasCallExpression = true;
                    current = current.callee;
                    break;

                  case "Identifier":
                    return false;

                  default:
                    return true;
                }
              }

              return true;
            }

            if (
              (parent.type === "ArrowFunctionExpression" &&
                parent.body === node &&
                node.type !== "SequenceExpression" && // these have parens added anyway
                util.startsWithNoLookaheadToken(
                  node,
                  /* forbidFunctionClassAndDoExpr */
                  false
                )) ||
              (parent.type === "ExpressionStatement" &&
                util.startsWithNoLookaheadToken(
                  node,
                  /* forbidFunctionClassAndDoExpr */
                  true
                ))
            ) {
              return true;
            }

            switch (node.type) {
              case "CallExpression": {
                var firstParentNotMemberExpression = parent;
                var i = 0; // tagged templates are basically member expressions from a grammar perspective
                // see https://tc39.github.io/ecma262/#prod-MemberExpression
                // so are typescript's non-null assertions, though there's no grammar to point to

                while (
                  firstParentNotMemberExpression &&
                  ((firstParentNotMemberExpression.type ===
                    "MemberExpression" &&
                    firstParentNotMemberExpression.object ===
                      path.getParentNode(i - 1)) ||
                    firstParentNotMemberExpression.type ===
                      "TaggedTemplateExpression" ||
                    firstParentNotMemberExpression.type ===
                      "TSNonNullExpression")
                ) {
                  firstParentNotMemberExpression = path.getParentNode(++i);
                }

                if (
                  firstParentNotMemberExpression.type === "NewExpression" &&
                  firstParentNotMemberExpression.callee ===
                    path.getParentNode(i - 1)
                ) {
                  return true;
                }

                if (
                  parent.type === "BindExpression" &&
                  parent.callee === node
                ) {
                  return true;
                }

                return false;
              }

              case "SpreadElement":
              case "SpreadProperty":
                return (
                  parent.type === "MemberExpression" &&
                  name === "object" &&
                  parent.object === node
                );

              case "UpdateExpression":
                if (parent.type === "UnaryExpression") {
                  return (
                    node.prefix &&
                    ((node.operator === "++" && parent.operator === "+") ||
                      (node.operator === "--" && parent.operator === "-"))
                  );
                }

              // else fallthrough

              case "UnaryExpression":
                switch (parent.type) {
                  case "UnaryExpression":
                    return (
                      node.operator === parent.operator &&
                      (node.operator === "+" || node.operator === "-")
                    );

                  case "BindExpression":
                    return true;

                  case "MemberExpression":
                    return name === "object" && parent.object === node;

                  case "TaggedTemplateExpression":
                    return true;

                  case "NewExpression":
                  case "CallExpression":
                    return name === "callee" && parent.callee === node;

                  case "BinaryExpression":
                    return parent.operator === "**" && name === "left";

                  case "TSNonNullExpression":
                    return true;

                  default:
                    return false;
                }

              case "BinaryExpression": {
                if (parent.type === "UpdateExpression") {
                  return true;
                }

                var isLeftOfAForStatement = function isLeftOfAForStatement(
                  node
                ) {
                  var i = 0;

                  while (node) {
                    var _parent = path.getParentNode(i++);

                    if (!_parent) {
                      return false;
                    }

                    if (
                      _parent.type === "ForStatement" &&
                      _parent.init === node
                    ) {
                      return true;
                    }

                    node = _parent;
                  }

                  return false;
                };

                if (node.operator === "in" && isLeftOfAForStatement(node)) {
                  return true;
                }
              }
              // fallthrough

              case "TSTypeAssertion":
              case "TSAsExpression":
              case "LogicalExpression":
                switch (parent.type) {
                  case "ConditionalExpression":
                    return node.type === "TSAsExpression";

                  case "CallExpression":
                  case "NewExpression":
                    return name === "callee" && parent.callee === node;

                  case "ClassExpression":
                  case "ClassDeclaration":
                    return name === "superClass" && parent.superClass === node;

                  case "TSTypeAssertion":
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "JSXSpreadAttribute":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "BindExpression":
                  case "AwaitExpression":
                  case "TSAsExpression":
                  case "TSNonNullExpression":
                  case "UpdateExpression":
                    return true;

                  case "MemberExpression":
                  case "OptionalMemberExpression":
                    return name === "object" && parent.object === node;

                  case "AssignmentExpression":
                    return (
                      parent.left === node &&
                      (node.type === "TSTypeAssertion" ||
                        node.type === "TSAsExpression")
                    );

                  case "BinaryExpression":
                  case "LogicalExpression": {
                    if (!node.operator && node.type !== "TSTypeAssertion") {
                      return true;
                    }

                    var po = parent.operator;
                    var pp = util.getPrecedence(po);
                    var no = node.operator;
                    var np = util.getPrecedence(no);

                    if (pp > np) {
                      return true;
                    }

                    if ((po === "||" || po === "??") && no === "&&") {
                      return true;
                    }

                    if (pp === np && name === "right") {
                      assert$3.strictEqual(parent.right, node);
                      return true;
                    }

                    if (pp === np && !util.shouldFlatten(po, no)) {
                      return true;
                    }

                    if (pp < np && no === "%") {
                      return po === "+" || po === "-";
                    } // Add parenthesis when working with bitwise operators
                    // It's not stricly needed but helps with code understanding

                    if (util.isBitwiseOperator(po)) {
                      return true;
                    }

                    return false;
                  }

                  default:
                    return false;
                }

              case "TSParenthesizedType": {
                var grandParent = path.getParentNode(1);
                /**
                 * const foo = (): (() => void) => (): void => null;
                 *                 ^          ^
                 */

                if (
                  getUnparenthesizedNode(node).type === "TSFunctionType" &&
                  parent.type === "TSTypeAnnotation" &&
                  grandParent.type === "ArrowFunctionExpression" &&
                  grandParent.returnType === parent
                ) {
                  return true;
                }

                if (
                  (parent.type === "TSTypeParameter" ||
                    parent.type === "TypeParameter" ||
                    parent.type === "TSTypeAliasDeclaration" ||
                    parent.type === "TSTypeAnnotation" ||
                    parent.type === "TSParenthesizedType" ||
                    parent.type === "TSTypeParameterInstantiation") &&
                  grandParent.type !== "TSTypeOperator" &&
                  grandParent.type !== "TSOptionalType"
                ) {
                  return false;
                } // Delegate to inner TSParenthesizedType

                if (
                  node.typeAnnotation.type === "TSParenthesizedType" &&
                  parent.type !== "TSArrayType"
                ) {
                  return false;
                }

                return true;
              }

              case "SequenceExpression":
                switch (parent.type) {
                  case "ReturnStatement":
                    return false;

                  case "ForStatement":
                    // Although parentheses wouldn't hurt around sequence
                    // expressions in the head of for loops, traditional style
                    // dictates that e.g. i++, j++ should not be wrapped with
                    // parentheses.
                    return false;

                  case "ExpressionStatement":
                    return name !== "expression";

                  case "ArrowFunctionExpression":
                    // We do need parentheses, but SequenceExpressions are handled
                    // specially when printing bodies of arrow functions.
                    return name !== "body";

                  default:
                    // Otherwise err on the side of overparenthesization, adding
                    // explicit exceptions above if this proves overzealous.
                    return true;
                }

              case "YieldExpression":
                if (
                  parent.type === "UnaryExpression" ||
                  parent.type === "AwaitExpression" ||
                  parent.type === "TSAsExpression" ||
                  parent.type === "TSNonNullExpression"
                ) {
                  return true;
                }

              // else fallthrough

              case "AwaitExpression":
                switch (parent.type) {
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "BinaryExpression":
                  case "LogicalExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "TSAsExpression":
                  case "TSNonNullExpression":
                  case "BindExpression":
                  case "OptionalMemberExpression":
                    return true;

                  case "MemberExpression":
                    return parent.object === node;

                  case "NewExpression":
                  case "CallExpression":
                    return parent.callee === node;

                  case "ConditionalExpression":
                    return parent.test === node;

                  default:
                    return false;
                }

              case "ArrayTypeAnnotation":
                return parent.type === "NullableTypeAnnotation";

              case "IntersectionTypeAnnotation":
              case "UnionTypeAnnotation":
                return (
                  parent.type === "ArrayTypeAnnotation" ||
                  parent.type === "NullableTypeAnnotation" ||
                  parent.type === "IntersectionTypeAnnotation" ||
                  parent.type === "UnionTypeAnnotation"
                );

              case "NullableTypeAnnotation":
                return parent.type === "ArrayTypeAnnotation";

              case "FunctionTypeAnnotation": {
                var ancestor =
                  parent.type === "NullableTypeAnnotation"
                    ? path.getParentNode(1)
                    : parent;
                return (
                  ancestor.type === "UnionTypeAnnotation" ||
                  ancestor.type === "IntersectionTypeAnnotation" ||
                  ancestor.type === "ArrayTypeAnnotation" || // We should check ancestor's parent to know whether the parentheses
                  // are really needed, but since ??T doesn't make sense this check
                  // will almost never be true.
                  ancestor.type === "NullableTypeAnnotation"
                );
              }

              case "StringLiteral":
              case "NumericLiteral":
              case "Literal":
                if (
                  typeof node.value === "string" &&
                  parent.type === "ExpressionStatement" && // TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2
                  // See corresponding workaround in printer.js case: "Literal"
                  ((options.parser !== "typescript" && !parent.directive) ||
                    (options.parser === "typescript" &&
                      options.originalText.substr(
                        options.locStart(node) - 1,
                        1
                      ) === "("))
                ) {
                  // To avoid becoming a directive
                  var _grandParent = path.getParentNode(1);

                  return (
                    _grandParent.type === "Program" ||
                    _grandParent.type === "BlockStatement"
                  );
                }

                return (
                  parent.type === "MemberExpression" &&
                  typeof node.value === "number" &&
                  name === "object" &&
                  parent.object === node
                );

              case "AssignmentExpression": {
                var _grandParent2 = path.getParentNode(1);

                if (
                  parent.type === "ArrowFunctionExpression" &&
                  parent.body === node
                ) {
                  return true;
                } else if (
                  parent.type === "ClassProperty" &&
                  parent.key === node &&
                  parent.computed
                ) {
                  return false;
                } else if (
                  parent.type === "TSPropertySignature" &&
                  parent.name === node
                ) {
                  return false;
                } else if (
                  parent.type === "ForStatement" &&
                  (parent.init === node || parent.update === node)
                ) {
                  return false;
                } else if (parent.type === "ExpressionStatement") {
                  return node.left.type === "ObjectPattern";
                } else if (
                  parent.type === "TSPropertySignature" &&
                  parent.key === node
                ) {
                  return false;
                } else if (parent.type === "AssignmentExpression") {
                  return false;
                } else if (
                  parent.type === "SequenceExpression" &&
                  _grandParent2 &&
                  _grandParent2.type === "ForStatement" &&
                  (_grandParent2.init === parent ||
                    _grandParent2.update === parent)
                ) {
                  return false;
                } else if (
                  parent.type === "Property" &&
                  parent.value === node
                ) {
                  return false;
                } else if (parent.type === "NGChainedExpression") {
                  return false;
                }

                return true;
              }

              case "ConditionalExpression":
                switch (parent.type) {
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "BinaryExpression":
                  case "LogicalExpression":
                  case "NGPipeExpression":
                  case "ExportDefaultDeclaration":
                  case "AwaitExpression":
                  case "JSXSpreadAttribute":
                  case "TSTypeAssertion":
                  case "TypeCastExpression":
                  case "TSAsExpression":
                  case "TSNonNullExpression":
                  case "OptionalMemberExpression":
                    return true;

                  case "NewExpression":
                  case "CallExpression":
                    return name === "callee" && parent.callee === node;

                  case "ConditionalExpression":
                    return name === "test" && parent.test === node;

                  case "MemberExpression":
                    return name === "object" && parent.object === node;

                  default:
                    return false;
                }

              case "FunctionExpression":
                switch (parent.type) {
                  case "NewExpression":
                  case "CallExpression":
                    return name === "callee";
                  // Not strictly necessary, but it's clearer to the reader if IIFEs are wrapped in parentheses.

                  case "TaggedTemplateExpression":
                    return true;
                  // This is basically a kind of IIFE.

                  default:
                    return false;
                }

              case "ArrowFunctionExpression":
                switch (parent.type) {
                  case "CallExpression":
                    return name === "callee";

                  case "NewExpression":
                    return name === "callee";

                  case "MemberExpression":
                    return name === "object";

                  case "TSAsExpression":
                  case "BindExpression":
                  case "TaggedTemplateExpression":
                  case "UnaryExpression":
                  case "LogicalExpression":
                  case "BinaryExpression":
                  case "AwaitExpression":
                  case "TSTypeAssertion":
                    return true;

                  case "ConditionalExpression":
                    return name === "test";

                  default:
                    return false;
                }

              case "ClassExpression":
                switch (parent.type) {
                  case "NewExpression":
                    return name === "callee" && parent.callee === node;

                  default:
                    return false;
                }

              case "OptionalMemberExpression":
                return parent.type === "MemberExpression";

              case "MemberExpression":
                if (
                  parent.type === "BindExpression" &&
                  name === "callee" &&
                  parent.callee === node
                ) {
                  var object = node.object;

                  while (object) {
                    if (object.type === "CallExpression") {
                      return true;
                    }

                    if (
                      object.type !== "MemberExpression" &&
                      object.type !== "BindExpression"
                    ) {
                      break;
                    }

                    object = object.object;
                  }
                }

                return false;

              case "BindExpression":
                if (
                  (parent.type === "BindExpression" &&
                    name === "callee" &&
                    parent.callee === node) ||
                  (parent.type === "MemberExpression" &&
                    name === "object" &&
                    parent.object === node) ||
                  (parent.type === "NewExpression" &&
                    name === "callee" &&
                    parent.callee === node)
                ) {
                  return true;
                }

                return false;

              case "NGPipeExpression":
                if (
                  parent.type === "NGRoot" ||
                  parent.type === "NGMicrosyntaxExpression" ||
                  parent.type === "ObjectProperty" ||
                  parent.type === "ArrayExpression" ||
                  ((parent.type === "CallExpression" ||
                    parent.type === "OptionalCallExpression") &&
                    parent.arguments[name] === node) ||
                  (parent.type === "NGPipeExpression" && name === "right") ||
                  (parent.type === "MemberExpression" && name === "property") ||
                  parent.type === "AssignmentExpression"
                ) {
                  return false;
                }

                return true;
            }

            return false;
          }

          function isStatement(node) {
            return (
              node.type === "BlockStatement" ||
              node.type === "BreakStatement" ||
              node.type === "ClassBody" ||
              node.type === "ClassDeclaration" ||
              node.type === "ClassMethod" ||
              node.type === "ClassProperty" ||
              node.type === "ClassPrivateProperty" ||
              node.type === "ContinueStatement" ||
              node.type === "DebuggerStatement" ||
              node.type === "DeclareClass" ||
              node.type === "DeclareExportAllDeclaration" ||
              node.type === "DeclareExportDeclaration" ||
              node.type === "DeclareFunction" ||
              node.type === "DeclareInterface" ||
              node.type === "DeclareModule" ||
              node.type === "DeclareModuleExports" ||
              node.type === "DeclareVariable" ||
              node.type === "DoWhileStatement" ||
              node.type === "ExportAllDeclaration" ||
              node.type === "ExportDefaultDeclaration" ||
              node.type === "ExportNamedDeclaration" ||
              node.type === "ExpressionStatement" ||
              node.type === "ForAwaitStatement" ||
              node.type === "ForInStatement" ||
              node.type === "ForOfStatement" ||
              node.type === "ForStatement" ||
              node.type === "FunctionDeclaration" ||
              node.type === "IfStatement" ||
              node.type === "ImportDeclaration" ||
              node.type === "InterfaceDeclaration" ||
              node.type === "LabeledStatement" ||
              node.type === "MethodDefinition" ||
              node.type === "ReturnStatement" ||
              node.type === "SwitchStatement" ||
              node.type === "ThrowStatement" ||
              node.type === "TryStatement" ||
              node.type === "TSDeclareFunction" ||
              node.type === "TSEnumDeclaration" ||
              node.type === "TSImportEqualsDeclaration" ||
              node.type === "TSInterfaceDeclaration" ||
              node.type === "TSModuleDeclaration" ||
              node.type === "TSNamespaceExportDeclaration" ||
              node.type === "TypeAlias" ||
              node.type === "VariableDeclaration" ||
              node.type === "WhileStatement" ||
              node.type === "WithStatement"
            );
          }

          function getUnparenthesizedNode(node) {
            return node.type === "TSParenthesizedType"
              ? getUnparenthesizedNode(node.typeAnnotation)
              : node;
          }

          function endsWithRightBracket(node) {
            switch (node.type) {
              case "ObjectExpression":
                return true;

              default:
                return false;
            }
          }

          function isFollowedByRightBracket(path) {
            var node = path.getValue();
            var parent = path.getParentNode();
            var name = path.getName();

            switch (parent.type) {
              case "NGPipeExpression":
                if (
                  typeof name === "number" &&
                  parent.arguments[name] === node &&
                  parent.arguments.length - 1 === name
                ) {
                  return path.callParent(isFollowedByRightBracket);
                }

                break;

              case "ObjectProperty":
                if (name === "value") {
                  var parentParent = path.getParentNode(1);
                  return (
                    parentParent.properties[
                      parentParent.properties.length - 1
                    ] === parent
                  );
                }

                break;

              case "BinaryExpression":
              case "LogicalExpression":
                if (name === "right") {
                  return path.callParent(isFollowedByRightBracket);
                }

                break;

              case "ConditionalExpression":
                if (name === "alternate") {
                  return path.callParent(isFollowedByRightBracket);
                }

                break;

              case "UnaryExpression":
                if (parent.prefix) {
                  return path.callParent(isFollowedByRightBracket);
                }

                break;
            }

            return false;
          }

          function shouldWrapFunctionForExportDefault(path, options) {
            var node = path.getValue();
            var parent = path.getParentNode();

            if (
              node.type === "FunctionExpression" ||
              node.type === "ClassExpression"
            ) {
              return (
                parent.type === "ExportDefaultDeclaration" || // in some cases the function is already wrapped
                // (e.g. `export default (function() {})();`)
                // in this case we don't need to add extra parens
                !needsParens(path, options)
              );
            }

            if (
              !hasNakedLeftSide$1(node) ||
              (parent.type !== "ExportDefaultDeclaration" &&
                needsParens(path, options))
            ) {
              return false;
            }

            return path.call.apply(
              path,
              [
                function (childPath) {
                  return shouldWrapFunctionForExportDefault(childPath, options);
                },
              ].concat(getLeftSidePathName$1(path, node))
            );
          }

          var needsParens_1 = needsParens;

          var _require$$0$builders$6 = doc.builders;
          var concat$13 = _require$$0$builders$6.concat;
          var join$9 = _require$$0$builders$6.join;
          var line$9 = _require$$0$builders$6.line;

          function printHtmlBinding$1(path, options, print) {
            var node = path.getValue();

            if (options.__onHtmlBindingRoot && path.getName() === null) {
              options.__onHtmlBindingRoot(node);
            }

            if (node.type !== "File") {
              return;
            }

            if (options.__isVueForBindingLeft) {
              return path.call(
                function (functionDeclarationPath) {
                  var _functionDeclarationP =
                      functionDeclarationPath.getValue(),
                    params = _functionDeclarationP.params;

                  return concat$13([
                    params.length > 1 ? "(" : "",
                    join$9(
                      concat$13([",", line$9]),
                      functionDeclarationPath.map(print, "params")
                    ),
                    params.length > 1 ? ")" : "",
                  ]);
                },
                "program",
                "body",
                0
              );
            }

            if (options.__isVueSlotScope) {
              return path.call(
                function (functionDeclarationPath) {
                  return join$9(
                    concat$13([",", line$9]),
                    functionDeclarationPath.map(print, "params")
                  );
                },
                "program",
                "body",
                0
              );
            }
          } // based on https://github.com/prettier/prettier/blob/master/src/language-html/syntax-vue.js isVueEventBindingExpression()

          function isVueEventBindingExpression$3(node) {
            switch (node.type) {
              case "MemberExpression":
                switch (node.property.type) {
                  case "Identifier":
                  case "NumericLiteral":
                  case "StringLiteral":
                    return isVueEventBindingExpression$3(node.object);
                }

                return false;

              case "Identifier":
                return true;

              default:
                return false;
            }
          }

          var htmlBinding = {
            isVueEventBindingExpression: isVueEventBindingExpression$3,
            printHtmlBinding: printHtmlBinding$1,
          };

          function preprocess$2(ast, options) {
            switch (options.parser) {
              case "json":
              case "json5":
              case "json-stringify":
              case "__js_expression":
              case "__vue_expression":
                return Object.assign({}, ast, {
                  type: options.parser.startsWith("__")
                    ? "JsExpressionRoot"
                    : "JsonRoot",
                  node: ast,
                  comments: [],
                });

              default:
                return ast;
            }
          }

          var preprocess_1$2 = preprocess$2;

          var getParentExportDeclaration$1 = util.getParentExportDeclaration;
          var isExportDeclaration$1 = util.isExportDeclaration;
          var shouldFlatten$1 = util.shouldFlatten;
          var getNextNonSpaceNonCommentCharacter$1 =
            util.getNextNonSpaceNonCommentCharacter;
          var hasNewline$3 = util.hasNewline;
          var hasNewlineInRange$1 = util.hasNewlineInRange;
          var getLast$3 = util.getLast;
          var getStringWidth$2 = util.getStringWidth;
          var printString$2 = util.printString;
          var printNumber$2 = util.printNumber;
          var hasIgnoreComment$3 = util.hasIgnoreComment;
          var skipWhitespace$1 = util.skipWhitespace;
          var hasNodeIgnoreComment$1 = util.hasNodeIgnoreComment;
          var getPenultimate$1 = util.getPenultimate;
          var startsWithNoLookaheadToken$1 = util.startsWithNoLookaheadToken;
          var getIndentSize$1 = util.getIndentSize;
          var matchAncestorTypes$1 = util.matchAncestorTypes;
          var getPreferredQuote$1 = util.getPreferredQuote;
          var isNextLineEmpty$4 = utilShared.isNextLineEmpty;
          var isNextLineEmptyAfterIndex$1 =
            utilShared.isNextLineEmptyAfterIndex;
          var getNextNonSpaceNonCommentCharacterIndex$2 =
            utilShared.getNextNonSpaceNonCommentCharacterIndex;
          var isIdentifierName = utils$2.keyword.isIdentifierNameES5;
          var insertPragma$7 = pragma$2.insertPragma;
          var printHtmlBinding = htmlBinding.printHtmlBinding;
          var isVueEventBindingExpression$2 =
            htmlBinding.isVueEventBindingExpression;
          var getLeftSide = utils$8.getLeftSide;
          var getLeftSidePathName = utils$8.getLeftSidePathName;
          var hasNakedLeftSide = utils$8.hasNakedLeftSide;
          var hasNode = utils$8.hasNode;
          var hasFlowAnnotationComment = utils$8.hasFlowAnnotationComment;
          var hasFlowShorthandAnnotationComment =
            utils$8.hasFlowShorthandAnnotationComment;
          var needsQuoteProps = new WeakMap();
          var _require$$6$builders = doc.builders;
          var concat$11 = _require$$6$builders.concat;
          var join$7 = _require$$6$builders.join;
          var line$8 = _require$$6$builders.line;
          var hardline$8 = _require$$6$builders.hardline;
          var softline$5 = _require$$6$builders.softline;
          var literalline$3 = _require$$6$builders.literalline;
          var group$10 = _require$$6$builders.group;
          var indent$6 = _require$$6$builders.indent;
          var align$1 = _require$$6$builders.align;
          var conditionalGroup$1 = _require$$6$builders.conditionalGroup;
          var fill$4 = _require$$6$builders.fill;
          var ifBreak$6 = _require$$6$builders.ifBreak;
          var breakParent$3 = _require$$6$builders.breakParent;
          var lineSuffixBoundary$1 = _require$$6$builders.lineSuffixBoundary;
          var addAlignmentToDoc$2 = _require$$6$builders.addAlignmentToDoc;
          var dedent$3 = _require$$6$builders.dedent;
          var _require$$6$utils = doc.utils;
          var willBreak$1 = _require$$6$utils.willBreak;
          var isLineNext$1 = _require$$6$utils.isLineNext;
          var isEmpty$1 = _require$$6$utils.isEmpty;
          var removeLines$2 = _require$$6$utils.removeLines;
          var printDocToString$1 = doc.printer.printDocToString;
          var uid = 0;

          function shouldPrintComma$1(options, level) {
            level = level || "es5";

            switch (options.trailingComma) {
              case "all":
                if (level === "all") {
                  return true;
                }

              // fallthrough

              case "es5":
                if (level === "es5") {
                  return true;
                }

              // fallthrough

              case "none":
              default:
                return false;
            }
          }

          function genericPrint$3(path, options, printPath, args) {
            var node = path.getValue();
            var needsParens = false;
            var linesWithoutParens = printPathNoParens(
              path,
              options,
              printPath,
              args
            );

            if (!node || isEmpty$1(linesWithoutParens)) {
              return linesWithoutParens;
            }

            var parentExportDecl = getParentExportDeclaration$1(path);
            var decorators = [];

            if (
              node.type === "ClassMethod" ||
              node.type === "ClassPrivateMethod" ||
              node.type === "ClassProperty" ||
              node.type === "TSAbstractClassProperty" ||
              node.type === "ClassPrivateProperty" ||
              node.type === "MethodDefinition" ||
              node.type === "TSAbstractMethodDefinition"
            ) {
              // their decorators are handled themselves
            } else if (
              node.decorators &&
              node.decorators.length > 0 && // If the parent node is an export declaration and the decorator
              // was written before the export, the export will be responsible
              // for printing the decorators.
              !(
                parentExportDecl &&
                options.locStart(parentExportDecl, {
                  ignoreDecorators: true,
                }) > options.locStart(node.decorators[0])
              )
            ) {
              var shouldBreak =
                node.type === "ClassExpression" ||
                node.type === "ClassDeclaration" ||
                hasNewlineBetweenOrAfterDecorators(node, options);
              var separator = shouldBreak ? hardline$8 : line$8;
              path.each(function (decoratorPath) {
                var decorator = decoratorPath.getValue();

                if (decorator.expression) {
                  decorator = decorator.expression;
                } else {
                  decorator = decorator.callee;
                }

                decorators.push(printPath(decoratorPath), separator);
              }, "decorators");

              if (parentExportDecl) {
                decorators.unshift(hardline$8);
              }
            } else if (
              isExportDeclaration$1(node) &&
              node.declaration &&
              node.declaration.decorators &&
              node.declaration.decorators.length > 0 && // Only print decorators here if they were written before the export,
              // otherwise they are printed by the node.declaration
              options.locStart(node, {
                ignoreDecorators: true,
              }) > options.locStart(node.declaration.decorators[0])
            ) {
              // Export declarations are responsible for printing any decorators
              // that logically apply to node.declaration.
              path.each(
                function (decoratorPath) {
                  var decorator = decoratorPath.getValue();
                  var prefix = decorator.type === "Decorator" ? "" : "@";
                  decorators.push(prefix, printPath(decoratorPath), hardline$8);
                },
                "declaration",
                "decorators"
              );
            } else {
              // Nodes with decorators can't have parentheses, so we can avoid
              // computing pathNeedsParens() except in this case.
              needsParens = needsParens_1(path, options);
            }

            var parts = [];

            if (needsParens) {
              parts.unshift("(");
            }

            parts.push(linesWithoutParens);

            if (needsParens) {
              var _node = path.getValue();

              if (hasFlowShorthandAnnotationComment(_node)) {
                parts.push(" /*");
                parts.push(_node.trailingComments[0].value.trimLeft());
                parts.push("*/");
                _node.trailingComments[0].printed = true;
              }

              parts.push(")");
            }

            if (decorators.length > 0) {
              return group$10(concat$11(decorators.concat(parts)));
            }

            return concat$11(parts);
          }

          function hasNewlineBetweenOrAfterDecorators(node, options) {
            return (
              hasNewlineInRange$1(
                options.originalText,
                options.locStart(node.decorators[0]),
                options.locEnd(getLast$3(node.decorators))
              ) ||
              hasNewline$3(
                options.originalText,
                options.locEnd(getLast$3(node.decorators))
              )
            );
          }

          function printDecorators(path, options, print) {
            var node = path.getValue();
            return group$10(
              concat$11([
                join$7(line$8, path.map(print, "decorators")),
                hasNewlineBetweenOrAfterDecorators(node, options)
                  ? hardline$8
                  : line$8,
              ])
            );
          }

          function hasPrettierIgnore$2(path) {
            return hasIgnoreComment$3(path) || hasJsxIgnoreComment(path);
          }

          function hasJsxIgnoreComment(path) {
            var node = path.getValue();
            var parent = path.getParentNode();

            if (!parent || !node || !isJSXNode(node) || !isJSXNode(parent)) {
              return false;
            } // Lookup the previous sibling, ignoring any empty JSXText elements

            var index = parent.children.indexOf(node);
            var prevSibling = null;

            for (var i = index; i > 0; i--) {
              var candidate = parent.children[i - 1];

              if (
                candidate.type === "JSXText" &&
                !isMeaningfulJSXText(candidate)
              ) {
                continue;
              }

              prevSibling = candidate;
              break;
            }

            return (
              prevSibling &&
              prevSibling.type === "JSXExpressionContainer" &&
              prevSibling.expression.type === "JSXEmptyExpression" &&
              prevSibling.expression.comments &&
              prevSibling.expression.comments.find(function (comment) {
                return comment.value.trim() === "prettier-ignore";
              })
            );
          }
          /**
           * The following is the shared logic for
           * ternary operators, namely ConditionalExpression
           * and TSConditionalType
           * @typedef {Object} OperatorOptions
           * @property {() => Array<string | Doc>} beforeParts - Parts to print before the `?`.
           * @property {(breakClosingParen: boolean) => Array<string | Doc>} afterParts - Parts to print after the conditional expression.
           * @property {boolean} shouldCheckJsx - Whether to check for and print in JSX mode.
           * @property {string} conditionalNodeType - The type of the conditional expression node, ie "ConditionalExpression" or "TSConditionalType".
           * @property {string} consequentNodePropertyName - The property at which the consequent node can be found on the main node, eg "consequent".
           * @property {string} alternateNodePropertyName - The property at which the alternate node can be found on the main node, eg "alternate".
           * @property {string} testNodePropertyName - The property at which the test node can be found on the main node, eg "test".
           * @property {boolean} breakNested - Whether to break all nested ternaries when one breaks.
           * @param {FastPath} path - The path to the ConditionalExpression/TSConditionalType node.
           * @param {Options} options - Prettier options
           * @param {Function} print - Print function to call recursively
           * @param {OperatorOptions} operatorOptions
           * @returns Doc
           */

          function printTernaryOperator(path, options, print, operatorOptions) {
            var node = path.getValue();
            var testNode = node[operatorOptions.testNodePropertyName];
            var consequentNode =
              node[operatorOptions.consequentNodePropertyName];
            var alternateNode = node[operatorOptions.alternateNodePropertyName];
            var parts = []; // We print a ConditionalExpression in either "JSX mode" or "normal mode".
            // See tests/jsx/conditional-expression.js for more info.

            var jsxMode = false;
            var parent = path.getParentNode();
            var forceNoIndent =
              parent.type === operatorOptions.conditionalNodeType; // Find the outermost non-ConditionalExpression parent, and the outermost
            // ConditionalExpression parent. We'll use these to determine if we should
            // print in JSX mode.

            var currentParent;
            var previousParent;
            var i = 0;

            do {
              previousParent = currentParent || node;
              currentParent = path.getParentNode(i);
              i++;
            } while (currentParent && currentParent.type === operatorOptions.conditionalNodeType);

            var firstNonConditionalParent = currentParent || parent;
            var lastConditionalParent = previousParent;

            if (
              operatorOptions.shouldCheckJsx &&
              (isJSXNode(testNode) ||
                isJSXNode(consequentNode) ||
                isJSXNode(alternateNode) ||
                conditionalExpressionChainContainsJSX(lastConditionalParent))
            ) {
              jsxMode = true;
              forceNoIndent = true; // Even though they don't need parens, we wrap (almost) everything in
              // parens when using ?: within JSX, because the parens are analogous to
              // curly braces in an if statement.

              var wrap = function wrap(doc$$2) {
                return concat$11([
                  ifBreak$6("(", ""),
                  indent$6(concat$11([softline$5, doc$$2])),
                  softline$5,
                  ifBreak$6(")", ""),
                ]);
              }; // The only things we don't wrap are:
              // * Nested conditional expressions in alternates
              // * null

              var isNull = function isNull(node) {
                return (
                  node.type === "NullLiteral" ||
                  (node.type === "Literal" && node.value === null)
                );
              };

              parts.push(
                " ? ",
                isNull(consequentNode)
                  ? path.call(print, operatorOptions.consequentNodePropertyName)
                  : wrap(
                      path.call(
                        print,
                        operatorOptions.consequentNodePropertyName
                      )
                    ),
                " : ",
                alternateNode.type === operatorOptions.conditionalNodeType ||
                  isNull(alternateNode)
                  ? path.call(print, operatorOptions.alternateNodePropertyName)
                  : wrap(
                      path.call(
                        print,
                        operatorOptions.alternateNodePropertyName
                      )
                    )
              );
            } else {
              // normal mode
              var part = concat$11([
                line$8,
                "? ",
                consequentNode.type === operatorOptions.conditionalNodeType
                  ? ifBreak$6("", "(")
                  : "",
                align$1(
                  2,
                  path.call(print, operatorOptions.consequentNodePropertyName)
                ),
                consequentNode.type === operatorOptions.conditionalNodeType
                  ? ifBreak$6("", ")")
                  : "",
                line$8,
                ": ",
                alternateNode.type === operatorOptions.conditionalNodeType
                  ? path.call(print, operatorOptions.alternateNodePropertyName)
                  : align$1(
                      2,
                      path.call(
                        print,
                        operatorOptions.alternateNodePropertyName
                      )
                    ),
              ]);
              parts.push(
                parent.type !== operatorOptions.conditionalNodeType ||
                  parent[operatorOptions.alternateNodePropertyName] === node
                  ? part
                  : options.useTabs
                  ? dedent$3(indent$6(part))
                  : align$1(Math.max(0, options.tabWidth - 2), part)
              );
            } // We want a whole chain of ConditionalExpressions to all
            // break if any of them break. That means we should only group around the
            // outer-most ConditionalExpression.

            var maybeGroup = function maybeGroup(doc$$2) {
              return operatorOptions.breakNested
                ? parent === firstNonConditionalParent
                  ? group$10(doc$$2)
                  : doc$$2
                : group$10(doc$$2);
            }; // Break the closing paren to keep the chain right after it:
            // (a
            //   ? b
            //   : c
            // ).call()

            var breakClosingParen =
              !jsxMode &&
              (parent.type === "MemberExpression" ||
                parent.type === "OptionalMemberExpression") &&
              !parent.computed;
            return maybeGroup(
              concat$11(
                [].concat(
                  (function (testDoc) {
                    return (
                      /**
                       *     a
                       *       ? b
                       *       : multiline
                       *         test
                       *         node
                       *       ^^ align(2)
                       *       ? d
                       *       : e
                       */
                      parent.type === operatorOptions.conditionalNodeType &&
                        parent[operatorOptions.alternateNodePropertyName] ===
                          node
                        ? align$1(2, testDoc)
                        : testDoc
                    );
                  })(concat$11(operatorOptions.beforeParts())),
                  forceNoIndent ? concat$11(parts) : indent$6(concat$11(parts)),
                  operatorOptions.afterParts(breakClosingParen)
                )
              )
            );
          }

          function getTypeScriptMappedTypeModifier(tokenNode, keyword) {
            if (tokenNode === "+") {
              return "+" + keyword;
            } else if (tokenNode === "-") {
              return "-" + keyword;
            }

            return keyword;
          }

          function printPathNoParens(path, options, print, args) {
            var n = path.getValue();
            var semi = options.semi ? ";" : "";

            if (!n) {
              return "";
            }

            if (typeof n === "string") {
              return n;
            }

            var htmlBinding$$1 = printHtmlBinding(path, options, print);

            if (htmlBinding$$1) {
              return htmlBinding$$1;
            }

            var parts = [];

            switch (n.type) {
              case "JsExpressionRoot":
                return path.call(print, "node");

              case "JsonRoot":
                return concat$11([path.call(print, "node"), hardline$8]);

              case "File":
                // Print @babel/parser's InterpreterDirective here so that
                // leading comments on the `Program` node get printed after the hashbang.
                if (n.program && n.program.interpreter) {
                  parts.push(
                    path.call(function (programPath) {
                      return programPath.call(print, "interpreter");
                    }, "program")
                  );
                }

                parts.push(path.call(print, "program"));
                return concat$11(parts);

              case "Program":
                // Babel 6
                if (n.directives) {
                  path.each(function (childPath) {
                    parts.push(print(childPath), semi, hardline$8);

                    if (
                      isNextLineEmpty$4(
                        options.originalText,
                        childPath.getValue(),
                        options
                      )
                    ) {
                      parts.push(hardline$8);
                    }
                  }, "directives");
                }

                parts.push(
                  path.call(function (bodyPath) {
                    return printStatementSequence(bodyPath, options, print);
                  }, "body")
                );
                parts.push(
                  comments.printDanglingComments(
                    path,
                    options,
                    /* sameIndent */
                    true
                  )
                ); // Only force a trailing newline if there were any contents.

                if (n.body.length || n.comments) {
                  parts.push(hardline$8);
                }

                return concat$11(parts);
              // Babel extension.

              case "EmptyStatement":
                return "";

              case "ExpressionStatement":
                // Detect Flow-parsed directives
                if (n.directive) {
                  return concat$11([
                    nodeStr(n.expression, options, true),
                    semi,
                  ]);
                }

                if (options.parser === "__vue_event_binding") {
                  var parent = path.getParentNode();

                  if (
                    parent.type === "Program" &&
                    parent.body.length === 1 &&
                    parent.body[0] === n
                  ) {
                    return concat$11([
                      path.call(print, "expression"),
                      isVueEventBindingExpression$2(n.expression) ? ";" : "",
                    ]);
                  }
                } // Do not append semicolon after the only JSX element in a program

                return concat$11([
                  path.call(print, "expression"),
                  isTheOnlyJSXElementInMarkdown(options, path) ? "" : semi,
                ]);
              // Babel extension.

              case "ParenthesizedExpression":
                return concat$11(["(", path.call(print, "expression"), ")"]);

              case "AssignmentExpression":
                return printAssignment(
                  n.left,
                  path.call(print, "left"),
                  concat$11([" ", n.operator]),
                  n.right,
                  path.call(print, "right"),
                  options
                );

              case "BinaryExpression":
              case "LogicalExpression":
              case "NGPipeExpression": {
                var _parent = path.getParentNode();

                var parentParent = path.getParentNode(1);
                var isInsideParenthesis =
                  n !== _parent.body &&
                  (_parent.type === "IfStatement" ||
                    _parent.type === "WhileStatement" ||
                    _parent.type === "DoWhileStatement");

                var _parts = printBinaryishExpressions(
                  path,
                  print,
                  options,
                  /* isNested */
                  false,
                  isInsideParenthesis
                ); //   if (
                //     this.hasPlugin("dynamicImports") && this.lookahead().type === tt.parenLeft
                //   ) {
                //
                // looks super weird, we want to break the children if the parent breaks
                //
                //   if (
                //     this.hasPlugin("dynamicImports") &&
                //     this.lookahead().type === tt.parenLeft
                //   ) {

                if (isInsideParenthesis) {
                  return concat$11(_parts);
                } // Break between the parens in unaries or in a member expression, i.e.
                //
                //   (
                //     a &&
                //     b &&
                //     c
                //   ).call()

                if (
                  _parent.type === "UnaryExpression" ||
                  ((_parent.type === "MemberExpression" ||
                    _parent.type === "OptionalMemberExpression") &&
                    !_parent.computed)
                ) {
                  return group$10(
                    concat$11([
                      indent$6(concat$11([softline$5, concat$11(_parts)])),
                      softline$5,
                    ])
                  );
                } // Avoid indenting sub-expressions in some cases where the first sub-expression is already
                // indented accordingly. We should indent sub-expressions where the first case isn't indented.

                var shouldNotIndent =
                  _parent.type === "ReturnStatement" ||
                  (_parent.type === "JSXExpressionContainer" &&
                    parentParent.type === "JSXAttribute") ||
                  (n.type !== "NGPipeExpression" &&
                    ((_parent.type === "NGRoot" &&
                      options.parser === "__ng_binding") ||
                      (_parent.type === "NGMicrosyntaxExpression" &&
                        parentParent.type === "NGMicrosyntax" &&
                        parentParent.body.length === 1))) ||
                  (n === _parent.body &&
                    _parent.type === "ArrowFunctionExpression") ||
                  (n !== _parent.body && _parent.type === "ForStatement") ||
                  (_parent.type === "ConditionalExpression" &&
                    parentParent.type !== "ReturnStatement" &&
                    parentParent.type !== "CallExpression");
                var shouldIndentIfInlining =
                  _parent.type === "AssignmentExpression" ||
                  _parent.type === "VariableDeclarator" ||
                  _parent.type === "ClassProperty" ||
                  _parent.type === "TSAbstractClassProperty" ||
                  _parent.type === "ClassPrivateProperty" ||
                  _parent.type === "ObjectProperty" ||
                  _parent.type === "Property";
                var samePrecedenceSubExpression =
                  isBinaryish(n.left) &&
                  shouldFlatten$1(n.operator, n.left.operator);

                if (
                  shouldNotIndent ||
                  (shouldInlineLogicalExpression(n) &&
                    !samePrecedenceSubExpression) ||
                  (!shouldInlineLogicalExpression(n) && shouldIndentIfInlining)
                ) {
                  return group$10(concat$11(_parts));
                }

                if (_parts.length === 0) {
                  return "";
                } // If the right part is a JSX node, we include it in a separate group to
                // prevent it breaking the whole chain, so we can print the expression like:
                //
                //   foo && bar && (
                //     <Foo>
                //       <Bar />
                //     </Foo>
                //   )

                var hasJSX = isJSXNode(n.right);
                var rest = concat$11(
                  hasJSX ? _parts.slice(1, -1) : _parts.slice(1)
                );
                var groupId = Symbol("logicalChain-" + ++uid);
                var chain = group$10(
                  concat$11([
                    // Don't include the initial expression in the indentation
                    // level. The first item is guaranteed to be the first
                    // left-most expression.
                    _parts.length > 0 ? _parts[0] : "",
                    indent$6(rest),
                  ]),
                  {
                    id: groupId,
                  }
                );

                if (!hasJSX) {
                  return chain;
                }

                var jsxPart = getLast$3(_parts);
                return group$10(
                  concat$11([
                    chain,
                    ifBreak$6(indent$6(jsxPart), jsxPart, {
                      groupId: groupId,
                    }),
                  ])
                );
              }

              case "AssignmentPattern":
                return concat$11([
                  path.call(print, "left"),
                  " = ",
                  path.call(print, "right"),
                ]);

              case "TSTypeAssertion": {
                var shouldBreakAfterCast = !(
                  n.expression.type === "ArrayExpression" ||
                  n.expression.type === "ObjectExpression"
                );
                var castGroup = group$10(
                  concat$11([
                    "<",
                    indent$6(
                      concat$11([
                        softline$5,
                        path.call(print, "typeAnnotation"),
                      ])
                    ),
                    softline$5,
                    ">",
                  ])
                );
                var exprContents = concat$11([
                  ifBreak$6("("),
                  indent$6(
                    concat$11([softline$5, path.call(print, "expression")])
                  ),
                  softline$5,
                  ifBreak$6(")"),
                ]);

                if (shouldBreakAfterCast) {
                  return conditionalGroup$1([
                    concat$11([castGroup, path.call(print, "expression")]),
                    concat$11([
                      castGroup,
                      group$10(exprContents, {
                        shouldBreak: true,
                      }),
                    ]),
                    concat$11([castGroup, path.call(print, "expression")]),
                  ]);
                }

                return group$10(
                  concat$11([castGroup, path.call(print, "expression")])
                );
              }

              case "OptionalMemberExpression":
              case "MemberExpression": {
                var _parent2 = path.getParentNode();

                var firstNonMemberParent;
                var i = 0;

                do {
                  firstNonMemberParent = path.getParentNode(i);
                  i++;
                } while (firstNonMemberParent && (firstNonMemberParent.type === "MemberExpression" || firstNonMemberParent.type === "OptionalMemberExpression" || firstNonMemberParent.type === "TSNonNullExpression"));

                var shouldInline =
                  (firstNonMemberParent &&
                    (firstNonMemberParent.type === "NewExpression" ||
                      firstNonMemberParent.type === "BindExpression" ||
                      (firstNonMemberParent.type === "VariableDeclarator" &&
                        firstNonMemberParent.id.type !== "Identifier") ||
                      (firstNonMemberParent.type === "AssignmentExpression" &&
                        firstNonMemberParent.left.type !== "Identifier"))) ||
                  n.computed ||
                  (n.object.type === "Identifier" &&
                    n.property.type === "Identifier" &&
                    _parent2.type !== "MemberExpression" &&
                    _parent2.type !== "OptionalMemberExpression");
                return concat$11([
                  path.call(print, "object"),
                  shouldInline
                    ? printMemberLookup(path, options, print)
                    : group$10(
                        indent$6(
                          concat$11([
                            softline$5,
                            printMemberLookup(path, options, print),
                          ])
                        )
                      ),
                ]);
              }

              case "MetaProperty":
                return concat$11([
                  path.call(print, "meta"),
                  ".",
                  path.call(print, "property"),
                ]);

              case "BindExpression":
                if (n.object) {
                  parts.push(path.call(print, "object"));
                }

                parts.push(
                  group$10(
                    indent$6(
                      concat$11([
                        softline$5,
                        printBindExpressionCallee(path, options, print),
                      ])
                    )
                  )
                );
                return concat$11(parts);

              case "Identifier": {
                return concat$11([
                  n.name,
                  printOptionalToken(path),
                  printTypeAnnotation(path, options, print),
                ]);
              }

              case "SpreadElement":
              case "SpreadElementPattern":
              case "RestProperty":
              case "SpreadProperty":
              case "SpreadPropertyPattern":
              case "RestElement":
              case "ObjectTypeSpreadProperty":
                return concat$11([
                  "...",
                  path.call(print, "argument"),
                  printTypeAnnotation(path, options, print),
                ]);

              case "FunctionDeclaration":
              case "FunctionExpression":
                parts.push(printFunctionDeclaration(path, print, options));

                if (!n.body) {
                  parts.push(semi);
                }

                return concat$11(parts);

              case "ArrowFunctionExpression": {
                if (n.async) {
                  parts.push("async ");
                }

                if (shouldPrintParamsWithoutParens(path, options)) {
                  parts.push(path.call(print, "params", 0));
                } else {
                  parts.push(
                    group$10(
                      concat$11([
                        printFunctionParams(
                          path,
                          print,
                          options,
                          /* expandLast */
                          args && (args.expandLastArg || args.expandFirstArg),
                          /* printTypeParams */
                          true
                        ),
                        printReturnType(path, print, options),
                      ])
                    )
                  );
                }

                var dangling = comments.printDanglingComments(
                  path,
                  options,
                  /* sameIndent */
                  true,
                  function (comment) {
                    var nextCharacter =
                      getNextNonSpaceNonCommentCharacterIndex$2(
                        options.originalText,
                        comment,
                        options
                      );
                    return (
                      options.originalText.substr(nextCharacter, 2) === "=>"
                    );
                  }
                );

                if (dangling) {
                  parts.push(" ", dangling);
                }

                parts.push(" =>");
                var body = path.call(function (bodyPath) {
                  return print(bodyPath, args);
                }, "body"); // We want to always keep these types of nodes on the same line
                // as the arrow.

                if (
                  !hasLeadingOwnLineComment(
                    options.originalText,
                    n.body,
                    options
                  ) &&
                  (n.body.type === "ArrayExpression" ||
                    n.body.type === "ObjectExpression" ||
                    n.body.type === "BlockStatement" ||
                    isJSXNode(n.body) ||
                    isTemplateOnItsOwnLine(
                      n.body,
                      options.originalText,
                      options
                    ) ||
                    n.body.type === "ArrowFunctionExpression" ||
                    n.body.type === "DoExpression")
                ) {
                  return group$10(concat$11([concat$11(parts), " ", body]));
                } // We handle sequence expressions as the body of arrows specially,
                // so that the required parentheses end up on their own lines.

                if (n.body.type === "SequenceExpression") {
                  return group$10(
                    concat$11([
                      concat$11(parts),
                      group$10(
                        concat$11([
                          " (",
                          indent$6(concat$11([softline$5, body])),
                          softline$5,
                          ")",
                        ])
                      ),
                    ])
                  );
                } // if the arrow function is expanded as last argument, we are adding a
                // level of indentation and need to add a softline to align the closing )
                // with the opening (, or if it's inside a JSXExpression (e.g. an attribute)
                // we should align the expression's closing } with the line with the opening {.

                var shouldAddSoftLine =
                  ((args && args.expandLastArg) ||
                    path.getParentNode().type === "JSXExpressionContainer") &&
                  !(n.comments && n.comments.length);
                var printTrailingComma =
                  args &&
                  args.expandLastArg &&
                  shouldPrintComma$1(options, "all"); // In order to avoid confusion between
                // a => a ? a : a
                // a <= a ? a : a

                var shouldAddParens =
                  n.body.type === "ConditionalExpression" &&
                  !startsWithNoLookaheadToken$1(
                    n.body,
                    /* forbidFunctionAndClass */
                    false
                  );
                return group$10(
                  concat$11([
                    concat$11(parts),
                    group$10(
                      concat$11([
                        indent$6(
                          concat$11([
                            line$8,
                            shouldAddParens ? ifBreak$6("", "(") : "",
                            body,
                            shouldAddParens ? ifBreak$6("", ")") : "",
                          ])
                        ),
                        shouldAddSoftLine
                          ? concat$11([
                              ifBreak$6(printTrailingComma ? "," : ""),
                              softline$5,
                            ])
                          : "",
                      ])
                    ),
                  ])
                );
              }

              case "MethodDefinition":
              case "TSAbstractMethodDefinition":
                if (n.decorators && n.decorators.length !== 0) {
                  parts.push(printDecorators(path, options, print));
                }

                if (n.accessibility) {
                  parts.push(n.accessibility + " ");
                }

                if (n.static) {
                  parts.push("static ");
                }

                if (n.type === "TSAbstractMethodDefinition") {
                  parts.push("abstract ");
                }

                parts.push(printMethod(path, options, print));
                return concat$11(parts);

              case "YieldExpression":
                parts.push("yield");

                if (n.delegate) {
                  parts.push("*");
                }

                if (n.argument) {
                  parts.push(" ", path.call(print, "argument"));
                }

                return concat$11(parts);

              case "AwaitExpression":
                return concat$11(["await ", path.call(print, "argument")]);

              case "ImportSpecifier":
                if (n.importKind) {
                  parts.push(path.call(print, "importKind"), " ");
                }

                parts.push(path.call(print, "imported"));

                if (n.local && n.local.name !== n.imported.name) {
                  parts.push(" as ", path.call(print, "local"));
                }

                return concat$11(parts);

              case "ExportSpecifier":
                parts.push(path.call(print, "local"));

                if (n.exported && n.exported.name !== n.local.name) {
                  parts.push(" as ", path.call(print, "exported"));
                }

                return concat$11(parts);

              case "ImportNamespaceSpecifier":
                parts.push("* as ");
                parts.push(path.call(print, "local"));
                return concat$11(parts);

              case "ImportDefaultSpecifier":
                return path.call(print, "local");

              case "TSExportAssignment":
                return concat$11([
                  "export = ",
                  path.call(print, "expression"),
                  semi,
                ]);

              case "ExportDefaultDeclaration":
              case "ExportNamedDeclaration":
                return printExportDeclaration(path, options, print);

              case "ExportAllDeclaration":
                parts.push("export ");

                if (n.exportKind === "type") {
                  parts.push("type ");
                }

                parts.push("* from ", path.call(print, "source"), semi);
                return concat$11(parts);

              case "ExportNamespaceSpecifier":
              case "ExportDefaultSpecifier":
                return path.call(print, "exported");

              case "ImportDeclaration": {
                parts.push("import ");

                if (n.importKind && n.importKind !== "value") {
                  parts.push(n.importKind + " ");
                }

                var standalones = [];
                var grouped = [];

                if (n.specifiers && n.specifiers.length > 0) {
                  path.each(function (specifierPath) {
                    var value = specifierPath.getValue();

                    if (
                      value.type === "ImportDefaultSpecifier" ||
                      value.type === "ImportNamespaceSpecifier"
                    ) {
                      standalones.push(print(specifierPath));
                    } else {
                      grouped.push(print(specifierPath));
                    }
                  }, "specifiers");

                  if (standalones.length > 0) {
                    parts.push(join$7(", ", standalones));
                  }

                  if (standalones.length > 0 && grouped.length > 0) {
                    parts.push(", ");
                  }

                  if (
                    grouped.length === 1 &&
                    standalones.length === 0 &&
                    n.specifiers &&
                    !n.specifiers.some(function (node) {
                      return node.comments;
                    })
                  ) {
                    parts.push(
                      concat$11([
                        "{",
                        options.bracketSpacing ? " " : "",
                        concat$11(grouped),
                        options.bracketSpacing ? " " : "",
                        "}",
                      ])
                    );
                  } else if (grouped.length >= 1) {
                    parts.push(
                      group$10(
                        concat$11([
                          "{",
                          indent$6(
                            concat$11([
                              options.bracketSpacing ? line$8 : softline$5,
                              join$7(concat$11([",", line$8]), grouped),
                            ])
                          ),
                          ifBreak$6(shouldPrintComma$1(options) ? "," : ""),
                          options.bracketSpacing ? line$8 : softline$5,
                          "}",
                        ])
                      )
                    );
                  }

                  parts.push(" from ");
                } else if (
                  (n.importKind && n.importKind === "type") || // import {} from 'x'
                  /{\s*}/.test(
                    options.originalText.slice(
                      options.locStart(n),
                      options.locStart(n.source)
                    )
                  )
                ) {
                  parts.push("{} from ");
                }

                parts.push(path.call(print, "source"), semi);
                return concat$11(parts);
              }

              case "Import":
                return "import";

              case "TSModuleBlock":
              case "BlockStatement": {
                var naked = path.call(function (bodyPath) {
                  return printStatementSequence(bodyPath, options, print);
                }, "body");
                var hasContent = n.body.find(function (node) {
                  return node.type !== "EmptyStatement";
                });
                var hasDirectives = n.directives && n.directives.length > 0;

                var _parent3 = path.getParentNode();

                var _parentParent = path.getParentNode(1);

                if (
                  !hasContent &&
                  !hasDirectives &&
                  !hasDanglingComments(n) &&
                  (_parent3.type === "ArrowFunctionExpression" ||
                    _parent3.type === "FunctionExpression" ||
                    _parent3.type === "FunctionDeclaration" ||
                    _parent3.type === "ObjectMethod" ||
                    _parent3.type === "ClassMethod" ||
                    _parent3.type === "ClassPrivateMethod" ||
                    _parent3.type === "ForStatement" ||
                    _parent3.type === "WhileStatement" ||
                    _parent3.type === "DoWhileStatement" ||
                    _parent3.type === "DoExpression" ||
                    (_parent3.type === "CatchClause" &&
                      !_parentParent.finalizer) ||
                    _parent3.type === "TSModuleDeclaration")
                ) {
                  return "{}";
                }

                parts.push("{"); // Babel 6

                if (hasDirectives) {
                  path.each(function (childPath) {
                    parts.push(
                      indent$6(concat$11([hardline$8, print(childPath), semi]))
                    );

                    if (
                      isNextLineEmpty$4(
                        options.originalText,
                        childPath.getValue(),
                        options
                      )
                    ) {
                      parts.push(hardline$8);
                    }
                  }, "directives");
                }

                if (hasContent) {
                  parts.push(indent$6(concat$11([hardline$8, naked])));
                }

                parts.push(comments.printDanglingComments(path, options));
                parts.push(hardline$8, "}");
                return concat$11(parts);
              }

              case "ReturnStatement":
                parts.push("return");

                if (n.argument) {
                  if (returnArgumentHasLeadingComment(options, n.argument)) {
                    parts.push(
                      concat$11([
                        " (",
                        indent$6(
                          concat$11([hardline$8, path.call(print, "argument")])
                        ),
                        hardline$8,
                        ")",
                      ])
                    );
                  } else if (
                    n.argument.type === "LogicalExpression" ||
                    n.argument.type === "BinaryExpression" ||
                    n.argument.type === "SequenceExpression"
                  ) {
                    parts.push(
                      group$10(
                        concat$11([
                          ifBreak$6(" (", " "),
                          indent$6(
                            concat$11([
                              softline$5,
                              path.call(print, "argument"),
                            ])
                          ),
                          softline$5,
                          ifBreak$6(")"),
                        ])
                      )
                    );
                  } else {
                    parts.push(" ", path.call(print, "argument"));
                  }
                }

                if (hasDanglingComments(n)) {
                  parts.push(
                    " ",
                    comments.printDanglingComments(
                      path,
                      options,
                      /* sameIndent */
                      true
                    )
                  );
                }

                parts.push(semi);
                return concat$11(parts);

              case "NewExpression":
              case "OptionalCallExpression":
              case "CallExpression": {
                var isNew = n.type === "NewExpression";
                var optional = printOptionalToken(path);

                if (
                  // We want to keep CommonJS- and AMD-style require calls, and AMD-style
                  // define calls, as a unit.
                  // e.g. `define(["some/lib", (lib) => {`
                  (!isNew &&
                    n.callee.type === "Identifier" &&
                    (n.callee.name === "require" ||
                      n.callee.name === "define")) || // Template literals as single arguments
                  (n.arguments.length === 1 &&
                    isTemplateOnItsOwnLine(
                      n.arguments[0],
                      options.originalText,
                      options
                    )) || // Keep test declarations on a single line
                  // e.g. `it('long name', () => {`
                  (!isNew && isTestCall(n, path.getParentNode()))
                ) {
                  return concat$11([
                    isNew ? "new " : "",
                    path.call(print, "callee"),
                    optional,
                    printFunctionTypeParameters(path, options, print),
                    concat$11([
                      "(",
                      join$7(", ", path.map(print, "arguments")),
                      ")",
                    ]),
                  ]);
                } // Inline Flow annotation comments following Identifiers in Call nodes need to
                // stay with the Identifier. For example:
                //
                // foo /*:: <SomeGeneric> */(bar);
                //
                // Here, we ensure that such comments stay between the Identifier and the Callee.

                var isIdentifierWithFlowAnnotation =
                  n.callee.type === "Identifier" &&
                  hasFlowAnnotationComment(n.callee.trailingComments);

                if (isIdentifierWithFlowAnnotation) {
                  n.callee.trailingComments[0].printed = true;
                } // We detect calls on member lookups and possibly print them in a
                // special chain format. See `printMemberChain` for more info.

                if (!isNew && isMemberish(n.callee)) {
                  return printMemberChain(path, options, print);
                }

                return concat$11([
                  isNew ? "new " : "",
                  path.call(print, "callee"),
                  optional,
                  isIdentifierWithFlowAnnotation
                    ? "/*:: ".concat(
                        n.callee.trailingComments[0].value.substring(2).trim(),
                        " */"
                      )
                    : "",
                  printFunctionTypeParameters(path, options, print),
                  printArgumentsList(path, options, print),
                ]);
              }

              case "TSInterfaceDeclaration":
                if (isNodeStartingWithDeclare(n, options)) {
                  parts.push("declare ");
                }

                parts.push(
                  n.abstract ? "abstract " : "",
                  printTypeScriptModifiers(path, options, print),
                  "interface ",
                  path.call(print, "id"),
                  n.typeParameters ? path.call(print, "typeParameters") : "",
                  " "
                );

                if (n.extends && n.extends.length) {
                  parts.push(
                    group$10(
                      indent$6(
                        concat$11([
                          softline$5,
                          "extends ",
                          (n.extends.length === 1 ? identity$1 : indent$6)(
                            join$7(
                              concat$11([",", line$8]),
                              path.map(print, "extends")
                            )
                          ),
                          " ",
                        ])
                      )
                    )
                  );
                }

                parts.push(path.call(print, "body"));
                return concat$11(parts);

              case "ObjectTypeInternalSlot":
                return concat$11([
                  n.static ? "static " : "",
                  "[[",
                  path.call(print, "id"),
                  "]]",
                  printOptionalToken(path),
                  n.method ? "" : ": ",
                  path.call(print, "value"),
                ]);

              case "ObjectExpression":
              case "ObjectPattern":
              case "ObjectTypeAnnotation":
              case "TSInterfaceBody":
              case "TSTypeLiteral": {
                var propertiesField;

                if (n.type === "TSTypeLiteral") {
                  propertiesField = "members";
                } else if (n.type === "TSInterfaceBody") {
                  propertiesField = "body";
                } else {
                  propertiesField = "properties";
                }

                var isTypeAnnotation = n.type === "ObjectTypeAnnotation";
                var fields = [];

                if (isTypeAnnotation) {
                  fields.push("indexers", "callProperties", "internalSlots");
                }

                fields.push(propertiesField);
                var firstProperty = fields
                  .map(function (field) {
                    return n[field][0];
                  })
                  .sort(function (a, b) {
                    return options.locStart(a) - options.locStart(b);
                  })[0];

                var _parent4 = path.getParentNode(0);

                var isFlowInterfaceLikeBody =
                  isTypeAnnotation &&
                  _parent4 &&
                  (_parent4.type === "InterfaceDeclaration" ||
                    _parent4.type === "DeclareInterface" ||
                    _parent4.type === "DeclareClass") &&
                  path.getName() === "body";
                var shouldBreak =
                  n.type === "TSInterfaceBody" ||
                  isFlowInterfaceLikeBody ||
                  (n.type === "ObjectPattern" &&
                    _parent4.type !== "FunctionDeclaration" &&
                    _parent4.type !== "FunctionExpression" &&
                    _parent4.type !== "ArrowFunctionExpression" &&
                    _parent4.type !== "AssignmentPattern" &&
                    _parent4.type !== "CatchClause" &&
                    n.properties.some(function (property) {
                      return (
                        property.value &&
                        (property.value.type === "ObjectPattern" ||
                          property.value.type === "ArrayPattern")
                      );
                    })) ||
                  (n.type !== "ObjectPattern" &&
                    firstProperty &&
                    hasNewlineInRange$1(
                      options.originalText,
                      options.locStart(n),
                      options.locStart(firstProperty)
                    ));
                var separator = isFlowInterfaceLikeBody
                  ? ";"
                  : n.type === "TSInterfaceBody" || n.type === "TSTypeLiteral"
                  ? ifBreak$6(semi, ";")
                  : ",";
                var leftBrace = n.exact ? "{|" : "{";
                var rightBrace = n.exact ? "|}" : "}"; // Unfortunately, things are grouped together in the ast can be
                // interleaved in the source code. So we need to reorder them before
                // printing them.

                var propsAndLoc = [];
                fields.forEach(function (field) {
                  path.each(function (childPath) {
                    var node = childPath.getValue();
                    propsAndLoc.push({
                      node: node,
                      printed: print(childPath),
                      loc: options.locStart(node),
                    });
                  }, field);
                });
                var separatorParts = [];
                var props = propsAndLoc
                  .sort(function (a, b) {
                    return a.loc - b.loc;
                  })
                  .map(function (prop) {
                    var result = concat$11(
                      separatorParts.concat(group$10(prop.printed))
                    );
                    separatorParts = [separator, line$8];

                    if (
                      (prop.node.type === "TSPropertySignature" ||
                        prop.node.type === "TSMethodSignature" ||
                        prop.node.type === "TSConstructSignatureDeclaration") &&
                      hasNodeIgnoreComment$1(prop.node)
                    ) {
                      separatorParts.shift();
                    }

                    if (
                      isNextLineEmpty$4(
                        options.originalText,
                        prop.node,
                        options
                      )
                    ) {
                      separatorParts.push(hardline$8);
                    }

                    return result;
                  });

                if (n.inexact) {
                  props.push(concat$11(separatorParts.concat(group$10("..."))));
                }

                var lastElem = getLast$3(n[propertiesField]);
                var canHaveTrailingSeparator = !(
                  lastElem &&
                  (lastElem.type === "RestProperty" ||
                    lastElem.type === "RestElement" ||
                    hasNodeIgnoreComment$1(lastElem) ||
                    n.inexact)
                );
                var content;

                if (props.length === 0 && !n.typeAnnotation) {
                  if (!hasDanglingComments(n)) {
                    return concat$11([leftBrace, rightBrace]);
                  }

                  content = group$10(
                    concat$11([
                      leftBrace,
                      comments.printDanglingComments(path, options),
                      softline$5,
                      rightBrace,
                      printOptionalToken(path),
                    ])
                  );
                } else {
                  content = concat$11([
                    leftBrace,
                    indent$6(
                      concat$11([
                        options.bracketSpacing ? line$8 : softline$5,
                        concat$11(props),
                      ])
                    ),
                    ifBreak$6(
                      canHaveTrailingSeparator &&
                        (separator !== "," || shouldPrintComma$1(options))
                        ? separator
                        : ""
                    ),
                    concat$11([
                      options.bracketSpacing ? line$8 : softline$5,
                      rightBrace,
                    ]),
                    printOptionalToken(path),
                    printTypeAnnotation(path, options, print),
                  ]);
                } // If we inline the object as first argument of the parent, we don't want
                // to create another group so that the object breaks before the return
                // type

                var parentParentParent = path.getParentNode(2);

                if (
                  (n.type === "ObjectPattern" &&
                    _parent4 &&
                    shouldHugArguments(_parent4) &&
                    _parent4.params[0] === n) ||
                  (shouldHugType(n) &&
                    parentParentParent &&
                    shouldHugArguments(parentParentParent) &&
                    parentParentParent.params[0].typeAnnotation &&
                    parentParentParent.params[0].typeAnnotation
                      .typeAnnotation === n)
                ) {
                  return content;
                }

                return group$10(content, {
                  shouldBreak: shouldBreak,
                });
              }
              // Babel 6

              case "ObjectProperty": // Non-standard AST node type.

              case "Property":
                if (n.method || n.kind === "get" || n.kind === "set") {
                  return printMethod(path, options, print);
                }

                if (n.shorthand) {
                  parts.push(path.call(print, "value"));
                } else {
                  var printedLeft;

                  if (n.computed) {
                    printedLeft = concat$11([
                      "[",
                      path.call(print, "key"),
                      "]",
                    ]);
                  } else {
                    printedLeft = printPropertyKey(path, options, print);
                  }

                  parts.push(
                    printAssignment(
                      n.key,
                      printedLeft,
                      ":",
                      n.value,
                      path.call(print, "value"),
                      options
                    )
                  );
                }

                return concat$11(parts);
              // Babel 6

              case "ClassMethod":
              case "ClassPrivateMethod":
                if (n.decorators && n.decorators.length !== 0) {
                  parts.push(printDecorators(path, options, print));
                }

                if (n.static) {
                  parts.push("static ");
                }

                parts = parts.concat(printObjectMethod(path, options, print));
                return concat$11(parts);
              // Babel 6

              case "ObjectMethod":
                return printObjectMethod(path, options, print);

              case "Decorator":
                return concat$11([
                  "@",
                  path.call(print, "expression"),
                  path.call(print, "callee"),
                ]);

              case "ArrayExpression":
              case "ArrayPattern":
                if (n.elements.length === 0) {
                  if (!hasDanglingComments(n)) {
                    parts.push("[]");
                  } else {
                    parts.push(
                      group$10(
                        concat$11([
                          "[",
                          comments.printDanglingComments(path, options),
                          softline$5,
                          "]",
                        ])
                      )
                    );
                  }
                } else {
                  var _lastElem = getLast$3(n.elements);

                  var canHaveTrailingComma = !(
                    _lastElem && _lastElem.type === "RestElement"
                  ); // JavaScript allows you to have empty elements in an array which
                  // changes its length based on the number of commas. The algorithm
                  // is that if the last argument is null, we need to force insert
                  // a comma to ensure JavaScript recognizes it.
                  //   [,].length === 1
                  //   [1,].length === 1
                  //   [1,,].length === 2
                  //
                  // Note that getLast returns null if the array is empty, but
                  // we already check for an empty array just above so we are safe

                  var needsForcedTrailingComma =
                    canHaveTrailingComma && _lastElem === null;
                  parts.push(
                    group$10(
                      concat$11([
                        "[",
                        indent$6(
                          concat$11([
                            softline$5,
                            printArrayItems(path, options, "elements", print),
                          ])
                        ),
                        needsForcedTrailingComma ? "," : "",
                        ifBreak$6(
                          canHaveTrailingComma &&
                            !needsForcedTrailingComma &&
                            shouldPrintComma$1(options)
                            ? ","
                            : ""
                        ),
                        comments.printDanglingComments(
                          path,
                          options,
                          /* sameIndent */
                          true
                        ),
                        softline$5,
                        "]",
                      ])
                    )
                  );
                }

                parts.push(
                  printOptionalToken(path),
                  printTypeAnnotation(path, options, print)
                );
                return concat$11(parts);

              case "SequenceExpression": {
                var _parent5 = path.getParentNode(0);

                if (
                  _parent5.type === "ExpressionStatement" ||
                  _parent5.type === "ForStatement"
                ) {
                  // For ExpressionStatements and for-loop heads, which are among
                  // the few places a SequenceExpression appears unparenthesized, we want
                  // to indent expressions after the first.
                  var _parts2 = [];
                  path.each(function (p) {
                    if (p.getName() === 0) {
                      _parts2.push(print(p));
                    } else {
                      _parts2.push(
                        ",",
                        indent$6(concat$11([line$8, print(p)]))
                      );
                    }
                  }, "expressions");
                  return group$10(concat$11(_parts2));
                }

                return group$10(
                  concat$11([
                    join$7(
                      concat$11([",", line$8]),
                      path.map(print, "expressions")
                    ),
                  ])
                );
              }

              case "ThisExpression":
                return "this";

              case "Super":
                return "super";

              case "NullLiteral":
                // Babel 6 Literal split
                return "null";

              case "RegExpLiteral":
                // Babel 6 Literal split
                return printRegex(n);

              case "NumericLiteral":
                // Babel 6 Literal split
                return printNumber$2(n.extra.raw);

              case "BigIntLiteral":
                return concat$11([
                  printNumber$2(
                    n.extra
                      ? n.extra.rawValue // TypeScript
                      : n.value
                  ),
                  "n",
                ]);

              case "BooleanLiteral": // Babel 6 Literal split

              case "StringLiteral": // Babel 6 Literal split

              case "Literal": {
                if (n.regex) {
                  return printRegex(n.regex);
                }

                if (typeof n.value === "number") {
                  return printNumber$2(n.raw);
                }

                if (typeof n.value !== "string") {
                  return "" + n.value;
                } // TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2
                // See corresponding workaround in needs-parens.js

                var grandParent = path.getParentNode(1);
                var isTypeScriptDirective =
                  options.parser === "typescript" &&
                  typeof n.value === "string" &&
                  grandParent &&
                  (grandParent.type === "Program" ||
                    grandParent.type === "BlockStatement");
                return nodeStr(n, options, isTypeScriptDirective);
              }

              case "Directive":
                return path.call(print, "value");
              // Babel 6

              case "DirectiveLiteral":
                return nodeStr(n, options);

              case "UnaryExpression":
                parts.push(n.operator);

                if (/[a-z]$/.test(n.operator)) {
                  parts.push(" ");
                }

                parts.push(path.call(print, "argument"));
                return concat$11(parts);

              case "UpdateExpression":
                parts.push(path.call(print, "argument"), n.operator);

                if (n.prefix) {
                  parts.reverse();
                }

                return concat$11(parts);

              case "ConditionalExpression":
                return printTernaryOperator(path, options, print, {
                  beforeParts: function beforeParts() {
                    return [path.call(print, "test")];
                  },
                  afterParts: function afterParts(breakClosingParen) {
                    return [breakClosingParen ? softline$5 : ""];
                  },
                  shouldCheckJsx: true,
                  conditionalNodeType: "ConditionalExpression",
                  consequentNodePropertyName: "consequent",
                  alternateNodePropertyName: "alternate",
                  testNodePropertyName: "test",
                  breakNested: true,
                });

              case "VariableDeclaration": {
                var printed = path.map(function (childPath) {
                  return print(childPath);
                }, "declarations"); // We generally want to terminate all variable declarations with a
                // semicolon, except when they in the () part of for loops.

                var parentNode = path.getParentNode();
                var isParentForLoop =
                  parentNode.type === "ForStatement" ||
                  parentNode.type === "ForInStatement" ||
                  parentNode.type === "ForOfStatement" ||
                  parentNode.type === "ForAwaitStatement";
                var hasValue = n.declarations.some(function (decl) {
                  return decl.init;
                });
                var firstVariable;

                if (printed.length === 1 && !n.declarations[0].comments) {
                  firstVariable = printed[0];
                } else if (printed.length > 0) {
                  // Indent first var to comply with eslint one-var rule
                  firstVariable = indent$6(printed[0]);
                }

                parts = [
                  isNodeStartingWithDeclare(n, options) ? "declare " : "",
                  n.kind,
                  firstVariable ? concat$11([" ", firstVariable]) : "",
                  indent$6(
                    concat$11(
                      printed.slice(1).map(function (p) {
                        return concat$11([
                          ",",
                          hasValue && !isParentForLoop ? hardline$8 : line$8,
                          p,
                        ]);
                      })
                    )
                  ),
                ];

                if (!(isParentForLoop && parentNode.body !== n)) {
                  parts.push(semi);
                }

                return group$10(concat$11(parts));
              }

              case "TSTypeAliasDeclaration": {
                if (n.declare) {
                  parts.push("declare ");
                }

                var _printed = printAssignmentRight(
                  n.id,
                  n.typeAnnotation,
                  n.typeAnnotation && path.call(print, "typeAnnotation"),
                  options
                );

                parts.push(
                  "type ",
                  path.call(print, "id"),
                  path.call(print, "typeParameters"),
                  " =",
                  _printed,
                  semi
                );
                return group$10(concat$11(parts));
              }

              case "VariableDeclarator":
                return printAssignment(
                  n.id,
                  path.call(print, "id"),
                  " =",
                  n.init,
                  n.init && path.call(print, "init"),
                  options
                );

              case "WithStatement":
                return group$10(
                  concat$11([
                    "with (",
                    path.call(print, "object"),
                    ")",
                    adjustClause(n.body, path.call(print, "body")),
                  ])
                );

              case "IfStatement": {
                var con = adjustClause(
                  n.consequent,
                  path.call(print, "consequent")
                );
                var opening = group$10(
                  concat$11([
                    "if (",
                    group$10(
                      concat$11([
                        indent$6(
                          concat$11([softline$5, path.call(print, "test")])
                        ),
                        softline$5,
                      ])
                    ),
                    ")",
                    con,
                  ])
                );
                parts.push(opening);

                if (n.alternate) {
                  var commentOnOwnLine =
                    (hasTrailingComment(n.consequent) &&
                      n.consequent.comments.some(function (comment) {
                        return (
                          comment.trailing &&
                          !comments$3.isBlockComment(comment)
                        );
                      })) ||
                    needsHardlineAfterDanglingComment(n);
                  var elseOnSameLine =
                    n.consequent.type === "BlockStatement" && !commentOnOwnLine;
                  parts.push(elseOnSameLine ? " " : hardline$8);

                  if (hasDanglingComments(n)) {
                    parts.push(
                      comments.printDanglingComments(path, options, true),
                      commentOnOwnLine ? hardline$8 : " "
                    );
                  }

                  parts.push(
                    "else",
                    group$10(
                      adjustClause(
                        n.alternate,
                        path.call(print, "alternate"),
                        n.alternate.type === "IfStatement"
                      )
                    )
                  );
                }

                return concat$11(parts);
              }

              case "ForStatement": {
                var _body = adjustClause(n.body, path.call(print, "body")); // We want to keep dangling comments above the loop to stay consistent.
                // Any comment positioned between the for statement and the parentheses
                // is going to be printed before the statement.

                var _dangling = comments.printDanglingComments(
                  path,
                  options,
                  /* sameLine */
                  true
                );

                var printedComments = _dangling
                  ? concat$11([_dangling, softline$5])
                  : "";

                if (!n.init && !n.test && !n.update) {
                  return concat$11([
                    printedComments,
                    group$10(concat$11(["for (;;)", _body])),
                  ]);
                }

                return concat$11([
                  printedComments,
                  group$10(
                    concat$11([
                      "for (",
                      group$10(
                        concat$11([
                          indent$6(
                            concat$11([
                              softline$5,
                              path.call(print, "init"),
                              ";",
                              line$8,
                              path.call(print, "test"),
                              ";",
                              line$8,
                              path.call(print, "update"),
                            ])
                          ),
                          softline$5,
                        ])
                      ),
                      ")",
                      _body,
                    ])
                  ),
                ]);
              }

              case "WhileStatement":
                return group$10(
                  concat$11([
                    "while (",
                    group$10(
                      concat$11([
                        indent$6(
                          concat$11([softline$5, path.call(print, "test")])
                        ),
                        softline$5,
                      ])
                    ),
                    ")",
                    adjustClause(n.body, path.call(print, "body")),
                  ])
                );

              case "ForInStatement":
                // Note: esprima can't actually parse "for each (".
                return group$10(
                  concat$11([
                    n.each ? "for each (" : "for (",
                    path.call(print, "left"),
                    " in ",
                    path.call(print, "right"),
                    ")",
                    adjustClause(n.body, path.call(print, "body")),
                  ])
                );

              case "ForOfStatement":
              case "ForAwaitStatement": {
                // Babel 7 removed ForAwaitStatement in favor of ForOfStatement
                // with `"await": true`:
                // https://github.com/estree/estree/pull/138
                var isAwait = n.type === "ForAwaitStatement" || n.await;
                return group$10(
                  concat$11([
                    "for",
                    isAwait ? " await" : "",
                    " (",
                    path.call(print, "left"),
                    " of ",
                    path.call(print, "right"),
                    ")",
                    adjustClause(n.body, path.call(print, "body")),
                  ])
                );
              }

              case "DoWhileStatement": {
                var clause = adjustClause(n.body, path.call(print, "body"));
                var doBody = group$10(concat$11(["do", clause]));
                parts = [doBody];

                if (n.body.type === "BlockStatement") {
                  parts.push(" ");
                } else {
                  parts.push(hardline$8);
                }

                parts.push("while (");
                parts.push(
                  group$10(
                    concat$11([
                      indent$6(
                        concat$11([softline$5, path.call(print, "test")])
                      ),
                      softline$5,
                    ])
                  ),
                  ")",
                  semi
                );
                return concat$11(parts);
              }

              case "DoExpression":
                return concat$11(["do ", path.call(print, "body")]);

              case "BreakStatement":
                parts.push("break");

                if (n.label) {
                  parts.push(" ", path.call(print, "label"));
                }

                parts.push(semi);
                return concat$11(parts);

              case "ContinueStatement":
                parts.push("continue");

                if (n.label) {
                  parts.push(" ", path.call(print, "label"));
                }

                parts.push(semi);
                return concat$11(parts);

              case "LabeledStatement":
                if (n.body.type === "EmptyStatement") {
                  return concat$11([path.call(print, "label"), ":;"]);
                }

                return concat$11([
                  path.call(print, "label"),
                  ": ",
                  path.call(print, "body"),
                ]);

              case "TryStatement":
                return concat$11([
                  "try ",
                  path.call(print, "block"),
                  n.handler
                    ? concat$11([" ", path.call(print, "handler")])
                    : "",
                  n.finalizer
                    ? concat$11([" finally ", path.call(print, "finalizer")])
                    : "",
                ]);

              case "CatchClause":
                if (n.param) {
                  var hasComments =
                    n.param.comments &&
                    n.param.comments.some(function (comment) {
                      return (
                        !comments$3.isBlockComment(comment) ||
                        (comment.leading &&
                          hasNewline$3(
                            options.originalText,
                            options.locEnd(comment)
                          )) ||
                        (comment.trailing &&
                          hasNewline$3(
                            options.originalText,
                            options.locStart(comment),
                            {
                              backwards: true,
                            }
                          ))
                      );
                    });
                  var param = path.call(print, "param");
                  return concat$11([
                    "catch ",
                    hasComments
                      ? concat$11([
                          "(",
                          indent$6(concat$11([softline$5, param])),
                          softline$5,
                          ") ",
                        ])
                      : concat$11(["(", param, ") "]),
                    path.call(print, "body"),
                  ]);
                }

                return concat$11(["catch ", path.call(print, "body")]);

              case "ThrowStatement":
                return concat$11([
                  "throw ",
                  path.call(print, "argument"),
                  semi,
                ]);
              // Note: ignoring n.lexical because it has no printing consequences.

              case "SwitchStatement":
                return concat$11([
                  group$10(
                    concat$11([
                      "switch (",
                      indent$6(
                        concat$11([
                          softline$5,
                          path.call(print, "discriminant"),
                        ])
                      ),
                      softline$5,
                      ")",
                    ])
                  ),
                  " {",
                  n.cases.length > 0
                    ? indent$6(
                        concat$11([
                          hardline$8,
                          join$7(
                            hardline$8,
                            path.map(function (casePath) {
                              var caseNode = casePath.getValue();
                              return concat$11([
                                casePath.call(print),
                                n.cases.indexOf(caseNode) !==
                                  n.cases.length - 1 &&
                                isNextLineEmpty$4(
                                  options.originalText,
                                  caseNode,
                                  options
                                )
                                  ? hardline$8
                                  : "",
                              ]);
                            }, "cases")
                          ),
                        ])
                      )
                    : "",
                  hardline$8,
                  "}",
                ]);

              case "SwitchCase": {
                if (n.test) {
                  parts.push("case ", path.call(print, "test"), ":");
                } else {
                  parts.push("default:");
                }

                var consequent = n.consequent.filter(function (node) {
                  return node.type !== "EmptyStatement";
                });

                if (consequent.length > 0) {
                  var cons = path.call(function (consequentPath) {
                    return printStatementSequence(
                      consequentPath,
                      options,
                      print
                    );
                  }, "consequent");
                  parts.push(
                    consequent.length === 1 &&
                      consequent[0].type === "BlockStatement"
                      ? concat$11([" ", cons])
                      : indent$6(concat$11([hardline$8, cons]))
                  );
                }

                return concat$11(parts);
              }
              // JSX extensions below.

              case "DebuggerStatement":
                return concat$11(["debugger", semi]);

              case "JSXAttribute":
                parts.push(path.call(print, "name"));

                if (n.value) {
                  var res;

                  if (isStringLiteral(n.value)) {
                    var raw = rawText(n.value); // Unescape all quotes so we get an accurate preferred quote

                    var final = raw
                      .replace(/&apos;/g, "'")
                      .replace(/&quot;/g, '"');
                    var quote = getPreferredQuote$1(
                      final,
                      options.jsxSingleQuote ? "'" : '"'
                    );

                    var _escape = quote === "'" ? "&apos;" : "&quot;";

                    final = final
                      .slice(1, -1)
                      .replace(new RegExp(quote, "g"), _escape);
                    res = concat$11([quote, final, quote]);
                  } else {
                    res = path.call(print, "value");
                  }

                  parts.push("=", res);
                }

                return concat$11(parts);

              case "JSXIdentifier":
                return "" + n.name;

              case "JSXNamespacedName":
                return join$7(":", [
                  path.call(print, "namespace"),
                  path.call(print, "name"),
                ]);

              case "JSXMemberExpression":
                return join$7(".", [
                  path.call(print, "object"),
                  path.call(print, "property"),
                ]);

              case "TSQualifiedName":
                return join$7(".", [
                  path.call(print, "left"),
                  path.call(print, "right"),
                ]);

              case "JSXSpreadAttribute":
              case "JSXSpreadChild": {
                return concat$11([
                  "{",
                  path.call(
                    function (p) {
                      var printed = concat$11(["...", print(p)]);
                      var n = p.getValue();

                      if (!n.comments || !n.comments.length) {
                        return printed;
                      }

                      return concat$11([
                        indent$6(
                          concat$11([
                            softline$5,
                            comments.printComments(
                              p,
                              function () {
                                return printed;
                              },
                              options
                            ),
                          ])
                        ),
                        softline$5,
                      ]);
                    },
                    n.type === "JSXSpreadAttribute" ? "argument" : "expression"
                  ),
                  "}",
                ]);
              }

              case "JSXExpressionContainer": {
                var _parent6 = path.getParentNode(0);

                var preventInline =
                  _parent6.type === "JSXAttribute" &&
                  n.expression.comments &&
                  n.expression.comments.length > 0;

                var _shouldInline =
                  !preventInline &&
                  (n.expression.type === "ArrayExpression" ||
                    n.expression.type === "ObjectExpression" ||
                    n.expression.type === "ArrowFunctionExpression" ||
                    n.expression.type === "CallExpression" ||
                    n.expression.type === "OptionalCallExpression" ||
                    n.expression.type === "FunctionExpression" ||
                    n.expression.type === "JSXEmptyExpression" ||
                    n.expression.type === "TemplateLiteral" ||
                    n.expression.type === "TaggedTemplateExpression" ||
                    n.expression.type === "DoExpression" ||
                    (isJSXNode(_parent6) &&
                      (n.expression.type === "ConditionalExpression" ||
                        isBinaryish(n.expression))));

                if (_shouldInline) {
                  return group$10(
                    concat$11([
                      "{",
                      path.call(print, "expression"),
                      lineSuffixBoundary$1,
                      "}",
                    ])
                  );
                }

                return group$10(
                  concat$11([
                    "{",
                    indent$6(
                      concat$11([softline$5, path.call(print, "expression")])
                    ),
                    softline$5,
                    lineSuffixBoundary$1,
                    "}",
                  ])
                );
              }

              case "JSXFragment":
              case "JSXElement": {
                var elem = comments.printComments(
                  path,
                  function () {
                    return printJSXElement(path, options, print);
                  },
                  options
                );
                return maybeWrapJSXElementInParens(path, elem);
              }

              case "JSXOpeningElement": {
                var _n = path.getValue();

                var nameHasComments =
                  _n.name && _n.name.comments && _n.name.comments.length > 0; // Don't break self-closing elements with no attributes and no comments

                if (
                  _n.selfClosing &&
                  !_n.attributes.length &&
                  !nameHasComments
                ) {
                  return concat$11([
                    "<",
                    path.call(print, "name"),
                    path.call(print, "typeParameters"),
                    " />",
                  ]);
                } // don't break up opening elements with a single long text attribute

                if (
                  _n.attributes &&
                  _n.attributes.length === 1 &&
                  _n.attributes[0].value &&
                  isStringLiteral(_n.attributes[0].value) &&
                  !_n.attributes[0].value.value.includes("\n") && // We should break for the following cases:
                  // <div
                  //   // comment
                  //   attr="value"
                  // >
                  // <div
                  //   attr="value"
                  //   // comment
                  // >
                  !nameHasComments &&
                  (!_n.attributes[0].comments ||
                    !_n.attributes[0].comments.length)
                ) {
                  return group$10(
                    concat$11([
                      "<",
                      path.call(print, "name"),
                      path.call(print, "typeParameters"),
                      " ",
                      concat$11(path.map(print, "attributes")),
                      _n.selfClosing ? " />" : ">",
                    ])
                  );
                }

                var lastAttrHasTrailingComments =
                  _n.attributes.length &&
                  hasTrailingComment(getLast$3(_n.attributes));
                var bracketSameLine = // Simple tags (no attributes and no comment in tag name) should be
                  // kept unbroken regardless of `jsxBracketSameLine`
                  (!_n.attributes.length && !nameHasComments) ||
                  (options.jsxBracketSameLine && // We should print the bracket in a new line for the following cases:
                    // <div
                    //   // comment
                    // >
                    // <div
                    //   attr // comment
                    // >
                    (!nameHasComments || _n.attributes.length) &&
                    !lastAttrHasTrailingComments); // We should print the opening element expanded if any prop value is a
                // string literal with newlines

                var _shouldBreak =
                  _n.attributes &&
                  _n.attributes.some(function (attr) {
                    return (
                      attr.value &&
                      isStringLiteral(attr.value) &&
                      attr.value.value.includes("\n")
                    );
                  });

                return group$10(
                  concat$11([
                    "<",
                    path.call(print, "name"),
                    path.call(print, "typeParameters"),
                    concat$11([
                      indent$6(
                        concat$11(
                          path.map(function (attr) {
                            return concat$11([line$8, print(attr)]);
                          }, "attributes")
                        )
                      ),
                      _n.selfClosing
                        ? line$8
                        : bracketSameLine
                        ? ">"
                        : softline$5,
                    ]),
                    _n.selfClosing ? "/>" : bracketSameLine ? "" : ">",
                  ]),
                  {
                    shouldBreak: _shouldBreak,
                  }
                );
              }

              case "JSXClosingElement":
                return concat$11(["</", path.call(print, "name"), ">"]);

              case "JSXOpeningFragment":
              case "JSXClosingFragment": {
                var hasComment = n.comments && n.comments.length;
                var hasOwnLineComment =
                  hasComment && !n.comments.every(comments$3.isBlockComment);
                var isOpeningFragment = n.type === "JSXOpeningFragment";
                return concat$11([
                  isOpeningFragment ? "<" : "</",
                  indent$6(
                    concat$11([
                      hasOwnLineComment
                        ? hardline$8
                        : hasComment && !isOpeningFragment
                        ? " "
                        : "",
                      comments.printDanglingComments(path, options, true),
                    ])
                  ),
                  hasOwnLineComment ? hardline$8 : "",
                  ">",
                ]);
              }

              case "JSXText":
                /* istanbul ignore next */
                throw new Error("JSXTest should be handled by JSXElement");

              case "JSXEmptyExpression": {
                var requiresHardline =
                  n.comments && !n.comments.every(comments$3.isBlockComment);
                return concat$11([
                  comments.printDanglingComments(
                    path,
                    options,
                    /* sameIndent */
                    !requiresHardline
                  ),
                  requiresHardline ? hardline$8 : "",
                ]);
              }

              case "ClassBody":
                if (!n.comments && n.body.length === 0) {
                  return "{}";
                }

                return concat$11([
                  "{",
                  n.body.length > 0
                    ? indent$6(
                        concat$11([
                          hardline$8,
                          path.call(function (bodyPath) {
                            return printStatementSequence(
                              bodyPath,
                              options,
                              print
                            );
                          }, "body"),
                        ])
                      )
                    : comments.printDanglingComments(path, options),
                  hardline$8,
                  "}",
                ]);

              case "ClassProperty":
              case "TSAbstractClassProperty":
              case "ClassPrivateProperty": {
                if (n.decorators && n.decorators.length !== 0) {
                  parts.push(printDecorators(path, options, print));
                }

                if (n.accessibility) {
                  parts.push(n.accessibility + " ");
                }

                if (n.static) {
                  parts.push("static ");
                }

                if (n.type === "TSAbstractClassProperty") {
                  parts.push("abstract ");
                }

                if (n.readonly) {
                  parts.push("readonly ");
                }

                var variance = getFlowVariance(n);

                if (variance) {
                  parts.push(variance);
                }

                if (n.computed) {
                  parts.push("[", path.call(print, "key"), "]");
                } else {
                  parts.push(printPropertyKey(path, options, print));
                }

                parts.push(printOptionalToken(path));
                parts.push(printTypeAnnotation(path, options, print));

                if (n.value) {
                  parts.push(
                    " =",
                    printAssignmentRight(
                      n.key,
                      n.value,
                      path.call(print, "value"),
                      options
                    )
                  );
                }

                parts.push(semi);
                return group$10(concat$11(parts));
              }

              case "ClassDeclaration":
              case "ClassExpression":
                if (isNodeStartingWithDeclare(n, options)) {
                  parts.push("declare ");
                }

                parts.push(concat$11(printClass(path, options, print)));
                return concat$11(parts);

              case "TSInterfaceHeritage":
                parts.push(path.call(print, "expression"));

                if (n.typeParameters) {
                  parts.push(path.call(print, "typeParameters"));
                }

                return concat$11(parts);

              case "TemplateElement":
                return join$7(literalline$3, n.value.raw.split(/\r?\n/g));

              case "TemplateLiteral": {
                var expressions = path.map(print, "expressions");

                var _parentNode = path.getParentNode();

                if (isJestEachTemplateLiteral(n, _parentNode)) {
                  var _printed2 = printJestEachTemplateLiteral(
                    n,
                    expressions,
                    options
                  );

                  if (_printed2) {
                    return _printed2;
                  }
                }

                var isSimple = isSimpleTemplateLiteral(n);

                if (isSimple) {
                  expressions = expressions.map(function (doc$$2) {
                    return printDocToString$1(
                      doc$$2,
                      Object.assign({}, options, {
                        printWidth: Infinity,
                      })
                    ).formatted;
                  });
                }

                parts.push("`");
                path.each(function (childPath) {
                  var i = childPath.getName();
                  parts.push(print(childPath));

                  if (i < expressions.length) {
                    // For a template literal of the following form:
                    //   `someQuery {
                    //     ${call({
                    //       a,
                    //       b,
                    //     })}
                    //   }`
                    // the expression is on its own line (there is a \n in the previous
                    // quasi literal), therefore we want to indent the JavaScript
                    // expression inside at the beginning of ${ instead of the beginning
                    // of the `.
                    var tabWidth = options.tabWidth;
                    var quasi = childPath.getValue();
                    var indentSize = getIndentSize$1(quasi.value.raw, tabWidth);
                    var _printed3 = expressions[i];

                    if (!isSimple) {
                      // Breaks at the template element boundaries (${ and }) are preferred to breaking
                      // in the middle of a MemberExpression
                      if (
                        (n.expressions[i].comments &&
                          n.expressions[i].comments.length) ||
                        n.expressions[i].type === "MemberExpression" ||
                        n.expressions[i].type === "OptionalMemberExpression" ||
                        n.expressions[i].type === "ConditionalExpression"
                      ) {
                        _printed3 = concat$11([
                          indent$6(concat$11([softline$5, _printed3])),
                          softline$5,
                        ]);
                      }
                    }

                    var aligned =
                      indentSize === 0 && quasi.value.raw.endsWith("\n")
                        ? align$1(-Infinity, _printed3)
                        : addAlignmentToDoc$2(_printed3, indentSize, tabWidth);
                    parts.push(
                      group$10(
                        concat$11(["${", aligned, lineSuffixBoundary$1, "}"])
                      )
                    );
                  }
                }, "quasis");
                parts.push("`");
                return concat$11(parts);
              }
              // These types are unprintable because they serve as abstract
              // supertypes for other (printable) types.

              case "TaggedTemplateExpression":
                return concat$11([
                  path.call(print, "tag"),
                  path.call(print, "typeParameters"),
                  path.call(print, "quasi"),
                ]);

              case "Node":
              case "Printable":
              case "SourceLocation":
              case "Position":
              case "Statement":
              case "Function":
              case "Pattern":
              case "Expression":
              case "Declaration":
              case "Specifier":
              case "NamedSpecifier":
              case "Comment":
              case "MemberTypeAnnotation": // Flow

              case "Type":
                /* istanbul ignore next */
                throw new Error("unprintable type: " + JSON.stringify(n.type));
              // Type Annotations for Facebook Flow, typically stripped out or
              // transformed away before printing.

              case "TypeAnnotation":
              case "TSTypeAnnotation":
                if (n.typeAnnotation) {
                  return path.call(print, "typeAnnotation");
                }
                /* istanbul ignore next */

                return "";

              case "TSTupleType":
              case "TupleTypeAnnotation": {
                var typesField =
                  n.type === "TSTupleType" ? "elementTypes" : "types";
                return group$10(
                  concat$11([
                    "[",
                    indent$6(
                      concat$11([
                        softline$5,
                        printArrayItems(path, options, typesField, print),
                      ])
                    ),
                    ifBreak$6(shouldPrintComma$1(options, "all") ? "," : ""),
                    comments.printDanglingComments(
                      path,
                      options,
                      /* sameIndent */
                      true
                    ),
                    softline$5,
                    "]",
                  ])
                );
              }

              case "ExistsTypeAnnotation":
                return "*";

              case "EmptyTypeAnnotation":
                return "empty";

              case "AnyTypeAnnotation":
                return "any";

              case "MixedTypeAnnotation":
                return "mixed";

              case "ArrayTypeAnnotation":
                return concat$11([path.call(print, "elementType"), "[]"]);

              case "BooleanTypeAnnotation":
                return "boolean";

              case "BooleanLiteralTypeAnnotation":
                return "" + n.value;

              case "DeclareClass":
                return printFlowDeclaration(
                  path,
                  printClass(path, options, print)
                );

              case "TSDeclareFunction":
                // For TypeScript the TSDeclareFunction node shares the AST
                // structure with FunctionDeclaration
                return concat$11([
                  n.declare ? "declare " : "",
                  printFunctionDeclaration(path, print, options),
                  semi,
                ]);

              case "DeclareFunction":
                return printFlowDeclaration(path, [
                  "function ",
                  path.call(print, "id"),
                  n.predicate ? " " : "",
                  path.call(print, "predicate"),
                  semi,
                ]);

              case "DeclareModule":
                return printFlowDeclaration(path, [
                  "module ",
                  path.call(print, "id"),
                  " ",
                  path.call(print, "body"),
                ]);

              case "DeclareModuleExports":
                return printFlowDeclaration(path, [
                  "module.exports",
                  ": ",
                  path.call(print, "typeAnnotation"),
                  semi,
                ]);

              case "DeclareVariable":
                return printFlowDeclaration(path, [
                  "var ",
                  path.call(print, "id"),
                  semi,
                ]);

              case "DeclareExportAllDeclaration":
                return concat$11([
                  "declare export * from ",
                  path.call(print, "source"),
                ]);

              case "DeclareExportDeclaration":
                return concat$11([
                  "declare ",
                  printExportDeclaration(path, options, print),
                ]);

              case "DeclareOpaqueType":
              case "OpaqueType": {
                parts.push(
                  "opaque type ",
                  path.call(print, "id"),
                  path.call(print, "typeParameters")
                );

                if (n.supertype) {
                  parts.push(": ", path.call(print, "supertype"));
                }

                if (n.impltype) {
                  parts.push(" = ", path.call(print, "impltype"));
                }

                parts.push(semi);

                if (n.type === "DeclareOpaqueType") {
                  return printFlowDeclaration(path, parts);
                }

                return concat$11(parts);
              }

              case "FunctionTypeAnnotation":
              case "TSFunctionType": {
                // FunctionTypeAnnotation is ambiguous:
                // declare function foo(a: B): void; OR
                // var A: (a: B) => void;
                var _parent7 = path.getParentNode(0);

                var _parentParent2 = path.getParentNode(1);

                var _parentParentParent = path.getParentNode(2);

                var isArrowFunctionTypeAnnotation =
                  n.type === "TSFunctionType" ||
                  !(
                    ((_parent7.type === "ObjectTypeProperty" ||
                      _parent7.type === "ObjectTypeInternalSlot") &&
                      !getFlowVariance(_parent7) &&
                      !_parent7.optional &&
                      options.locStart(_parent7) === options.locStart(n)) ||
                    _parent7.type === "ObjectTypeCallProperty" ||
                    (_parentParentParent &&
                      _parentParentParent.type === "DeclareFunction")
                  );
                var needsColon =
                  isArrowFunctionTypeAnnotation &&
                  (_parent7.type === "TypeAnnotation" ||
                    _parent7.type === "TSTypeAnnotation"); // Sadly we can't put it inside of FastPath::needsColon because we are
                // printing ":" as part of the expression and it would put parenthesis
                // around :(

                var needsParens =
                  needsColon &&
                  isArrowFunctionTypeAnnotation &&
                  (_parent7.type === "TypeAnnotation" ||
                    _parent7.type === "TSTypeAnnotation") &&
                  _parentParent2.type === "ArrowFunctionExpression";

                if (isObjectTypePropertyAFunction(_parent7, options)) {
                  isArrowFunctionTypeAnnotation = true;
                  needsColon = true;
                }

                if (needsParens) {
                  parts.push("(");
                }

                parts.push(
                  printFunctionParams(
                    path,
                    print,
                    options,
                    /* expandArg */
                    false,
                    /* printTypeParams */
                    true
                  )
                ); // The returnType is not wrapped in a TypeAnnotation, so the colon
                // needs to be added separately.

                if (n.returnType || n.predicate || n.typeAnnotation) {
                  parts.push(
                    isArrowFunctionTypeAnnotation ? " => " : ": ",
                    path.call(print, "returnType"),
                    path.call(print, "predicate"),
                    path.call(print, "typeAnnotation")
                  );
                }

                if (needsParens) {
                  parts.push(")");
                }

                return group$10(concat$11(parts));
              }

              case "TSRestType":
                return concat$11(["...", path.call(print, "typeAnnotation")]);

              case "TSOptionalType":
                return concat$11([path.call(print, "typeAnnotation"), "?"]);

              case "FunctionTypeParam":
                return concat$11([
                  path.call(print, "name"),
                  printOptionalToken(path),
                  n.name ? ": " : "",
                  path.call(print, "typeAnnotation"),
                ]);

              case "GenericTypeAnnotation":
                return concat$11([
                  path.call(print, "id"),
                  path.call(print, "typeParameters"),
                ]);

              case "DeclareInterface":
              case "InterfaceDeclaration":
              case "InterfaceTypeAnnotation": {
                if (
                  n.type === "DeclareInterface" ||
                  isNodeStartingWithDeclare(n, options)
                ) {
                  parts.push("declare ");
                }

                parts.push("interface");

                if (
                  n.type === "DeclareInterface" ||
                  n.type === "InterfaceDeclaration"
                ) {
                  parts.push(
                    " ",
                    path.call(print, "id"),
                    path.call(print, "typeParameters")
                  );
                }

                if (n["extends"].length > 0) {
                  parts.push(
                    group$10(
                      indent$6(
                        concat$11([
                          line$8,
                          "extends ",
                          (n.extends.length === 1 ? identity$1 : indent$6)(
                            join$7(
                              concat$11([",", line$8]),
                              path.map(print, "extends")
                            )
                          ),
                        ])
                      )
                    )
                  );
                }

                parts.push(" ", path.call(print, "body"));
                return group$10(concat$11(parts));
              }

              case "ClassImplements":
              case "InterfaceExtends":
                return concat$11([
                  path.call(print, "id"),
                  path.call(print, "typeParameters"),
                ]);

              case "TSClassImplements":
                return concat$11([
                  path.call(print, "expression"),
                  path.call(print, "typeParameters"),
                ]);

              case "TSIntersectionType":
              case "IntersectionTypeAnnotation": {
                var types = path.map(print, "types");
                var result = [];
                var wasIndented = false;

                for (var _i = 0; _i < types.length; ++_i) {
                  if (_i === 0) {
                    result.push(types[_i]);
                  } else if (
                    isObjectType(n.types[_i - 1]) &&
                    isObjectType(n.types[_i])
                  ) {
                    // If both are objects, don't indent
                    result.push(
                      concat$11([
                        " & ",
                        wasIndented ? indent$6(types[_i]) : types[_i],
                      ])
                    );
                  } else if (
                    !isObjectType(n.types[_i - 1]) &&
                    !isObjectType(n.types[_i])
                  ) {
                    // If no object is involved, go to the next line if it breaks
                    result.push(indent$6(concat$11([" &", line$8, types[_i]])));
                  } else {
                    // If you go from object to non-object or vis-versa, then inline it
                    if (_i > 1) {
                      wasIndented = true;
                    }

                    result.push(
                      " & ",
                      _i > 1 ? indent$6(types[_i]) : types[_i]
                    );
                  }
                }

                return group$10(concat$11(result));
              }

              case "TSUnionType":
              case "UnionTypeAnnotation": {
                // single-line variation
                // A | B | C
                // multi-line variation
                // | A
                // | B
                // | C
                var _parent8 = path.getParentNode(); // If there's a leading comment, the parent is doing the indentation

                var shouldIndent =
                  _parent8.type !== "TypeParameterInstantiation" &&
                  _parent8.type !== "TSTypeParameterInstantiation" &&
                  _parent8.type !== "GenericTypeAnnotation" &&
                  _parent8.type !== "TSTypeReference" &&
                  _parent8.type !== "TSTypeAssertion" &&
                  !(_parent8.type === "FunctionTypeParam" && !_parent8.name) &&
                  !(
                    (_parent8.type === "TypeAlias" ||
                      _parent8.type === "VariableDeclarator" ||
                      _parent8.type === "TSTypeAliasDeclaration") &&
                    hasLeadingOwnLineComment(options.originalText, n, options)
                  ); // {
                //   a: string
                // } | null | void
                // should be inlined and not be printed in the multi-line variant

                var shouldHug = shouldHugType(n); // We want to align the children but without its comment, so it looks like
                // | child1
                // // comment
                // | child2

                var _printed4 = path.map(function (typePath) {
                  var printedType = typePath.call(print);

                  if (!shouldHug) {
                    printedType = align$1(2, printedType);
                  }

                  return comments.printComments(
                    typePath,
                    function () {
                      return printedType;
                    },
                    options
                  );
                }, "types");

                if (shouldHug) {
                  return join$7(" | ", _printed4);
                }

                var shouldAddStartLine =
                  shouldIndent &&
                  !hasLeadingOwnLineComment(options.originalText, n, options);
                var code = concat$11([
                  ifBreak$6(
                    concat$11([shouldAddStartLine ? line$8 : "", "| "])
                  ),
                  join$7(concat$11([line$8, "| "]), _printed4),
                ]);
                var hasParens;

                if (n.type === "TSUnionType") {
                  var greatGrandParent = path.getParentNode(2);
                  var greatGreatGrandParent = path.getParentNode(3);
                  hasParens =
                    greatGrandParent &&
                    greatGrandParent.type === "TSParenthesizedType" &&
                    greatGreatGrandParent &&
                    (greatGreatGrandParent.type === "TSUnionType" ||
                      greatGreatGrandParent.type === "TSIntersectionType");
                } else {
                  hasParens = needsParens_1(path, options);
                }

                if (hasParens) {
                  return group$10(concat$11([indent$6(code), softline$5]));
                }

                return group$10(shouldIndent ? indent$6(code) : code);
              }

              case "NullableTypeAnnotation":
                return concat$11(["?", path.call(print, "typeAnnotation")]);

              case "TSNullKeyword":
              case "NullLiteralTypeAnnotation":
                return "null";

              case "ThisTypeAnnotation":
                return "this";

              case "NumberTypeAnnotation":
                return "number";

              case "ObjectTypeCallProperty":
                if (n.static) {
                  parts.push("static ");
                }

                parts.push(path.call(print, "value"));
                return concat$11(parts);

              case "ObjectTypeIndexer": {
                var _variance = getFlowVariance(n);

                return concat$11([
                  _variance || "",
                  "[",
                  path.call(print, "id"),
                  n.id ? ": " : "",
                  path.call(print, "key"),
                  "]: ",
                  path.call(print, "value"),
                ]);
              }

              case "ObjectTypeProperty": {
                var _variance2 = getFlowVariance(n);

                var modifier = "";

                if (n.proto) {
                  modifier = "proto ";
                } else if (n.static) {
                  modifier = "static ";
                }

                return concat$11([
                  modifier,
                  isGetterOrSetter(n) ? n.kind + " " : "",
                  _variance2 || "",
                  printPropertyKey(path, options, print),
                  printOptionalToken(path),
                  isFunctionNotation(n, options) ? "" : ": ",
                  path.call(print, "value"),
                ]);
              }

              case "QualifiedTypeIdentifier":
                return concat$11([
                  path.call(print, "qualification"),
                  ".",
                  path.call(print, "id"),
                ]);

              case "StringLiteralTypeAnnotation":
                return nodeStr(n, options);

              case "NumberLiteralTypeAnnotation":
                assert$3.strictEqual(_typeof(n.value), "number");

                if (n.extra != null) {
                  return printNumber$2(n.extra.raw);
                }

                return printNumber$2(n.raw);

              case "StringTypeAnnotation":
                return "string";

              case "DeclareTypeAlias":
              case "TypeAlias": {
                if (
                  n.type === "DeclareTypeAlias" ||
                  isNodeStartingWithDeclare(n, options)
                ) {
                  parts.push("declare ");
                }

                var _printed5 = printAssignmentRight(
                  n.id,
                  n.right,
                  path.call(print, "right"),
                  options
                );

                parts.push(
                  "type ",
                  path.call(print, "id"),
                  path.call(print, "typeParameters"),
                  " =",
                  _printed5,
                  semi
                );
                return group$10(concat$11(parts));
              }

              case "TypeCastExpression": {
                var value = path.getValue(); // Flow supports a comment syntax for specifying type annotations: https://flow.org/en/docs/types/comments/.
                // Unfortunately, its parser doesn't differentiate between comment annotations and regular
                // annotations when producing an AST. So to preserve parentheses around type casts that use
                // the comment syntax, we need to hackily read the source itself to see if the code contains
                // a type annotation comment.
                //
                // Note that we're able to use the normal whitespace regex here because the Flow parser has
                // already deemed this AST node to be a type cast. Only the Babel parser needs the
                // non-line-break whitespace regex, which is why hasFlowShorthandAnnotationComment() is
                // implemented differently.

                var commentSyntax =
                  value &&
                  value.typeAnnotation &&
                  value.typeAnnotation.range &&
                  options.originalText
                    .substring(value.typeAnnotation.range[0])
                    .match(/^\/\*\s*:/);
                return concat$11([
                  "(",
                  path.call(print, "expression"),
                  commentSyntax ? " /*" : "",
                  ": ",
                  path.call(print, "typeAnnotation"),
                  commentSyntax ? " */" : "",
                  ")",
                ]);
              }

              case "TypeParameterDeclaration":
              case "TypeParameterInstantiation": {
                var _value = path.getValue();

                var commentStart = _value.range
                  ? options.originalText
                      .substring(0, _value.range[0])
                      .lastIndexOf("/*")
                  : -1; // As noted in the TypeCastExpression comments above, we're able to use a normal whitespace regex here
                // because we know for sure that this is a type definition.

                var _commentSyntax =
                  commentStart >= 0 &&
                  options.originalText
                    .substring(commentStart)
                    .match(/^\/\*\s*::/);

                if (_commentSyntax) {
                  return concat$11([
                    "/*:: ",
                    printTypeParameters(path, options, print, "params"),
                    " */",
                  ]);
                }

                return printTypeParameters(path, options, print, "params");
              }

              case "TSTypeParameterDeclaration":
              case "TSTypeParameterInstantiation":
                return printTypeParameters(path, options, print, "params");

              case "TSTypeParameter":
              case "TypeParameter": {
                var _parent9 = path.getParentNode();

                if (_parent9.type === "TSMappedType") {
                  parts.push("[", path.call(print, "name"));

                  if (n.constraint) {
                    parts.push(" in ", path.call(print, "constraint"));
                  }

                  parts.push("]");
                  return concat$11(parts);
                }

                var _variance3 = getFlowVariance(n);

                if (_variance3) {
                  parts.push(_variance3);
                }

                parts.push(path.call(print, "name"));

                if (n.bound) {
                  parts.push(": ");
                  parts.push(path.call(print, "bound"));
                }

                if (n.constraint) {
                  parts.push(" extends ", path.call(print, "constraint"));
                }

                if (n["default"]) {
                  parts.push(" = ", path.call(print, "default"));
                } // Keep comma if the file extension is .tsx and
                // has one type parameter that isn't extend with any types.
                // Because, otherwise formatted result will be invalid as tsx.

                var _grandParent = path.getNode(2);

                if (
                  _parent9.params &&
                  _parent9.params.length === 1 &&
                  options.filepath &&
                  /\.tsx$/i.test(options.filepath) &&
                  !n.constraint &&
                  _grandParent.type === "ArrowFunctionExpression"
                ) {
                  parts.push(",");
                }

                return concat$11(parts);
              }

              case "TypeofTypeAnnotation":
                return concat$11(["typeof ", path.call(print, "argument")]);

              case "VoidTypeAnnotation":
                return "void";

              case "InferredPredicate":
                return "%checks";
              // Unhandled types below. If encountered, nodes of these types should
              // be either left alone or desugared into AST types that are fully
              // supported by the pretty-printer.

              case "DeclaredPredicate":
                return concat$11(["%checks(", path.call(print, "value"), ")"]);

              case "TSAbstractKeyword":
                return "abstract";

              case "TSAnyKeyword":
                return "any";

              case "TSAsyncKeyword":
                return "async";

              case "TSBooleanKeyword":
                return "boolean";

              case "TSBigIntKeyword":
                return "bigint";

              case "TSConstKeyword":
                return "const";

              case "TSDeclareKeyword":
                return "declare";

              case "TSExportKeyword":
                return "export";

              case "TSNeverKeyword":
                return "never";

              case "TSNumberKeyword":
                return "number";

              case "TSObjectKeyword":
                return "object";

              case "TSProtectedKeyword":
                return "protected";

              case "TSPrivateKeyword":
                return "private";

              case "TSPublicKeyword":
                return "public";

              case "TSReadonlyKeyword":
                return "readonly";

              case "TSSymbolKeyword":
                return "symbol";

              case "TSStaticKeyword":
                return "static";

              case "TSStringKeyword":
                return "string";

              case "TSUndefinedKeyword":
                return "undefined";

              case "TSUnknownKeyword":
                return "unknown";

              case "TSVoidKeyword":
                return "void";

              case "TSAsExpression":
                return concat$11([
                  path.call(print, "expression"),
                  " as ",
                  path.call(print, "typeAnnotation"),
                ]);

              case "TSArrayType":
                return concat$11([path.call(print, "elementType"), "[]"]);

              case "TSPropertySignature": {
                if (n.export) {
                  parts.push("export ");
                }

                if (n.accessibility) {
                  parts.push(n.accessibility + " ");
                }

                if (n.static) {
                  parts.push("static ");
                }

                if (n.readonly) {
                  parts.push("readonly ");
                }

                if (n.computed) {
                  parts.push("[");
                }

                parts.push(printPropertyKey(path, options, print));

                if (n.computed) {
                  parts.push("]");
                }

                parts.push(printOptionalToken(path));

                if (n.typeAnnotation) {
                  parts.push(": ");
                  parts.push(path.call(print, "typeAnnotation"));
                } // This isn't valid semantically, but it's in the AST so we can print it.

                if (n.initializer) {
                  parts.push(" = ", path.call(print, "initializer"));
                }

                return concat$11(parts);
              }

              case "TSParameterProperty":
                if (n.accessibility) {
                  parts.push(n.accessibility + " ");
                }

                if (n.export) {
                  parts.push("export ");
                }

                if (n.static) {
                  parts.push("static ");
                }

                if (n.readonly) {
                  parts.push("readonly ");
                }

                parts.push(path.call(print, "parameter"));
                return concat$11(parts);

              case "TSTypeReference":
                return concat$11([
                  path.call(print, "typeName"),
                  printTypeParameters(path, options, print, "typeParameters"),
                ]);

              case "TSTypeQuery":
                return concat$11(["typeof ", path.call(print, "exprName")]);

              case "TSParenthesizedType": {
                return path.call(print, "typeAnnotation");
              }

              case "TSIndexSignature": {
                var _parent10 = path.getParentNode();

                return concat$11([
                  n.export ? "export " : "",
                  n.accessibility ? concat$11([n.accessibility, " "]) : "",
                  n.static ? "static " : "",
                  n.readonly ? "readonly " : "",
                  "[",
                  n.parameters ? concat$11(path.map(print, "parameters")) : "",
                  "]: ",
                  path.call(print, "typeAnnotation"),
                  _parent10.type === "ClassBody" ? semi : "",
                ]);
              }

              case "TSTypePredicate":
                return concat$11([
                  path.call(print, "parameterName"),
                  " is ",
                  path.call(print, "typeAnnotation"),
                ]);

              case "TSNonNullExpression":
                return concat$11([path.call(print, "expression"), "!"]);

              case "TSThisType":
                return "this";

              case "TSImportType":
                return concat$11([
                  !n.isTypeOf ? "" : "typeof ",
                  "import(",
                  path.call(print, "parameter"),
                  ")",
                  !n.qualifier
                    ? ""
                    : concat$11([".", path.call(print, "qualifier")]),
                  printTypeParameters(path, options, print, "typeParameters"),
                ]);

              case "TSLiteralType":
                return path.call(print, "literal");

              case "TSIndexedAccessType":
                return concat$11([
                  path.call(print, "objectType"),
                  "[",
                  path.call(print, "indexType"),
                  "]",
                ]);

              case "TSConstructSignatureDeclaration":
              case "TSCallSignatureDeclaration":
              case "TSConstructorType": {
                if (n.type !== "TSCallSignatureDeclaration") {
                  parts.push("new ");
                }

                parts.push(
                  group$10(
                    printFunctionParams(
                      path,
                      print,
                      options,
                      /* expandArg */
                      false,
                      /* printTypeParams */
                      true
                    )
                  )
                );

                if (n.returnType) {
                  var isType = n.type === "TSConstructorType";
                  parts.push(
                    isType ? " => " : ": ",
                    path.call(print, "returnType")
                  );
                }

                return concat$11(parts);
              }

              case "TSTypeOperator":
                return concat$11([
                  n.operator,
                  " ",
                  path.call(print, "typeAnnotation"),
                ]);

              case "TSMappedType": {
                var _shouldBreak2 = hasNewlineInRange$1(
                  options.originalText,
                  options.locStart(n),
                  options.locEnd(n)
                );

                return group$10(
                  concat$11([
                    "{",
                    indent$6(
                      concat$11([
                        options.bracketSpacing ? line$8 : softline$5,
                        n.readonly
                          ? concat$11([
                              getTypeScriptMappedTypeModifier(
                                n.readonly,
                                "readonly"
                              ),
                              " ",
                            ])
                          : "",
                        printTypeScriptModifiers(path, options, print),
                        path.call(print, "typeParameter"),
                        n.optional
                          ? getTypeScriptMappedTypeModifier(n.optional, "?")
                          : "",
                        ": ",
                        path.call(print, "typeAnnotation"),
                        _shouldBreak2 && options.semi ? ";" : "",
                      ])
                    ),
                    comments.printDanglingComments(
                      path,
                      options,
                      /* sameIndent */
                      true
                    ),
                    options.bracketSpacing ? line$8 : softline$5,
                    "}",
                  ]),
                  {
                    shouldBreak: _shouldBreak2,
                  }
                );
              }

              case "TSMethodSignature":
                parts.push(
                  n.accessibility ? concat$11([n.accessibility, " "]) : "",
                  n.export ? "export " : "",
                  n.static ? "static " : "",
                  n.readonly ? "readonly " : "",
                  n.computed ? "[" : "",
                  path.call(print, "key"),
                  n.computed ? "]" : "",
                  printOptionalToken(path),
                  printFunctionParams(
                    path,
                    print,
                    options,
                    /* expandArg */
                    false,
                    /* printTypeParams */
                    true
                  )
                );

                if (n.returnType) {
                  parts.push(": ", path.call(print, "returnType"));
                }

                return group$10(concat$11(parts));

              case "TSNamespaceExportDeclaration":
                parts.push("export as namespace ", path.call(print, "id"));

                if (options.semi) {
                  parts.push(";");
                }

                return group$10(concat$11(parts));

              case "TSEnumDeclaration":
                if (isNodeStartingWithDeclare(n, options)) {
                  parts.push("declare ");
                }

                if (n.modifiers) {
                  parts.push(printTypeScriptModifiers(path, options, print));
                }

                if (n.const) {
                  parts.push("const ");
                }

                parts.push("enum ", path.call(print, "id"), " ");

                if (n.members.length === 0) {
                  parts.push(
                    group$10(
                      concat$11([
                        "{",
                        comments.printDanglingComments(path, options),
                        softline$5,
                        "}",
                      ])
                    )
                  );
                } else {
                  parts.push(
                    group$10(
                      concat$11([
                        "{",
                        indent$6(
                          concat$11([
                            hardline$8,
                            printArrayItems(path, options, "members", print),
                            shouldPrintComma$1(options, "es5") ? "," : "",
                          ])
                        ),
                        comments.printDanglingComments(
                          path,
                          options,
                          /* sameIndent */
                          true
                        ),
                        hardline$8,
                        "}",
                      ])
                    )
                  );
                }

                return concat$11(parts);

              case "TSEnumMember":
                parts.push(path.call(print, "id"));

                if (n.initializer) {
                  parts.push(" = ", path.call(print, "initializer"));
                }

                return concat$11(parts);

              case "TSImportEqualsDeclaration":
                if (n.isExport) {
                  parts.push("export ");
                }

                parts.push(
                  "import ",
                  path.call(print, "id"),
                  " = ",
                  path.call(print, "moduleReference")
                );

                if (options.semi) {
                  parts.push(";");
                }

                return group$10(concat$11(parts));

              case "TSExternalModuleReference":
                return concat$11([
                  "require(",
                  path.call(print, "expression"),
                  ")",
                ]);

              case "TSModuleDeclaration": {
                var _parent11 = path.getParentNode();

                var isExternalModule = isLiteral(n.id);
                var parentIsDeclaration =
                  _parent11.type === "TSModuleDeclaration";
                var bodyIsDeclaration =
                  n.body && n.body.type === "TSModuleDeclaration";

                if (parentIsDeclaration) {
                  parts.push(".");
                } else {
                  if (n.declare === true) {
                    parts.push("declare ");
                  }

                  parts.push(printTypeScriptModifiers(path, options, print));
                  var textBetweenNodeAndItsId = options.originalText.slice(
                    options.locStart(n),
                    options.locStart(n.id)
                  ); // Global declaration looks like this:
                  // (declare)? global { ... }

                  var isGlobalDeclaration =
                    n.id.type === "Identifier" &&
                    n.id.name === "global" &&
                    !/namespace|module/.test(textBetweenNodeAndItsId);

                  if (!isGlobalDeclaration) {
                    parts.push(
                      isExternalModule ||
                        /(^|\s)module(\s|$)/.test(textBetweenNodeAndItsId)
                        ? "module "
                        : "namespace "
                    );
                  }
                }

                parts.push(path.call(print, "id"));

                if (bodyIsDeclaration) {
                  parts.push(path.call(print, "body"));
                } else if (n.body) {
                  parts.push(" ", group$10(path.call(print, "body")));
                } else {
                  parts.push(semi);
                }

                return concat$11(parts);
              }

              case "PrivateName":
                return concat$11(["#", path.call(print, "id")]);

              case "TSConditionalType":
                return printTernaryOperator(path, options, print, {
                  beforeParts: function beforeParts() {
                    return [
                      path.call(print, "checkType"),
                      " ",
                      "extends",
                      " ",
                      path.call(print, "extendsType"),
                    ];
                  },
                  afterParts: function afterParts() {
                    return [];
                  },
                  shouldCheckJsx: false,
                  conditionalNodeType: "TSConditionalType",
                  consequentNodePropertyName: "trueType",
                  alternateNodePropertyName: "falseType",
                  testNodePropertyName: "checkType",
                  breakNested: true,
                });

              case "TSInferType":
                return concat$11([
                  "infer",
                  " ",
                  path.call(print, "typeParameter"),
                ]);

              case "InterpreterDirective":
                parts.push("#!", n.value, hardline$8);

                if (isNextLineEmpty$4(options.originalText, n, options)) {
                  parts.push(hardline$8);
                }

                return concat$11(parts);

              case "NGRoot":
                return concat$11(
                  [].concat(
                    path.call(print, "node"),
                    !n.node.comments || n.node.comments.length === 0
                      ? []
                      : concat$11([" //", n.node.comments[0].value.trimRight()])
                  )
                );

              case "NGChainedExpression":
                return group$10(
                  join$7(
                    concat$11([";", line$8]),
                    path.map(function (childPath) {
                      return hasNgSideEffect(childPath)
                        ? print(childPath)
                        : concat$11(["(", print(childPath), ")"]);
                    }, "expressions")
                  )
                );

              case "NGEmptyExpression":
                return "";

              case "NGQuotedExpression":
                return concat$11([n.prefix, ":", n.value]);

              case "NGMicrosyntax":
                return concat$11(
                  path.map(function (childPath, index) {
                    return concat$11([
                      index === 0
                        ? ""
                        : isNgForOf(childPath.getValue(), index, n)
                        ? " "
                        : concat$11([";", line$8]),
                      print(childPath),
                    ]);
                  }, "body")
                );

              case "NGMicrosyntaxKey":
                return /^[a-z_$][a-z0-9_$]*(-[a-z_$][a-z0-9_$])*$/i.test(n.name)
                  ? n.name
                  : JSON.stringify(n.name);

              case "NGMicrosyntaxExpression":
                return concat$11([
                  path.call(print, "expression"),
                  n.alias === null
                    ? ""
                    : concat$11([" as ", path.call(print, "alias")]),
                ]);

              case "NGMicrosyntaxKeyedExpression": {
                var index = path.getName();

                var _parentNode2 = path.getParentNode();

                var shouldNotPrintColon =
                  isNgForOf(n, index, _parentNode2) ||
                  (((index === 1 &&
                    (n.key.name === "then" || n.key.name === "else")) ||
                    (index === 2 &&
                      n.key.name === "else" &&
                      _parentNode2.body[index - 1].type ===
                        "NGMicrosyntaxKeyedExpression" &&
                      _parentNode2.body[index - 1].key.name === "then")) &&
                    _parentNode2.body[0].type === "NGMicrosyntaxExpression");
                return concat$11([
                  path.call(print, "key"),
                  shouldNotPrintColon ? " " : ": ",
                  path.call(print, "expression"),
                ]);
              }

              case "NGMicrosyntaxLet":
                return concat$11([
                  "let ",
                  path.call(print, "key"),
                  n.value === null
                    ? ""
                    : concat$11([" = ", path.call(print, "value")]),
                ]);

              case "NGMicrosyntaxAs":
                return concat$11([
                  path.call(print, "key"),
                  " as ",
                  path.call(print, "alias"),
                ]);

              default:
                /* istanbul ignore next */
                throw new Error("unknown type: " + JSON.stringify(n.type));
            }
          }

          function isNgForOf(node, index, parentNode) {
            return (
              node.type === "NGMicrosyntaxKeyedExpression" &&
              node.key.name === "of" &&
              index === 1 &&
              parentNode.body[0].type === "NGMicrosyntaxLet" &&
              parentNode.body[0].value === null
            );
          }
          /** identify if an angular expression seems to have side effects */

          function hasNgSideEffect(path) {
            return hasNode(path.getValue(), function (node) {
              switch (node.type) {
                case undefined:
                  return false;

                case "CallExpression":
                case "OptionalCallExpression":
                case "AssignmentExpression":
                  return true;
              }
            });
          }

          function printStatementSequence(path, options, print) {
            var printed = [];
            var bodyNode = path.getNode();
            var isClass = bodyNode.type === "ClassBody";
            path.map(function (stmtPath, i) {
              var stmt = stmtPath.getValue(); // Just in case the AST has been modified to contain falsy
              // "statements," it's safer simply to skip them.

              /* istanbul ignore if */

              if (!stmt) {
                return;
              } // Skip printing EmptyStatement nodes to avoid leaving stray
              // semicolons lying around.

              if (stmt.type === "EmptyStatement") {
                return;
              }

              var stmtPrinted = print(stmtPath);
              var text = options.originalText;
              var parts = []; // in no-semi mode, prepend statement with semicolon if it might break ASI
              // don't prepend the only JSX element in a program with semicolon

              if (
                !options.semi &&
                !isClass &&
                !isTheOnlyJSXElementInMarkdown(options, stmtPath) &&
                stmtNeedsASIProtection(stmtPath, options)
              ) {
                if (
                  stmt.comments &&
                  stmt.comments.some(function (comment) {
                    return comment.leading;
                  })
                ) {
                  parts.push(
                    print(stmtPath, {
                      needsSemi: true,
                    })
                  );
                } else {
                  parts.push(";", stmtPrinted);
                }
              } else {
                parts.push(stmtPrinted);
              }

              if (!options.semi && isClass) {
                if (classPropMayCauseASIProblems(stmtPath)) {
                  parts.push(";");
                } else if (stmt.type === "ClassProperty") {
                  var nextChild = bodyNode.body[i + 1];

                  if (classChildNeedsASIProtection(nextChild)) {
                    parts.push(";");
                  }
                }
              }

              if (
                isNextLineEmpty$4(text, stmt, options) &&
                !isLastStatement(stmtPath)
              ) {
                parts.push(hardline$8);
              }

              printed.push(concat$11(parts));
            });
            return join$7(hardline$8, printed);
          }

          function printPropertyKey(path, options, print) {
            var node = path.getNode();
            var parent = path.getParentNode();
            var key = node.key;

            if (
              options.quoteProps === "consistent" &&
              !needsQuoteProps.has(parent)
            ) {
              var objectHasStringProp = (
                parent.properties ||
                parent.body ||
                parent.members
              ).some(function (prop) {
                return (
                  !prop.computed &&
                  prop.key &&
                  isStringLiteral(prop.key) &&
                  !isStringPropSafeToCoerceToIdentifier(prop, options)
                );
              });
              needsQuoteProps.set(parent, objectHasStringProp);
            }

            if (
              key.type === "Identifier" &&
              !node.computed &&
              (options.parser === "json" ||
                (options.quoteProps === "consistent" &&
                  needsQuoteProps.get(parent)))
            ) {
              // a -> "a"
              var prop = printString$2(JSON.stringify(key.name), options);
              return path.call(function (keyPath) {
                return comments.printComments(
                  keyPath,
                  function () {
                    return prop;
                  },
                  options
                );
              }, "key");
            }

            if (
              !node.computed &&
              isStringPropSafeToCoerceToIdentifier(node, options) &&
              (options.quoteProps === "as-needed" ||
                (options.quoteProps === "consistent" &&
                  !needsQuoteProps.get(parent)))
            ) {
              // 'a' -> a
              return path.call(function (keyPath) {
                return comments.printComments(
                  keyPath,
                  function () {
                    return key.value;
                  },
                  options
                );
              }, "key");
            }

            return path.call(print, "key");
          }

          function printMethod(path, options, print) {
            var node = path.getNode();
            var semi = options.semi ? ";" : "";
            var kind = node.kind;
            var parts = [];

            if (
              node.type === "ObjectMethod" ||
              node.type === "ClassMethod" ||
              node.type === "ClassPrivateMethod"
            ) {
              node.value = node;
            }

            if (node.value.async) {
              parts.push("async ");
            }

            if (
              !kind ||
              kind === "init" ||
              kind === "method" ||
              kind === "constructor"
            ) {
              if (node.value.generator) {
                parts.push("*");
              }
            } else {
              assert$3.ok(kind === "get" || kind === "set");
              parts.push(kind, " ");
            }

            var key = printPropertyKey(path, options, print);

            if (node.computed) {
              key = concat$11(["[", key, "]"]);
            }

            parts.push(
              key,
              concat$11(
                path.call(function (valuePath) {
                  return [
                    printFunctionTypeParameters(valuePath, options, print),
                    group$10(
                      concat$11([
                        printFunctionParams(valuePath, print, options),
                        printReturnType(valuePath, print, options),
                      ])
                    ),
                  ];
                }, "value")
              )
            );

            if (!node.value.body || node.value.body.length === 0) {
              parts.push(semi);
            } else {
              parts.push(" ", path.call(print, "value", "body"));
            }

            return concat$11(parts);
          }

          function couldGroupArg(arg) {
            return (
              (arg.type === "ObjectExpression" &&
                (arg.properties.length > 0 || arg.comments)) ||
              (arg.type === "ArrayExpression" &&
                (arg.elements.length > 0 || arg.comments)) ||
              arg.type === "TSTypeAssertion" ||
              arg.type === "TSAsExpression" ||
              arg.type === "FunctionExpression" ||
              (arg.type === "ArrowFunctionExpression" && // we want to avoid breaking inside composite return types but not simple keywords
                // https://github.com/prettier/prettier/issues/4070
                // export class Thing implements OtherThing {
                //   do: (type: Type) => Provider<Prop> = memoize(
                //     (type: ObjectType): Provider<Opts> => {}
                //   );
                // }
                // https://github.com/prettier/prettier/issues/6099
                // app.get("/", (req, res): void => {
                //   res.send("Hello World!");
                // });
                (!arg.returnType ||
                  !arg.returnType.typeAnnotation ||
                  arg.returnType.typeAnnotation.type !== "TSTypeReference") &&
                (arg.body.type === "BlockStatement" ||
                  arg.body.type === "ArrowFunctionExpression" ||
                  arg.body.type === "ObjectExpression" ||
                  arg.body.type === "ArrayExpression" ||
                  arg.body.type === "CallExpression" ||
                  arg.body.type === "OptionalCallExpression" ||
                  arg.body.type === "ConditionalExpression" ||
                  isJSXNode(arg.body)))
            );
          }

          function shouldGroupLastArg(args) {
            var lastArg = getLast$3(args);
            var penultimateArg = getPenultimate$1(args);
            return (
              !hasLeadingComment(lastArg) &&
              !hasTrailingComment(lastArg) &&
              couldGroupArg(lastArg) && // If the last two arguments are of the same type,
              // disable last element expansion.
              (!penultimateArg || penultimateArg.type !== lastArg.type)
            );
          }

          function shouldGroupFirstArg(args) {
            if (args.length !== 2) {
              return false;
            }

            var firstArg = args[0];
            var secondArg = args[1];
            return (
              (!firstArg.comments || !firstArg.comments.length) &&
              (firstArg.type === "FunctionExpression" ||
                (firstArg.type === "ArrowFunctionExpression" &&
                  firstArg.body.type === "BlockStatement")) &&
              secondArg.type !== "FunctionExpression" &&
              secondArg.type !== "ArrowFunctionExpression" &&
              secondArg.type !== "ConditionalExpression" &&
              !couldGroupArg(secondArg)
            );
          }

          function isSimpleFlowType(node) {
            var flowTypeAnnotations = [
              "AnyTypeAnnotation",
              "NullLiteralTypeAnnotation",
              "GenericTypeAnnotation",
              "ThisTypeAnnotation",
              "NumberTypeAnnotation",
              "VoidTypeAnnotation",
              "EmptyTypeAnnotation",
              "MixedTypeAnnotation",
              "BooleanTypeAnnotation",
              "BooleanLiteralTypeAnnotation",
              "StringTypeAnnotation",
            ];
            return (
              node &&
              flowTypeAnnotations.indexOf(node.type) !== -1 &&
              !(node.type === "GenericTypeAnnotation" && node.typeParameters)
            );
          }

          function isJestEachTemplateLiteral(node, parentNode) {
            /**
             * describe.each`table`(name, fn)
             * describe.only.each`table`(name, fn)
             * describe.skip.each`table`(name, fn)
             * test.each`table`(name, fn)
             * test.only.each`table`(name, fn)
             * test.skip.each`table`(name, fn)
             *
             * Ref: https://github.com/facebook/jest/pull/6102
             */
            var jestEachTriggerRegex = /^[xf]?(describe|it|test)$/;
            return (
              parentNode.type === "TaggedTemplateExpression" &&
              parentNode.quasi === node &&
              parentNode.tag.type === "MemberExpression" &&
              parentNode.tag.property.type === "Identifier" &&
              parentNode.tag.property.name === "each" &&
              ((parentNode.tag.object.type === "Identifier" &&
                jestEachTriggerRegex.test(parentNode.tag.object.name)) ||
                (parentNode.tag.object.type === "MemberExpression" &&
                  parentNode.tag.object.property.type === "Identifier" &&
                  (parentNode.tag.object.property.name === "only" ||
                    parentNode.tag.object.property.name === "skip") &&
                  parentNode.tag.object.object.type === "Identifier" &&
                  jestEachTriggerRegex.test(parentNode.tag.object.object.name)))
            );
          }

          function printJestEachTemplateLiteral(node, expressions, options) {
            /**
             * a    | b    | expected
             * ${1} | ${1} | ${2}
             * ${1} | ${2} | ${3}
             * ${2} | ${1} | ${3}
             */
            var headerNames = node.quasis[0].value.raw.trim().split(/\s*\|\s*/);

            if (
              headerNames.length > 1 ||
              headerNames.some(function (headerName) {
                return headerName.length !== 0;
              })
            ) {
              var parts = [];
              var stringifiedExpressions = expressions.map(function (doc$$2) {
                return (
                  "${" +
                  printDocToString$1(
                    doc$$2,
                    Object.assign({}, options, {
                      printWidth: Infinity,
                      endOfLine: "lf",
                    })
                  ).formatted +
                  "}"
                );
              });
              var tableBody = [
                {
                  hasLineBreak: false,
                  cells: [],
                },
              ];

              for (var i = 1; i < node.quasis.length; i++) {
                var row = tableBody[tableBody.length - 1];
                var correspondingExpression = stringifiedExpressions[i - 1];
                row.cells.push(correspondingExpression);

                if (correspondingExpression.indexOf("\n") !== -1) {
                  row.hasLineBreak = true;
                }

                if (node.quasis[i].value.raw.indexOf("\n") !== -1) {
                  tableBody.push({
                    hasLineBreak: false,
                    cells: [],
                  });
                }
              }

              var maxColumnCount = tableBody.reduce(function (
                maxColumnCount,
                row
              ) {
                return Math.max(maxColumnCount, row.cells.length);
              },
              headerNames.length);
              var maxColumnWidths = Array.from(
                new Array(maxColumnCount),
                function () {
                  return 0;
                }
              );
              var table = [
                {
                  cells: headerNames,
                },
              ].concat(
                tableBody.filter(function (row) {
                  return row.cells.length !== 0;
                })
              );
              table
                .filter(function (row) {
                  return !row.hasLineBreak;
                })
                .forEach(function (row) {
                  row.cells.forEach(function (cell, index) {
                    maxColumnWidths[index] = Math.max(
                      maxColumnWidths[index],
                      getStringWidth$2(cell)
                    );
                  });
                });
              parts.push(
                "`",
                indent$6(
                  concat$11([
                    hardline$8,
                    join$7(
                      hardline$8,
                      table.map(function (row) {
                        return join$7(
                          " | ",
                          row.cells.map(function (cell, index) {
                            return row.hasLineBreak
                              ? cell
                              : cell +
                                  " ".repeat(
                                    maxColumnWidths[index] -
                                      getStringWidth$2(cell)
                                  );
                          })
                        );
                      })
                    ),
                  ])
                ),
                hardline$8,
                "`"
              );
              return concat$11(parts);
            }
          }
          /** @param node {import("estree").TemplateLiteral} */

          function isSimpleTemplateLiteral(node) {
            if (node.expressions.length === 0) {
              return false;
            }

            return node.expressions.every(function (expr) {
              // Disallow comments since printDocToString can't print them here
              if (expr.comments) {
                return false;
              } // Allow `x` and `this`

              if (
                expr.type === "Identifier" ||
                expr.type === "ThisExpression"
              ) {
                return true;
              } // Allow `a.b.c`, `a.b[c]`, and `this.x.y`

              if (
                (expr.type === "MemberExpression" ||
                  expr.type === "OptionalMemberExpression") &&
                (expr.property.type === "Identifier" ||
                  expr.property.type === "Literal")
              ) {
                var ancestor = expr;

                while (
                  ancestor.type === "MemberExpression" ||
                  ancestor.type === "OptionalMemberExpression"
                ) {
                  ancestor = ancestor.object;

                  if (ancestor.comments) {
                    return false;
                  }
                }

                if (
                  ancestor.type === "Identifier" ||
                  ancestor.type === "ThisExpression"
                ) {
                  return true;
                }

                return false;
              }

              return false;
            });
          }

          var functionCompositionFunctionNames = new Set([
            "pipe", // RxJS, Ramda
            "pipeP", // Ramda
            "pipeK", // Ramda
            "compose", // Ramda, Redux
            "composeFlipped", // Not from any library, but common in Haskell, so supported
            "composeP", // Ramda
            "composeK", // Ramda
            "flow", // Lodash
            "flowRight", // Lodash
            "connect", // Redux
            "createSelector", // Reselect
          ]);
          var ordinaryMethodNames = new Set([
            "connect", // GObject, MongoDB
          ]);

          function isFunctionCompositionFunction(node) {
            switch (node.type) {
              case "OptionalMemberExpression":
              case "MemberExpression": {
                return (
                  isFunctionCompositionFunction(node.property) &&
                  !ordinaryMethodNames.has(node.property.name)
                );
              }

              case "Identifier": {
                return functionCompositionFunctionNames.has(node.name);
              }

              case "StringLiteral":
              case "Literal": {
                return functionCompositionFunctionNames.has(node.value);
              }
            }
          }

          function printArgumentsList(path, options, print) {
            var node = path.getValue();
            var args = node.arguments;

            if (args.length === 0) {
              return concat$11([
                "(",
                comments.printDanglingComments(
                  path,
                  options,
                  /* sameIndent */
                  true
                ),
                ")",
              ]);
            } // useEffect(() => { ... }, [foo, bar, baz])

            if (
              args.length === 2 &&
              args[0].type === "ArrowFunctionExpression" &&
              args[0].params.length === 0 &&
              args[0].body.type === "BlockStatement" &&
              args[1].type === "ArrayExpression" &&
              !args.find(function (arg) {
                return arg.leadingComments || arg.trailingComments;
              })
            ) {
              return concat$11([
                "(",
                path.call(print, "arguments", 0),
                ", ",
                path.call(print, "arguments", 1),
                ")",
              ]);
            }

            var anyArgEmptyLine = false;
            var hasEmptyLineFollowingFirstArg = false;
            var lastArgIndex = args.length - 1;
            var printedArguments = path.map(function (argPath, index) {
              var arg = argPath.getNode();
              var parts = [print(argPath)];

              if (index === lastArgIndex) {
                // do nothing
              } else if (
                isNextLineEmpty$4(options.originalText, arg, options)
              ) {
                if (index === 0) {
                  hasEmptyLineFollowingFirstArg = true;
                }

                anyArgEmptyLine = true;
                parts.push(",", hardline$8, hardline$8);
              } else {
                parts.push(",", line$8);
              }

              return concat$11(parts);
            }, "arguments");
            var maybeTrailingComma = // Dynamic imports cannot have trailing commas
              !(node.callee && node.callee.type === "Import") &&
              shouldPrintComma$1(options, "all")
                ? ","
                : "";

            function allArgsBrokenOut() {
              return group$10(
                concat$11([
                  "(",
                  indent$6(concat$11([line$8, concat$11(printedArguments)])),
                  maybeTrailingComma,
                  line$8,
                  ")",
                ]),
                {
                  shouldBreak: true,
                }
              );
            } // We want to get
            //    pipe(
            //      x => x + 1,
            //      x => x - 1
            //    )
            // here, but not
            //    process.stdout.pipe(socket)

            if (isFunctionCompositionFunction(node.callee) && args.length > 1) {
              return allArgsBrokenOut();
            }

            var shouldGroupFirst = shouldGroupFirstArg(args);
            var shouldGroupLast = shouldGroupLastArg(args);

            if (shouldGroupFirst || shouldGroupLast) {
              var shouldBreak =
                (shouldGroupFirst
                  ? printedArguments.slice(1).some(willBreak$1)
                  : printedArguments.slice(0, -1).some(willBreak$1)) ||
                anyArgEmptyLine; // We want to print the last argument with a special flag

              var printedExpanded;
              var i = 0;
              path.each(function (argPath) {
                if (shouldGroupFirst && i === 0) {
                  printedExpanded = [
                    concat$11([
                      argPath.call(function (p) {
                        return print(p, {
                          expandFirstArg: true,
                        });
                      }),
                      printedArguments.length > 1 ? "," : "",
                      hasEmptyLineFollowingFirstArg ? hardline$8 : line$8,
                      hasEmptyLineFollowingFirstArg ? hardline$8 : "",
                    ]),
                  ].concat(printedArguments.slice(1));
                }

                if (shouldGroupLast && i === args.length - 1) {
                  printedExpanded = printedArguments.slice(0, -1).concat(
                    argPath.call(function (p) {
                      return print(p, {
                        expandLastArg: true,
                      });
                    })
                  );
                }

                i++;
              }, "arguments");
              var somePrintedArgumentsWillBreak =
                printedArguments.some(willBreak$1);
              return concat$11([
                somePrintedArgumentsWillBreak ? breakParent$3 : "",
                conditionalGroup$1(
                  [
                    concat$11([
                      ifBreak$6(
                        indent$6(
                          concat$11([
                            "(",
                            softline$5,
                            concat$11(printedExpanded),
                          ])
                        ),
                        concat$11(["(", concat$11(printedExpanded)])
                      ),
                      somePrintedArgumentsWillBreak
                        ? concat$11([ifBreak$6(maybeTrailingComma), softline$5])
                        : "",
                      ")",
                    ]),
                    shouldGroupFirst
                      ? concat$11([
                          "(",
                          group$10(printedExpanded[0], {
                            shouldBreak: true,
                          }),
                          concat$11(printedExpanded.slice(1)),
                          ")",
                        ])
                      : concat$11([
                          "(",
                          concat$11(printedArguments.slice(0, -1)),
                          group$10(getLast$3(printedExpanded), {
                            shouldBreak: true,
                          }),
                          ")",
                        ]),
                    allArgsBrokenOut(),
                  ],
                  {
                    shouldBreak: shouldBreak,
                  }
                ),
              ]);
            }

            return group$10(
              concat$11([
                "(",
                indent$6(concat$11([softline$5, concat$11(printedArguments)])),
                ifBreak$6(maybeTrailingComma),
                softline$5,
                ")",
              ]),
              {
                shouldBreak:
                  printedArguments.some(willBreak$1) || anyArgEmptyLine,
              }
            );
          }

          function printTypeAnnotation(path, options, print) {
            var node = path.getValue();

            if (!node.typeAnnotation) {
              return "";
            }

            var parentNode = path.getParentNode();
            var isDefinite =
              node.definite ||
              (parentNode &&
                parentNode.type === "VariableDeclarator" &&
                parentNode.definite);
            var isFunctionDeclarationIdentifier =
              parentNode.type === "DeclareFunction" && parentNode.id === node;

            if (
              isFlowAnnotationComment(
                options.originalText,
                node.typeAnnotation,
                options
              )
            ) {
              return concat$11([
                " /*: ",
                path.call(print, "typeAnnotation"),
                " */",
              ]);
            }

            return concat$11([
              isFunctionDeclarationIdentifier ? "" : isDefinite ? "!: " : ": ",
              path.call(print, "typeAnnotation"),
            ]);
          }

          function printFunctionTypeParameters(path, options, print) {
            var fun = path.getValue();

            if (fun.typeArguments) {
              return path.call(print, "typeArguments");
            }

            if (fun.typeParameters) {
              return path.call(print, "typeParameters");
            }

            return "";
          }

          function printFunctionParams(
            path,
            print,
            options,
            expandArg,
            printTypeParams
          ) {
            var fun = path.getValue();
            var parent = path.getParentNode();
            var paramsField = fun.parameters ? "parameters" : "params";
            var isParametersInTestCall = isTestCall(parent);
            var shouldHugParameters = shouldHugArguments(fun);
            var shouldExpandParameters =
              expandArg &&
              !(
                fun[paramsField] &&
                fun[paramsField].some(function (n) {
                  return n.comments;
                })
              );
            var typeParams = printTypeParams
              ? printFunctionTypeParameters(path, options, print)
              : "";
            var printed = [];

            if (fun[paramsField]) {
              var lastArgIndex = fun[paramsField].length - 1;
              printed = path.map(function (childPath, index) {
                var parts = [];
                var param = childPath.getValue();
                parts.push(print(childPath));

                if (index === lastArgIndex) {
                  if (fun.rest) {
                    parts.push(",", line$8);
                  }
                } else if (
                  isParametersInTestCall ||
                  shouldHugParameters ||
                  shouldExpandParameters
                ) {
                  parts.push(", ");
                } else if (
                  isNextLineEmpty$4(options.originalText, param, options)
                ) {
                  parts.push(",", hardline$8, hardline$8);
                } else {
                  parts.push(",", line$8);
                }

                return concat$11(parts);
              }, paramsField);
            }

            if (fun.rest) {
              printed.push(concat$11(["...", path.call(print, "rest")]));
            }

            if (printed.length === 0) {
              return concat$11([
                typeParams,
                "(",
                comments.printDanglingComments(
                  path,
                  options,
                  /* sameIndent */
                  true,
                  function (comment) {
                    return (
                      getNextNonSpaceNonCommentCharacter$1(
                        options.originalText,
                        comment,
                        options.locEnd
                      ) === ")"
                    );
                  }
                ),
                ")",
              ]);
            }

            var lastParam = getLast$3(fun[paramsField]); // If the parent is a call with the first/last argument expansion and this is the
            // params of the first/last argument, we dont want the arguments to break and instead
            // want the whole expression to be on a new line.
            //
            // Good:                 Bad:
            //   verylongcall(         verylongcall((
            //     (a, b) => {           a,
            //     }                     b,
            //   })                    ) => {
            //                         })

            if (shouldExpandParameters) {
              return group$10(
                concat$11([
                  removeLines$2(typeParams),
                  "(",
                  concat$11(printed.map(removeLines$2)),
                  ")",
                ])
              );
            } // Single object destructuring should hug
            //
            // function({
            //   a,
            //   b,
            //   c
            // }) {}

            if (shouldHugParameters) {
              return concat$11([typeParams, "(", concat$11(printed), ")"]);
            } // don't break in specs, eg; `it("should maintain parens around done even when long", (done) => {})`

            if (isParametersInTestCall) {
              return concat$11([typeParams, "(", concat$11(printed), ")"]);
            }

            var isFlowShorthandWithOneArg =
              (isObjectTypePropertyAFunction(parent, options) ||
                isTypeAnnotationAFunction(parent, options) ||
                parent.type === "TypeAlias" ||
                parent.type === "UnionTypeAnnotation" ||
                parent.type === "TSUnionType" ||
                parent.type === "IntersectionTypeAnnotation" ||
                (parent.type === "FunctionTypeAnnotation" &&
                  parent.returnType === fun)) &&
              fun[paramsField].length === 1 &&
              fun[paramsField][0].name === null &&
              fun[paramsField][0].typeAnnotation &&
              fun.typeParameters === null &&
              isSimpleFlowType(fun[paramsField][0].typeAnnotation) &&
              !fun.rest;

            if (isFlowShorthandWithOneArg) {
              if (options.arrowParens === "always") {
                return concat$11(["(", concat$11(printed), ")"]);
              }

              return concat$11(printed);
            }

            var canHaveTrailingComma =
              !(lastParam && lastParam.type === "RestElement") && !fun.rest;
            return concat$11([
              typeParams,
              "(",
              indent$6(concat$11([softline$5, concat$11(printed)])),
              ifBreak$6(
                canHaveTrailingComma && shouldPrintComma$1(options, "all")
                  ? ","
                  : ""
              ),
              softline$5,
              ")",
            ]);
          }

          function shouldPrintParamsWithoutParens(path, options) {
            if (options.arrowParens === "always") {
              return false;
            }

            if (options.arrowParens === "avoid") {
              var node = path.getValue();
              return canPrintParamsWithoutParens(node);
            } // Fallback default; should be unreachable

            return false;
          }

          function canPrintParamsWithoutParens(node) {
            return (
              node.params.length === 1 &&
              !node.rest &&
              !node.typeParameters &&
              !hasDanglingComments(node) &&
              node.params[0].type === "Identifier" &&
              !node.params[0].typeAnnotation &&
              !node.params[0].comments &&
              !node.params[0].optional &&
              !node.predicate &&
              !node.returnType
            );
          }

          function printFunctionDeclaration(path, print, options) {
            var n = path.getValue();
            var parts = [];

            if (n.async) {
              parts.push("async ");
            }

            parts.push("function");

            if (n.generator) {
              parts.push("*");
            }

            if (n.id) {
              parts.push(" ", path.call(print, "id"));
            }

            parts.push(
              printFunctionTypeParameters(path, options, print),
              group$10(
                concat$11([
                  printFunctionParams(path, print, options),
                  printReturnType(path, print, options),
                ])
              ),
              n.body ? " " : "",
              path.call(print, "body")
            );
            return concat$11(parts);
          }

          function printObjectMethod(path, options, print) {
            var objMethod = path.getValue();
            var parts = [];

            if (objMethod.async) {
              parts.push("async ");
            }

            if (objMethod.generator) {
              parts.push("*");
            }

            if (
              objMethod.method ||
              objMethod.kind === "get" ||
              objMethod.kind === "set"
            ) {
              return printMethod(path, options, print);
            }

            var key = printPropertyKey(path, options, print);

            if (objMethod.computed) {
              parts.push("[", key, "]");
            } else {
              parts.push(key);
            }

            parts.push(
              printFunctionTypeParameters(path, options, print),
              group$10(
                concat$11([
                  printFunctionParams(path, print, options),
                  printReturnType(path, print, options),
                ])
              ),
              " ",
              path.call(print, "body")
            );
            return concat$11(parts);
          }

          function printReturnType(path, print, options) {
            var n = path.getValue();
            var returnType = path.call(print, "returnType");

            if (
              n.returnType &&
              isFlowAnnotationComment(
                options.originalText,
                n.returnType,
                options
              )
            ) {
              return concat$11([" /*: ", returnType, " */"]);
            }

            var parts = [returnType]; // prepend colon to TypeScript type annotation

            if (n.returnType && n.returnType.typeAnnotation) {
              parts.unshift(": ");
            }

            if (n.predicate) {
              // The return type will already add the colon, but otherwise we
              // need to do it ourselves
              parts.push(
                n.returnType ? " " : ": ",
                path.call(print, "predicate")
              );
            }

            return concat$11(parts);
          }

          function printExportDeclaration(path, options, print) {
            var decl = path.getValue();
            var semi = options.semi ? ";" : "";
            var parts = ["export "];
            var isDefault =
              decl["default"] || decl.type === "ExportDefaultDeclaration";

            if (isDefault) {
              parts.push("default ");
            }

            parts.push(
              comments.printDanglingComments(
                path,
                options,
                /* sameIndent */
                true
              )
            );

            if (needsHardlineAfterDanglingComment(decl)) {
              parts.push(hardline$8);
            }

            if (decl.declaration) {
              parts.push(path.call(print, "declaration"));

              if (
                isDefault &&
                decl.declaration.type !== "ClassDeclaration" &&
                decl.declaration.type !== "FunctionDeclaration" &&
                decl.declaration.type !== "TSInterfaceDeclaration" &&
                decl.declaration.type !== "DeclareClass" &&
                decl.declaration.type !== "DeclareFunction" &&
                decl.declaration.type !== "TSDeclareFunction"
              ) {
                parts.push(semi);
              }
            } else {
              if (decl.specifiers && decl.specifiers.length > 0) {
                var specifiers = [];
                var defaultSpecifiers = [];
                var namespaceSpecifiers = [];
                path.each(function (specifierPath) {
                  var specifierType = path.getValue().type;

                  if (specifierType === "ExportSpecifier") {
                    specifiers.push(print(specifierPath));
                  } else if (specifierType === "ExportDefaultSpecifier") {
                    defaultSpecifiers.push(print(specifierPath));
                  } else if (specifierType === "ExportNamespaceSpecifier") {
                    namespaceSpecifiers.push(
                      concat$11(["* as ", print(specifierPath)])
                    );
                  }
                }, "specifiers");
                var isNamespaceFollowed =
                  namespaceSpecifiers.length !== 0 && specifiers.length !== 0;
                var isDefaultFollowed =
                  defaultSpecifiers.length !== 0 &&
                  (namespaceSpecifiers.length !== 0 || specifiers.length !== 0);
                parts.push(
                  decl.exportKind === "type" ? "type " : "",
                  concat$11(defaultSpecifiers),
                  concat$11([isDefaultFollowed ? ", " : ""]),
                  concat$11(namespaceSpecifiers),
                  concat$11([isNamespaceFollowed ? ", " : ""]),
                  specifiers.length !== 0
                    ? group$10(
                        concat$11([
                          "{",
                          indent$6(
                            concat$11([
                              options.bracketSpacing ? line$8 : softline$5,
                              join$7(concat$11([",", line$8]), specifiers),
                            ])
                          ),
                          ifBreak$6(shouldPrintComma$1(options) ? "," : ""),
                          options.bracketSpacing ? line$8 : softline$5,
                          "}",
                        ])
                      )
                    : ""
                );
              } else {
                parts.push("{}");
              }

              if (decl.source) {
                parts.push(" from ", path.call(print, "source"));
              }

              parts.push(semi);
            }

            return concat$11(parts);
          }

          function printFlowDeclaration(path, parts) {
            var parentExportDecl = getParentExportDeclaration$1(path);

            if (parentExportDecl) {
              assert$3.strictEqual(
                parentExportDecl.type,
                "DeclareExportDeclaration"
              );
            } else {
              // If the parent node has type DeclareExportDeclaration, then it
              // will be responsible for printing the "declare" token. Otherwise
              // it needs to be printed with this non-exported declaration node.
              parts.unshift("declare ");
            }

            return concat$11(parts);
          }

          function getFlowVariance(path) {
            if (!path.variance) {
              return null;
            } // Babel 7.0 currently uses variance node type, and flow should
            // follow suit soon:
            // https://github.com/babel/babel/issues/4722

            var variance = path.variance.kind || path.variance;

            switch (variance) {
              case "plus":
                return "+";

              case "minus":
                return "-";

              default:
                /* istanbul ignore next */
                return variance;
            }
          }

          function printTypeScriptModifiers(path, options, print) {
            var n = path.getValue();

            if (!n.modifiers || !n.modifiers.length) {
              return "";
            }

            return concat$11([join$7(" ", path.map(print, "modifiers")), " "]);
          }

          function printTypeParameters(path, options, print, paramsKey) {
            var n = path.getValue();

            if (!n[paramsKey]) {
              return "";
            } // for TypeParameterDeclaration typeParameters is a single node

            if (!Array.isArray(n[paramsKey])) {
              return path.call(print, paramsKey);
            }

            var grandparent = path.getNode(2);
            var isParameterInTestCall =
              grandparent != null && isTestCall(grandparent);
            var shouldInline =
              isParameterInTestCall ||
              n[paramsKey].length === 0 ||
              (n[paramsKey].length === 1 &&
                (shouldHugType(n[paramsKey][0]) ||
                  (n[paramsKey][0].type === "GenericTypeAnnotation" &&
                    shouldHugType(n[paramsKey][0].id)) ||
                  (n[paramsKey][0].type === "TSTypeReference" &&
                    shouldHugType(n[paramsKey][0].typeName)) ||
                  n[paramsKey][0].type === "NullableTypeAnnotation"));

            if (shouldInline) {
              return concat$11([
                "<",
                join$7(", ", path.map(print, paramsKey)),
                ">",
              ]);
            }

            return group$10(
              concat$11([
                "<",
                indent$6(
                  concat$11([
                    softline$5,
                    join$7(
                      concat$11([",", line$8]),
                      path.map(print, paramsKey)
                    ),
                  ])
                ),
                ifBreak$6(
                  options.parser !== "typescript" &&
                    shouldPrintComma$1(options, "all")
                    ? ","
                    : ""
                ),
                softline$5,
                ">",
              ])
            );
          }

          function printClass(path, options, print) {
            var n = path.getValue();
            var parts = [];

            if (n.abstract) {
              parts.push("abstract ");
            }

            parts.push("class");

            if (n.id) {
              parts.push(" ", path.call(print, "id"));
            }

            parts.push(path.call(print, "typeParameters"));
            var partsGroup = [];

            if (n.superClass) {
              var printed = concat$11([
                "extends ",
                path.call(print, "superClass"),
                path.call(print, "superTypeParameters"),
              ]); // Keep old behaviour of extends in same line
              // If there is only on extends and there are not comments

              if (
                (!n.implements || n.implements.length === 0) &&
                (!n.superClass.comments || n.superClass.comments.length === 0)
              ) {
                parts.push(
                  concat$11([
                    " ",
                    path.call(function (superClass) {
                      return comments.printComments(
                        superClass,
                        function () {
                          return printed;
                        },
                        options
                      );
                    }, "superClass"),
                  ])
                );
              } else {
                partsGroup.push(
                  group$10(
                    concat$11([
                      line$8,
                      path.call(function (superClass) {
                        return comments.printComments(
                          superClass,
                          function () {
                            return printed;
                          },
                          options
                        );
                      }, "superClass"),
                    ])
                  )
                );
              }
            } else if (n.extends && n.extends.length > 0) {
              parts.push(" extends ", join$7(", ", path.map(print, "extends")));
            }

            if (n["mixins"] && n["mixins"].length > 0) {
              partsGroup.push(
                line$8,
                "mixins ",
                group$10(
                  indent$6(
                    join$7(concat$11([",", line$8]), path.map(print, "mixins"))
                  )
                )
              );
            }

            if (n["implements"] && n["implements"].length > 0) {
              partsGroup.push(
                line$8,
                "implements",
                group$10(
                  indent$6(
                    concat$11([
                      line$8,
                      join$7(
                        concat$11([",", line$8]),
                        path.map(print, "implements")
                      ),
                    ])
                  )
                )
              );
            }

            if (partsGroup.length > 0) {
              parts.push(group$10(indent$6(concat$11(partsGroup))));
            }

            if (
              n.body &&
              n.body.comments &&
              hasLeadingOwnLineComment(options.originalText, n.body, options)
            ) {
              parts.push(hardline$8);
            } else {
              parts.push(" ");
            }

            parts.push(path.call(print, "body"));
            return parts;
          }

          function printOptionalToken(path) {
            var node = path.getValue();

            if (!node.optional) {
              return "";
            }

            if (
              node.type === "OptionalCallExpression" ||
              (node.type === "OptionalMemberExpression" && node.computed)
            ) {
              return "?.";
            }

            return "?";
          }

          function printMemberLookup(path, options, print) {
            var property = path.call(print, "property");
            var n = path.getValue();
            var optional = printOptionalToken(path);

            if (!n.computed) {
              return concat$11([optional, ".", property]);
            }

            if (!n.property || isNumericLiteral(n.property)) {
              return concat$11([optional, "[", property, "]"]);
            }

            return group$10(
              concat$11([
                optional,
                "[",
                indent$6(concat$11([softline$5, property])),
                softline$5,
                "]",
              ])
            );
          }

          function printBindExpressionCallee(path, options, print) {
            return concat$11(["::", path.call(print, "callee")]);
          } // We detect calls on member expressions specially to format a
          // common pattern better. The pattern we are looking for is this:
          //
          // arr
          //   .map(x => x + 1)
          //   .filter(x => x > 10)
          //   .some(x => x % 2)
          //
          // The way it is structured in the AST is via a nested sequence of
          // MemberExpression and CallExpression. We need to traverse the AST
          // and make groups out of it to print it in the desired way.

          function printMemberChain(path, options, print) {
            // The first phase is to linearize the AST by traversing it down.
            //
            //   a().b()
            // has the following AST structure:
            //   CallExpression(MemberExpression(CallExpression(Identifier)))
            // and we transform it into
            //   [Identifier, CallExpression, MemberExpression, CallExpression]
            var printedNodes = []; // Here we try to retain one typed empty line after each call expression or
            // the first group whether it is in parentheses or not

            function shouldInsertEmptyLineAfter(node) {
              var originalText = options.originalText;
              var nextCharIndex = getNextNonSpaceNonCommentCharacterIndex$2(
                originalText,
                node,
                options
              );
              var nextChar = originalText.charAt(nextCharIndex); // if it is cut off by a parenthesis, we only account for one typed empty
              // line after that parenthesis

              if (nextChar == ")") {
                return isNextLineEmptyAfterIndex$1(
                  originalText,
                  nextCharIndex + 1,
                  options
                );
              }

              return isNextLineEmpty$4(originalText, node, options);
            }

            function rec(path) {
              var node = path.getValue();

              if (
                (node.type === "CallExpression" ||
                  node.type === "OptionalCallExpression") &&
                (isMemberish(node.callee) ||
                  node.callee.type === "CallExpression" ||
                  node.callee.type === "OptionalCallExpression")
              ) {
                printedNodes.unshift({
                  node: node,
                  printed: concat$11([
                    comments.printComments(
                      path,
                      function () {
                        return concat$11([
                          printOptionalToken(path),
                          printFunctionTypeParameters(path, options, print),
                          printArgumentsList(path, options, print),
                        ]);
                      },
                      options
                    ),
                    shouldInsertEmptyLineAfter(node) ? hardline$8 : "",
                  ]),
                });
                path.call(function (callee) {
                  return rec(callee);
                }, "callee");
              } else if (isMemberish(node)) {
                printedNodes.unshift({
                  node: node,
                  needsParens: needsParens_1(path, options),
                  printed: comments.printComments(
                    path,
                    function () {
                      return node.type === "OptionalMemberExpression" ||
                        node.type === "MemberExpression"
                        ? printMemberLookup(path, options, print)
                        : printBindExpressionCallee(path, options, print);
                    },
                    options
                  ),
                });
                path.call(function (object) {
                  return rec(object);
                }, "object");
              } else if (node.type === "TSNonNullExpression") {
                printedNodes.unshift({
                  node: node,
                  printed: comments.printComments(
                    path,
                    function () {
                      return "!";
                    },
                    options
                  ),
                });
                path.call(function (expression) {
                  return rec(expression);
                }, "expression");
              } else {
                printedNodes.unshift({
                  node: node,
                  printed: path.call(print),
                });
              }
            } // Note: the comments of the root node have already been printed, so we
            // need to extract this first call without printing them as they would
            // if handled inside of the recursive call.

            var node = path.getValue();
            printedNodes.unshift({
              node: node,
              printed: concat$11([
                printOptionalToken(path),
                printFunctionTypeParameters(path, options, print),
                printArgumentsList(path, options, print),
              ]),
            });
            path.call(function (callee) {
              return rec(callee);
            }, "callee"); // Once we have a linear list of printed nodes, we want to create groups out
            // of it.
            //
            //   a().b.c().d().e
            // will be grouped as
            //   [
            //     [Identifier, CallExpression],
            //     [MemberExpression, MemberExpression, CallExpression],
            //     [MemberExpression, CallExpression],
            //     [MemberExpression],
            //   ]
            // so that we can print it as
            //   a()
            //     .b.c()
            //     .d()
            //     .e
            // The first group is the first node followed by
            //   - as many CallExpression as possible
            //       < fn()()() >.something()
            //   - as many array acessors as possible
            //       < fn()[0][1][2] >.something()
            //   - then, as many MemberExpression as possible but the last one
            //       < this.items >.something()

            var groups = [];
            var currentGroup = [printedNodes[0]];
            var i = 1;

            for (; i < printedNodes.length; ++i) {
              if (
                printedNodes[i].node.type === "TSNonNullExpression" ||
                printedNodes[i].node.type === "OptionalCallExpression" ||
                printedNodes[i].node.type === "CallExpression" ||
                ((printedNodes[i].node.type === "MemberExpression" ||
                  printedNodes[i].node.type === "OptionalMemberExpression") &&
                  printedNodes[i].node.computed &&
                  isNumericLiteral(printedNodes[i].node.property))
              ) {
                currentGroup.push(printedNodes[i]);
              } else {
                break;
              }
            }

            if (
              printedNodes[0].node.type !== "CallExpression" &&
              printedNodes[0].node.type !== "OptionalCallExpression"
            ) {
              for (; i + 1 < printedNodes.length; ++i) {
                if (
                  isMemberish(printedNodes[i].node) &&
                  isMemberish(printedNodes[i + 1].node)
                ) {
                  currentGroup.push(printedNodes[i]);
                } else {
                  break;
                }
              }
            }

            groups.push(currentGroup);
            currentGroup = []; // Then, each following group is a sequence of MemberExpression followed by
            // a sequence of CallExpression. To compute it, we keep adding things to the
            // group until we has seen a CallExpression in the past and reach a
            // MemberExpression

            var hasSeenCallExpression = false;

            for (; i < printedNodes.length; ++i) {
              if (hasSeenCallExpression && isMemberish(printedNodes[i].node)) {
                // [0] should be appended at the end of the group instead of the
                // beginning of the next one
                if (
                  printedNodes[i].node.computed &&
                  isNumericLiteral(printedNodes[i].node.property)
                ) {
                  currentGroup.push(printedNodes[i]);
                  continue;
                }

                groups.push(currentGroup);
                currentGroup = [];
                hasSeenCallExpression = false;
              }

              if (
                printedNodes[i].node.type === "CallExpression" ||
                printedNodes[i].node.type === "OptionalCallExpression"
              ) {
                hasSeenCallExpression = true;
              }

              currentGroup.push(printedNodes[i]);

              if (
                printedNodes[i].node.comments &&
                printedNodes[i].node.comments.some(function (comment) {
                  return comment.trailing;
                })
              ) {
                groups.push(currentGroup);
                currentGroup = [];
                hasSeenCallExpression = false;
              }
            }

            if (currentGroup.length > 0) {
              groups.push(currentGroup);
            } // There are cases like Object.keys(), Observable.of(), _.values() where
            // they are the subject of all the chained calls and therefore should
            // be kept on the same line:
            //
            //   Object.keys(items)
            //     .filter(x => x)
            //     .map(x => x)
            //
            // In order to detect those cases, we use an heuristic: if the first
            // node is an identifier with the name starting with a capital
            // letter or just a sequence of _$. The rationale is that they are
            // likely to be factories.

            function isFactory(name) {
              return /^[A-Z]|^[_$]+$/.test(name);
            } // In case the Identifier is shorter than tab width, we can keep the
            // first call in a single line, if it's an ExpressionStatement.
            //
            //   d3.scaleLinear()
            //     .domain([0, 100])
            //     .range([0, width]);
            //

            function isShort(name) {
              return name.length <= options.tabWidth;
            }

            function shouldNotWrap(groups) {
              var parent = path.getParentNode();
              var isExpression =
                parent && parent.type === "ExpressionStatement";
              var hasComputed = groups[1].length && groups[1][0].node.computed;

              if (groups[0].length === 1) {
                var firstNode = groups[0][0].node;
                return (
                  firstNode.type === "ThisExpression" ||
                  (firstNode.type === "Identifier" &&
                    (isFactory(firstNode.name) ||
                      (isExpression && isShort(firstNode.name)) ||
                      hasComputed))
                );
              }

              var lastNode = getLast$3(groups[0]).node;
              return (
                (lastNode.type === "MemberExpression" ||
                  lastNode.type === "OptionalMemberExpression") &&
                lastNode.property.type === "Identifier" &&
                (isFactory(lastNode.property.name) || hasComputed)
              );
            }

            var shouldMerge =
              groups.length >= 2 &&
              !groups[1][0].node.comments &&
              shouldNotWrap(groups);

            function printGroup(printedGroup) {
              var printed = printedGroup.map(function (tuple) {
                return tuple.printed;
              }); // Checks if the last node (i.e. the parent node) needs parens and print
              // accordingly

              if (
                printedGroup.length > 0 &&
                printedGroup[printedGroup.length - 1].needsParens
              ) {
                return concat$11(
                  ["("].concat(_toConsumableArray(printed), [")"])
                );
              }

              return concat$11(printed);
            }

            function printIndentedGroup(groups) {
              if (groups.length === 0) {
                return "";
              }

              return indent$6(
                group$10(
                  concat$11([
                    hardline$8,
                    join$7(hardline$8, groups.map(printGroup)),
                  ])
                )
              );
            }

            var printedGroups = groups.map(printGroup);
            var oneLine = concat$11(printedGroups);
            var cutoff = shouldMerge ? 3 : 2;
            var flatGroups = groups
              .slice(0, cutoff)
              .reduce(function (res, group) {
                return res.concat(group);
              }, []);
            var hasComment =
              flatGroups.slice(1, -1).some(function (node) {
                return hasLeadingComment(node.node);
              }) ||
              flatGroups.slice(0, -1).some(function (node) {
                return hasTrailingComment(node.node);
              }) ||
              (groups[cutoff] && hasLeadingComment(groups[cutoff][0].node)); // If we only have a single `.`, we shouldn't do anything fancy and just
            // render everything concatenated together.

            if (groups.length <= cutoff && !hasComment) {
              return group$10(oneLine);
            } // Find out the last node in the first group and check if it has an
            // empty line after

            var lastNodeBeforeIndent = getLast$3(
              shouldMerge ? groups.slice(1, 2)[0] : groups[0]
            ).node;
            var shouldHaveEmptyLineBeforeIndent =
              lastNodeBeforeIndent.type !== "CallExpression" &&
              lastNodeBeforeIndent.type !== "OptionalCallExpression" &&
              shouldInsertEmptyLineAfter(lastNodeBeforeIndent);
            var expanded = concat$11([
              printGroup(groups[0]),
              shouldMerge ? concat$11(groups.slice(1, 2).map(printGroup)) : "",
              shouldHaveEmptyLineBeforeIndent ? hardline$8 : "",
              printIndentedGroup(groups.slice(shouldMerge ? 2 : 1)),
            ]);
            var callExpressions = printedNodes
              .map(function (_ref) {
                var node = _ref.node;
                return node;
              })
              .filter(isCallOrOptionalCallExpression); // We don't want to print in one line if there's:
            //  * A comment.
            //  * 3 or more chained calls.
            //  * Any group but the last one has a hard line.
            // If the last group is a function it's okay to inline if it fits.

            if (
              hasComment ||
              callExpressions.length >= 3 ||
              printedGroups.slice(0, -1).some(willBreak$1) ||
              /**
               *     scopes.filter(scope => scope.value !== '').map((scope, i) => {
               *       // multi line content
               *     })
               */
              ((function (lastGroupDoc, lastGroupNode) {
                return (
                  isCallOrOptionalCallExpression(lastGroupNode) &&
                  willBreak$1(lastGroupDoc)
                );
              })(getLast$3(printedGroups), getLast$3(getLast$3(groups)).node) &&
                callExpressions.slice(0, -1).some(function (n) {
                  return n.arguments.some(isFunctionOrArrowExpression);
                }))
            ) {
              return group$10(expanded);
            }

            return concat$11([
              // We only need to check `oneLine` because if `expanded` is chosen
              // that means that the parent group has already been broken
              // naturally
              willBreak$1(oneLine) || shouldHaveEmptyLineBeforeIndent
                ? breakParent$3
                : "",
              conditionalGroup$1([oneLine, expanded]),
            ]);
          }

          function isCallOrOptionalCallExpression(node) {
            return (
              node.type === "CallExpression" ||
              node.type === "OptionalCallExpression"
            );
          }

          function isJSXNode(node) {
            return node.type === "JSXElement" || node.type === "JSXFragment";
          }

          function isEmptyJSXElement(node) {
            if (node.children.length === 0) {
              return true;
            }

            if (node.children.length > 1) {
              return false;
            } // if there is one text child and does not contain any meaningful text
            // we can treat the element as empty.

            var child = node.children[0];
            return isLiteral(child) && !isMeaningfulJSXText(child);
          } // Only space, newline, carriage return, and tab are treated as whitespace
          // inside JSX.

          var jsxWhitespaceChars = " \n\r\t";
          var containsNonJsxWhitespaceRegex = new RegExp(
            "[^" + jsxWhitespaceChars + "]"
          );
          var matchJsxWhitespaceRegex = new RegExp(
            "([" + jsxWhitespaceChars + "]+)"
          ); // Meaningful if it contains non-whitespace characters,
          // or it contains whitespace without a new line.

          function isMeaningfulJSXText(node) {
            return (
              isLiteral(node) &&
              (containsNonJsxWhitespaceRegex.test(rawText(node)) ||
                !/\n/.test(rawText(node)))
            );
          }

          function conditionalExpressionChainContainsJSX(node) {
            return Boolean(getConditionalChainContents(node).find(isJSXNode));
          } // If we have nested conditional expressions, we want to print them in JSX mode
          // if there's at least one JSXElement somewhere in the tree.
          //
          // A conditional expression chain like this should be printed in normal mode,
          // because there aren't JSXElements anywhere in it:
          //
          // isA ? "A" : isB ? "B" : isC ? "C" : "Unknown";
          //
          // But a conditional expression chain like this should be printed in JSX mode,
          // because there is a JSXElement in the last ConditionalExpression:
          //
          // isA ? "A" : isB ? "B" : isC ? "C" : <span className="warning">Unknown</span>;
          //
          // This type of ConditionalExpression chain is structured like this in the AST:
          //
          // ConditionalExpression {
          //   test: ...,
          //   consequent: ...,
          //   alternate: ConditionalExpression {
          //     test: ...,
          //     consequent: ...,
          //     alternate: ConditionalExpression {
          //       test: ...,
          //       consequent: ...,
          //       alternate: ...,
          //     }
          //   }
          // }
          //
          // We want to traverse over that shape and convert it into a flat structure so
          // that we can find if there's a JSXElement somewhere inside.

          function getConditionalChainContents(node) {
            // Given this code:
            //
            // // Using a ConditionalExpression as the consequent is uncommon, but should
            // // be handled.
            // A ? B : C ? D : E ? F ? G : H : I
            //
            // which has this AST:
            //
            // ConditionalExpression {
            //   test: Identifier(A),
            //   consequent: Identifier(B),
            //   alternate: ConditionalExpression {
            //     test: Identifier(C),
            //     consequent: Identifier(D),
            //     alternate: ConditionalExpression {
            //       test: Identifier(E),
            //       consequent: ConditionalExpression {
            //         test: Identifier(F),
            //         consequent: Identifier(G),
            //         alternate: Identifier(H),
            //       },
            //       alternate: Identifier(I),
            //     }
            //   }
            // }
            //
            // we should return this Array:
            //
            // [
            //   Identifier(A),
            //   Identifier(B),
            //   Identifier(C),
            //   Identifier(D),
            //   Identifier(E),
            //   Identifier(F),
            //   Identifier(G),
            //   Identifier(H),
            //   Identifier(I)
            // ];
            //
            // This loses the information about whether each node was the test,
            // consequent, or alternate, but we don't care about that here- we are only
            // flattening this structure to find if there's any JSXElements inside.
            var nonConditionalExpressions = [];

            function recurse(node) {
              if (node.type === "ConditionalExpression") {
                recurse(node.test);
                recurse(node.consequent);
                recurse(node.alternate);
              } else {
                nonConditionalExpressions.push(node);
              }
            }

            recurse(node);
            return nonConditionalExpressions;
          } // Detect an expression node representing `{" "}`

          function isJSXWhitespaceExpression(node) {
            return (
              node.type === "JSXExpressionContainer" &&
              isLiteral(node.expression) &&
              node.expression.value === " " &&
              !node.expression.comments
            );
          }

          function separatorNoWhitespace(
            isFacebookTranslationTag,
            child,
            childNode,
            nextNode
          ) {
            if (isFacebookTranslationTag) {
              return "";
            }

            if (
              (childNode.type === "JSXElement" && !childNode.closingElement) ||
              (nextNode &&
                nextNode.type === "JSXElement" &&
                !nextNode.closingElement)
            ) {
              return child.length === 1 ? softline$5 : hardline$8;
            }

            return softline$5;
          }

          function separatorWithWhitespace(
            isFacebookTranslationTag,
            child,
            childNode,
            nextNode
          ) {
            if (isFacebookTranslationTag) {
              return hardline$8;
            }

            if (child.length === 1) {
              return (childNode.type === "JSXElement" &&
                !childNode.closingElement) ||
                (nextNode &&
                  nextNode.type === "JSXElement" &&
                  !nextNode.closingElement)
                ? hardline$8
                : softline$5;
            }

            return hardline$8;
          } // JSX Children are strange, mostly for two reasons:
          // 1. JSX reads newlines into string values, instead of skipping them like JS
          // 2. up to one whitespace between elements within a line is significant,
          //    but not between lines.
          //
          // Leading, trailing, and lone whitespace all need to
          // turn themselves into the rather ugly `{' '}` when breaking.
          //
          // We print JSX using the `fill` doc primitive.
          // This requires that we give it an array of alternating
          // content and whitespace elements.
          // To ensure this we add dummy `""` content elements as needed.

          function printJSXChildren(
            path,
            options,
            print,
            jsxWhitespace,
            isFacebookTranslationTag
          ) {
            var n = path.getValue();
            var children = []; // using `map` instead of `each` because it provides `i`

            path.map(function (childPath, i) {
              var child = childPath.getValue();

              if (isLiteral(child)) {
                var text = rawText(child); // Contains a non-whitespace character

                if (isMeaningfulJSXText(child)) {
                  var words = text.split(matchJsxWhitespaceRegex); // Starts with whitespace

                  if (words[0] === "") {
                    children.push("");
                    words.shift();

                    if (/\n/.test(words[0])) {
                      var next = n.children[i + 1];
                      children.push(
                        separatorWithWhitespace(
                          isFacebookTranslationTag,
                          words[1],
                          child,
                          next
                        )
                      );
                    } else {
                      children.push(jsxWhitespace);
                    }

                    words.shift();
                  }

                  var endWhitespace; // Ends with whitespace

                  if (getLast$3(words) === "") {
                    words.pop();
                    endWhitespace = words.pop();
                  } // This was whitespace only without a new line.

                  if (words.length === 0) {
                    return;
                  }

                  words.forEach(function (word, i) {
                    if (i % 2 === 1) {
                      children.push(line$8);
                    } else {
                      children.push(word);
                    }
                  });

                  if (endWhitespace !== undefined) {
                    if (/\n/.test(endWhitespace)) {
                      var _next = n.children[i + 1];
                      children.push(
                        separatorWithWhitespace(
                          isFacebookTranslationTag,
                          getLast$3(children),
                          child,
                          _next
                        )
                      );
                    } else {
                      children.push(jsxWhitespace);
                    }
                  } else {
                    var _next2 = n.children[i + 1];
                    children.push(
                      separatorNoWhitespace(
                        isFacebookTranslationTag,
                        getLast$3(children),
                        child,
                        _next2
                      )
                    );
                  }
                } else if (/\n/.test(text)) {
                  // Keep (up to one) blank line between tags/expressions/text.
                  // Note: We don't keep blank lines between text elements.
                  if (text.match(/\n/g).length > 1) {
                    children.push("");
                    children.push(hardline$8);
                  }
                } else {
                  children.push("");
                  children.push(jsxWhitespace);
                }
              } else {
                var printedChild = print(childPath);
                children.push(printedChild);
                var _next3 = n.children[i + 1];

                var directlyFollowedByMeaningfulText =
                  _next3 && isMeaningfulJSXText(_next3);

                if (directlyFollowedByMeaningfulText) {
                  var firstWord = rawText(_next3)
                    .trim()
                    .split(matchJsxWhitespaceRegex)[0];
                  children.push(
                    separatorNoWhitespace(
                      isFacebookTranslationTag,
                      firstWord,
                      child,
                      _next3
                    )
                  );
                } else {
                  children.push(hardline$8);
                }
              }
            }, "children");
            return children;
          } // JSX expands children from the inside-out, instead of the outside-in.
          // This is both to break children before attributes,
          // and to ensure that when children break, their parents do as well.
          //
          // Any element that is written without any newlines and fits on a single line
          // is left that way.
          // Not only that, any user-written-line containing multiple JSX siblings
          // should also be kept on one line if possible,
          // so each user-written-line is wrapped in its own group.
          //
          // Elements that contain newlines or don't fit on a single line (recursively)
          // are fully-split, using hardline and shouldBreak: true.
          //
          // To support that case properly, all leading and trailing spaces
          // are stripped from the list of children, and replaced with a single hardline.

          function printJSXElement(path, options, print) {
            var n = path.getValue();

            if (n.type === "JSXElement" && isEmptyJSXElement(n)) {
              return concat$11([
                path.call(print, "openingElement"),
                path.call(print, "closingElement"),
              ]);
            }

            var openingLines =
              n.type === "JSXElement"
                ? path.call(print, "openingElement")
                : path.call(print, "openingFragment");
            var closingLines =
              n.type === "JSXElement"
                ? path.call(print, "closingElement")
                : path.call(print, "closingFragment");

            if (
              n.children.length === 1 &&
              n.children[0].type === "JSXExpressionContainer" &&
              (n.children[0].expression.type === "TemplateLiteral" ||
                n.children[0].expression.type === "TaggedTemplateExpression")
            ) {
              return concat$11([
                openingLines,
                concat$11(path.map(print, "children")),
                closingLines,
              ]);
            } // Convert `{" "}` to text nodes containing a space.
            // This makes it easy to turn them into `jsxWhitespace` which
            // can then print as either a space or `{" "}` when breaking.

            n.children = n.children.map(function (child) {
              if (isJSXWhitespaceExpression(child)) {
                return {
                  type: "JSXText",
                  value: " ",
                  raw: " ",
                };
              }

              return child;
            });
            var containsTag = n.children.filter(isJSXNode).length > 0;
            var containsMultipleExpressions =
              n.children.filter(function (child) {
                return child.type === "JSXExpressionContainer";
              }).length > 1;
            var containsMultipleAttributes =
              n.type === "JSXElement" && n.openingElement.attributes.length > 1; // Record any breaks. Should never go from true to false, only false to true.

            var forcedBreak =
              willBreak$1(openingLines) ||
              containsTag ||
              containsMultipleAttributes ||
              containsMultipleExpressions;
            var rawJsxWhitespace = options.singleQuote ? "{' '}" : '{" "}';
            var jsxWhitespace = ifBreak$6(
              concat$11([rawJsxWhitespace, softline$5]),
              " "
            );
            var isFacebookTranslationTag =
              n.openingElement &&
              n.openingElement.name &&
              n.openingElement.name.name === "fbt";
            var children = printJSXChildren(
              path,
              options,
              print,
              jsxWhitespace,
              isFacebookTranslationTag
            );
            var containsText =
              n.children.filter(function (child) {
                return isMeaningfulJSXText(child);
              }).length > 0; // We can end up we multiple whitespace elements with empty string
            // content between them.
            // We need to remove empty whitespace and softlines before JSX whitespace
            // to get the correct output.

            for (var i = children.length - 2; i >= 0; i--) {
              var isPairOfEmptyStrings =
                children[i] === "" && children[i + 1] === "";
              var isPairOfHardlines =
                children[i] === hardline$8 &&
                children[i + 1] === "" &&
                children[i + 2] === hardline$8;
              var isLineFollowedByJSXWhitespace =
                (children[i] === softline$5 || children[i] === hardline$8) &&
                children[i + 1] === "" &&
                children[i + 2] === jsxWhitespace;
              var isJSXWhitespaceFollowedByLine =
                children[i] === jsxWhitespace &&
                children[i + 1] === "" &&
                (children[i + 2] === softline$5 ||
                  children[i + 2] === hardline$8);
              var isDoubleJSXWhitespace =
                children[i] === jsxWhitespace &&
                children[i + 1] === "" &&
                children[i + 2] === jsxWhitespace;
              var isPairOfHardOrSoftLines =
                (children[i] === softline$5 &&
                  children[i + 1] === "" &&
                  children[i + 2] === hardline$8) ||
                (children[i] === hardline$8 &&
                  children[i + 1] === "" &&
                  children[i + 2] === softline$5);

              if (
                (isPairOfHardlines && containsText) ||
                isPairOfEmptyStrings ||
                isLineFollowedByJSXWhitespace ||
                isDoubleJSXWhitespace ||
                isPairOfHardOrSoftLines
              ) {
                children.splice(i, 2);
              } else if (isJSXWhitespaceFollowedByLine) {
                children.splice(i + 1, 2);
              }
            } // Trim trailing lines (or empty strings)

            while (
              children.length &&
              (isLineNext$1(getLast$3(children)) ||
                isEmpty$1(getLast$3(children)))
            ) {
              children.pop();
            } // Trim leading lines (or empty strings)

            while (
              children.length &&
              (isLineNext$1(children[0]) || isEmpty$1(children[0])) &&
              (isLineNext$1(children[1]) || isEmpty$1(children[1]))
            ) {
              children.shift();
              children.shift();
            } // Tweak how we format children if outputting this element over multiple lines.
            // Also detect whether we will force this element to output over multiple lines.

            var multilineChildren = [];
            children.forEach(function (child, i) {
              // There are a number of situations where we need to ensure we display
              // whitespace as `{" "}` when outputting this element over multiple lines.
              if (child === jsxWhitespace) {
                if (i === 1 && children[i - 1] === "") {
                  if (children.length === 2) {
                    // Solitary whitespace
                    multilineChildren.push(rawJsxWhitespace);
                    return;
                  } // Leading whitespace

                  multilineChildren.push(
                    concat$11([rawJsxWhitespace, hardline$8])
                  );
                  return;
                } else if (i === children.length - 1) {
                  // Trailing whitespace
                  multilineChildren.push(rawJsxWhitespace);
                  return;
                } else if (
                  children[i - 1] === "" &&
                  children[i - 2] === hardline$8
                ) {
                  // Whitespace after line break
                  multilineChildren.push(rawJsxWhitespace);
                  return;
                }
              }

              multilineChildren.push(child);

              if (willBreak$1(child)) {
                forcedBreak = true;
              }
            }); // If there is text we use `fill` to fit as much onto each line as possible.
            // When there is no text (just tags and expressions) we use `group`
            // to output each on a separate line.

            var content = containsText
              ? fill$4(multilineChildren)
              : group$10(concat$11(multilineChildren), {
                  shouldBreak: true,
                });
            var multiLineElem = group$10(
              concat$11([
                openingLines,
                indent$6(concat$11([hardline$8, content])),
                hardline$8,
                closingLines,
              ])
            );

            if (forcedBreak) {
              return multiLineElem;
            }

            return conditionalGroup$1([
              group$10(
                concat$11([openingLines, concat$11(children), closingLines])
              ),
              multiLineElem,
            ]);
          }

          function maybeWrapJSXElementInParens(path, elem) {
            var parent = path.getParentNode();

            if (!parent) {
              return elem;
            }

            var NO_WRAP_PARENTS = {
              ArrayExpression: true,
              JSXAttribute: true,
              JSXElement: true,
              JSXExpressionContainer: true,
              JSXFragment: true,
              ExpressionStatement: true,
              CallExpression: true,
              OptionalCallExpression: true,
              ConditionalExpression: true,
              JsExpressionRoot: true,
            };

            if (NO_WRAP_PARENTS[parent.type]) {
              return elem;
            }

            var shouldBreak = matchAncestorTypes$1(path, [
              "ArrowFunctionExpression",
              "CallExpression",
              "JSXExpressionContainer",
            ]);
            return group$10(
              concat$11([
                ifBreak$6("("),
                indent$6(concat$11([softline$5, elem])),
                softline$5,
                ifBreak$6(")"),
              ]),
              {
                shouldBreak: shouldBreak,
              }
            );
          }

          function isBinaryish(node) {
            return (
              node.type === "BinaryExpression" ||
              node.type === "LogicalExpression" ||
              node.type === "NGPipeExpression"
            );
          }

          function isMemberish(node) {
            return (
              node.type === "MemberExpression" ||
              node.type === "OptionalMemberExpression" ||
              (node.type === "BindExpression" && node.object)
            );
          }

          function shouldInlineLogicalExpression(node) {
            if (node.type !== "LogicalExpression") {
              return false;
            }

            if (
              node.right.type === "ObjectExpression" &&
              node.right.properties.length !== 0
            ) {
              return true;
            }

            if (
              node.right.type === "ArrayExpression" &&
              node.right.elements.length !== 0
            ) {
              return true;
            }

            if (isJSXNode(node.right)) {
              return true;
            }

            return false;
          } // For binary expressions to be consistent, we need to group
          // subsequent operators with the same precedence level under a single
          // group. Otherwise they will be nested such that some of them break
          // onto new lines but not all. Operators with the same precedence
          // level should either all break or not. Because we group them by
          // precedence level and the AST is structured based on precedence
          // level, things are naturally broken up correctly, i.e. `&&` is
          // broken before `+`.

          function printBinaryishExpressions(
            path,
            print,
            options,
            isNested,
            isInsideParenthesis
          ) {
            var parts = [];
            var node = path.getValue(); // We treat BinaryExpression and LogicalExpression nodes the same.

            if (isBinaryish(node)) {
              // Put all operators with the same precedence level in the same
              // group. The reason we only need to do this with the `left`
              // expression is because given an expression like `1 + 2 - 3`, it
              // is always parsed like `((1 + 2) - 3)`, meaning the `left` side
              // is where the rest of the expression will exist. Binary
              // expressions on the right side mean they have a difference
              // precedence level and should be treated as a separate group, so
              // print them normally. (This doesn't hold for the `**` operator,
              // which is unique in that it is right-associative.)
              if (shouldFlatten$1(node.operator, node.left.operator)) {
                // Flatten them out by recursively calling this function.
                parts = parts.concat(
                  path.call(function (left) {
                    return printBinaryishExpressions(
                      left,
                      print,
                      options,
                      /* isNested */
                      true,
                      isInsideParenthesis
                    );
                  }, "left")
                );
              } else {
                parts.push(path.call(print, "left"));
              }

              var shouldInline = shouldInlineLogicalExpression(node);
              var lineBeforeOperator =
                (node.operator === "|>" ||
                  node.type === "NGPipeExpression" ||
                  (node.operator === "|" &&
                    options.parser === "__vue_expression")) &&
                !hasLeadingOwnLineComment(
                  options.originalText,
                  node.right,
                  options
                );
              var operator =
                node.type === "NGPipeExpression" ? "|" : node.operator;
              var rightSuffix =
                node.type === "NGPipeExpression" && node.arguments.length !== 0
                  ? group$10(
                      indent$6(
                        concat$11([
                          softline$5,
                          ": ",
                          join$7(
                            concat$11([softline$5, ":", ifBreak$6(" ")]),
                            path.map(print, "arguments").map(function (arg) {
                              return align$1(2, group$10(arg));
                            })
                          ),
                        ])
                      )
                    )
                  : "";
              var right = shouldInline
                ? concat$11([
                    operator,
                    " ",
                    path.call(print, "right"),
                    rightSuffix,
                  ])
                : concat$11([
                    lineBeforeOperator ? softline$5 : "",
                    operator,
                    lineBeforeOperator ? " " : line$8,
                    path.call(print, "right"),
                    rightSuffix,
                  ]); // If there's only a single binary expression, we want to create a group
              // in order to avoid having a small right part like -1 be on its own line.

              var parent = path.getParentNode();
              var shouldGroup =
                !(isInsideParenthesis && node.type === "LogicalExpression") &&
                parent.type !== node.type &&
                node.left.type !== node.type &&
                node.right.type !== node.type;
              parts.push(" ", shouldGroup ? group$10(right) : right); // The root comments are already printed, but we need to manually print
              // the other ones since we don't call the normal print on BinaryExpression,
              // only for the left and right parts

              if (isNested && node.comments) {
                parts = comments.printComments(
                  path,
                  function () {
                    return concat$11(parts);
                  },
                  options
                );
              }
            } else {
              // Our stopping case. Simply print the node normally.
              parts.push(path.call(print));
            }

            return parts;
          }

          function printAssignmentRight(
            leftNode,
            rightNode,
            printedRight,
            options
          ) {
            if (
              hasLeadingOwnLineComment(options.originalText, rightNode, options)
            ) {
              return indent$6(concat$11([hardline$8, printedRight]));
            }

            var canBreak =
              (isBinaryish(rightNode) &&
                !shouldInlineLogicalExpression(rightNode)) ||
              (rightNode.type === "ConditionalExpression" &&
                isBinaryish(rightNode.test) &&
                !shouldInlineLogicalExpression(rightNode.test)) ||
              rightNode.type === "StringLiteralTypeAnnotation" ||
              (rightNode.type === "ClassExpression" &&
                rightNode.decorators &&
                rightNode.decorators.length) ||
              ((leftNode.type === "Identifier" ||
                isStringLiteral(leftNode) ||
                leftNode.type === "MemberExpression") &&
                (isStringLiteral(rightNode) ||
                  isMemberExpressionChain(rightNode)) && // do not put values on a separate line from the key in json
                options.parser !== "json" &&
                options.parser !== "json5") ||
              rightNode.type === "SequenceExpression";

            if (canBreak) {
              return group$10(indent$6(concat$11([line$8, printedRight])));
            }

            return concat$11([" ", printedRight]);
          }

          function printAssignment(
            leftNode,
            printedLeft,
            operator,
            rightNode,
            printedRight,
            options
          ) {
            if (!rightNode) {
              return printedLeft;
            }

            var printed = printAssignmentRight(
              leftNode,
              rightNode,
              printedRight,
              options
            );
            return group$10(concat$11([printedLeft, operator, printed]));
          }

          function adjustClause(node, clause, forceSpace) {
            if (node.type === "EmptyStatement") {
              return ";";
            }

            if (node.type === "BlockStatement" || forceSpace) {
              return concat$11([" ", clause]);
            }

            return indent$6(concat$11([line$8, clause]));
          }

          function nodeStr(node, options, isFlowOrTypeScriptDirectiveLiteral) {
            var raw = rawText(node);
            var isDirectiveLiteral =
              isFlowOrTypeScriptDirectiveLiteral ||
              node.type === "DirectiveLiteral";
            return printString$2(raw, options, isDirectiveLiteral);
          }

          function printRegex(node) {
            var flags = node.flags.split("").sort().join("");
            return "/".concat(node.pattern, "/").concat(flags);
          }

          function isLastStatement(path) {
            var parent = path.getParentNode();

            if (!parent) {
              return true;
            }

            var node = path.getValue();
            var body = (parent.body || parent.consequent).filter(function (
              stmt
            ) {
              return stmt.type !== "EmptyStatement";
            });
            return body && body[body.length - 1] === node;
          }

          function hasLeadingComment(node) {
            return (
              node.comments &&
              node.comments.some(function (comment) {
                return comment.leading;
              })
            );
          }

          function hasTrailingComment(node) {
            return (
              node.comments &&
              node.comments.some(function (comment) {
                return comment.trailing;
              })
            );
          }

          function hasLeadingOwnLineComment(text, node, options) {
            if (isJSXNode(node)) {
              return hasNodeIgnoreComment$1(node);
            }

            var res =
              node.comments &&
              node.comments.some(function (comment) {
                return (
                  comment.leading && hasNewline$3(text, options.locEnd(comment))
                );
              });
            return res;
          }

          function isFlowAnnotationComment(text, typeAnnotation, options) {
            var start = options.locStart(typeAnnotation);
            var end = skipWhitespace$1(text, options.locEnd(typeAnnotation));
            return (
              text.substr(start, 2) === "/*" && text.substr(end, 2) === "*/"
            );
          }

          function exprNeedsASIProtection(path, options) {
            var node = path.getValue();
            var maybeASIProblem =
              needsParens_1(path, options) ||
              node.type === "ParenthesizedExpression" ||
              node.type === "TypeCastExpression" ||
              (node.type === "ArrowFunctionExpression" &&
                !shouldPrintParamsWithoutParens(path, options)) ||
              node.type === "ArrayExpression" ||
              node.type === "ArrayPattern" ||
              (node.type === "UnaryExpression" &&
                node.prefix &&
                (node.operator === "+" || node.operator === "-")) ||
              node.type === "TemplateLiteral" ||
              node.type === "TemplateElement" ||
              isJSXNode(node) ||
              (node.type === "BindExpression" && !node.object) ||
              node.type === "RegExpLiteral" ||
              (node.type === "Literal" && node.pattern) ||
              (node.type === "Literal" && node.regex);

            if (maybeASIProblem) {
              return true;
            }

            if (!hasNakedLeftSide(node)) {
              return false;
            }

            return path.call.apply(
              path,
              [
                function (childPath) {
                  return exprNeedsASIProtection(childPath, options);
                },
              ].concat(getLeftSidePathName(path, node))
            );
          }

          function stmtNeedsASIProtection(path, options) {
            var node = path.getNode();

            if (node.type !== "ExpressionStatement") {
              return false;
            }

            return path.call(function (childPath) {
              return exprNeedsASIProtection(childPath, options);
            }, "expression");
          }

          function classPropMayCauseASIProblems(path) {
            var node = path.getNode();

            if (node.type !== "ClassProperty") {
              return false;
            }

            var name = node.key && node.key.name; // this isn't actually possible yet with most parsers available today
            // so isn't properly tested yet.

            if (
              (name === "static" || name === "get" || name === "set") &&
              !node.value &&
              !node.typeAnnotation
            ) {
              return true;
            }
          }

          function classChildNeedsASIProtection(node) {
            if (!node) {
              return;
            }

            if (
              node.static ||
              node.accessibility // TypeScript
            ) {
              return false;
            }

            if (!node.computed) {
              var name = node.key && node.key.name;

              if (name === "in" || name === "instanceof") {
                return true;
              }
            }

            switch (node.type) {
              case "ClassProperty":
              case "TSAbstractClassProperty":
                return node.computed;

              case "MethodDefinition": // Flow

              case "TSAbstractMethodDefinition": // TypeScript

              case "ClassMethod":
              case "ClassPrivateMethod": {
                // Babel
                var isAsync = node.value ? node.value.async : node.async;
                var isGenerator = node.value
                  ? node.value.generator
                  : node.generator;

                if (isAsync || node.kind === "get" || node.kind === "set") {
                  return false;
                }

                if (node.computed || isGenerator) {
                  return true;
                }

                return false;
              }

              default:
                /* istanbul ignore next */
                return false;
            }
          } // This recurses the return argument, looking for the first token
          // (the leftmost leaf node) and, if it (or its parents) has any
          // leadingComments, returns true (so it can be wrapped in parens).

          function returnArgumentHasLeadingComment(options, argument) {
            if (
              hasLeadingOwnLineComment(options.originalText, argument, options)
            ) {
              return true;
            }

            if (hasNakedLeftSide(argument)) {
              var leftMost = argument;
              var newLeftMost;

              while ((newLeftMost = getLeftSide(leftMost))) {
                leftMost = newLeftMost;

                if (
                  hasLeadingOwnLineComment(
                    options.originalText,
                    leftMost,
                    options
                  )
                ) {
                  return true;
                }
              }
            }

            return false;
          }

          function isMemberExpressionChain(node) {
            if (
              node.type !== "MemberExpression" &&
              node.type !== "OptionalMemberExpression"
            ) {
              return false;
            }

            if (node.object.type === "Identifier") {
              return true;
            }

            return isMemberExpressionChain(node.object);
          } // Hack to differentiate between the following two which have the same ast
          // type T = { method: () => void };
          // type T = { method(): void };

          function isObjectTypePropertyAFunction(node, options) {
            return (
              (node.type === "ObjectTypeProperty" ||
                node.type === "ObjectTypeInternalSlot") &&
              node.value.type === "FunctionTypeAnnotation" &&
              !node.static &&
              !isFunctionNotation(node, options)
            );
          } // TODO: This is a bad hack and we need a better way to distinguish between
          // arrow functions and otherwise

          function isFunctionNotation(node, options) {
            return (
              isGetterOrSetter(node) || sameLocStart(node, node.value, options)
            );
          }

          function isGetterOrSetter(node) {
            return node.kind === "get" || node.kind === "set";
          }

          function sameLocStart(nodeA, nodeB, options) {
            return options.locStart(nodeA) === options.locStart(nodeB);
          } // Hack to differentiate between the following two which have the same ast
          // declare function f(a): void;
          // var f: (a) => void;

          function isTypeAnnotationAFunction(node, options) {
            return (
              (node.type === "TypeAnnotation" ||
                node.type === "TSTypeAnnotation") &&
              node.typeAnnotation.type === "FunctionTypeAnnotation" &&
              !node.static &&
              !sameLocStart(node, node.typeAnnotation, options)
            );
          }

          function isNodeStartingWithDeclare(node, options) {
            if (
              !(options.parser === "flow" || options.parser === "typescript")
            ) {
              return false;
            }

            return (
              options.originalText
                .slice(0, options.locStart(node))
                .match(/declare[ \t]*$/) ||
              options.originalText
                .slice(node.range[0], node.range[1])
                .startsWith("declare ")
            );
          }

          function shouldHugType(node) {
            if (isSimpleFlowType(node) || isObjectType(node)) {
              return true;
            }

            if (
              node.type === "UnionTypeAnnotation" ||
              node.type === "TSUnionType"
            ) {
              var voidCount = node.types.filter(function (n) {
                return (
                  n.type === "VoidTypeAnnotation" ||
                  n.type === "TSVoidKeyword" ||
                  n.type === "NullLiteralTypeAnnotation" ||
                  n.type === "TSNullKeyword"
                );
              }).length;
              var objectCount = node.types.filter(function (n) {
                return (
                  n.type === "ObjectTypeAnnotation" ||
                  n.type === "TSTypeLiteral" || // This is a bit aggressive but captures Array<{x}>
                  n.type === "GenericTypeAnnotation" ||
                  n.type === "TSTypeReference"
                );
              }).length;

              if (node.types.length - 1 === voidCount && objectCount > 0) {
                return true;
              }
            }

            return false;
          }

          function shouldHugArguments(fun) {
            return (
              fun &&
              fun.params &&
              fun.params.length === 1 &&
              !fun.params[0].comments &&
              (fun.params[0].type === "ObjectPattern" ||
                fun.params[0].type === "ArrayPattern" ||
                (fun.params[0].type === "Identifier" &&
                  fun.params[0].typeAnnotation &&
                  (fun.params[0].typeAnnotation.type === "TypeAnnotation" ||
                    fun.params[0].typeAnnotation.type === "TSTypeAnnotation") &&
                  isObjectType(fun.params[0].typeAnnotation.typeAnnotation)) ||
                (fun.params[0].type === "FunctionTypeParam" &&
                  isObjectType(fun.params[0].typeAnnotation)) ||
                (fun.params[0].type === "AssignmentPattern" &&
                  (fun.params[0].left.type === "ObjectPattern" ||
                    fun.params[0].left.type === "ArrayPattern") &&
                  (fun.params[0].right.type === "Identifier" ||
                    (fun.params[0].right.type === "ObjectExpression" &&
                      fun.params[0].right.properties.length === 0) ||
                    (fun.params[0].right.type === "ArrayExpression" &&
                      fun.params[0].right.elements.length === 0)))) &&
              !fun.rest
            );
          }

          function templateLiteralHasNewLines(template) {
            return template.quasis.some(function (quasi) {
              return quasi.value.raw.includes("\n");
            });
          }

          function isTemplateOnItsOwnLine(n, text, options) {
            return (
              ((n.type === "TemplateLiteral" &&
                templateLiteralHasNewLines(n)) ||
                (n.type === "TaggedTemplateExpression" &&
                  templateLiteralHasNewLines(n.quasi))) &&
              !hasNewline$3(text, options.locStart(n), {
                backwards: true,
              })
            );
          }

          function printArrayItems(path, options, printPath, print) {
            var printedElements = [];
            var separatorParts = [];
            path.each(function (childPath) {
              printedElements.push(concat$11(separatorParts));
              printedElements.push(group$10(print(childPath)));
              separatorParts = [",", line$8];

              if (
                childPath.getValue() &&
                isNextLineEmpty$4(
                  options.originalText,
                  childPath.getValue(),
                  options
                )
              ) {
                separatorParts.push(softline$5);
              }
            }, printPath);
            return concat$11(printedElements);
          }

          function hasDanglingComments(node) {
            return (
              node.comments &&
              node.comments.some(function (comment) {
                return !comment.leading && !comment.trailing;
              })
            );
          }

          function needsHardlineAfterDanglingComment(node) {
            if (!node.comments) {
              return false;
            }

            var lastDanglingComment = getLast$3(
              node.comments.filter(function (comment) {
                return !comment.leading && !comment.trailing;
              })
            );
            return (
              lastDanglingComment &&
              !comments$3.isBlockComment(lastDanglingComment)
            );
          }

          function isLiteral(node) {
            return (
              node.type === "BooleanLiteral" ||
              node.type === "DirectiveLiteral" ||
              node.type === "Literal" ||
              node.type === "NullLiteral" ||
              node.type === "NumericLiteral" ||
              node.type === "RegExpLiteral" ||
              node.type === "StringLiteral" ||
              node.type === "TemplateLiteral" ||
              node.type === "TSTypeLiteral" ||
              node.type === "JSXText"
            );
          }

          function isStringPropSafeToCoerceToIdentifier(node, options) {
            return (
              isStringLiteral(node.key) &&
              isIdentifierName(node.key.value) &&
              options.parser !== "json" &&
              !(
                options.parser === "typescript" && node.type === "ClassProperty"
              )
            );
          }

          function isNumericLiteral(node) {
            return (
              node.type === "NumericLiteral" ||
              (node.type === "Literal" && typeof node.value === "number")
            );
          }

          function isStringLiteral(node) {
            return (
              node.type === "StringLiteral" ||
              (node.type === "Literal" && typeof node.value === "string")
            );
          }

          function isObjectType(n) {
            return (
              n.type === "ObjectTypeAnnotation" || n.type === "TSTypeLiteral"
            );
          }

          var unitTestRe = /^(skip|[fx]?(it|describe|test))$/; // eg; `describe("some string", (done) => {})`

          function isTestCall(n, parent) {
            if (n.type !== "CallExpression") {
              return false;
            }

            if (n.arguments.length === 1) {
              if (isAngularTestWrapper(n) && parent && isTestCall(parent)) {
                return isFunctionOrArrowExpression(n.arguments[0]);
              }

              if (isUnitTestSetUp(n)) {
                return isAngularTestWrapper(n.arguments[0]);
              }
            } else if (n.arguments.length === 2 || n.arguments.length === 3) {
              if (
                ((n.callee.type === "Identifier" &&
                  unitTestRe.test(n.callee.name)) ||
                  isSkipOrOnlyBlock(n)) &&
                (isTemplateLiteral(n.arguments[0]) ||
                  isStringLiteral(n.arguments[0]))
              ) {
                // it("name", () => { ... }, 2500)
                if (n.arguments[2] && !isNumericLiteral(n.arguments[2])) {
                  return false;
                }

                return (
                  (n.arguments.length === 2
                    ? isFunctionOrArrowExpression(n.arguments[1])
                    : isFunctionOrArrowExpressionWithBody(n.arguments[1]) &&
                      n.arguments[1].params.length <= 1) ||
                  isAngularTestWrapper(n.arguments[1])
                );
              }
            }

            return false;
          }

          function isSkipOrOnlyBlock(node) {
            return (
              (node.callee.type === "MemberExpression" ||
                node.callee.type === "OptionalMemberExpression") &&
              node.callee.object.type === "Identifier" &&
              node.callee.property.type === "Identifier" &&
              unitTestRe.test(node.callee.object.name) &&
              (node.callee.property.name === "only" ||
                node.callee.property.name === "skip")
            );
          }

          function isTemplateLiteral(node) {
            return node.type === "TemplateLiteral";
          } // `inject` is used in AngularJS 1.x, `async` in Angular 2+
          // example: https://docs.angularjs.org/guide/unit-testing#using-beforeall-

          function isAngularTestWrapper(node) {
            return (
              (node.type === "CallExpression" ||
                node.type === "OptionalCallExpression") &&
              node.callee.type === "Identifier" &&
              (node.callee.name === "async" ||
                node.callee.name === "inject" ||
                node.callee.name === "fakeAsync")
            );
          }

          function isFunctionOrArrowExpression(node) {
            return (
              node.type === "FunctionExpression" ||
              node.type === "ArrowFunctionExpression"
            );
          }

          function isFunctionOrArrowExpressionWithBody(node) {
            return (
              node.type === "FunctionExpression" ||
              (node.type === "ArrowFunctionExpression" &&
                node.body.type === "BlockStatement")
            );
          }

          function isUnitTestSetUp(n) {
            var unitTestSetUpRe = /^(before|after)(Each|All)$/;
            return (
              n.callee.type === "Identifier" &&
              unitTestSetUpRe.test(n.callee.name) &&
              n.arguments.length === 1
            );
          }

          function isTheOnlyJSXElementInMarkdown(options, path) {
            if (
              options.parentParser !== "markdown" &&
              options.parentParser !== "mdx"
            ) {
              return false;
            }

            var node = path.getNode();

            if (!node.expression || !isJSXNode(node.expression)) {
              return false;
            }

            var parent = path.getParentNode();
            return parent.type === "Program" && parent.body.length == 1;
          }

          function willPrintOwnComments(
            path
            /*, options */
          ) {
            var node = path.getValue();
            var parent = path.getParentNode();
            return (
              ((node &&
                (isJSXNode(node) ||
                  hasFlowShorthandAnnotationComment(node) ||
                  (parent &&
                    parent.type === "CallExpression" &&
                    (hasFlowAnnotationComment(node.leadingComments) ||
                      hasFlowAnnotationComment(node.trailingComments))))) ||
                (parent &&
                  (parent.type === "JSXSpreadAttribute" ||
                    parent.type === "JSXSpreadChild" ||
                    parent.type === "UnionTypeAnnotation" ||
                    parent.type === "TSUnionType" ||
                    ((parent.type === "ClassDeclaration" ||
                      parent.type === "ClassExpression") &&
                      parent.superClass === node)))) &&
              !hasIgnoreComment$3(path)
            );
          }

          function canAttachComment$1(node) {
            return (
              node.type &&
              node.type !== "CommentBlock" &&
              node.type !== "CommentLine" &&
              node.type !== "Line" &&
              node.type !== "Block" &&
              node.type !== "EmptyStatement" &&
              node.type !== "TemplateElement" &&
              node.type !== "Import"
            );
          }

          function printComment$2(commentPath, options) {
            var comment = commentPath.getValue();

            switch (comment.type) {
              case "CommentBlock":
              case "Block": {
                if (isIndentableBlockComment(comment)) {
                  var printed = printIndentableBlockComment(comment); // We need to prevent an edge case of a previous trailing comment
                  // printed as a `lineSuffix` which causes the comments to be
                  // interleaved. See https://github.com/prettier/prettier/issues/4412

                  if (
                    comment.trailing &&
                    !hasNewline$3(
                      options.originalText,
                      options.locStart(comment),
                      {
                        backwards: true,
                      }
                    )
                  ) {
                    return concat$11([hardline$8, printed]);
                  }

                  return printed;
                }

                var isInsideFlowComment =
                  options.originalText.substr(
                    options.locEnd(comment) - 3,
                    3
                  ) === "*-/";
                return (
                  "/*" + comment.value + (isInsideFlowComment ? "*-/" : "*/")
                );
              }

              case "CommentLine":
              case "Line":
                // Print shebangs with the proper comment characters
                if (
                  options.originalText
                    .slice(options.locStart(comment))
                    .startsWith("#!")
                ) {
                  return "#!" + comment.value.trimRight();
                }

                return "//" + comment.value.trimRight();

              default:
                throw new Error("Not a comment: " + JSON.stringify(comment));
            }
          }

          function isIndentableBlockComment(comment) {
            // If the comment has multiple lines and every line starts with a star
            // we can fix the indentation of each line. The stars in the `/*` and
            // `*/` delimiters are not included in the comment value, so add them
            // back first.
            var lines = "*".concat(comment.value, "*").split("\n");
            return (
              lines.length > 1 &&
              lines.every(function (line) {
                return line.trim()[0] === "*";
              })
            );
          }

          function printIndentableBlockComment(comment) {
            var lines = comment.value.split("\n");
            return concat$11([
              "/*",
              join$7(
                hardline$8,
                lines.map(function (line, index) {
                  return index === 0
                    ? line.trimRight()
                    : " " +
                        (index < lines.length - 1
                          ? line.trim()
                          : line.trimLeft());
                })
              ),
              "*/",
            ]);
          }

          function rawText(node) {
            return node.extra ? node.extra.raw : node.raw;
          }

          function identity$1(x) {
            return x;
          }

          var printerEstree = {
            preprocess: preprocess_1$2,
            print: genericPrint$3,
            embed: embed_1$2,
            insertPragma: insertPragma$7,
            massageAstNode: clean_1$2,
            hasPrettierIgnore: hasPrettierIgnore$2,
            willPrintOwnComments: willPrintOwnComments,
            canAttachComment: canAttachComment$1,
            printComment: printComment$2,
            isBlockComment: comments$3.isBlockComment,
            handleComments: {
              ownLine: comments$3.handleOwnLineComment,
              endOfLine: comments$3.handleEndOfLineComment,
              remaining: comments$3.handleRemainingComment,
            },
          };

          var _require$$0$builders$7 = doc.builders;
          var concat$14 = _require$$0$builders$7.concat;
          var hardline$10 = _require$$0$builders$7.hardline;
          var indent$8 = _require$$0$builders$7.indent;
          var join$10 = _require$$0$builders$7.join;

          function genericPrint$4(path, options, print) {
            var node = path.getValue();

            switch (node.type) {
              case "JsonRoot":
                return concat$14([path.call(print, "node"), hardline$10]);

              case "ArrayExpression":
                return node.elements.length === 0
                  ? "[]"
                  : concat$14([
                      "[",
                      indent$8(
                        concat$14([
                          hardline$10,
                          join$10(
                            concat$14([",", hardline$10]),
                            path.map(print, "elements")
                          ),
                        ])
                      ),
                      hardline$10,
                      "]",
                    ]);

              case "ObjectExpression":
                return node.properties.length === 0
                  ? "{}"
                  : concat$14([
                      "{",
                      indent$8(
                        concat$14([
                          hardline$10,
                          join$10(
                            concat$14([",", hardline$10]),
                            path.map(print, "properties")
                          ),
                        ])
                      ),
                      hardline$10,
                      "}",
                    ]);

              case "ObjectProperty":
                return concat$14([
                  path.call(print, "key"),
                  ": ",
                  path.call(print, "value"),
                ]);

              case "UnaryExpression":
                return concat$14([
                  node.operator === "+" ? "" : node.operator,
                  path.call(print, "argument"),
                ]);

              case "NullLiteral":
                return "null";

              case "BooleanLiteral":
                return node.value ? "true" : "false";

              case "StringLiteral":
              case "NumericLiteral":
                return JSON.stringify(node.value);

              case "Identifier":
                return JSON.stringify(node.name);

              default:
                /* istanbul ignore next */
                throw new Error("unknown type: " + JSON.stringify(node.type));
            }
          }

          function clean$9(
            node,
            newNode
            /*, parent*/
          ) {
            delete newNode.start;
            delete newNode.end;
            delete newNode.extra;
            delete newNode.loc;
            delete newNode.comments;

            if (node.type === "Identifier") {
              return {
                type: "StringLiteral",
                value: node.name,
              };
            }

            if (node.type === "UnaryExpression" && node.operator === "+") {
              return newNode.argument;
            }
          }

          var printerEstreeJson = {
            preprocess: preprocess_1$2,
            print: genericPrint$4,
            massageAstNode: clean$9,
          };

          var CATEGORY_JAVASCRIPT = "JavaScript"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js

          var options$12 = {
            arrowParens: {
              since: "1.9.0",
              category: CATEGORY_JAVASCRIPT,
              type: "choice",
              default: "avoid",
              description:
                "Include parentheses around a sole arrow function parameter.",
              choices: [
                {
                  value: "avoid",
                  description: "Omit parens when possible. Example: `x => x`",
                },
                {
                  value: "always",
                  description: "Always include parens. Example: `(x) => x`",
                },
              ],
            },
            bracketSpacing: commonOptions.bracketSpacing,
            jsxBracketSameLine: {
              since: "0.17.0",
              category: CATEGORY_JAVASCRIPT,
              type: "boolean",
              default: false,
              description: "Put > on the last line instead of at a new line.",
            },
            semi: {
              since: "1.0.0",
              category: CATEGORY_JAVASCRIPT,
              type: "boolean",
              default: true,
              description: "Print semicolons.",
              oppositeDescription:
                "Do not print semicolons, except at the beginning of lines which may need them.",
            },
            singleQuote: commonOptions.singleQuote,
            jsxSingleQuote: {
              since: "1.15.0",
              category: CATEGORY_JAVASCRIPT,
              type: "boolean",
              default: false,
              description: "Use single quotes in JSX.",
            },
            quoteProps: {
              since: "1.17.0",
              category: CATEGORY_JAVASCRIPT,
              type: "choice",
              default: "as-needed",
              description: "Change when properties in objects are quoted.",
              choices: [
                {
                  value: "as-needed",
                  description:
                    "Only add quotes around object properties where required.",
                },
                {
                  value: "consistent",
                  description:
                    "If at least one property in an object requires quotes, quote all properties.",
                },
                {
                  value: "preserve",
                  description:
                    "Respect the input use of quotes in object properties.",
                },
              ],
            },
            trailingComma: {
              since: "0.0.0",
              category: CATEGORY_JAVASCRIPT,
              type: "choice",
              default: [
                {
                  since: "0.0.0",
                  value: false,
                },
                {
                  since: "0.19.0",
                  value: "none",
                },
              ],
              description:
                "Print trailing commas wherever possible when multi-line.",
              choices: [
                {
                  value: "none",
                  description: "No trailing commas.",
                },
                {
                  value: "es5",
                  description:
                    "Trailing commas where valid in ES5 (objects, arrays, etc.)",
                },
                {
                  value: "all",
                  description:
                    "Trailing commas wherever possible (including function arguments).",
                },
                {
                  value: true,
                  deprecated: "0.19.0",
                  redirect: "es5",
                },
                {
                  value: false,
                  deprecated: "0.19.0",
                  redirect: "none",
                },
              ],
            },
          };

          var name$9 = "JavaScript";
          var type$8 = "programming";
          var tmScope$8 = "source.js";
          var aceMode$8 = "javascript";
          var codemirrorMode$4 = "javascript";
          var codemirrorMimeType$4 = "text/javascript";
          var color$3 = "#f1e05a";
          var aliases$2 = ["js", "node"];
          var extensions$8 = [
            ".js",
            "._js",
            ".bones",
            ".es",
            ".es6",
            ".frag",
            ".gs",
            ".jake",
            ".jsb",
            ".jscad",
            ".jsfl",
            ".jsm",
            ".jss",
            ".mjs",
            ".njs",
            ".pac",
            ".sjs",
            ".ssjs",
            ".xsjs",
            ".xsjslib",
          ];
          var filenames = ["Jakefile"];
          var interpreters = ["node"];
          var languageId$8 = 183;
          var javascript = {
            name: name$9,
            type: type$8,
            tmScope: tmScope$8,
            aceMode: aceMode$8,
            codemirrorMode: codemirrorMode$4,
            codemirrorMimeType: codemirrorMimeType$4,
            color: color$3,
            aliases: aliases$2,
            extensions: extensions$8,
            filenames: filenames,
            interpreters: interpreters,
            languageId: languageId$8,
          };

          var javascript$1 = Object.freeze({
            name: name$9,
            type: type$8,
            tmScope: tmScope$8,
            aceMode: aceMode$8,
            codemirrorMode: codemirrorMode$4,
            codemirrorMimeType: codemirrorMimeType$4,
            color: color$3,
            aliases: aliases$2,
            extensions: extensions$8,
            filenames: filenames,
            interpreters: interpreters,
            languageId: languageId$8,
            default: javascript,
          });

          var name$10 = "JSX";
          var type$9 = "programming";
          var group$12 = "JavaScript";
          var extensions$9 = [".jsx"];
          var tmScope$9 = "source.js.jsx";
          var aceMode$9 = "javascript";
          var codemirrorMode$5 = "jsx";
          var codemirrorMimeType$5 = "text/jsx";
          var languageId$9 = 178;
          var jsx = {
            name: name$10,
            type: type$9,
            group: group$12,
            extensions: extensions$9,
            tmScope: tmScope$9,
            aceMode: aceMode$9,
            codemirrorMode: codemirrorMode$5,
            codemirrorMimeType: codemirrorMimeType$5,
            languageId: languageId$9,
          };

          var jsx$1 = Object.freeze({
            name: name$10,
            type: type$9,
            group: group$12,
            extensions: extensions$9,
            tmScope: tmScope$9,
            aceMode: aceMode$9,
            codemirrorMode: codemirrorMode$5,
            codemirrorMimeType: codemirrorMimeType$5,
            languageId: languageId$9,
            default: jsx,
          });

          var name$11 = "TypeScript";
          var type$10 = "programming";
          var color$4 = "#2b7489";
          var aliases$3 = ["ts"];
          var extensions$10 = [".ts", ".tsx"];
          var tmScope$10 = "source.ts";
          var aceMode$10 = "typescript";
          var codemirrorMode$6 = "javascript";
          var codemirrorMimeType$6 = "application/typescript";
          var languageId$10 = 378;
          var typescript = {
            name: name$11,
            type: type$10,
            color: color$4,
            aliases: aliases$3,
            extensions: extensions$10,
            tmScope: tmScope$10,
            aceMode: aceMode$10,
            codemirrorMode: codemirrorMode$6,
            codemirrorMimeType: codemirrorMimeType$6,
            languageId: languageId$10,
          };

          var typescript$1 = Object.freeze({
            name: name$11,
            type: type$10,
            color: color$4,
            aliases: aliases$3,
            extensions: extensions$10,
            tmScope: tmScope$10,
            aceMode: aceMode$10,
            codemirrorMode: codemirrorMode$6,
            codemirrorMimeType: codemirrorMimeType$6,
            languageId: languageId$10,
            default: typescript,
          });

          var name$12 = "JSON";
          var type$11 = "data";
          var tmScope$11 = "source.json";
          var group$13 = "JavaScript";
          var aceMode$11 = "json";
          var codemirrorMode$7 = "javascript";
          var codemirrorMimeType$7 = "application/json";
          var searchable = false;
          var extensions$11 = [
            ".json",
            ".avsc",
            ".geojson",
            ".gltf",
            ".JSON-tmLanguage",
            ".jsonl",
            ".tfstate",
            ".tfstate.backup",
            ".topojson",
            ".webapp",
            ".webmanifest",
          ];
          var filenames$1 = [
            ".arcconfig",
            ".htmlhintrc",
            ".tern-config",
            ".tern-project",
            "composer.lock",
            "mcmod.info",
          ];
          var languageId$11 = 174;
          var json$5 = {
            name: name$12,
            type: type$11,
            tmScope: tmScope$11,
            group: group$13,
            aceMode: aceMode$11,
            codemirrorMode: codemirrorMode$7,
            codemirrorMimeType: codemirrorMimeType$7,
            searchable: searchable,
            extensions: extensions$11,
            filenames: filenames$1,
            languageId: languageId$11,
          };

          var json$6 = Object.freeze({
            name: name$12,
            type: type$11,
            tmScope: tmScope$11,
            group: group$13,
            aceMode: aceMode$11,
            codemirrorMode: codemirrorMode$7,
            codemirrorMimeType: codemirrorMimeType$7,
            searchable: searchable,
            extensions: extensions$11,
            filenames: filenames$1,
            languageId: languageId$11,
            default: json$5,
          });

          var name$13 = "JSON with Comments";
          var type$12 = "data";
          var group$14 = "JSON";
          var tmScope$12 = "source.js";
          var aceMode$12 = "javascript";
          var codemirrorMode$8 = "javascript";
          var codemirrorMimeType$8 = "text/javascript";
          var aliases$4 = ["jsonc"];
          var extensions$12 = [
            ".sublime-build",
            ".sublime-commands",
            ".sublime-completions",
            ".sublime-keymap",
            ".sublime-macro",
            ".sublime-menu",
            ".sublime-mousemap",
            ".sublime-project",
            ".sublime-settings",
            ".sublime-theme",
            ".sublime-workspace",
            ".sublime_metrics",
            ".sublime_session",
          ];
          var filenames$2 = [
            ".babelrc",
            ".eslintrc.json",
            ".jscsrc",
            ".jshintrc",
            ".jslintrc",
            "tsconfig.json",
          ];
          var languageId$12 = 423;
          var jsonWithComments = {
            name: name$13,
            type: type$12,
            group: group$14,
            tmScope: tmScope$12,
            aceMode: aceMode$12,
            codemirrorMode: codemirrorMode$8,
            codemirrorMimeType: codemirrorMimeType$8,
            aliases: aliases$4,
            extensions: extensions$12,
            filenames: filenames$2,
            languageId: languageId$12,
          };

          var jsonWithComments$1 = Object.freeze({
            name: name$13,
            type: type$12,
            group: group$14,
            tmScope: tmScope$12,
            aceMode: aceMode$12,
            codemirrorMode: codemirrorMode$8,
            codemirrorMimeType: codemirrorMimeType$8,
            aliases: aliases$4,
            extensions: extensions$12,
            filenames: filenames$2,
            languageId: languageId$12,
            default: jsonWithComments,
          });

          var name$14 = "JSON5";
          var type$13 = "data";
          var extensions$13 = [".json5"];
          var tmScope$13 = "source.js";
          var aceMode$13 = "javascript";
          var codemirrorMode$9 = "javascript";
          var codemirrorMimeType$9 = "application/json";
          var languageId$13 = 175;
          var json5 = {
            name: name$14,
            type: type$13,
            extensions: extensions$13,
            tmScope: tmScope$13,
            aceMode: aceMode$13,
            codemirrorMode: codemirrorMode$9,
            codemirrorMimeType: codemirrorMimeType$9,
            languageId: languageId$13,
          };

          var json5$1 = Object.freeze({
            name: name$14,
            type: type$13,
            extensions: extensions$13,
            tmScope: tmScope$13,
            aceMode: aceMode$13,
            codemirrorMode: codemirrorMode$9,
            codemirrorMimeType: codemirrorMimeType$9,
            languageId: languageId$13,
            default: json5,
          });

          var require$$0$24 = (javascript$1 && javascript) || javascript$1;

          var require$$1$10 = (jsx$1 && jsx) || jsx$1;

          var require$$2$10 = (typescript$1 && typescript) || typescript$1;

          var require$$3$7 = (json$6 && json$5) || json$6;

          var require$$4$4 =
            (jsonWithComments$1 && jsonWithComments) || jsonWithComments$1;

          var require$$5$2 = (json5$1 && json5) || json5$1;

          var languages$4 = [
            createLanguage(require$$0$24, {
              override: {
                since: "0.0.0",
                parsers: ["babel", "flow"],
                vscodeLanguageIds: ["javascript"],
              },
              extend: {
                interpreters: ["nodejs"],
              },
            }),
            createLanguage(require$$0$24, {
              override: {
                name: "Flow",
                since: "0.0.0",
                parsers: ["babel", "flow"],
                vscodeLanguageIds: ["javascript"],
                aliases: [],
                filenames: [],
                extensions: [".js.flow"],
              },
            }),
            createLanguage(require$$1$10, {
              override: {
                since: "0.0.0",
                parsers: ["babel", "flow"],
                vscodeLanguageIds: ["javascriptreact"],
              },
            }),
            createLanguage(require$$2$10, {
              override: {
                since: "1.4.0",
                parsers: ["typescript"],
                vscodeLanguageIds: ["typescript", "typescriptreact"],
              },
            }),
            createLanguage(require$$3$7, {
              override: {
                name: "JSON.stringify",
                since: "1.13.0",
                parsers: ["json-stringify"],
                vscodeLanguageIds: ["json"],
                extensions: [],
                // .json file defaults to json instead of json-stringify
                filenames: [
                  "package.json",
                  "package-lock.json",
                  "composer.json",
                ],
              },
            }),
            createLanguage(require$$3$7, {
              override: {
                since: "1.5.0",
                parsers: ["json"],
                vscodeLanguageIds: ["json"],
              },
              extend: {
                filenames: [".prettierrc"],
              },
            }),
            createLanguage(require$$4$4, {
              override: {
                since: "1.5.0",
                parsers: ["json"],
                vscodeLanguageIds: ["jsonc"],
              },
              extend: {
                filenames: [".eslintrc"],
              },
            }),
            createLanguage(require$$5$2, {
              override: {
                since: "1.13.0",
                parsers: ["json5"],
                vscodeLanguageIds: ["json5"],
              },
            }),
          ];
          var printers$4 = {
            estree: printerEstree,
            "estree-json": printerEstreeJson,
          };
          var languageJs = {
            languages: languages$4,
            options: options$12,
            printers: printers$4,
          };

          var json$9 = {
            cjkPattern:
              "[\\u02ea-\\u02eb\\u1100-\\u11ff\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u3000-\\u303f\\u3041-\\u3096\\u3099-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312e\\u3131-\\u318e\\u3190-\\u3191\\u3196-\\u31ba\\u31c0-\\u31e3\\u31f0-\\u321e\\u322a-\\u3247\\u3260-\\u327e\\u328a-\\u32b0\\u32c0-\\u32cb\\u32d0-\\u32fe\\u3300-\\u3370\\u337b-\\u337f\\u33e0-\\u33fe\\u3400-\\u4db5\\u4e00-\\u9fea\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufe10-\\ufe1f\\ufe30-\\ufe6f\\uff00-\\uffef]|[\\ud840-\\ud868\\ud86a-\\ud86c\\ud86f-\\ud872\\ud874-\\ud879][\\udc00-\\udfff]|\\ud82c[\\udc00-\\udd1e]|\\ud83c[\\ude00\\ude50-\\ude51]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d]",
            kPattern:
              "[\\u1100-\\u11ff\\u3001-\\u3003\\u3008-\\u3011\\u3013-\\u301f\\u302e-\\u3030\\u3037\\u30fb\\u3131-\\u318e\\u3200-\\u321e\\u3260-\\u327e\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\ufe45-\\ufe46\\uff61-\\uff65\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]",
            punctuationPattern:
              "[\\u0021-\\u002f\\u003a-\\u0040\\u005b-\\u0060\\u007b-\\u007e\\u00a1\\u00a7\\u00ab\\u00b6-\\u00b7\\u00bb\\u00bf\\u037e\\u0387\\u055a-\\u055f\\u0589-\\u058a\\u05be\\u05c0\\u05c3\\u05c6\\u05f3-\\u05f4\\u0609-\\u060a\\u060c-\\u060d\\u061b\\u061e-\\u061f\\u066a-\\u066d\\u06d4\\u0700-\\u070d\\u07f7-\\u07f9\\u0830-\\u083e\\u085e\\u0964-\\u0965\\u0970\\u09fd\\u0af0\\u0df4\\u0e4f\\u0e5a-\\u0e5b\\u0f04-\\u0f12\\u0f14\\u0f3a-\\u0f3d\\u0f85\\u0fd0-\\u0fd4\\u0fd9-\\u0fda\\u104a-\\u104f\\u10fb\\u1360-\\u1368\\u1400\\u166d-\\u166e\\u169b-\\u169c\\u16eb-\\u16ed\\u1735-\\u1736\\u17d4-\\u17d6\\u17d8-\\u17da\\u1800-\\u180a\\u1944-\\u1945\\u1a1e-\\u1a1f\\u1aa0-\\u1aa6\\u1aa8-\\u1aad\\u1b5a-\\u1b60\\u1bfc-\\u1bff\\u1c3b-\\u1c3f\\u1c7e-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205e\\u207d-\\u207e\\u208d-\\u208e\\u2308-\\u230b\\u2329-\\u232a\\u2768-\\u2775\\u27c5-\\u27c6\\u27e6-\\u27ef\\u2983-\\u2998\\u29d8-\\u29db\\u29fc-\\u29fd\\u2cf9-\\u2cfc\\u2cfe-\\u2cff\\u2d70\\u2e00-\\u2e2e\\u2e30-\\u2e49\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301f\\u3030\\u303d\\u30a0\\u30fb\\ua4fe-\\ua4ff\\ua60d-\\ua60f\\ua673\\ua67e\\ua6f2-\\ua6f7\\ua874-\\ua877\\ua8ce-\\ua8cf\\ua8f8-\\ua8fa\\ua8fc\\ua92e-\\ua92f\\ua95f\\ua9c1-\\ua9cd\\ua9de-\\ua9df\\uaa5c-\\uaa5f\\uaade-\\uaadf\\uaaf0-\\uaaf1\\uabeb\\ufd3e-\\ufd3f\\ufe10-\\ufe19\\ufe30-\\ufe52\\ufe54-\\ufe61\\ufe63\\ufe68\\ufe6a-\\ufe6b\\uff01-\\uff03\\uff05-\\uff0a\\uff0c-\\uff0f\\uff1a-\\uff1b\\uff1f-\\uff20\\uff3b-\\uff3d\\uff3f\\uff5b\\uff5d\\uff5f-\\uff65]|\\ud800[\\udd00-\\udd02\\udf9f\\udfd0]|\\ud801[\\udd6f]|\\ud802[\\udc57\\udd1f\\udd3f\\ude50-\\ude58\\ude7f\\udef0-\\udef6\\udf39-\\udf3f\\udf99-\\udf9c]|\\ud804[\\udc47-\\udc4d\\udcbb-\\udcbc\\udcbe-\\udcc1\\udd40-\\udd43\\udd74-\\udd75\\uddc5-\\uddc9\\uddcd\\udddb\\udddd-\\udddf\\ude38-\\ude3d\\udea9]|\\ud805[\\udc4b-\\udc4f\\udc5b\\udc5d\\udcc6\\uddc1-\\uddd7\\ude41-\\ude43\\ude60-\\ude6c\\udf3c-\\udf3e]|\\ud806[\\ude3f-\\ude46\\ude9a-\\ude9c\\ude9e-\\udea2]|\\ud807[\\udc41-\\udc45\\udc70-\\udc71]|\\ud809[\\udc70-\\udc74]|\\ud81a[\\ude6e-\\ude6f\\udef5\\udf37-\\udf3b\\udf44]|\\ud82f[\\udc9f]|\\ud836[\\ude87-\\ude8b]|\\ud83a[\\udd5e-\\udd5f]",
          };

          var cjkPattern = json$9.cjkPattern;
          var kPattern = json$9.kPattern;
          var punctuationPattern$1 = json$9.punctuationPattern;
          var getLast$4 = util.getLast;
          var INLINE_NODE_TYPES$1 = [
            "liquidNode",
            "inlineCode",
            "emphasis",
            "strong",
            "delete",
            "link",
            "linkReference",
            "image",
            "imageReference",
            "footnote",
            "footnoteReference",
            "sentence",
            "whitespace",
            "word",
            "break",
            "inlineMath",
          ];
          var INLINE_NODE_WRAPPER_TYPES$1 = INLINE_NODE_TYPES$1.concat([
            "tableCell",
            "paragraph",
            "heading",
          ]);
          var kRegex = new RegExp(kPattern);
          var punctuationRegex = new RegExp(punctuationPattern$1);
          /**
           * split text into whitespaces and words
           * @param {string} text
           * @return {Array<{ type: "whitespace", value: " " | "\n" | "" } | { type: "word", value: string }>}
           */

          function splitText$1(text, options) {
            var KIND_NON_CJK = "non-cjk";
            var KIND_CJ_LETTER = "cj-letter";
            var KIND_K_LETTER = "k-letter";
            var KIND_CJK_PUNCTUATION = "cjk-punctuation";
            var nodes = [];
            (options.proseWrap === "preserve"
              ? text
              : text.replace(
                  new RegExp(
                    "(".concat(cjkPattern, ")\n(").concat(cjkPattern, ")"),
                    "g"
                  ),
                  "$1$2"
                )
            )
              .split(/([ \t\n]+)/)
              .forEach(function (token, index, tokens) {
                // whitespace
                if (index % 2 === 1) {
                  nodes.push({
                    type: "whitespace",
                    value: /\n/.test(token) ? "\n" : " ",
                  });
                  return;
                } // word separated by whitespace

                if (
                  (index === 0 || index === tokens.length - 1) &&
                  token === ""
                ) {
                  return;
                }

                token
                  .split(new RegExp("(".concat(cjkPattern, ")")))
                  .forEach(function (innerToken, innerIndex, innerTokens) {
                    if (
                      (innerIndex === 0 ||
                        innerIndex === innerTokens.length - 1) &&
                      innerToken === ""
                    ) {
                      return;
                    } // non-CJK word

                    if (innerIndex % 2 === 0) {
                      if (innerToken !== "") {
                        appendNode({
                          type: "word",
                          value: innerToken,
                          kind: KIND_NON_CJK,
                          hasLeadingPunctuation: punctuationRegex.test(
                            innerToken[0]
                          ),
                          hasTrailingPunctuation: punctuationRegex.test(
                            getLast$4(innerToken)
                          ),
                        });
                      }

                      return;
                    } // CJK character

                    appendNode(
                      punctuationRegex.test(innerToken)
                        ? {
                            type: "word",
                            value: innerToken,
                            kind: KIND_CJK_PUNCTUATION,
                            hasLeadingPunctuation: true,
                            hasTrailingPunctuation: true,
                          }
                        : {
                            type: "word",
                            value: innerToken,
                            kind: kRegex.test(innerToken)
                              ? KIND_K_LETTER
                              : KIND_CJ_LETTER,
                            hasLeadingPunctuation: false,
                            hasTrailingPunctuation: false,
                          }
                    );
                  });
              });
            return nodes;

            function appendNode(node) {
              var lastNode = getLast$4(nodes);

              if (lastNode && lastNode.type === "word") {
                if (
                  (lastNode.kind === KIND_NON_CJK &&
                    node.kind === KIND_CJ_LETTER &&
                    !lastNode.hasTrailingPunctuation) ||
                  (lastNode.kind === KIND_CJ_LETTER &&
                    node.kind === KIND_NON_CJK &&
                    !node.hasLeadingPunctuation)
                ) {
                  nodes.push({
                    type: "whitespace",
                    value: " ",
                  });
                } else if (
                  !isBetween(KIND_NON_CJK, KIND_CJK_PUNCTUATION) && // disallow leading/trailing full-width whitespace
                  ![lastNode.value, node.value].some(function (value) {
                    return /\u3000/.test(value);
                  })
                ) {
                  nodes.push({
                    type: "whitespace",
                    value: "",
                  });
                }
              }

              nodes.push(node);

              function isBetween(kind1, kind2) {
                return (
                  (lastNode.kind === kind1 && node.kind === kind2) ||
                  (lastNode.kind === kind2 && node.kind === kind1)
                );
              }
            }
          }

          function getOrderedListItemInfo$1(orderListItem, originalText) {
            var _originalText$slice$m = originalText
                .slice(
                  orderListItem.position.start.offset,
                  orderListItem.position.end.offset
                )
                .match(/^\s*(\d+)(\.|\))(\s*)/),
              _originalText$slice$m2 = _slicedToArray(_originalText$slice$m, 4),
              numberText = _originalText$slice$m2[1],
              marker = _originalText$slice$m2[2],
              leadingSpaces = _originalText$slice$m2[3];

            return {
              numberText: numberText,
              marker: marker,
              leadingSpaces: leadingSpaces,
            };
          } // workaround for https://github.com/remarkjs/remark/issues/351
          // leading and trailing newlines are stripped by remark

          function getFencedCodeBlockValue$2(node, originalText) {
            var text = originalText.slice(
              node.position.start.offset,
              node.position.end.offset
            );
            var leadingSpaceCount = text.match(/^\s*/)[0].length;
            var replaceRegex = new RegExp(
              "^\\s{0,".concat(leadingSpaceCount, "}")
            );
            var lineContents = text.split("\n");
            var markerStyle = text[leadingSpaceCount]; // ` or ~

            var marker = text
              .slice(leadingSpaceCount)
              .match(new RegExp("^[".concat(markerStyle, "]+")))[0]; // https://spec.commonmark.org/0.28/#example-104: Closing fences may be indented by 0-3 spaces
            // https://spec.commonmark.org/0.28/#example-93: The closing code fence must be at least as long as the opening fence

            var hasEndMarker = new RegExp("^\\s{0,3}".concat(marker)).test(
              lineContents[lineContents.length - 1].slice(
                getIndent(lineContents.length - 1)
              )
            );
            return lineContents
              .slice(1, hasEndMarker ? -1 : undefined)
              .map(function (x, i) {
                return x.slice(getIndent(i + 1)).replace(replaceRegex, "");
              })
              .join("\n");

            function getIndent(lineIndex) {
              return node.position.indent[lineIndex - 1] - 1;
            }
          }

          function mapAst(ast, handler) {
            return (function preorder(node, index, parentStack) {
              parentStack = parentStack || [];
              var newNode = Object.assign(
                {},
                handler(node, index, parentStack)
              );

              if (newNode.children) {
                newNode.children = newNode.children.map(function (
                  child,
                  index
                ) {
                  return preorder(child, index, [newNode].concat(parentStack));
                });
              }

              return newNode;
            })(ast, null, null);
          }

          var utils$10 = {
            mapAst: mapAst,
            splitText: splitText$1,
            punctuationPattern: punctuationPattern$1,
            getFencedCodeBlockValue: getFencedCodeBlockValue$2,
            getOrderedListItemInfo: getOrderedListItemInfo$1,
            INLINE_NODE_TYPES: INLINE_NODE_TYPES$1,
            INLINE_NODE_WRAPPER_TYPES: INLINE_NODE_WRAPPER_TYPES$1,
          };

          var _require$$0$builders$9 = doc.builders;
          var hardline$12 = _require$$0$builders$9.hardline;
          var literalline$6 = _require$$0$builders$9.literalline;
          var concat$16 = _require$$0$builders$9.concat;
          var markAsRoot$4 = _require$$0$builders$9.markAsRoot;
          var mapDoc$7 = doc.utils.mapDoc;
          var getFencedCodeBlockValue$1 = utils$10.getFencedCodeBlockValue;

          function embed$6(path, print, textToDoc, options) {
            var node = path.getValue();

            if (node.type === "code" && node.lang !== null) {
              // only look for the first string so as to support [markdown-preview-enhanced](https://shd101wyy.github.io/markdown-preview-enhanced/#/code-chunk)
              var langMatch = node.lang.match(/^[A-Za-z0-9_-]+/);
              var lang = langMatch ? langMatch[0] : "";
              var parser = getParserName(lang);

              if (parser) {
                var styleUnit = options.__inJsTemplate ? "~" : "`";
                var style = styleUnit.repeat(
                  Math.max(
                    3,
                    util.getMaxContinuousCount(node.value, styleUnit) + 1
                  )
                );
                var doc$$2 = textToDoc(
                  getFencedCodeBlockValue$1(node, options.originalText),
                  {
                    parser: parser,
                  }
                );
                return markAsRoot$4(
                  concat$16([
                    style,
                    node.lang,
                    hardline$12,
                    replaceNewlinesWithLiterallines(doc$$2),
                    style,
                  ])
                );
              }
            }

            if (node.type === "yaml") {
              return markAsRoot$4(
                concat$16([
                  "---",
                  hardline$12,
                  node.value && node.value.trim()
                    ? replaceNewlinesWithLiterallines(
                        textToDoc(node.value, {
                          parser: "yaml",
                        })
                      )
                    : "",
                  "---",
                ])
              );
            } // MDX

            switch (node.type) {
              case "importExport":
                return textToDoc(node.value, {
                  parser: "babel",
                });

              case "jsx":
                return textToDoc(node.value, {
                  parser: "__js_expression",
                });
            }

            return null;

            function getParserName(lang) {
              var supportInfo = support.getSupportInfo(null, {
                plugins: options.plugins,
              });
              var language = supportInfo.languages.find(function (language) {
                return (
                  language.name.toLowerCase() === lang ||
                  (language.aliases && language.aliases.indexOf(lang) !== -1) ||
                  (language.extensions &&
                    language.extensions.find(function (ext) {
                      return ext.substring(1) === lang;
                    }))
                );
              });

              if (language) {
                return language.parsers[0];
              }

              return null;
            }

            function replaceNewlinesWithLiterallines(doc$$2) {
              return mapDoc$7(doc$$2, function (currentDoc) {
                return typeof currentDoc === "string" &&
                  currentDoc.includes("\n")
                  ? concat$16(
                      currentDoc.split(/(\n)/g).map(function (v, i) {
                        return i % 2 === 0 ? v : literalline$6;
                      })
                    )
                  : currentDoc;
              });
            }
          }

          var embed_1$4 = embed$6;

          var pragma$8 = createCommonjsModule(function (module) {
            "use strict";

            var pragmas = ["format", "prettier"];

            function startWithPragma(text) {
              var pragma = "@(".concat(pragmas.join("|"), ")");
              var regex = new RegExp(
                [
                  "<!--\\s*".concat(pragma, "\\s*-->"),
                  "<!--.*\r?\n[\\s\\S]*(^|\n)[^\\S\n]*".concat(
                    pragma,
                    "[^\\S\n]*($|\n)[\\s\\S]*\n.*-->"
                  ),
                ].join("|"),
                "m"
              );
              var matched = text.match(regex);
              return matched && matched.index === 0;
            }

            module.exports = {
              startWithPragma: startWithPragma,
              hasPragma: function hasPragma(text) {
                return startWithPragma(frontMatter(text).content.trimLeft());
              },
              insertPragma: function insertPragma(text) {
                var extracted = frontMatter(text);
                var pragma = "<!-- @".concat(pragmas[0], " -->");
                return extracted.frontMatter
                  ? ""
                      .concat(extracted.frontMatter.raw, "\n\n")
                      .concat(pragma, "\n\n")
                      .concat(extracted.content)
                  : "".concat(pragma, "\n\n").concat(extracted.content);
              },
            };
          });

          var getOrderedListItemInfo$2 = utils$10.getOrderedListItemInfo;
          var mapAst$1 = utils$10.mapAst;
          var splitText$2 = utils$10.splitText; // 0x0 ~ 0x10ffff

          var isSingleCharRegex =
            /^([\u0000-\uffff]|[\ud800-\udbff][\udc00-\udfff])$/;

          function preprocess$4(ast, options) {
            ast = restoreUnescapedCharacter(ast, options);
            ast = mergeContinuousTexts(ast);
            ast = transformInlineCode(ast);
            ast = transformIndentedCodeblockAndMarkItsParentList(ast, options);
            ast = markAlignedList(ast, options);
            ast = splitTextIntoSentences(ast, options);
            ast = transformImportExport(ast);
            ast = mergeContinuousImportExport(ast);
            return ast;
          }

          function transformImportExport(ast) {
            return mapAst$1(ast, function (node) {
              if (node.type !== "import" && node.type !== "export") {
                return node;
              }

              return Object.assign({}, node, {
                type: "importExport",
              });
            });
          }

          function transformInlineCode(ast) {
            return mapAst$1(ast, function (node) {
              if (node.type !== "inlineCode") {
                return node;
              }

              return Object.assign({}, node, {
                value: node.value.replace(/\s+/g, " "),
              });
            });
          }

          function restoreUnescapedCharacter(ast, options) {
            return mapAst$1(ast, function (node) {
              return node.type !== "text"
                ? node
                : Object.assign({}, node, {
                    value:
                      node.value !== "*" &&
                      node.value !== "_" &&
                      node.value !== "$" && // handle these cases in printer
                      isSingleCharRegex.test(node.value) &&
                      node.position.end.offset - node.position.start.offset !==
                        node.value.length
                        ? options.originalText.slice(
                            node.position.start.offset,
                            node.position.end.offset
                          )
                        : node.value,
                  });
            });
          }

          function mergeContinuousImportExport(ast) {
            return mergeChildren(
              ast,
              function (prevNode, node) {
                return (
                  prevNode.type === "importExport" &&
                  node.type === "importExport"
                );
              },
              function (prevNode, node) {
                return {
                  type: "importExport",
                  value: prevNode.value + "\n\n" + node.value,
                  position: {
                    start: prevNode.position.start,
                    end: node.position.end,
                  },
                };
              }
            );
          }

          function mergeChildren(ast, shouldMerge, mergeNode) {
            return mapAst$1(ast, function (node) {
              if (!node.children) {
                return node;
              }

              var children = node.children.reduce(function (current, child) {
                var lastChild = current[current.length - 1];

                if (lastChild && shouldMerge(lastChild, child)) {
                  current.splice(-1, 1, mergeNode(lastChild, child));
                } else {
                  current.push(child);
                }

                return current;
              }, []);
              return Object.assign({}, node, {
                children: children,
              });
            });
          }

          function mergeContinuousTexts(ast) {
            return mergeChildren(
              ast,
              function (prevNode, node) {
                return prevNode.type === "text" && node.type === "text";
              },
              function (prevNode, node) {
                return {
                  type: "text",
                  value: prevNode.value + node.value,
                  position: {
                    start: prevNode.position.start,
                    end: node.position.end,
                  },
                };
              }
            );
          }

          function splitTextIntoSentences(ast, options) {
            return mapAst$1(ast, function (node, index, _ref) {
              var _ref2 = _slicedToArray(_ref, 1),
                parentNode = _ref2[0];

              if (node.type !== "text") {
                return node;
              }

              var value = node.value;

              if (parentNode.type === "paragraph") {
                if (index === 0) {
                  value = value.trimLeft();
                }

                if (index === parentNode.children.length - 1) {
                  value = value.trimRight();
                }
              }

              return {
                type: "sentence",
                position: node.position,
                children: splitText$2(value, options),
              };
            });
          }

          function transformIndentedCodeblockAndMarkItsParentList(
            ast,
            options
          ) {
            return mapAst$1(ast, function (node, index, parentStack) {
              if (node.type === "code") {
                // the first char may point to `\n`, e.g. `\n\t\tbar`, just ignore it
                var isIndented = /^\n?( {4,}|\t)/.test(
                  options.originalText.slice(
                    node.position.start.offset,
                    node.position.end.offset
                  )
                );
                node.isIndented = isIndented;

                if (isIndented) {
                  for (var i = 0; i < parentStack.length; i++) {
                    var parent = parentStack[i]; // no need to check checked items

                    if (parent.hasIndentedCodeblock) {
                      break;
                    }

                    if (parent.type === "list") {
                      parent.hasIndentedCodeblock = true;
                    }
                  }
                }
              }

              return node;
            });
          }

          function markAlignedList(ast, options) {
            return mapAst$1(ast, function (node, index, parentStack) {
              if (node.type === "list" && node.children.length !== 0) {
                // if one of its parents is not aligned, it's not possible to be aligned in sub-lists
                for (var i = 0; i < parentStack.length; i++) {
                  var parent = parentStack[i];

                  if (parent.type === "list" && !parent.isAligned) {
                    node.isAligned = false;
                    return node;
                  }
                }

                node.isAligned = isAligned(node);
              }

              return node;
            });

            function getListItemStart(listItem) {
              return listItem.children.length === 0
                ? -1
                : listItem.children[0].position.start.column - 1;
            }

            function isAligned(list) {
              if (!list.ordered) {
                /**
                 * - 123
                 * - 123
                 */
                return true;
              }

              var _list$children = _slicedToArray(list.children, 2),
                firstItem = _list$children[0],
                secondItem = _list$children[1];

              var firstInfo = getOrderedListItemInfo$2(
                firstItem,
                options.originalText
              );

              if (firstInfo.leadingSpaces.length > 1) {
                /**
                 * 1.   123
                 *
                 * 1.   123
                 * 1. 123
                 */
                return true;
              }

              var firstStart = getListItemStart(firstItem);

              if (firstStart === -1) {
                /**
                 * 1.
                 *
                 * 1.
                 * 1.
                 */
                return false;
              }

              if (list.children.length === 1) {
                /**
                 * aligned:
                 *
                 * 11. 123
                 *
                 * not aligned:
                 *
                 * 1. 123
                 */
                return firstStart % options.tabWidth === 0;
              }

              var secondStart = getListItemStart(secondItem);

              if (firstStart !== secondStart) {
                /**
                 * 11. 123
                 * 1. 123
                 *
                 * 1. 123
                 * 11. 123
                 */
                return false;
              }

              if (firstStart % options.tabWidth === 0) {
                /**
                 * 11. 123
                 * 12. 123
                 */
                return true;
              }
              /**
               * aligned:
               *
               * 11. 123
               * 1.  123
               *
               * not aligned:
               *
               * 1. 123
               * 2. 123
               */

              var secondInfo = getOrderedListItemInfo$2(
                secondItem,
                options.originalText
              );
              return secondInfo.leadingSpaces.length > 1;
            }
          }

          var preprocess_1$4 = preprocess$4;

          var _require$$0$builders$8 = doc.builders;
          var breakParent$4 = _require$$0$builders$8.breakParent;
          var concat$15 = _require$$0$builders$8.concat;
          var join$11 = _require$$0$builders$8.join;
          var line$10 = _require$$0$builders$8.line;
          var literalline$5 = _require$$0$builders$8.literalline;
          var markAsRoot$3 = _require$$0$builders$8.markAsRoot;
          var hardline$11 = _require$$0$builders$8.hardline;
          var softline$7 = _require$$0$builders$8.softline;
          var ifBreak$7 = _require$$0$builders$8.ifBreak;
          var fill$5 = _require$$0$builders$8.fill;
          var align$2 = _require$$0$builders$8.align;
          var indent$9 = _require$$0$builders$8.indent;
          var group$15 = _require$$0$builders$8.group;
          var mapDoc$6 = doc.utils.mapDoc;
          var printDocToString$2 = doc.printer.printDocToString;
          var getFencedCodeBlockValue = utils$10.getFencedCodeBlockValue;
          var getOrderedListItemInfo = utils$10.getOrderedListItemInfo;
          var splitText = utils$10.splitText;
          var punctuationPattern = utils$10.punctuationPattern;
          var INLINE_NODE_TYPES = utils$10.INLINE_NODE_TYPES;
          var INLINE_NODE_WRAPPER_TYPES = utils$10.INLINE_NODE_WRAPPER_TYPES;
          var replaceEndOfLineWith$2 = util.replaceEndOfLineWith;
          var TRAILING_HARDLINE_NODES = ["importExport"];
          var SINGLE_LINE_NODE_TYPES = ["heading", "tableCell", "link"];
          var SIBLING_NODE_TYPES = [
            "listItem",
            "definition",
            "footnoteDefinition",
          ];

          function genericPrint$5(path, options, print) {
            var node = path.getValue();

            if (shouldRemainTheSameContent(path)) {
              return concat$15(
                splitText(
                  options.originalText.slice(
                    node.position.start.offset,
                    node.position.end.offset
                  ),
                  options
                ).map(function (node) {
                  return node.type === "word"
                    ? node.value
                    : node.value === ""
                    ? ""
                    : printLine(path, node.value, options);
                })
              );
            }

            switch (node.type) {
              case "root":
                if (node.children.length === 0) {
                  return "";
                }

                return concat$15([
                  normalizeDoc(printRoot(path, options, print)),
                  TRAILING_HARDLINE_NODES.indexOf(
                    getLastDescendantNode(node).type
                  ) === -1
                    ? hardline$11
                    : "",
                ]);

              case "paragraph":
                return printChildren$1(path, options, print, {
                  postprocessor: fill$5,
                });

              case "sentence":
                return printChildren$1(path, options, print);

              case "word":
                return node.value
                  .replace(/[*$]/g, "\\$&") // escape all `*` and `$` (math)
                  .replace(
                    new RegExp(
                      [
                        "(^|".concat(punctuationPattern, ")(_+)"),
                        "(_+)(".concat(punctuationPattern, "|$)"),
                      ].join("|"),
                      "g"
                    ),
                    function (_, text1, underscore1, underscore2, text2) {
                      return (
                        underscore1
                          ? "".concat(text1).concat(underscore1)
                          : "".concat(underscore2).concat(text2)
                      ).replace(/_/g, "\\_");
                    }
                  );
              // escape all `_` except concating with non-punctuation, e.g. `1_2_3` is not considered emphasis

              case "whitespace": {
                var parentNode = path.getParentNode();
                var index = parentNode.children.indexOf(node);
                var nextNode = parentNode.children[index + 1];
                var proseWrap = // leading char that may cause different syntax
                  nextNode &&
                  /^>|^([-+*]|#{1,6}|[0-9]+[.)])$/.test(nextNode.value)
                    ? "never"
                    : options.proseWrap;
                return printLine(path, node.value, {
                  proseWrap: proseWrap,
                });
              }

              case "emphasis": {
                var _parentNode = path.getParentNode();

                var _index = _parentNode.children.indexOf(node);

                var prevNode = _parentNode.children[_index - 1];
                var _nextNode = _parentNode.children[_index + 1];
                var hasPrevOrNextWord = // `1*2*3` is considered emphais but `1_2_3` is not
                  (prevNode &&
                    prevNode.type === "sentence" &&
                    prevNode.children.length > 0 &&
                    util.getLast(prevNode.children).type === "word" &&
                    !util.getLast(prevNode.children).hasTrailingPunctuation) ||
                  (_nextNode &&
                    _nextNode.type === "sentence" &&
                    _nextNode.children.length > 0 &&
                    _nextNode.children[0].type === "word" &&
                    !_nextNode.children[0].hasLeadingPunctuation);
                var style =
                  hasPrevOrNextWord || getAncestorNode$2(path, "emphasis")
                    ? "*"
                    : "_";
                return concat$15([
                  style,
                  printChildren$1(path, options, print),
                  style,
                ]);
              }

              case "strong":
                return concat$15([
                  "**",
                  printChildren$1(path, options, print),
                  "**",
                ]);

              case "delete":
                return concat$15([
                  "~~",
                  printChildren$1(path, options, print),
                  "~~",
                ]);

              case "inlineCode": {
                var backtickCount = util.getMinNotPresentContinuousCount(
                  node.value,
                  "`"
                );

                var _style = "`".repeat(backtickCount || 1);

                var gap = backtickCount ? " " : "";
                return concat$15([_style, gap, node.value, gap, _style]);
              }

              case "link":
                switch (options.originalText[node.position.start.offset]) {
                  case "<": {
                    var mailto = "mailto:";
                    var url = // <hello@example.com> is parsed as { url: "mailto:hello@example.com" }
                      node.url.startsWith(mailto) &&
                      options.originalText.slice(
                        node.position.start.offset + 1,
                        node.position.start.offset + 1 + mailto.length
                      ) !== mailto
                        ? node.url.slice(mailto.length)
                        : node.url;
                    return concat$15(["<", url, ">"]);
                  }

                  case "[":
                    return concat$15([
                      "[",
                      printChildren$1(path, options, print),
                      "](",
                      printUrl(node.url, ")"),
                      printTitle(node.title, options),
                      ")",
                    ]);

                  default:
                    return options.originalText.slice(
                      node.position.start.offset,
                      node.position.end.offset
                    );
                }

              case "image":
                return concat$15([
                  "![",
                  node.alt || "",
                  "](",
                  printUrl(node.url, ")"),
                  printTitle(node.title, options),
                  ")",
                ]);

              case "blockquote":
                return concat$15([
                  "> ",
                  align$2("> ", printChildren$1(path, options, print)),
                ]);

              case "heading":
                return concat$15([
                  "#".repeat(node.depth) + " ",
                  printChildren$1(path, options, print),
                ]);

              case "code": {
                if (node.isIndented) {
                  // indented code block
                  var alignment = " ".repeat(4);
                  return align$2(
                    alignment,
                    concat$15([
                      alignment,
                      concat$15(
                        replaceEndOfLineWith$2(node.value, hardline$11)
                      ),
                    ])
                  );
                } // fenced code block

                var styleUnit = options.__inJsTemplate ? "~" : "`";

                var _style2 = styleUnit.repeat(
                  Math.max(
                    3,
                    util.getMaxContinuousCount(node.value, styleUnit) + 1
                  )
                );

                return concat$15([
                  _style2,
                  node.lang || "",
                  hardline$11,
                  concat$15(
                    replaceEndOfLineWith$2(
                      getFencedCodeBlockValue(node, options.originalText),
                      hardline$11
                    )
                  ),
                  hardline$11,
                  _style2,
                ]);
              }

              case "yaml":
              case "toml":
                return options.originalText.slice(
                  node.position.start.offset,
                  node.position.end.offset
                );

              case "html": {
                var _parentNode2 = path.getParentNode();

                var value =
                  _parentNode2.type === "root" &&
                  util.getLast(_parentNode2.children) === node
                    ? node.value.trimRight()
                    : node.value;
                var isHtmlComment = /^<!--[\s\S]*-->$/.test(value);
                return concat$15(
                  replaceEndOfLineWith$2(
                    value,
                    isHtmlComment ? hardline$11 : markAsRoot$3(literalline$5)
                  )
                );
              }

              case "list": {
                var nthSiblingIndex = getNthListSiblingIndex(
                  node,
                  path.getParentNode()
                );
                var isGitDiffFriendlyOrderedList =
                  node.ordered &&
                  node.children.length > 1 &&
                  +getOrderedListItemInfo(
                    node.children[1],
                    options.originalText
                  ).numberText === 1;
                return printChildren$1(path, options, print, {
                  processor: function processor(childPath, index) {
                    var prefix = getPrefix();
                    return concat$15([
                      prefix,
                      align$2(
                        " ".repeat(prefix.length),
                        printListItem(childPath, options, print, prefix)
                      ),
                    ]);

                    function getPrefix() {
                      var rawPrefix = node.ordered
                        ? (index === 0
                            ? node.start
                            : isGitDiffFriendlyOrderedList
                            ? 1
                            : node.start + index) +
                          (nthSiblingIndex % 2 === 0 ? ". " : ") ")
                        : nthSiblingIndex % 2 === 0
                        ? "- "
                        : "* ";
                      return node.isAligned ||
                        /* workaround for https://github.com/remarkjs/remark/issues/315 */
                        node.hasIndentedCodeblock
                        ? alignListPrefix(rawPrefix, options)
                        : rawPrefix;
                    }
                  },
                });
              }

              case "thematicBreak": {
                var counter = getAncestorCounter$1(path, "list");

                if (counter === -1) {
                  return "---";
                }

                var _nthSiblingIndex = getNthListSiblingIndex(
                  path.getParentNode(counter),
                  path.getParentNode(counter + 1)
                );

                return _nthSiblingIndex % 2 === 0 ? "***" : "---";
              }

              case "linkReference":
                return concat$15([
                  "[",
                  printChildren$1(path, options, print),
                  "]",
                  node.referenceType === "full"
                    ? concat$15(["[", node.identifier, "]"])
                    : node.referenceType === "collapsed"
                    ? "[]"
                    : "",
                ]);

              case "imageReference":
                switch (node.referenceType) {
                  case "full":
                    return concat$15([
                      "![",
                      node.alt || "",
                      "][",
                      node.identifier,
                      "]",
                    ]);

                  default:
                    return concat$15([
                      "![",
                      node.alt,
                      "]",
                      node.referenceType === "collapsed" ? "[]" : "",
                    ]);
                }

              case "definition": {
                var lineOrSpace =
                  options.proseWrap === "always" ? line$10 : " ";
                return group$15(
                  concat$15([
                    concat$15(["[", node.identifier, "]:"]),
                    indent$9(
                      concat$15([
                        lineOrSpace,
                        printUrl(node.url),
                        node.title === null
                          ? ""
                          : concat$15([
                              lineOrSpace,
                              printTitle(node.title, options, false),
                            ]),
                      ])
                    ),
                  ])
                );
              }

              case "footnote":
                return concat$15([
                  "[^",
                  printChildren$1(path, options, print),
                  "]",
                ]);

              case "footnoteReference":
                return concat$15(["[^", node.identifier, "]"]);

              case "footnoteDefinition": {
                var _nextNode2 =
                  path.getParentNode().children[path.getName() + 1];
                var shouldInlineFootnote =
                  node.children.length === 1 &&
                  node.children[0].type === "paragraph" &&
                  (options.proseWrap === "never" ||
                    (options.proseWrap === "preserve" &&
                      node.children[0].position.start.line ===
                        node.children[0].position.end.line));
                return concat$15([
                  "[^",
                  node.identifier,
                  "]: ",
                  shouldInlineFootnote
                    ? printChildren$1(path, options, print)
                    : group$15(
                        concat$15([
                          align$2(
                            " ".repeat(options.tabWidth),
                            printChildren$1(path, options, print, {
                              processor: function processor(childPath, index) {
                                return index === 0
                                  ? group$15(
                                      concat$15([
                                        softline$7,
                                        softline$7,
                                        childPath.call(print),
                                      ])
                                    )
                                  : childPath.call(print);
                              },
                            })
                          ),
                          _nextNode2 && _nextNode2.type === "footnoteDefinition"
                            ? softline$7
                            : "",
                        ])
                      ),
                ]);
              }

              case "table":
                return printTable(path, options, print);

              case "tableCell":
                return printChildren$1(path, options, print);

              case "break":
                return /\s/.test(
                  options.originalText[node.position.start.offset]
                )
                  ? concat$15(["  ", markAsRoot$3(literalline$5)])
                  : concat$15(["\\", hardline$11]);

              case "liquidNode":
                return concat$15(
                  replaceEndOfLineWith$2(node.value, hardline$11)
                );
              // MDX

              case "importExport":
              case "jsx":
                return node.value;
              // fallback to the original text if multiparser failed

              case "math":
                return concat$15([
                  "$$",
                  hardline$11,
                  node.value
                    ? concat$15([
                        concat$15(
                          replaceEndOfLineWith$2(node.value, hardline$11)
                        ),
                        hardline$11,
                      ])
                    : "",
                  "$$",
                ]);

              case "inlineMath": {
                // remark-math trims content but we don't want to remove whitespaces
                // since it's very possible that it's recognized as math accidentally
                return options.originalText.slice(
                  options.locStart(node),
                  options.locEnd(node)
                );
              }

              case "tableRow": // handled in "table"

              case "listItem": // handled in "list"

              default:
                throw new Error(
                  "Unknown markdown type ".concat(JSON.stringify(node.type))
                );
            }
          }

          function printListItem(path, options, print, listPrefix) {
            var node = path.getValue();
            var prefix =
              node.checked === null ? "" : node.checked ? "[x] " : "[ ] ";
            return concat$15([
              prefix,
              printChildren$1(path, options, print, {
                processor: function processor(childPath, index) {
                  if (index === 0 && childPath.getValue().type !== "list") {
                    return align$2(
                      " ".repeat(prefix.length),
                      childPath.call(print)
                    );
                  }

                  var alignment = " ".repeat(
                    clamp(options.tabWidth - listPrefix.length, 0, 3) // 4+ will cause indented code block
                  );
                  return concat$15([
                    alignment,
                    align$2(alignment, childPath.call(print)),
                  ]);
                },
              }),
            ]);
          }

          function alignListPrefix(prefix, options) {
            var additionalSpaces = getAdditionalSpaces();
            return (
              prefix +
              " ".repeat(
                additionalSpaces >= 4 ? 0 : additionalSpaces // 4+ will cause indented code block
              )
            );

            function getAdditionalSpaces() {
              var restSpaces = prefix.length % options.tabWidth;
              return restSpaces === 0 ? 0 : options.tabWidth - restSpaces;
            }
          }

          function getNthListSiblingIndex(node, parentNode) {
            return getNthSiblingIndex(node, parentNode, function (siblingNode) {
              return siblingNode.ordered === node.ordered;
            });
          }

          function getNthSiblingIndex(node, parentNode, condition) {
            condition =
              condition ||
              function () {
                return true;
              };

            var index = -1;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = parentNode.children[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var childNode = _step.value;

                if (childNode.type === node.type && condition(childNode)) {
                  index++;
                } else {
                  index = -1;
                }

                if (childNode === node) {
                  return index;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }

          function getAncestorCounter$1(path, typeOrTypes) {
            var types = [].concat(typeOrTypes);
            var counter = -1;
            var ancestorNode;

            while ((ancestorNode = path.getParentNode(++counter))) {
              if (types.indexOf(ancestorNode.type) !== -1) {
                return counter;
              }
            }

            return -1;
          }

          function getAncestorNode$2(path, typeOrTypes) {
            var counter = getAncestorCounter$1(path, typeOrTypes);
            return counter === -1 ? null : path.getParentNode(counter);
          }

          function printLine(path, value, options) {
            if (options.proseWrap === "preserve" && value === "\n") {
              return hardline$11;
            }

            var isBreakable =
              options.proseWrap === "always" &&
              !getAncestorNode$2(path, SINGLE_LINE_NODE_TYPES);
            return value !== ""
              ? isBreakable
                ? line$10
                : " "
              : isBreakable
              ? softline$7
              : "";
          }

          function printTable(path, options, print) {
            var hardlineWithoutBreakParent = hardline$11.parts[0];
            var node = path.getValue();
            var contents = []; // { [rowIndex: number]: { [columnIndex: number]: string } }

            path.map(function (rowPath) {
              var rowContents = [];
              rowPath.map(function (cellPath) {
                rowContents.push(
                  printDocToString$2(cellPath.call(print), options).formatted
                );
              }, "children");
              contents.push(rowContents);
            }, "children"); // Get the width of each column

            var columnMaxWidths = contents.reduce(
              function (currentWidths, rowContents) {
                return currentWidths.map(function (width, columnIndex) {
                  return Math.max(
                    width,
                    util.getStringWidth(rowContents[columnIndex])
                  );
                });
              },
              contents[0].map(function () {
                return 3;
              }) // minimum width = 3 (---, :--, :-:, --:)
            );
            var alignedTable = join$11(hardlineWithoutBreakParent, [
              printRow(contents[0]),
              printSeparator(),
              join$11(
                hardlineWithoutBreakParent,
                contents.slice(1).map(function (rowContents) {
                  return printRow(rowContents);
                })
              ),
            ]);

            if (options.proseWrap !== "never") {
              return concat$15([breakParent$4, alignedTable]);
            } // Only if the --prose-wrap never is set and it exceeds the print width.

            var compactTable = join$11(hardlineWithoutBreakParent, [
              printRow(
                contents[0],
                /* isCompact */
                true
              ),
              printSeparator(
                /* isCompact */
                true
              ),
              join$11(
                hardlineWithoutBreakParent,
                contents.slice(1).map(function (rowContents) {
                  return printRow(
                    rowContents,
                    /* isCompact */
                    true
                  );
                })
              ),
            ]);
            return concat$15([
              breakParent$4,
              group$15(ifBreak$7(compactTable, alignedTable)),
            ]);

            function printSeparator(isCompact) {
              return concat$15([
                "| ",
                join$11(
                  " | ",
                  columnMaxWidths.map(function (width, index) {
                    var spaces = isCompact ? 3 : width;

                    switch (node.align[index]) {
                      case "left":
                        return ":" + "-".repeat(spaces - 1);

                      case "right":
                        return "-".repeat(spaces - 1) + ":";

                      case "center":
                        return ":" + "-".repeat(spaces - 2) + ":";

                      default:
                        return "-".repeat(spaces);
                    }
                  })
                ),
                " |",
              ]);
            }

            function printRow(rowContents, isCompact) {
              return concat$15([
                "| ",
                join$11(
                  " | ",
                  isCompact
                    ? rowContents
                    : rowContents.map(function (rowContent, columnIndex) {
                        switch (node.align[columnIndex]) {
                          case "right":
                            return alignRight(
                              rowContent,
                              columnMaxWidths[columnIndex]
                            );

                          case "center":
                            return alignCenter(
                              rowContent,
                              columnMaxWidths[columnIndex]
                            );

                          default:
                            return alignLeft(
                              rowContent,
                              columnMaxWidths[columnIndex]
                            );
                        }
                      })
                ),
                " |",
              ]);
            }

            function alignLeft(text, width) {
              var spaces = width - util.getStringWidth(text);
              return concat$15([text, " ".repeat(spaces)]);
            }

            function alignRight(text, width) {
              var spaces = width - util.getStringWidth(text);
              return concat$15([" ".repeat(spaces), text]);
            }

            function alignCenter(text, width) {
              var spaces = width - util.getStringWidth(text);
              var left = Math.floor(spaces / 2);
              var right = spaces - left;
              return concat$15([" ".repeat(left), text, " ".repeat(right)]);
            }
          }

          function printRoot(path, options, print) {
            /** @typedef {{ index: number, offset: number }} IgnorePosition */

            /** @type {Array<{start: IgnorePosition, end: IgnorePosition}>} */
            var ignoreRanges = [];
            /** @type {IgnorePosition | null} */

            var ignoreStart = null;
            var children = path.getValue().children;
            children.forEach(function (childNode, index) {
              switch (isPrettierIgnore$1(childNode)) {
                case "start":
                  if (ignoreStart === null) {
                    ignoreStart = {
                      index: index,
                      offset: childNode.position.end.offset,
                    };
                  }

                  break;

                case "end":
                  if (ignoreStart !== null) {
                    ignoreRanges.push({
                      start: ignoreStart,
                      end: {
                        index: index,
                        offset: childNode.position.start.offset,
                      },
                    });
                    ignoreStart = null;
                  }

                  break;

                default:
                  // do nothing
                  break;
              }
            });
            return printChildren$1(path, options, print, {
              processor: function processor(childPath, index) {
                if (ignoreRanges.length !== 0) {
                  var ignoreRange = ignoreRanges[0];

                  if (index === ignoreRange.start.index) {
                    return concat$15([
                      children[ignoreRange.start.index].value,
                      options.originalText.slice(
                        ignoreRange.start.offset,
                        ignoreRange.end.offset
                      ),
                      children[ignoreRange.end.index].value,
                    ]);
                  }

                  if (
                    ignoreRange.start.index < index &&
                    index < ignoreRange.end.index
                  ) {
                    return false;
                  }

                  if (index === ignoreRange.end.index) {
                    ignoreRanges.shift();
                    return false;
                  }
                }

                return childPath.call(print);
              },
            });
          }

          function printChildren$1(path, options, print, events) {
            events = events || {};
            var postprocessor = events.postprocessor || concat$15;

            var processor =
              events.processor ||
              function (childPath) {
                return childPath.call(print);
              };

            var node = path.getValue();
            var parts = [];
            var lastChildNode;
            path.map(function (childPath, index) {
              var childNode = childPath.getValue();
              var result = processor(childPath, index);

              if (result !== false) {
                var data = {
                  parts: parts,
                  prevNode: lastChildNode,
                  parentNode: node,
                  options: options,
                };

                if (!shouldNotPrePrintHardline(childNode, data)) {
                  parts.push(hardline$11);

                  if (
                    lastChildNode &&
                    TRAILING_HARDLINE_NODES.indexOf(lastChildNode.type) !== -1
                  ) {
                    if (shouldPrePrintTripleHardline(childNode, data)) {
                      parts.push(hardline$11);
                    }
                  } else {
                    if (
                      shouldPrePrintDoubleHardline(childNode, data) ||
                      shouldPrePrintTripleHardline(childNode, data)
                    ) {
                      parts.push(hardline$11);
                    }

                    if (shouldPrePrintTripleHardline(childNode, data)) {
                      parts.push(hardline$11);
                    }
                  }
                }

                parts.push(result);
                lastChildNode = childNode;
              }
            }, "children");
            return postprocessor(parts);
          }

          function getLastDescendantNode(node) {
            var current = node;

            while (current.children && current.children.length !== 0) {
              current = current.children[current.children.length - 1];
            }

            return current;
          }
          /** @return {false | 'next' | 'start' | 'end'} */

          function isPrettierIgnore$1(node) {
            if (node.type !== "html") {
              return false;
            }

            var match = node.value.match(
              /^<!--\s*prettier-ignore(?:-(start|end))?\s*-->$/
            );
            return match === null ? false : match[1] ? match[1] : "next";
          }

          function shouldNotPrePrintHardline(node, data) {
            var isFirstNode = data.parts.length === 0;
            var isInlineNode = INLINE_NODE_TYPES.indexOf(node.type) !== -1;
            var isInlineHTML =
              node.type === "html" &&
              INLINE_NODE_WRAPPER_TYPES.indexOf(data.parentNode.type) !== -1;
            return isFirstNode || isInlineNode || isInlineHTML;
          }

          function shouldPrePrintDoubleHardline(node, data) {
            var isSequence =
              (data.prevNode && data.prevNode.type) === node.type;
            var isSiblingNode =
              isSequence && SIBLING_NODE_TYPES.indexOf(node.type) !== -1;
            var isInTightListItem =
              data.parentNode.type === "listItem" && !data.parentNode.loose;
            var isPrevNodeLooseListItem =
              data.prevNode &&
              data.prevNode.type === "listItem" &&
              data.prevNode.loose;
            var isPrevNodePrettierIgnore =
              isPrettierIgnore$1(data.prevNode) === "next";
            var isBlockHtmlWithoutBlankLineBetweenPrevHtml =
              node.type === "html" &&
              data.prevNode &&
              data.prevNode.type === "html" &&
              data.prevNode.position.end.line + 1 === node.position.start.line;
            return (
              isPrevNodeLooseListItem ||
              !(
                isSiblingNode ||
                isInTightListItem ||
                isPrevNodePrettierIgnore ||
                isBlockHtmlWithoutBlankLineBetweenPrevHtml
              )
            );
          }

          function shouldPrePrintTripleHardline(node, data) {
            var isPrevNodeList = data.prevNode && data.prevNode.type === "list";
            var isIndentedCode = node.type === "code" && node.isIndented;
            return isPrevNodeList && isIndentedCode;
          }

          function shouldRemainTheSameContent(path) {
            var ancestorNode = getAncestorNode$2(path, [
              "linkReference",
              "imageReference",
            ]);
            return (
              ancestorNode &&
              (ancestorNode.type !== "linkReference" ||
                ancestorNode.referenceType !== "full")
            );
          }

          function normalizeDoc(doc$$2) {
            return mapDoc$6(doc$$2, function (currentDoc) {
              if (!currentDoc.parts) {
                return currentDoc;
              }

              if (
                currentDoc.type === "concat" &&
                currentDoc.parts.length === 1
              ) {
                return currentDoc.parts[0];
              }

              var parts = [];
              currentDoc.parts.forEach(function (part) {
                if (part.type === "concat") {
                  parts.push.apply(parts, part.parts);
                } else if (part !== "") {
                  parts.push(part);
                }
              });
              return Object.assign({}, currentDoc, {
                parts: normalizeParts$2(parts),
              });
            });
          }

          function printUrl(url, dangerousCharOrChars) {
            var dangerousChars = [" "].concat(dangerousCharOrChars || []);
            return new RegExp(
              dangerousChars
                .map(function (x) {
                  return "\\".concat(x);
                })
                .join("|")
            ).test(url)
              ? "<".concat(url, ">")
              : url;
          }

          function printTitle(title, options, printSpace) {
            if (printSpace == null) {
              printSpace = true;
            }

            if (!title) {
              return "";
            }

            if (printSpace) {
              return " " + printTitle(title, options, false);
            }

            if (
              title.includes('"') &&
              title.includes("'") &&
              !title.includes(")")
            ) {
              return "(".concat(title, ")"); // avoid escaped quotes
            } // faster than using RegExps: https://jsperf.com/performance-of-match-vs-split

            var singleCount = title.split("'").length - 1;
            var doubleCount = title.split('"').length - 1;
            var quote =
              singleCount > doubleCount
                ? '"'
                : doubleCount > singleCount
                ? "'"
                : options.singleQuote
                ? "'"
                : '"';
            title = title.replace(
              new RegExp("(".concat(quote, ")"), "g"),
              "\\$1"
            );
            return "".concat(quote).concat(title).concat(quote);
          }

          function normalizeParts$2(parts) {
            return parts.reduce(function (current, part) {
              var lastPart = util.getLast(current);

              if (typeof lastPart === "string" && typeof part === "string") {
                current.splice(-1, 1, lastPart + part);
              } else {
                current.push(part);
              }

              return current;
            }, []);
          }

          function clamp(value, min, max) {
            return value < min ? min : value > max ? max : value;
          }

          function clean$10(ast, newObj, parent) {
            delete newObj.position;
            delete newObj.raw; // front-matter
            // for codeblock

            if (
              ast.type === "code" ||
              ast.type === "yaml" ||
              ast.type === "import" ||
              ast.type === "export" ||
              ast.type === "jsx"
            ) {
              delete newObj.value;
            }

            if (ast.type === "list") {
              delete newObj.isAligned;
            } // texts can be splitted or merged

            if (ast.type === "text") {
              return null;
            }

            if (ast.type === "inlineCode") {
              newObj.value = ast.value.replace(/[ \t\n]+/g, " ");
            } // for insert pragma

            if (
              parent &&
              parent.type === "root" &&
              parent.children.length > 0 &&
              (parent.children[0] === ast ||
                ((parent.children[0].type === "yaml" ||
                  parent.children[0].type === "toml") &&
                  parent.children[1] === ast)) &&
              ast.type === "html" &&
              pragma$8.startWithPragma(ast.value)
            ) {
              return null;
            }
          }

          function hasPrettierIgnore$3(path) {
            var index = +path.getName();

            if (index === 0) {
              return false;
            }

            var prevNode = path.getParentNode().children[index - 1];
            return isPrettierIgnore$1(prevNode) === "next";
          }

          var printerMarkdown = {
            preprocess: preprocess_1$4,
            print: genericPrint$5,
            embed: embed_1$4,
            massageAstNode: clean$10,
            hasPrettierIgnore: hasPrettierIgnore$3,
            insertPragma: pragma$8.insertPragma,
          };

          var options$15 = {
            proseWrap: commonOptions.proseWrap,
            singleQuote: commonOptions.singleQuote,
          };

          var name$15 = "Markdown";
          var type$14 = "prose";
          var aliases$5 = ["pandoc"];
          var aceMode$14 = "markdown";
          var codemirrorMode$10 = "gfm";
          var codemirrorMimeType$10 = "text/x-gfm";
          var wrap = true;
          var extensions$14 = [
            ".md",
            ".markdown",
            ".mdown",
            ".mdwn",
            ".mkd",
            ".mkdn",
            ".mkdown",
            ".ronn",
            ".workbook",
          ];
          var tmScope$14 = "source.gfm";
          var languageId$14 = 222;
          var markdown = {
            name: name$15,
            type: type$14,
            aliases: aliases$5,
            aceMode: aceMode$14,
            codemirrorMode: codemirrorMode$10,
            codemirrorMimeType: codemirrorMimeType$10,
            wrap: wrap,
            extensions: extensions$14,
            tmScope: tmScope$14,
            languageId: languageId$14,
          };

          var markdown$1 = Object.freeze({
            name: name$15,
            type: type$14,
            aliases: aliases$5,
            aceMode: aceMode$14,
            codemirrorMode: codemirrorMode$10,
            codemirrorMimeType: codemirrorMimeType$10,
            wrap: wrap,
            extensions: extensions$14,
            tmScope: tmScope$14,
            languageId: languageId$14,
            default: markdown,
          });

          var require$$0$27 = (markdown$1 && markdown) || markdown$1;

          var languages$5 = [
            createLanguage(require$$0$27, {
              override: {
                since: "1.8.0",
                parsers: ["remark"],
                vscodeLanguageIds: ["markdown"],
              },
              extend: {
                filenames: ["README"],
              },
            }),
            createLanguage(
              {
                name: "MDX",
                extensions: [".mdx"],
              }, // TODO: use linguist data
              {
                override: {
                  since: "1.15.0",
                  parsers: ["mdx"],
                  vscodeLanguageIds: ["mdx"],
                },
              }
            ),
          ];
          var printers$5 = {
            mdast: printerMarkdown,
          };
          var languageMarkdown = {
            languages: languages$5,
            options: options$15,
            printers: printers$5,
          };

          function isPragma$1(text) {
            return /^\s*@(prettier|format)\s*$/.test(text);
          }

          function hasPragma$4(text) {
            return /^\s*#[^\n\S]*@(prettier|format)\s*?(\n|$)/.test(text);
          }

          function insertPragma$9(text) {
            return "# @format\n\n".concat(text);
          }

          var pragma$11 = {
            isPragma: isPragma$1,
            hasPragma: hasPragma$4,
            insertPragma: insertPragma$9,
          };

          var getLast$6 = util.getLast;

          function getAncestorCount$1(path, filter) {
            var counter = 0;
            var pathStackLength = path.stack.length - 1;

            for (var i = 0; i < pathStackLength; i++) {
              var value = path.stack[i];

              if (isNode$1(value) && filter(value)) {
                counter++;
              }
            }

            return counter;
          }
          /**
           * @param {any} value
           * @param {string[]=} types
           */

          function isNode$1(value, types) {
            return (
              value &&
              typeof value.type === "string" &&
              (!types || types.indexOf(value.type) !== -1)
            );
          }

          function mapNode$1(node, callback, parent) {
            return callback(
              "children" in node
                ? Object.assign({}, node, {
                    children: node.children.map(function (childNode) {
                      return mapNode$1(childNode, callback, node);
                    }),
                  })
                : node,
              parent
            );
          }

          function defineShortcut$1(x, key, getter) {
            Object.defineProperty(x, key, {
              get: getter,
              enumerable: false,
            });
          }

          function isNextLineEmpty$6(node, text) {
            var newlineCount = 0;
            var textLength = text.length;

            for (var i = node.position.end.offset - 1; i < textLength; i++) {
              var char = text[i];

              if (char === "\n") {
                newlineCount++;
              }

              if (newlineCount === 1 && /\S/.test(char)) {
                return false;
              }

              if (newlineCount === 2) {
                return true;
              }
            }

            return false;
          }

          function isLastDescendantNode$1(path) {
            var node = path.getValue();

            switch (node.type) {
              case "tag":
              case "anchor":
              case "comment":
                return false;
            }

            var pathStackLength = path.stack.length;

            for (var i = 1; i < pathStackLength; i++) {
              var item = path.stack[i];
              var parentItem = path.stack[i - 1];

              if (
                Array.isArray(parentItem) &&
                typeof item === "number" &&
                item !== parentItem.length - 1
              ) {
                return false;
              }
            }

            return true;
          }

          function getLastDescendantNode$2(node) {
            return "children" in node && node.children.length !== 0
              ? getLastDescendantNode$2(getLast$6(node.children))
              : node;
          }

          function isPrettierIgnore$2(comment) {
            return comment.value.trim() === "prettier-ignore";
          }

          function hasPrettierIgnore$5(path) {
            var node = path.getValue();

            if (node.type === "documentBody") {
              var document = path.getParentNode();
              return (
                hasEndComments$1(document.head) &&
                isPrettierIgnore$2(getLast$6(document.head.endComments))
              );
            }

            return (
              hasLeadingComments$1(node) &&
              isPrettierIgnore$2(getLast$6(node.leadingComments))
            );
          }

          function isEmptyNode$1(node) {
            return (
              (!node.children || node.children.length === 0) &&
              !hasComments(node)
            );
          }

          function hasComments(node) {
            return (
              hasLeadingComments$1(node) ||
              hasMiddleComments$1(node) ||
              hasIndicatorComment$1(node) ||
              hasTrailingComment$2(node) ||
              hasEndComments$1(node)
            );
          }

          function hasLeadingComments$1(node) {
            return (
              node && node.leadingComments && node.leadingComments.length !== 0
            );
          }

          function hasMiddleComments$1(node) {
            return (
              node && node.middleComments && node.middleComments.length !== 0
            );
          }

          function hasIndicatorComment$1(node) {
            return node && node.indicatorComment;
          }

          function hasTrailingComment$2(node) {
            return node && node.trailingComment;
          }

          function hasEndComments$1(node) {
            return node && node.endComments && node.endComments.length !== 0;
          }
          /**
           * " a   b c   d e   f " -> [" a   b", "c   d", "e   f "]
           */

          function splitWithSingleSpace(text) {
            var parts = [];
            var lastPart = undefined;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (
                var _iterator = text.split(/( +)/g)[Symbol.iterator](), _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var part = _step.value;

                if (part !== " ") {
                  if (lastPart === " ") {
                    parts.push(part);
                  } else {
                    parts.push((parts.pop() || "") + part);
                  }
                } else if (lastPart === undefined) {
                  parts.unshift("");
                }

                lastPart = part;
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            if (lastPart === " ") {
              parts.push((parts.pop() || "") + " ");
            }

            if (parts[0] === "") {
              parts.shift();
              parts.unshift(" " + (parts.shift() || ""));
            }

            return parts;
          }

          function getFlowScalarLineContents$1(nodeType, content, options) {
            var rawLineContents = content
              .split("\n")
              .map(function (lineContent, index, lineContents) {
                return index === 0 && index === lineContents.length - 1
                  ? lineContent
                  : index !== 0 && index !== lineContents.length - 1
                  ? lineContent.trim()
                  : index === 0
                  ? lineContent.trimRight()
                  : lineContent.trimLeft();
              });

            if (options.proseWrap === "preserve") {
              return rawLineContents.map(function (lineContent) {
                return lineContent.length === 0 ? [] : [lineContent];
              });
            }

            return rawLineContents
              .map(function (lineContent) {
                return lineContent.length === 0
                  ? []
                  : splitWithSingleSpace(lineContent);
              })
              .reduce(function (reduced, lineContentWords, index) {
                return index !== 0 &&
                  rawLineContents[index - 1].length !== 0 &&
                  lineContentWords.length !== 0 &&
                  !(
                    // trailing backslash in quoteDouble should be preserved
                    (
                      nodeType === "quoteDouble" &&
                      getLast$6(getLast$6(reduced)).endsWith("\\")
                    )
                  )
                  ? reduced.concat([reduced.pop().concat(lineContentWords)])
                  : reduced.concat([lineContentWords]);
              }, [])
              .map(function (lineContentWords) {
                return options.proseWrap === "never"
                  ? [lineContentWords.join(" ")]
                  : lineContentWords;
              });
          }

          function getBlockValueLineContents$1(node, _ref) {
            var parentIndent = _ref.parentIndent,
              isLastDescendant = _ref.isLastDescendant,
              options = _ref.options;
            var content =
              node.position.start.line === node.position.end.line
                ? ""
                : options.originalText
                    .slice(node.position.start.offset, node.position.end.offset) // exclude open line `>` or `|`
                    .match(/^[^\n]*?\n([\s\S]*)$/)[1];
            var leadingSpaceCount =
              node.indent === null
                ? (function (match) {
                    return match ? match[1].length : Infinity;
                  })(content.match(/^( *)\S/m))
                : node.indent - 1 + parentIndent;
            var rawLineContents = content
              .split("\n")
              .map(function (lineContent) {
                return lineContent.slice(leadingSpaceCount);
              });

            if (
              options.proseWrap === "preserve" ||
              node.type === "blockLiteral"
            ) {
              return removeUnnecessaryTrailingNewlines(
                rawLineContents.map(function (lineContent) {
                  return lineContent.length === 0 ? [] : [lineContent];
                })
              );
            }

            return removeUnnecessaryTrailingNewlines(
              rawLineContents
                .map(function (lineContent) {
                  return lineContent.length === 0
                    ? []
                    : splitWithSingleSpace(lineContent);
                })
                .reduce(function (reduced, lineContentWords, index) {
                  return index !== 0 &&
                    rawLineContents[index - 1].length !== 0 &&
                    lineContentWords.length !== 0 &&
                    !/^\s/.test(lineContentWords[0]) &&
                    !/^\s|\s$/.test(getLast$6(reduced))
                    ? reduced.concat([reduced.pop().concat(lineContentWords)])
                    : reduced.concat([lineContentWords]);
                }, [])
                .map(function (lineContentWords) {
                  return lineContentWords.reduce(function (reduced, word) {
                    return (
                      // disallow trailing spaces
                      reduced.length !== 0 && /\s$/.test(getLast$6(reduced))
                        ? reduced.concat(reduced.pop() + " " + word)
                        : reduced.concat(word)
                    );
                  }, []);
                })
                .map(function (lineContentWords) {
                  return options.proseWrap === "never"
                    ? [lineContentWords.join(" ")]
                    : lineContentWords;
                })
            );

            function removeUnnecessaryTrailingNewlines(lineContents) {
              if (node.chomping === "keep") {
                return getLast$6(lineContents).length === 0
                  ? lineContents.slice(0, -1)
                  : lineContents;
              }

              var trailingNewlineCount = 0;

              for (var i = lineContents.length - 1; i >= 0; i--) {
                if (lineContents[i].length === 0) {
                  trailingNewlineCount++;
                } else {
                  break;
                }
              }

              return trailingNewlineCount === 0
                ? lineContents
                : trailingNewlineCount >= 2 && !isLastDescendant // next empty line
                ? lineContents.slice(0, -(trailingNewlineCount - 1))
                : lineContents.slice(0, -trailingNewlineCount);
            }
          }

          var utils$12 = {
            getLast: getLast$6,
            getAncestorCount: getAncestorCount$1,
            isNode: isNode$1,
            isEmptyNode: isEmptyNode$1,
            mapNode: mapNode$1,
            defineShortcut: defineShortcut$1,
            isNextLineEmpty: isNextLineEmpty$6,
            isLastDescendantNode: isLastDescendantNode$1,
            getBlockValueLineContents: getBlockValueLineContents$1,
            getFlowScalarLineContents: getFlowScalarLineContents$1,
            getLastDescendantNode: getLastDescendantNode$2,
            hasPrettierIgnore: hasPrettierIgnore$5,
            hasLeadingComments: hasLeadingComments$1,
            hasMiddleComments: hasMiddleComments$1,
            hasIndicatorComment: hasIndicatorComment$1,
            hasTrailingComment: hasTrailingComment$2,
            hasEndComments: hasEndComments$1,
          };

          var insertPragma$8 = pragma$11.insertPragma;
          var isPragma = pragma$11.isPragma;
          var getAncestorCount = utils$12.getAncestorCount;
          var getBlockValueLineContents = utils$12.getBlockValueLineContents;
          var getFlowScalarLineContents = utils$12.getFlowScalarLineContents;
          var getLast$5 = utils$12.getLast;
          var getLastDescendantNode$1 = utils$12.getLastDescendantNode;
          var hasLeadingComments = utils$12.hasLeadingComments;
          var hasMiddleComments = utils$12.hasMiddleComments;
          var hasIndicatorComment = utils$12.hasIndicatorComment;
          var hasTrailingComment$1 = utils$12.hasTrailingComment;
          var hasEndComments = utils$12.hasEndComments;
          var hasPrettierIgnore$4 = utils$12.hasPrettierIgnore;
          var isLastDescendantNode = utils$12.isLastDescendantNode;
          var isNextLineEmpty$5 = utils$12.isNextLineEmpty;
          var isNode = utils$12.isNode;
          var isEmptyNode = utils$12.isEmptyNode;
          var defineShortcut = utils$12.defineShortcut;
          var mapNode = utils$12.mapNode;
          var docBuilders$3 = doc.builders;
          var conditionalGroup$2 = docBuilders$3.conditionalGroup;
          var breakParent$5 = docBuilders$3.breakParent;
          var concat$17 = docBuilders$3.concat;
          var dedent$4 = docBuilders$3.dedent;
          var dedentToRoot$3 = docBuilders$3.dedentToRoot;
          var fill$6 = docBuilders$3.fill;
          var group$16 = docBuilders$3.group;
          var hardline$13 = docBuilders$3.hardline;
          var ifBreak$8 = docBuilders$3.ifBreak;
          var join$12 = docBuilders$3.join;
          var line$11 = docBuilders$3.line;
          var lineSuffix$2 = docBuilders$3.lineSuffix;
          var literalline$7 = docBuilders$3.literalline;
          var markAsRoot$5 = docBuilders$3.markAsRoot;
          var softline$8 = docBuilders$3.softline;
          var replaceEndOfLineWith$3 = util.replaceEndOfLineWith;

          function preprocess$6(ast) {
            return mapNode(ast, defineShortcuts);
          }

          function defineShortcuts(node) {
            switch (node.type) {
              case "document":
                defineShortcut(node, "head", function () {
                  return node.children[0];
                });
                defineShortcut(node, "body", function () {
                  return node.children[1];
                });
                break;

              case "documentBody":
              case "sequenceItem":
              case "flowSequenceItem":
              case "mappingKey":
              case "mappingValue":
                defineShortcut(node, "content", function () {
                  return node.children[0];
                });
                break;

              case "mappingItem":
              case "flowMappingItem":
                defineShortcut(node, "key", function () {
                  return node.children[0];
                });
                defineShortcut(node, "value", function () {
                  return node.children[1];
                });
                break;
            }

            return node;
          }

          function genericPrint$6(path, options, print) {
            var node = path.getValue();
            var parentNode = path.getParentNode();
            var tag = !node.tag ? "" : path.call(print, "tag");
            var anchor = !node.anchor ? "" : path.call(print, "anchor");
            var nextEmptyLine =
              isNode(node, [
                "mapping",
                "sequence",
                "comment",
                "directive",
                "mappingItem",
                "sequenceItem",
              ]) && !isLastDescendantNode(path)
                ? printNextEmptyLine(path, options.originalText)
                : "";
            return concat$17([
              node.type !== "mappingValue" && hasLeadingComments(node)
                ? concat$17([
                    join$12(hardline$13, path.map(print, "leadingComments")),
                    hardline$13,
                  ])
                : "",
              tag,
              tag && anchor ? " " : "",
              anchor,
              tag || anchor
                ? isNode(node, ["sequence", "mapping"]) &&
                  !hasMiddleComments(node)
                  ? hardline$13
                  : " "
                : "",
              hasMiddleComments(node)
                ? concat$17([
                    node.middleComments.length === 1 ? "" : hardline$13,
                    join$12(hardline$13, path.map(print, "middleComments")),
                    hardline$13,
                  ])
                : "",
              hasPrettierIgnore$4(path)
                ? concat$17(
                    replaceEndOfLineWith$3(
                      options.originalText.slice(
                        node.position.start.offset,
                        node.position.end.offset
                      ),
                      literalline$7
                    )
                  )
                : group$16(_print(node, parentNode, path, options, print)),
              hasTrailingComment$1(node) &&
              !isNode(node, ["document", "documentHead"])
                ? lineSuffix$2(
                    concat$17([
                      node.type === "mappingValue" && !node.content ? "" : " ",
                      parentNode.type === "mappingKey" &&
                      path.getParentNode(2).type === "mapping" &&
                      isInlineNode(node)
                        ? ""
                        : breakParent$5,
                      path.call(print, "trailingComment"),
                    ])
                  )
                : "",
              nextEmptyLine,
              hasEndComments(node) &&
              !isNode(node, ["documentHead", "documentBody"])
                ? align$3(
                    node.type === "sequenceItem" ? 2 : 0,
                    concat$17([
                      hardline$13,
                      join$12(hardline$13, path.map(print, "endComments")),
                    ])
                  )
                : "",
            ]);
          }

          function _print(node, parentNode, path, options, print) {
            switch (node.type) {
              case "root":
                return concat$17([
                  join$12(
                    hardline$13,
                    path.map(function (childPath, index) {
                      var document = node.children[index];
                      var nextDocument = node.children[index + 1];
                      return concat$17([
                        print(childPath),
                        shouldPrintDocumentEndMarker(document, nextDocument)
                          ? concat$17([
                              hardline$13,
                              "...",
                              hasTrailingComment$1(document)
                                ? concat$17([
                                    " ",
                                    path.call(print, "trailingComment"),
                                  ])
                                : "",
                            ])
                          : !nextDocument ||
                            hasTrailingComment$1(nextDocument.head)
                          ? ""
                          : concat$17([hardline$13, "---"]),
                      ]);
                    }, "children")
                  ),
                  node.children.length === 0 ||
                  (function (lastDescendantNode) {
                    return (
                      isNode(lastDescendantNode, [
                        "blockLiteral",
                        "blockFolded",
                      ]) && lastDescendantNode.chomping === "keep"
                    );
                  })(getLastDescendantNode$1(node))
                    ? ""
                    : hardline$13,
                ]);

              case "document": {
                var nextDocument = parentNode.children[path.getName() + 1];
                return join$12(
                  hardline$13,
                  [
                    shouldPrintDocumentHeadEndMarker(
                      node,
                      nextDocument,
                      parentNode,
                      options
                    ) === "head"
                      ? join$12(
                          hardline$13,
                          [
                            node.head.children.length === 0 &&
                            node.head.endComments.length === 0
                              ? ""
                              : path.call(print, "head"),
                            concat$17([
                              "---",
                              hasTrailingComment$1(node.head)
                                ? concat$17([
                                    " ",
                                    path.call(print, "head", "trailingComment"),
                                  ])
                                : "",
                            ]),
                          ].filter(Boolean)
                        )
                      : "",
                    shouldPrintDocumentBody(node)
                      ? path.call(print, "body")
                      : "",
                  ].filter(Boolean)
                );
              }

              case "documentHead":
                return join$12(
                  hardline$13,
                  [].concat(
                    path.map(print, "children"),
                    path.map(print, "endComments")
                  )
                );

              case "documentBody": {
                var children = join$12(
                  hardline$13,
                  path.map(print, "children")
                ).parts;
                var endComments = join$12(
                  hardline$13,
                  path.map(print, "endComments")
                ).parts;
                var separator =
                  children.length === 0 || endComments.length === 0
                    ? ""
                    : (function (lastDescendantNode) {
                        return isNode(lastDescendantNode, [
                          "blockFolded",
                          "blockLiteral",
                        ])
                          ? lastDescendantNode.chomping === "keep" // there's already a newline printed at the end of blockValue (chomping=keep, lastDescendant=true)
                            ? "" // an extra newline for better readability
                            : concat$17([hardline$13, hardline$13])
                          : hardline$13;
                      })(getLastDescendantNode$1(node));
                return concat$17([].concat(children, separator, endComments));
              }

              case "directive":
                return concat$17([
                  "%",
                  join$12(" ", [node.name].concat(node.parameters)),
                ]);

              case "comment":
                return concat$17(["#", node.value]);

              case "alias":
                return concat$17(["*", node.value]);

              case "tag":
                return options.originalText.slice(
                  node.position.start.offset,
                  node.position.end.offset
                );

              case "anchor":
                return concat$17(["&", node.value]);

              case "plain":
                return printFlowScalarContent(
                  node.type,
                  options.originalText.slice(
                    node.position.start.offset,
                    node.position.end.offset
                  ),
                  options
                );

              case "quoteDouble":
              case "quoteSingle": {
                var singleQuote = "'";
                var doubleQuote = '"';
                var raw = options.originalText.slice(
                  node.position.start.offset + 1,
                  node.position.end.offset - 1
                );

                if (
                  (node.type === "quoteSingle" && raw.includes("\\")) ||
                  (node.type === "quoteDouble" && /\\[^"]/.test(raw))
                ) {
                  // only quoteDouble can use escape chars
                  // and quoteSingle do not need to escape backslashes
                  var originalQuote =
                    node.type === "quoteDouble" ? doubleQuote : singleQuote;
                  return concat$17([
                    originalQuote,
                    printFlowScalarContent(node.type, raw, options),
                    originalQuote,
                  ]);
                } else if (raw.includes(doubleQuote)) {
                  return concat$17([
                    singleQuote,
                    printFlowScalarContent(
                      node.type,
                      node.type === "quoteDouble"
                        ? raw // double quote needs to be escaped by backslash in quoteDouble
                            .replace(/\\"/g, doubleQuote)
                            .replace(/'/g, singleQuote.repeat(2))
                        : raw,
                      options
                    ),
                    singleQuote,
                  ]);
                }

                if (raw.includes(singleQuote)) {
                  return concat$17([
                    doubleQuote,
                    printFlowScalarContent(
                      node.type,
                      node.type === "quoteSingle" // single quote needs to be escaped by 2 single quotes in quoteSingle
                        ? raw.replace(/''/g, singleQuote)
                        : raw,
                      options
                    ),
                    doubleQuote,
                  ]);
                }

                var quote = options.singleQuote ? singleQuote : doubleQuote;
                return concat$17([
                  quote,
                  printFlowScalarContent(node.type, raw, options),
                  quote,
                ]);
              }

              case "blockFolded":
              case "blockLiteral": {
                var parentIndent = getAncestorCount(
                  path,
                  function (ancestorNode) {
                    return isNode(ancestorNode, ["sequence", "mapping"]);
                  }
                );
                var isLastDescendant = isLastDescendantNode(path);
                return concat$17([
                  node.type === "blockFolded" ? ">" : "|",
                  node.indent === null ? "" : node.indent.toString(),
                  node.chomping === "clip"
                    ? ""
                    : node.chomping === "keep"
                    ? "+"
                    : "-",
                  hasIndicatorComment(node)
                    ? concat$17([" ", path.call(print, "indicatorComment")])
                    : "",
                  (node.indent === null ? dedent$4 : dedentToRoot$3)(
                    align$3(
                      node.indent === null
                        ? options.tabWidth
                        : node.indent - 1 + parentIndent,
                      concat$17(
                        getBlockValueLineContents(node, {
                          parentIndent: parentIndent,
                          isLastDescendant: isLastDescendant,
                          options: options,
                        }).reduce(function (
                          reduced,
                          lineWords,
                          index,
                          lineContents
                        ) {
                          return reduced.concat(
                            index === 0 ? hardline$13 : "",
                            fill$6(join$12(line$11, lineWords).parts),
                            index !== lineContents.length - 1
                              ? lineWords.length === 0
                                ? hardline$13
                                : markAsRoot$5(literalline$7)
                              : node.chomping === "keep" && isLastDescendant
                              ? lineWords.length === 0
                                ? dedentToRoot$3(hardline$13)
                                : dedentToRoot$3(literalline$7)
                              : ""
                          );
                        },
                        [])
                      )
                    )
                  ),
                ]);
              }

              case "sequence":
                return join$12(hardline$13, path.map(print, "children"));

              case "sequenceItem":
                return concat$17([
                  "- ",
                  align$3(2, !node.content ? "" : path.call(print, "content")),
                ]);

              case "mappingKey":
                return !node.content ? "" : path.call(print, "content");

              case "mappingValue":
                return !node.content ? "" : path.call(print, "content");

              case "mapping":
                return join$12(hardline$13, path.map(print, "children"));

              case "mappingItem":
              case "flowMappingItem": {
                var isEmptyMappingKey = isEmptyNode(node.key);
                var isEmptyMappingValue = isEmptyNode(node.value);

                if (isEmptyMappingKey && isEmptyMappingValue) {
                  return concat$17([": "]);
                }

                var key = path.call(print, "key");
                var value = path.call(print, "value");

                if (isEmptyMappingValue) {
                  return node.type === "flowMappingItem" &&
                    parentNode.type === "flowMapping"
                    ? key
                    : node.type === "mappingItem" &&
                      isAbsolutelyPrintedAsSingleLineNode(
                        node.key.content,
                        options
                      ) &&
                      !hasTrailingComment$1(node.key.content) &&
                      (!parentNode.tag ||
                        parentNode.tag.value !== "tag:yaml.org,2002:set")
                    ? concat$17([
                        key,
                        needsSpaceInFrontOfMappingValue(node) ? " " : "",
                        ":",
                      ])
                    : concat$17(["? ", align$3(2, key)]);
                }

                if (isEmptyMappingKey) {
                  return concat$17([": ", align$3(2, value)]);
                }

                var groupId = Symbol("mappingKey");
                var forceExplicitKey =
                  hasLeadingComments(node.value) ||
                  !isInlineNode(node.key.content);
                return forceExplicitKey
                  ? concat$17([
                      "? ",
                      align$3(2, key),
                      hardline$13,
                      join$12(
                        "",
                        path
                          .map(print, "value", "leadingComments")
                          .map(function (comment) {
                            return concat$17([comment, hardline$13]);
                          })
                      ),
                      ": ",
                      align$3(2, value),
                    ]) // force singleline
                  : isSingleLineNode(node.key.content) &&
                    !hasLeadingComments(node.key.content) &&
                    !hasMiddleComments(node.key.content) &&
                    !hasTrailingComment$1(node.key.content) &&
                    !hasEndComments(node.key) &&
                    !hasLeadingComments(node.value.content) &&
                    !hasMiddleComments(node.value.content) &&
                    !hasEndComments(node.value) &&
                    isAbsolutelyPrintedAsSingleLineNode(
                      node.value.content,
                      options
                    )
                  ? concat$17([
                      key,
                      needsSpaceInFrontOfMappingValue(node) ? " " : "",
                      ": ",
                      value,
                    ])
                  : conditionalGroup$2([
                      concat$17([
                        group$16(
                          concat$17([
                            ifBreak$8("? "),
                            group$16(align$3(2, key), {
                              id: groupId,
                            }),
                          ])
                        ),
                        ifBreak$8(
                          concat$17([hardline$13, ": ", align$3(2, value)]),
                          indent(
                            concat$17([
                              needsSpaceInFrontOfMappingValue(node) ? " " : "",
                              ":",
                              hasLeadingComments(node.value.content) ||
                              (hasEndComments(node.value) &&
                                node.value.content &&
                                !isNode(node.value.content, [
                                  "mapping",
                                  "sequence",
                                ])) ||
                              (parentNode.type === "mapping" &&
                                hasTrailingComment$1(node.key.content) &&
                                isInlineNode(node.value.content)) ||
                              (isNode(node.value.content, [
                                "mapping",
                                "sequence",
                              ]) &&
                                node.value.content.tag === null &&
                                node.value.content.anchor === null)
                                ? hardline$13
                                : !node.value.content
                                ? ""
                                : line$11,
                              value,
                            ])
                          ),
                          {
                            groupId: groupId,
                          }
                        ),
                      ]),
                    ]);
              }

              case "flowMapping":
              case "flowSequence": {
                var openMarker = node.type === "flowMapping" ? "{" : "[";
                var closeMarker = node.type === "flowMapping" ? "}" : "]";
                var bracketSpacing =
                  node.type === "flowMapping" &&
                  node.children.length !== 0 &&
                  options.bracketSpacing
                    ? line$11
                    : softline$8;

                var isLastItemEmptyMappingItem =
                  node.children.length !== 0 &&
                  (function (lastItem) {
                    return (
                      lastItem.type === "flowMappingItem" &&
                      isEmptyNode(lastItem.key) &&
                      isEmptyNode(lastItem.value)
                    );
                  })(getLast$5(node.children));

                return concat$17([
                  openMarker,
                  indent(
                    concat$17([
                      bracketSpacing,
                      concat$17(
                        path.map(function (childPath, index) {
                          return concat$17([
                            print(childPath),
                            index === node.children.length - 1
                              ? ""
                              : concat$17([
                                  ",",
                                  line$11,
                                  node.children[index].position.start.line !==
                                  node.children[index + 1].position.start.line
                                    ? printNextEmptyLine(
                                        childPath,
                                        options.originalText
                                      )
                                    : "",
                                ]),
                          ]);
                        }, "children")
                      ),
                      ifBreak$8(",", ""),
                    ])
                  ),
                  isLastItemEmptyMappingItem ? "" : bracketSpacing,
                  closeMarker,
                ]);
              }

              case "flowSequenceItem":
                return path.call(print, "content");
              // istanbul ignore next

              default:
                throw new Error("Unexpected node type ".concat(node.type));
            }

            function indent(doc$$2) {
              return docBuilders$3.align(" ".repeat(options.tabWidth), doc$$2);
            }
          }

          function align$3(n, doc$$2) {
            return typeof n === "number" && n > 0
              ? docBuilders$3.align(" ".repeat(n), doc$$2)
              : docBuilders$3.align(n, doc$$2);
          }

          function isInlineNode(node) {
            if (!node) {
              return true;
            }

            switch (node.type) {
              case "plain":
              case "quoteDouble":
              case "quoteSingle":
              case "alias":
              case "flowMapping":
              case "flowSequence":
                return true;

              default:
                return false;
            }
          }

          function isSingleLineNode(node) {
            if (!node) {
              return true;
            }

            switch (node.type) {
              case "plain":
              case "quoteDouble":
              case "quoteSingle":
                return node.position.start.line === node.position.end.line;

              case "alias":
                return true;

              default:
                return false;
            }
          }

          function shouldPrintDocumentBody(document) {
            return (
              document.body.children.length !== 0 ||
              hasEndComments(document.body)
            );
          }

          function shouldPrintDocumentEndMarker(document, nextDocument) {
            return (
              /**
               *... # trailingComment
               */
              hasTrailingComment$1(document) ||
              (nextDocument &&
                /**
                 * ...
                 * %DIRECTIVE
                 * ---
                 */
                (nextDocument.head.children.length !== 0 ||
                  /**
                   * ...
                   * # endComment
                   * ---
                   */
                  hasEndComments(nextDocument.head)))
            );
          }

          function shouldPrintDocumentHeadEndMarker(
            document,
            nextDocument,
            root,
            options
          ) {
            if (
              /**
               * ---
               * preserve the first document head end marker
               */
              (root.children[0] === document &&
                /---(\s|$)/.test(
                  options.originalText.slice(
                    options.locStart(document),
                    options.locStart(document) + 4
                  )
                )) ||
              /**
               * %DIRECTIVE
               * ---
               */
              document.head.children.length !== 0 ||
              /**
               * # end comment
               * ---
               */
              hasEndComments(document.head) ||
              /**
               * --- # trailing comment
               */
              hasTrailingComment$1(document.head)
            ) {
              return "head";
            }

            if (shouldPrintDocumentEndMarker(document, nextDocument)) {
              return false;
            }

            return nextDocument ? "root" : false;
          }

          function isAbsolutelyPrintedAsSingleLineNode(node, options) {
            if (!node) {
              return true;
            }

            switch (node.type) {
              case "plain":
              case "quoteSingle":
              case "quoteDouble":
                break;

              case "alias":
                return true;

              default:
                return false;
            }

            if (options.proseWrap === "preserve") {
              return node.position.start.line === node.position.end.line;
            }

            if (
              // backslash-newline
              /\\$/m.test(
                options.originalText.slice(
                  node.position.start.offset,
                  node.position.end.offset
                )
              )
            ) {
              return false;
            }

            switch (options.proseWrap) {
              case "never":
                return node.value.indexOf("\n") === -1;

              case "always":
                return !/[\n ]/.test(node.value);
              // istanbul ignore next

              default:
                return false;
            }
          }

          function needsSpaceInFrontOfMappingValue(node) {
            return node.key.content && node.key.content.type === "alias";
          }

          function printNextEmptyLine(path, originalText) {
            var node = path.getValue();
            var root = path.stack[0];
            root.isNextEmptyLinePrintedChecklist =
              root.isNextEmptyLinePrintedChecklist || [];

            if (!root.isNextEmptyLinePrintedChecklist[node.position.end.line]) {
              if (isNextLineEmpty$5(node, originalText)) {
                root.isNextEmptyLinePrintedChecklist[
                  node.position.end.line
                ] = true;
                return softline$8;
              }
            }

            return "";
          }

          function printFlowScalarContent(nodeType, content, options) {
            var lineContents = getFlowScalarLineContents(
              nodeType,
              content,
              options
            );
            return join$12(
              hardline$13,
              lineContents.map(function (lineContentWords) {
                return fill$6(join$12(line$11, lineContentWords).parts);
              })
            );
          }

          function clean$11(
            node,
            newNode
            /*, parent */
          ) {
            if (isNode(newNode)) {
              delete newNode.position;

              switch (newNode.type) {
                case "comment":
                  // insert pragma
                  if (isPragma(newNode.value)) {
                    return null;
                  }

                  break;

                case "quoteDouble":
                case "quoteSingle":
                  newNode.type = "quote";
                  break;
              }
            }
          }

          var printerYaml = {
            preprocess: preprocess$6,
            print: genericPrint$6,
            massageAstNode: clean$11,
            insertPragma: insertPragma$8,
          };

          var options$18 = {
            bracketSpacing: commonOptions.bracketSpacing,
            singleQuote: commonOptions.singleQuote,
            proseWrap: commonOptions.proseWrap,
          };

          var name$16 = "YAML";
          var type$15 = "data";
          var tmScope$15 = "source.yaml";
          var aliases$6 = ["yml"];
          var extensions$15 = [
            ".yml",
            ".mir",
            ".reek",
            ".rviz",
            ".sublime-syntax",
            ".syntax",
            ".yaml",
            ".yaml-tmlanguage",
            ".yml.mysql",
          ];
          var filenames$3 = [
            ".clang-format",
            ".clang-tidy",
            ".gemrc",
            "glide.lock",
          ];
          var aceMode$15 = "yaml";
          var codemirrorMode$11 = "yaml";
          var codemirrorMimeType$11 = "text/x-yaml";
          var languageId$15 = 407;
          var yaml = {
            name: name$16,
            type: type$15,
            tmScope: tmScope$15,
            aliases: aliases$6,
            extensions: extensions$15,
            filenames: filenames$3,
            aceMode: aceMode$15,
            codemirrorMode: codemirrorMode$11,
            codemirrorMimeType: codemirrorMimeType$11,
            languageId: languageId$15,
          };

          var yaml$1 = Object.freeze({
            name: name$16,
            type: type$15,
            tmScope: tmScope$15,
            aliases: aliases$6,
            extensions: extensions$15,
            filenames: filenames$3,
            aceMode: aceMode$15,
            codemirrorMode: codemirrorMode$11,
            codemirrorMimeType: codemirrorMimeType$11,
            languageId: languageId$15,
            default: yaml,
          });

          var require$$0$29 = (yaml$1 && yaml) || yaml$1;

          var languages$6 = [
            createLanguage(require$$0$29, {
              override: {
                since: "1.14.0",
                parsers: ["yaml"],
                vscodeLanguageIds: ["yaml"],
              },
            }),
          ];
          var languageYaml = {
            languages: languages$6,
            printers: {
              yaml: printerYaml,
            },
            options: options$18,
          };

          var version = require$$0.version;
          var getSupportInfo = support.getSupportInfo;
          var internalPlugins = [
            languageCss,
            languageGraphql,
            languageHandlebars,
            languageHtml,
            languageJs,
            languageMarkdown,
            languageYaml,
          ];

          var isArray =
            Array.isArray ||
            function (arr) {
              return Object.prototype.toString.call(arr) === "[object Array]";
            }; // Luckily `opts` is always the 2nd argument

          function withPlugins(fn) {
            return function () {
              var args = Array.from(arguments);
              var plugins = (args[1] && args[1].plugins) || [];

              if (!isArray(plugins)) {
                plugins = Object.values(plugins);
              }

              args[1] = Object.assign({}, args[1], {
                plugins: internalPlugins.concat(plugins),
              });
              return fn.apply(null, args);
            };
          }

          var formatWithCursor = withPlugins(core.formatWithCursor);
          var standalone$2 = {
            formatWithCursor: formatWithCursor,
            format: function format(text, opts) {
              return formatWithCursor(text, opts).formatted;
            },
            check: function check(text, opts) {
              var formatted = formatWithCursor(text, opts).formatted;
              return formatted === text;
            },
            doc: doc,
            getSupportInfo: withPlugins(getSupportInfo),
            version: version,
            util: utilShared,
            __debug: {
              parse: withPlugins(core.parse),
              formatAST: withPlugins(core.formatAST),
              formatDoc: withPlugins(core.formatDoc),
              printToDoc: withPlugins(core.printToDoc),
              printDocToString: withPlugins(core.printDocToString),
            },
          };

          var standalone = standalone$2;

          return standalone;
        });

        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(9));

      /***/
    },
    /* 4 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const _ = __webpack_require__(7);
      const { ifBreak, join, concat, group } = __webpack_require__(6);
      const { getTokenLeadingComments, printTokenWithComments } =
        __webpack_require__(2);
      const { hasComments } = __webpack_require__(8);
      const { indent, hardline, line } = __webpack_require__(3).doc.builders;

      const orderedModifiers = [
        "Public",
        "Protected",
        "Private",
        "Abstract",
        "Default",
        "Static",
        "Final",
        "Transient",
        "Volatile",
        "Synchronized",
        "Native",
        "Strictfp",
      ];

      function buildFqn(tokens, dots) {
        return rejectAndJoinSeps(dots ? dots : [], tokens);
      }

      function rejectAndJoinSeps(sepTokens, elems, sep) {
        if (!Array.isArray(sepTokens)) {
          return rejectAndJoin(sepTokens, elems);
        }
        const actualElements = reject(elems);
        const res = [];

        for (let i = 0; i < sepTokens.length; i++) {
          res.push(actualElements[i], sepTokens[i]);
          if (sep) {
            res.push(sep);
          }
        }
        res.push(...actualElements.slice(sepTokens.length));
        return concat(res);
      }

      function reject(elems) {
        return elems.filter((item) => {
          if (typeof item === "string") {
            return item !== "";
          }
          // eslint-ignore next - We want the conversion to boolean!
          return item != false && item !== undefined;
        });
      }

      function rejectSeparators(separators, elems) {
        const realElements = reject(elems);

        const realSeparators = [];
        for (let i = 0; i < realElements.length - 1; i++) {
          if (realElements[i] !== "") {
            realSeparators.push(separators[i]);
          }
        }

        return realSeparators;
      }

      function rejectAndJoin(sep, elems) {
        const actualElements = reject(elems);

        return join(sep, actualElements);
      }

      function rejectAndConcat(elems) {
        const actualElements = reject(elems);

        return concat(actualElements);
      }

      function sortAnnotationIdentifier(annotations, identifiers) {
        let tokens = [...identifiers];

        if (annotations && annotations.length > 0) {
          tokens = [...tokens, ...annotations];
        }

        return tokens.sort((a, b) => {
          const startOffset1 =
            a.name === "annotation"
              ? a.children.At[0].startOffset
              : a.startOffset;
          const startOffset2 =
            b.name === "annotation"
              ? b.children.At[0].startOffset
              : b.startOffset;
          return startOffset1 - startOffset2;
        });
      }

      function sortTokens() {
        let tokens = [];

        _.forEach(arguments, (argument) => {
          if (argument) {
            tokens = tokens.concat(argument);
          }
        });

        return tokens.sort((a, b) => {
          return a.startOffset - b.startOffset;
        });
      }

      function matchCategory(token, categoryName) {
        const labels = token.tokenType.CATEGORIES.map((category) => {
          return category.LABEL;
        });

        return labels.indexOf(categoryName) !== -1;
      }

      function sortClassTypeChildren(
        annotations,
        typeArguments,
        identifiers,
        dots
      ) {
        let tokens = [...identifiers];

        if (annotations && annotations.length > 0) {
          tokens = [...tokens, ...annotations];
        }

        if (typeArguments && typeArguments.length > 0) {
          tokens = [...tokens, ...typeArguments];
        }

        if (dots && dots.length > 0) {
          tokens = [...tokens, ...dots];
        }

        return tokens.sort((a, b) => {
          const startOffsetA = a.name
            ? a.children.At
              ? a.children.At[0].startOffset
              : a.children.Less[0].startOffset
            : a.startOffset;
          const startOffsetB = b.name
            ? b.children.At
              ? b.children.At[0].startOffset
              : b.children.Less[0].startOffset
            : b.startOffset;
          return startOffsetA - startOffsetB;
        });
      }

      function sortModifiers(modifiers) {
        let firstAnnotations = [];
        const otherModifiers = [];
        let lastAnnotations = [];
        let hasOtherModifier = false;

        /**
         * iterate in reverse order because we special-case
         * method annotations which come after all other
         * modifiers
         */
        _.forEachRight(modifiers, (modifier) => {
          const isAnnotation = modifier.children.annotation !== undefined;
          const isMethodAnnotation =
            isAnnotation &&
            (modifier.name === "methodModifier" ||
              modifier.name === "interfaceMethodModifier");

          if (isAnnotation) {
            if (isMethodAnnotation && !hasOtherModifier) {
              lastAnnotations.unshift(modifier);
            } else {
              firstAnnotations.unshift(modifier);
            }
          } else {
            otherModifiers.unshift(modifier);
            hasOtherModifier = true;
          }
        });

        /**
         * if there are only annotations, move everything from
         * lastAnnotations to firstAnnotations
         */
        if (!hasOtherModifier) {
          firstAnnotations = firstAnnotations.concat(lastAnnotations);
          lastAnnotations = [];
        }

        otherModifiers.sort((a, b) => {
          const modifierIndexA = orderedModifiers.indexOf(
            Object.keys(a.children)[0]
          );
          const modifierIndexB = orderedModifiers.indexOf(
            Object.keys(b.children)[0]
          );

          return modifierIndexA - modifierIndexB;
        });

        return [firstAnnotations, otherModifiers.concat(lastAnnotations)];
      }

      function findDeepElementInPartsArray(item, elt) {
        if (Array.isArray(item)) {
          if (item.includes(elt)) {
            return true;
          }
          for (let i = 0; i < item.length; i++) {
            if (findDeepElementInPartsArray(item[i], elt)) {
              return true;
            }
          }
        } else {
          for (const key in item) {
            if (
              typeof item[key] === "object" &&
              findDeepElementInPartsArray(item[key], elt)
            ) {
              return true;
            }
          }
        }

        return false;
      }

      function displaySemicolon(token, params) {
        if (params !== undefined && params.allowEmptyStatement) {
          return printTokenWithComments(token);
        }

        if (!hasComments(token)) {
          return "";
        }

        token.image = "";
        return printTokenWithComments(token);
      }

      function isExplicitLambdaParameter(ctx) {
        return (
          ctx &&
          ctx.lambdaParameterList &&
          ctx.lambdaParameterList[0] &&
          ctx.lambdaParameterList[0].children &&
          ctx.lambdaParameterList[0].children.explicitLambdaParameterList
        );
      }

      function getBlankLinesSeparator(ctx) {
        if (ctx === undefined) {
          return undefined;
        }

        const separators = [];
        for (let i = 0; i < ctx.length - 1; i++) {
          const previousRuleEndLineWithComment =
            ctx[i].trailingComments !== undefined
              ? ctx[i].trailingComments[ctx[i].trailingComments.length - 1]
                  .endLine
              : ctx[i].location.endLine;

          const nextRuleStartLineWithComment =
            ctx[i + 1].leadingComments !== undefined
              ? ctx[i + 1].leadingComments[0].startLine
              : ctx[i + 1].location.startLine;

          if (
            nextRuleStartLineWithComment - previousRuleEndLineWithComment >
            1
          ) {
            separators.push(concat([hardline, hardline]));
          } else {
            separators.push(hardline);
          }
        }

        return separators;
      }

      function getDeclarationsSeparator(
        declarations,
        needLineDeclaration,
        isSemicolon
      ) {
        const declarationsWithoutEmptyStatements = declarations.filter(
          (declaration) => !isSemicolon(declaration)
        );

        const userBlankLinesSeparators = getBlankLinesSeparator(
          declarationsWithoutEmptyStatements
        );
        const additionalBlankLines =
          declarationsWithoutEmptyStatements.map(needLineDeclaration);

        const separators = [];
        let indexNextNotEmptyDeclaration = 0;
        for (let i = 0; i < declarations.length - 1; i++) {
          // if the empty statement has comments
          // we want to print them on their own line
          if (isSemicolon(declarations[i])) {
            if (hasComments(declarations[i])) {
              separators.push(hardline);
            }
          } else if (
            indexNextNotEmptyDeclaration <
            declarationsWithoutEmptyStatements.length - 1
          ) {
            const isTwoHardLines =
              userBlankLinesSeparators[indexNextNotEmptyDeclaration].parts[0]
                .type === "concat";
            const additionalSep =
              !isTwoHardLines &&
              (additionalBlankLines[indexNextNotEmptyDeclaration + 1] ||
                additionalBlankLines[indexNextNotEmptyDeclaration])
                ? hardline
                : "";
            separators.push(
              concat([
                userBlankLinesSeparators[indexNextNotEmptyDeclaration],
                additionalSep,
              ])
            );

            indexNextNotEmptyDeclaration += 1;
          }
        }

        return separators;
      }

      function needLineClassBodyDeclaration(declaration) {
        if (declaration.children.classMemberDeclaration === undefined) {
          return true;
        }

        const classMemberDeclaration =
          declaration.children.classMemberDeclaration[0];

        if (classMemberDeclaration.children.fieldDeclaration !== undefined) {
          const fieldDeclaration =
            classMemberDeclaration.children.fieldDeclaration[0];
          if (
            fieldDeclaration.children.fieldModifier !== undefined &&
            fieldDeclaration.children.fieldModifier[0].children.annotation !==
              undefined
          ) {
            return true;
          }
          return false;
        } else if (classMemberDeclaration.children.Semicolon !== undefined) {
          return false;
        }

        return true;
      }

      function needLineInterfaceMemberDeclaration(declaration) {
        if (declaration.children.constantDeclaration !== undefined) {
          const constantDeclaration =
            declaration.children.constantDeclaration[0];
          if (
            constantDeclaration.children.constantModifier !== undefined &&
            constantDeclaration.children.constantModifier[0].children
              .annotation !== undefined
          ) {
            return true;
          }
          return false;
        } else if (
          declaration.children.interfaceMethodDeclaration !== undefined
        ) {
          const interfaceMethodDeclaration =
            declaration.children.interfaceMethodDeclaration[0];
          if (
            interfaceMethodDeclaration.children.interfaceMethodModifier !==
              undefined &&
            interfaceMethodDeclaration.children.interfaceMethodModifier[0]
              .children.annotation !== undefined
          ) {
            return true;
          }
          return false;
        }

        return true;
      }

      function isClassBodyDeclarationASemicolon(classBodyDeclaration) {
        if (classBodyDeclaration.children.classMemberDeclaration) {
          if (
            classBodyDeclaration.children.classMemberDeclaration[0].children
              .Semicolon !== undefined
          ) {
            return true;
          }
        }
        return false;
      }

      function isInterfaceMemberASemicolon(interfaceMemberDeclaration) {
        return interfaceMemberDeclaration.children.Semicolon !== undefined;
      }

      function getClassBodyDeclarationsSeparator(classBodyDeclarationContext) {
        return getDeclarationsSeparator(
          classBodyDeclarationContext,
          needLineClassBodyDeclaration,
          isClassBodyDeclarationASemicolon
        );
      }

      function getInterfaceBodyDeclarationsSeparator(
        interfaceMemberDeclarationContext
      ) {
        return getDeclarationsSeparator(
          interfaceMemberDeclarationContext,
          needLineInterfaceMemberDeclaration,
          isInterfaceMemberASemicolon
        );
      }

      function putIntoBraces(argument, separator, LBrace, RBrace) {
        const rightBraceLeadingComments = getTokenLeadingComments(RBrace);
        const lastBreakLine =
          // check if last element of the array is a line
          rightBraceLeadingComments.length !== 0 &&
          rightBraceLeadingComments[rightBraceLeadingComments.length - 1] ===
            hardline
            ? rightBraceLeadingComments.pop()
            : separator;
        delete RBrace.leadingComments;

        let contentInsideBraces;
        if (argument === undefined || argument === "") {
          if (rightBraceLeadingComments.length === 0) {
            return concat([LBrace, RBrace]);
          }
          contentInsideBraces = [separator, ...rightBraceLeadingComments];
        } else if (rightBraceLeadingComments.length !== 0) {
          contentInsideBraces = [
            separator,
            argument,
            separator,
            ...rightBraceLeadingComments,
          ];
        } else {
          contentInsideBraces = [separator, argument];
        }

        return group(
          rejectAndConcat([
            LBrace,
            indent(concat(contentInsideBraces)),
            lastBreakLine,
            RBrace,
          ])
        );
      }

      const andOrBinaryOperators = new Set(["&&", "||", "&", "|", "^"]);
      function separateTokensIntoGroups(ctx) {
        /**
         * separate tokens into groups by andOrBinaryOperators ("&&", "||", "&", "|", "^")
         * in order to break those operators in priority.
         */
        const tokens = sortTokens(
          ctx.Instanceof,
          ctx.AssignmentOperator,
          ctx.Less,
          ctx.Greater,
          ctx.BinaryOperator
        );

        const groupsOfOperator = [];
        const sortedBinaryOperators = [];
        let tmpGroup = [];
        tokens.forEach((token) => {
          if (
            matchCategory(token, "'BinaryOperator'") &&
            andOrBinaryOperators.has(token.image)
          ) {
            sortedBinaryOperators.push(token);
            groupsOfOperator.push(tmpGroup);
            tmpGroup = [];
          } else {
            tmpGroup.push(token);
          }
        });

        groupsOfOperator.push(tmpGroup);

        return {
          groupsOfOperator,
          sortedBinaryOperators,
        };
      }

      function isShiftOperator(tokens, index) {
        if (tokens.length <= index + 1) {
          return "none";
        }

        if (
          tokens[index].image === "<" &&
          tokens[index + 1].image === "<" &&
          tokens[index].startOffset === tokens[index + 1].startOffset - 1
        ) {
          return "leftShift";
        }
        if (
          tokens[index].image === ">" &&
          tokens[index + 1].image === ">" &&
          tokens[index].startOffset === tokens[index + 1].startOffset - 1
        ) {
          if (
            tokens.length > index + 2 &&
            tokens[index + 2].image === ">" &&
            tokens[index + 1].startOffset === tokens[index + 2].startOffset - 1
          ) {
            return "doubleRightShift";
          }
          return "rightShift";
        }

        return "none";
      }

      function retrieveNodesToken(ctx) {
        const tokens = retrieveNodesTokenRec(ctx);
        tokens.sort((token1, token2) => {
          return token1.startOffset - token2.startOffset;
        });
        return tokens;
      }

      function retrieveNodesTokenRec(ctx) {
        const tokens = [];
        if (
          ctx &&
          Object.prototype.hasOwnProperty.call(ctx, "image") &&
          ctx.tokenType
        ) {
          if (ctx.leadingComments) {
            tokens.push(...ctx.leadingComments);
          }
          tokens.push(ctx);
          if (ctx.trailingComments) {
            tokens.push(...ctx.trailingComments);
          }
          return tokens;
        }
        Object.keys(ctx.children).forEach((child) => {
          ctx.children[child].forEach((subctx) => {
            tokens.push(...retrieveNodesTokenRec(subctx));
          });
        });
        return tokens;
      }

      function isStatementEmptyStatement(statement) {
        return (
          statement === ";" ||
          (statement.type === "concat" && statement.parts[0] === ";")
        );
      }

      function sortImports(imports) {
        const staticImports = [];
        const nonStaticImports = [];

        if (imports !== undefined) {
          for (let i = 0; i < imports.length; i++) {
            if (imports[i].children.Static !== undefined) {
              staticImports.push(imports[i]);
            } else if (imports[i].children.emptyStatement === undefined) {
              nonStaticImports.push(imports[i]);
            }
          }

          // TODO: Could be optimized as we could expect that the array is already almost sorted
          const comparator = (first, second) =>
            compareFqn(
              first.children.packageOrTypeName[0],
              second.children.packageOrTypeName[0]
            );
          staticImports.sort(comparator);
          nonStaticImports.sort(comparator);
        }

        return {
          staticImports,
          nonStaticImports,
        };
      }

      function compareFqn(packageOrTypeNameFirst, packageOrTypeNameSecond) {
        const identifiersFirst = packageOrTypeNameFirst.children.Identifier;
        const identifiersSecond = packageOrTypeNameSecond.children.Identifier;

        const minParts = Math.min(
          identifiersFirst.length,
          identifiersSecond.length
        );
        for (let i = 0; i < minParts; i++) {
          if (identifiersFirst[i].image < identifiersSecond[i].image) {
            return -1;
          } else if (identifiersFirst[i].image > identifiersSecond[i].image) {
            return 1;
          }
        }

        if (identifiersFirst.length < identifiersSecond.length) {
          return -1;
        } else if (identifiersFirst.length > identifiersSecond.length) {
          return 1;
        }

        return 0;
      }

      function isUniqueMethodInvocation(primarySuffixes) {
        if (primarySuffixes === undefined) {
          return 0;
        }

        let count = 0;
        primarySuffixes.forEach((primarySuffix) => {
          if (primarySuffix.children.methodInvocationSuffix !== undefined) {
            count++;

            if (count > 1) {
              return 2;
            }
          }
        });

        return count;
      }

      function printArrayList({
        list,
        extraComma,
        LCurly,
        RCurly,
        trailingComma,
      }) {
        let optionalComma;
        if (trailingComma !== "none") {
          optionalComma = extraComma
            ? ifBreak(extraComma[0], {
                ...extraComma[0],
                image: "",
              })
            : ifBreak(",", "");
        } else {
          optionalComma = extraComma ? { ...extraComma[0], image: "" } : "";
        }

        return putIntoBraces(
          rejectAndConcat([list, optionalComma]),
          line,
          LCurly,
          RCurly
        );
      }

      module.exports = {
        buildFqn,
        reject,
        rejectAndJoin,
        rejectAndConcat,
        sortAnnotationIdentifier,
        sortClassTypeChildren,
        sortTokens,
        matchCategory,
        sortModifiers,
        rejectAndJoinSeps,
        findDeepElementInPartsArray,
        isExplicitLambdaParameter,
        getBlankLinesSeparator,
        displaySemicolon,
        rejectSeparators,
        putIntoBraces,
        getInterfaceBodyDeclarationsSeparator,
        getClassBodyDeclarationsSeparator,
        separateTokensIntoGroups,
        isShiftOperator,
        retrieveNodesToken,
        isStatementEmptyStatement,
        sortImports,
        isUniqueMethodInvocation,
        printArrayList,
      };

      /***/
    },
    /* 5 */
    /***/ function (module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__,
        __WEBPACK_AMD_DEFINE_ARRAY__,
        __WEBPACK_AMD_DEFINE_RESULT__;
      (function (root, factory) {
        // istanbul ignore next
        if (true) {
          // istanbul ignore next
          !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
          (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
          (__WEBPACK_AMD_DEFINE_RESULT__ =
            typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
              ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                  exports,
                  __WEBPACK_AMD_DEFINE_ARRAY__
                )
              : __WEBPACK_AMD_DEFINE_FACTORY__),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {
        }
      })(
        typeof self !== "undefined"
          ? // istanbul ignore next
            self
          : this,
        function () {
          // references
          // https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983
          // https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern
          function RegExpParser() {}

          RegExpParser.prototype.saveState = function () {
            return {
              idx: this.idx,
              input: this.input,
              groupIdx: this.groupIdx,
            };
          };

          RegExpParser.prototype.restoreState = function (newState) {
            this.idx = newState.idx;
            this.input = newState.input;
            this.groupIdx = newState.groupIdx;
          };

          RegExpParser.prototype.pattern = function (input) {
            // parser state
            this.idx = 0;
            this.input = input;
            this.groupIdx = 0;

            this.consumeChar("/");
            var value = this.disjunction();
            this.consumeChar("/");

            var flags = {
              type: "Flags",
              global: false,
              ignoreCase: false,
              multiLine: false,
              unicode: false,
              sticky: false,
            };

            while (this.isRegExpFlag()) {
              switch (this.popChar()) {
                case "g":
                  addFlag(flags, "global");
                  break;
                case "i":
                  addFlag(flags, "ignoreCase");
                  break;
                case "m":
                  addFlag(flags, "multiLine");
                  break;
                case "u":
                  addFlag(flags, "unicode");
                  break;
                case "y":
                  addFlag(flags, "sticky");
                  break;
              }
            }

            if (this.idx !== this.input.length) {
              throw Error("Redundant input: " + this.input.substring(this.idx));
            }
            return { type: "Pattern", flags: flags, value: value };
          };

          RegExpParser.prototype.disjunction = function () {
            var alts = [];
            alts.push(this.alternative());

            while (this.peekChar() === "|") {
              this.consumeChar("|");
              alts.push(this.alternative());
            }

            return { type: "Disjunction", value: alts };
          };

          RegExpParser.prototype.alternative = function () {
            var terms = [];

            while (this.isTerm()) {
              terms.push(this.term());
            }

            return { type: "Alternative", value: terms };
          };

          RegExpParser.prototype.term = function () {
            if (this.isAssertion()) {
              return this.assertion();
            } else {
              return this.atom();
            }
          };

          RegExpParser.prototype.assertion = function () {
            switch (this.popChar()) {
              case "^":
                return { type: "StartAnchor" };
              case "$":
                return { type: "EndAnchor" };
              // '\b' or '\B'
              case "\\":
                switch (this.popChar()) {
                  case "b":
                    return { type: "WordBoundary" };
                  case "B":
                    return { type: "NonWordBoundary" };
                }
                // istanbul ignore next
                throw Error("Invalid Assertion Escape");
              // '(?=' or '(?!'
              case "(":
                this.consumeChar("?");

                var type;
                switch (this.popChar()) {
                  case "=":
                    type = "Lookahead";
                    break;
                  case "!":
                    type = "NegativeLookahead";
                    break;
                }
                ASSERT_EXISTS(type);

                var disjunction = this.disjunction();

                this.consumeChar(")");

                return { type: type, value: disjunction };
            }
            // istanbul ignore next
            ASSERT_NEVER_REACH_HERE();
          };

          RegExpParser.prototype.quantifier = function (isBacktracking) {
            var range;
            switch (this.popChar()) {
              case "*":
                range = {
                  atLeast: 0,
                  atMost: Infinity,
                };
                break;
              case "+":
                range = {
                  atLeast: 1,
                  atMost: Infinity,
                };
                break;
              case "?":
                range = {
                  atLeast: 0,
                  atMost: 1,
                };
                break;
              case "{":
                var atLeast = this.integerIncludingZero();
                switch (this.popChar()) {
                  case "}":
                    range = {
                      atLeast: atLeast,
                      atMost: atLeast,
                    };
                    break;
                  case ",":
                    var atMost;
                    if (this.isDigit()) {
                      atMost = this.integerIncludingZero();
                      range = {
                        atLeast: atLeast,
                        atMost: atMost,
                      };
                    } else {
                      range = {
                        atLeast: atLeast,
                        atMost: Infinity,
                      };
                    }
                    this.consumeChar("}");
                    break;
                }
                // throwing exceptions from "ASSERT_EXISTS" during backtracking
                // causes severe performance degradations
                if (isBacktracking === true && range === undefined) {
                  return undefined;
                }
                ASSERT_EXISTS(range);
                break;
            }

            // throwing exceptions from "ASSERT_EXISTS" during backtracking
            // causes severe performance degradations
            if (isBacktracking === true && range === undefined) {
              return undefined;
            }

            ASSERT_EXISTS(range);

            if (this.peekChar(0) === "?") {
              this.consumeChar("?");
              range.greedy = false;
            } else {
              range.greedy = true;
            }

            range.type = "Quantifier";
            return range;
          };

          RegExpParser.prototype.atom = function () {
            var atom;
            switch (this.peekChar()) {
              case ".":
                atom = this.dotAll();
                break;
              case "\\":
                atom = this.atomEscape();
                break;
              case "[":
                atom = this.characterClass();
                break;
              case "(":
                atom = this.group();
                break;
            }

            if (atom === undefined && this.isPatternCharacter()) {
              atom = this.patternCharacter();
            }

            ASSERT_EXISTS(atom);

            if (this.isQuantifier()) {
              atom.quantifier = this.quantifier();
            }

            return atom;
          };

          RegExpParser.prototype.dotAll = function () {
            this.consumeChar(".");
            return {
              type: "Set",
              complement: true,
              value: [cc("\n"), cc("\r"), cc("\u2028"), cc("\u2029")],
            };
          };

          RegExpParser.prototype.atomEscape = function () {
            this.consumeChar("\\");

            switch (this.peekChar()) {
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                return this.decimalEscapeAtom();
              case "d":
              case "D":
              case "s":
              case "S":
              case "w":
              case "W":
                return this.characterClassEscape();
              case "f":
              case "n":
              case "r":
              case "t":
              case "v":
                return this.controlEscapeAtom();
              case "c":
                return this.controlLetterEscapeAtom();
              case "0":
                return this.nulCharacterAtom();
              case "x":
                return this.hexEscapeSequenceAtom();
              case "u":
                return this.regExpUnicodeEscapeSequenceAtom();
              default:
                return this.identityEscapeAtom();
            }
          };

          RegExpParser.prototype.decimalEscapeAtom = function () {
            var value = this.positiveInteger();

            return { type: "GroupBackReference", value: value };
          };

          RegExpParser.prototype.characterClassEscape = function () {
            var set;
            var complement = false;
            switch (this.popChar()) {
              case "d":
                set = digitsCharCodes;
                break;
              case "D":
                set = digitsCharCodes;
                complement = true;
                break;
              case "s":
                set = whitespaceCodes;
                break;
              case "S":
                set = whitespaceCodes;
                complement = true;
                break;
              case "w":
                set = wordCharCodes;
                break;
              case "W":
                set = wordCharCodes;
                complement = true;
                break;
            }

            ASSERT_EXISTS(set);

            return {
              type: "Set",
              value: set,
              complement: complement,
            };
          };

          RegExpParser.prototype.controlEscapeAtom = function () {
            var escapeCode;
            switch (this.popChar()) {
              case "f":
                escapeCode = cc("\f");
                break;
              case "n":
                escapeCode = cc("\n");
                break;
              case "r":
                escapeCode = cc("\r");
                break;
              case "t":
                escapeCode = cc("\t");
                break;
              case "v":
                escapeCode = cc("\v");
                break;
            }
            ASSERT_EXISTS(escapeCode);

            return { type: "Character", value: escapeCode };
          };

          RegExpParser.prototype.controlLetterEscapeAtom = function () {
            this.consumeChar("c");
            var letter = this.popChar();
            if (/[a-zA-Z]/.test(letter) === false) {
              throw Error("Invalid ");
            }

            var letterCode = letter.toUpperCase().charCodeAt(0) - 64;
            return { type: "Character", value: letterCode };
          };

          RegExpParser.prototype.nulCharacterAtom = function () {
            // TODO implement '[lookahead ∉ DecimalDigit]'
            // TODO: for the deprecated octal escape sequence
            this.consumeChar("0");
            return { type: "Character", value: cc("\0") };
          };

          RegExpParser.prototype.hexEscapeSequenceAtom = function () {
            this.consumeChar("x");
            return this.parseHexDigits(2);
          };

          RegExpParser.prototype.regExpUnicodeEscapeSequenceAtom = function () {
            this.consumeChar("u");
            return this.parseHexDigits(4);
          };

          RegExpParser.prototype.identityEscapeAtom = function () {
            // TODO: implement "SourceCharacter but not UnicodeIDContinue"
            // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments
            var escapedChar = this.popChar();
            return { type: "Character", value: cc(escapedChar) };
          };

          RegExpParser.prototype.classPatternCharacterAtom = function () {
            switch (this.peekChar()) {
              // istanbul ignore next
              case "\n":
              // istanbul ignore next
              case "\r":
              // istanbul ignore next
              case "\u2028":
              // istanbul ignore next
              case "\u2029":
              // istanbul ignore next
              case "\\":
              // istanbul ignore next
              case "]":
                throw Error("TBD");
              default:
                var nextChar = this.popChar();
                return {
                  type: "Character",
                  value: cc(nextChar),
                };
            }
          };

          RegExpParser.prototype.characterClass = function () {
            var set = [];
            var complement = false;
            this.consumeChar("[");
            if (this.peekChar(0) === "^") {
              this.consumeChar("^");
              complement = true;
            }

            while (this.isClassAtom()) {
              var from = this.classAtom();
              var isFromSingleChar = from.type === "Character";
              if (isFromSingleChar && this.isRangeDash()) {
                this.consumeChar("-");
                var to = this.classAtom();
                var isToSingleChar = to.type === "Character";

                // a range can only be used when both sides are single characters
                if (isToSingleChar) {
                  if (to.value < from.value) {
                    throw Error("Range out of order in character class");
                  }
                  set.push({
                    from: from.value,
                    to: to.value,
                  });
                } else {
                  // literal dash
                  insertToSet(from.value, set);
                  set.push(cc("-"));
                  insertToSet(to.value, set);
                }
              } else {
                insertToSet(from.value, set);
              }
            }

            this.consumeChar("]");

            return {
              type: "Set",
              complement: complement,
              value: set,
            };
          };

          RegExpParser.prototype.classAtom = function () {
            switch (this.peekChar()) {
              // istanbul ignore next
              case "]":
              // istanbul ignore next
              case "\n":
              // istanbul ignore next
              case "\r":
              // istanbul ignore next
              case "\u2028":
              // istanbul ignore next
              case "\u2029":
                throw Error("TBD");
              case "\\":
                return this.classEscape();
              default:
                return this.classPatternCharacterAtom();
            }
          };

          RegExpParser.prototype.classEscape = function () {
            this.consumeChar("\\");
            switch (this.peekChar()) {
              // Matches a backspace.
              // (Not to be confused with \b word boundary outside characterClass)
              case "b":
                this.consumeChar("b");
                return {
                  type: "Character",
                  value: cc("\u0008"),
                };
              case "d":
              case "D":
              case "s":
              case "S":
              case "w":
              case "W":
                return this.characterClassEscape();
              case "f":
              case "n":
              case "r":
              case "t":
              case "v":
                return this.controlEscapeAtom();
              case "c":
                return this.controlLetterEscapeAtom();
              case "0":
                return this.nulCharacterAtom();
              case "x":
                return this.hexEscapeSequenceAtom();
              case "u":
                return this.regExpUnicodeEscapeSequenceAtom();
              default:
                return this.identityEscapeAtom();
            }
          };

          RegExpParser.prototype.group = function () {
            var capturing = true;
            this.consumeChar("(");
            switch (this.peekChar(0)) {
              case "?":
                this.consumeChar("?");
                this.consumeChar(":");
                capturing = false;
                break;
              default:
                this.groupIdx++;
                break;
            }
            var value = this.disjunction();
            this.consumeChar(")");

            var groupAst = {
              type: "Group",
              capturing: capturing,
              value: value,
            };

            if (capturing) {
              groupAst.idx = this.groupIdx;
            }

            return groupAst;
          };

          RegExpParser.prototype.positiveInteger = function () {
            var number = this.popChar();

            // istanbul ignore next - can't ever get here due to previous lookahead checks
            // still implementing this error checking in case this ever changes.
            if (decimalPatternNoZero.test(number) === false) {
              throw Error("Expecting a positive integer");
            }

            while (decimalPattern.test(this.peekChar(0))) {
              number += this.popChar();
            }

            return parseInt(number, 10);
          };

          RegExpParser.prototype.integerIncludingZero = function () {
            var number = this.popChar();
            if (decimalPattern.test(number) === false) {
              throw Error("Expecting an integer");
            }

            while (decimalPattern.test(this.peekChar(0))) {
              number += this.popChar();
            }

            return parseInt(number, 10);
          };

          RegExpParser.prototype.patternCharacter = function () {
            var nextChar = this.popChar();
            switch (nextChar) {
              // istanbul ignore next
              case "\n":
              // istanbul ignore next
              case "\r":
              // istanbul ignore next
              case "\u2028":
              // istanbul ignore next
              case "\u2029":
              // istanbul ignore next
              case "^":
              // istanbul ignore next
              case "$":
              // istanbul ignore next
              case "\\":
              // istanbul ignore next
              case ".":
              // istanbul ignore next
              case "*":
              // istanbul ignore next
              case "+":
              // istanbul ignore next
              case "?":
              // istanbul ignore next
              case "(":
              // istanbul ignore next
              case ")":
              // istanbul ignore next
              case "[":
              // istanbul ignore next
              case "|":
                // istanbul ignore next
                throw Error("TBD");
              default:
                return {
                  type: "Character",
                  value: cc(nextChar),
                };
            }
          };
          RegExpParser.prototype.isRegExpFlag = function () {
            switch (this.peekChar(0)) {
              case "g":
              case "i":
              case "m":
              case "u":
              case "y":
                return true;
              default:
                return false;
            }
          };

          RegExpParser.prototype.isRangeDash = function () {
            return this.peekChar() === "-" && this.isClassAtom(1);
          };

          RegExpParser.prototype.isDigit = function () {
            return decimalPattern.test(this.peekChar(0));
          };

          RegExpParser.prototype.isClassAtom = function (howMuch) {
            if (howMuch === undefined) {
              howMuch = 0;
            }

            switch (this.peekChar(howMuch)) {
              case "]":
              case "\n":
              case "\r":
              case "\u2028":
              case "\u2029":
                return false;
              default:
                return true;
            }
          };

          RegExpParser.prototype.isTerm = function () {
            return this.isAtom() || this.isAssertion();
          };

          RegExpParser.prototype.isAtom = function () {
            if (this.isPatternCharacter()) {
              return true;
            }

            switch (this.peekChar(0)) {
              case ".":
              case "\\": // atomEscape
              case "[": // characterClass
              // TODO: isAtom must be called before isAssertion - disambiguate
              case "(": // group
                return true;
              default:
                return false;
            }
          };

          RegExpParser.prototype.isAssertion = function () {
            switch (this.peekChar(0)) {
              case "^":
              case "$":
                return true;
              // '\b' or '\B'
              case "\\":
                switch (this.peekChar(1)) {
                  case "b":
                  case "B":
                    return true;
                  default:
                    return false;
                }
              // '(?=' or '(?!'
              case "(":
                return (
                  this.peekChar(1) === "?" &&
                  (this.peekChar(2) === "=" || this.peekChar(2) === "!")
                );
              default:
                return false;
            }
          };

          RegExpParser.prototype.isQuantifier = function () {
            var prevState = this.saveState();
            try {
              return this.quantifier(true) !== undefined;
            } catch (e) {
              return false;
            } finally {
              this.restoreState(prevState);
            }
          };

          RegExpParser.prototype.isPatternCharacter = function () {
            switch (this.peekChar()) {
              case "^":
              case "$":
              case "\\":
              case ".":
              case "*":
              case "+":
              case "?":
              case "(":
              case ")":
              case "[":
              case "|":
              case "/":
              case "\n":
              case "\r":
              case "\u2028":
              case "\u2029":
                return false;
              default:
                return true;
            }
          };

          RegExpParser.prototype.parseHexDigits = function (howMany) {
            var hexString = "";
            for (var i = 0; i < howMany; i++) {
              var hexChar = this.popChar();
              if (hexDigitPattern.test(hexChar) === false) {
                throw Error("Expecting a HexDecimal digits");
              }
              hexString += hexChar;
            }
            var charCode = parseInt(hexString, 16);
            return { type: "Character", value: charCode };
          };

          RegExpParser.prototype.peekChar = function (howMuch) {
            if (howMuch === undefined) {
              howMuch = 0;
            }
            return this.input[this.idx + howMuch];
          };

          RegExpParser.prototype.popChar = function () {
            var nextChar = this.peekChar(0);
            this.consumeChar();
            return nextChar;
          };

          RegExpParser.prototype.consumeChar = function (char) {
            if (char !== undefined && this.input[this.idx] !== char) {
              throw Error(
                "Expected: '" +
                  char +
                  "' but found: '" +
                  this.input[this.idx] +
                  "' at offset: " +
                  this.idx
              );
            }

            if (this.idx >= this.input.length) {
              throw Error("Unexpected end of input");
            }
            this.idx++;
          };

          // consts and utilities
          var hexDigitPattern = /[0-9a-fA-F]/;
          var decimalPattern = /[0-9]/;
          var decimalPatternNoZero = /[1-9]/;

          function cc(char) {
            return char.charCodeAt(0);
          }

          function insertToSet(item, set) {
            if (item.length !== undefined) {
              item.forEach(function (subItem) {
                set.push(subItem);
              });
            } else {
              set.push(item);
            }
          }

          function addFlag(flagObj, flagKey) {
            if (flagObj[flagKey] === true) {
              throw "duplicate flag " + flagKey;
            }

            flagObj[flagKey] = true;
          }

          function ASSERT_EXISTS(obj) {
            // istanbul ignore next
            if (obj === undefined) {
              throw Error("Internal Error - Should never get here!");
            }
          }

          // istanbul ignore next
          function ASSERT_NEVER_REACH_HERE() {
            throw Error("Internal Error - Should never get here!");
          }

          var i;
          var digitsCharCodes = [];
          for (i = cc("0"); i <= cc("9"); i++) {
            digitsCharCodes.push(i);
          }

          var wordCharCodes = [cc("_")].concat(digitsCharCodes);
          for (i = cc("a"); i <= cc("z"); i++) {
            wordCharCodes.push(i);
          }

          for (i = cc("A"); i <= cc("Z"); i++) {
            wordCharCodes.push(i);
          }

          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes
          var whitespaceCodes = [
            cc(" "),
            cc("\f"),
            cc("\n"),
            cc("\r"),
            cc("\t"),
            cc("\v"),
            cc("\t"),
            cc("\u00a0"),
            cc("\u1680"),
            cc("\u2000"),
            cc("\u2001"),
            cc("\u2002"),
            cc("\u2003"),
            cc("\u2004"),
            cc("\u2005"),
            cc("\u2006"),
            cc("\u2007"),
            cc("\u2008"),
            cc("\u2009"),
            cc("\u200a"),
            cc("\u2028"),
            cc("\u2029"),
            cc("\u202f"),
            cc("\u205f"),
            cc("\u3000"),
            cc("\ufeff"),
          ];

          function BaseRegExpVisitor() {}

          BaseRegExpVisitor.prototype.visitChildren = function (node) {
            for (var key in node) {
              var child = node[key];
              /* istanbul ignore else */
              if (node.hasOwnProperty(key)) {
                if (child.type !== undefined) {
                  this.visit(child);
                } else if (Array.isArray(child)) {
                  child.forEach(function (subChild) {
                    this.visit(subChild);
                  }, this);
                }
              }
            }
          };

          BaseRegExpVisitor.prototype.visit = function (node) {
            switch (node.type) {
              case "Pattern":
                this.visitPattern(node);
                break;
              case "Flags":
                this.visitFlags(node);
                break;
              case "Disjunction":
                this.visitDisjunction(node);
                break;
              case "Alternative":
                this.visitAlternative(node);
                break;
              case "StartAnchor":
                this.visitStartAnchor(node);
                break;
              case "EndAnchor":
                this.visitEndAnchor(node);
                break;
              case "WordBoundary":
                this.visitWordBoundary(node);
                break;
              case "NonWordBoundary":
                this.visitNonWordBoundary(node);
                break;
              case "Lookahead":
                this.visitLookahead(node);
                break;
              case "NegativeLookahead":
                this.visitNegativeLookahead(node);
                break;
              case "Character":
                this.visitCharacter(node);
                break;
              case "Set":
                this.visitSet(node);
                break;
              case "Group":
                this.visitGroup(node);
                break;
              case "GroupBackReference":
                this.visitGroupBackReference(node);
                break;
              case "Quantifier":
                this.visitQuantifier(node);
                break;
            }

            this.visitChildren(node);
          };

          BaseRegExpVisitor.prototype.visitPattern = function (node) {};

          BaseRegExpVisitor.prototype.visitFlags = function (node) {};

          BaseRegExpVisitor.prototype.visitDisjunction = function (node) {};

          BaseRegExpVisitor.prototype.visitAlternative = function (node) {};

          // Assertion
          BaseRegExpVisitor.prototype.visitStartAnchor = function (node) {};

          BaseRegExpVisitor.prototype.visitEndAnchor = function (node) {};

          BaseRegExpVisitor.prototype.visitWordBoundary = function (node) {};

          BaseRegExpVisitor.prototype.visitNonWordBoundary = function (node) {};

          BaseRegExpVisitor.prototype.visitLookahead = function (node) {};

          BaseRegExpVisitor.prototype.visitNegativeLookahead = function (
            node
          ) {};

          // atoms
          BaseRegExpVisitor.prototype.visitCharacter = function (node) {};

          BaseRegExpVisitor.prototype.visitSet = function (node) {};

          BaseRegExpVisitor.prototype.visitGroup = function (node) {};

          BaseRegExpVisitor.prototype.visitGroupBackReference = function (
            node
          ) {};

          BaseRegExpVisitor.prototype.visitQuantifier = function (node) {};

          return {
            RegExpParser: RegExpParser,
            BaseRegExpVisitor: BaseRegExpVisitor,
            VERSION: "0.4.0",
          };
        }
      );

      /***/
    },
    /* 6 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const prettier = __webpack_require__(3).doc.builders;

      const { processComments } = __webpack_require__(2);

      /*
       * ------------------------------------------------------------------
       * Wraps the Prettier builder functions to print tokens with comments
       * ------------------------------------------------------------------
       */

      function concat(docs) {
        const concatenation = prettier.concat(processComments(docs));
        return concatenation.parts.length === 0 ? "" : concatenation;
      }

      function join(sep, docs) {
        const concatenation = prettier.join(
          processComments(sep),
          processComments(docs)
        );
        return concatenation.parts.length === 0 ? "" : concatenation;
      }

      function group(doc, opts) {
        const group = prettier.group(processComments(doc), opts);
        return group.contents === undefined ? "" : group;
      }

      function fill(docs) {
        const fill = prettier.fill(processComments(docs));
        return fill.parts.length === 0 ? "" : fill;
      }

      function indent(doc) {
        const indentedDoc = prettier.indent(processComments(doc));
        return indentedDoc.contents.length === 0 ? "" : indentedDoc;
      }

      function dedent(doc) {
        const indentedDoc = prettier.dedent(processComments(doc));
        return indentedDoc.contents.length === 0 ? "" : indentedDoc;
      }

      function ifBreak(breakContents, flatContents) {
        return prettier.ifBreak(
          processComments(breakContents),
          processComments(flatContents)
        );
      }

      module.exports = {
        concat,
        join,
        group,
        fill,
        indent,
        dedent,
        ifBreak,
      };

      /***/
    },
    /* 7 */
    /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (global, module) {
        var __WEBPACK_AMD_DEFINE_RESULT__;
        /**
         * @license
         * Lodash <https://lodash.com/>
         * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */
        (function () {
          /** Used as a safe reference for `undefined` in pre-ES5 environments. */
          var undefined;

          /** Used as the semantic version number. */
          var VERSION = "4.17.15";

          /** Used as the size to enable large array optimizations. */
          var LARGE_ARRAY_SIZE = 200;

          /** Error message constants. */
          var CORE_ERROR_TEXT =
              "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
            FUNC_ERROR_TEXT = "Expected a function";

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /** Used as the maximum memoize cache size. */
          var MAX_MEMOIZE_SIZE = 500;

          /** Used as the internal argument placeholder. */
          var PLACEHOLDER = "__lodash_placeholder__";

          /** Used to compose bitmasks for cloning. */
          var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /** Used to compose bitmasks for function metadata. */
          var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;

          /** Used as default options for `_.truncate`. */
          var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = "...";

          /** Used to detect hot functions by number of calls within a span of milliseconds. */
          var HOT_COUNT = 800,
            HOT_SPAN = 16;

          /** Used to indicate the type of lazy iteratees. */
          var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e308,
            NAN = 0 / 0;

          /** Used as references for the maximum length and index of an array. */
          var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

          /** Used to associate wrap methods with their bit flags. */
          var wrapFlags = [
            ["ary", WRAP_ARY_FLAG],
            ["bind", WRAP_BIND_FLAG],
            ["bindKey", WRAP_BIND_KEY_FLAG],
            ["curry", WRAP_CURRY_FLAG],
            ["curryRight", WRAP_CURRY_RIGHT_FLAG],
            ["flip", WRAP_FLIP_FLAG],
            ["partial", WRAP_PARTIAL_FLAG],
            ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
            ["rearg", WRAP_REARG_FLAG],
          ];

          /** `Object#toString` result references. */
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            asyncTag = "[object AsyncFunction]",
            boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            domExcTag = "[object DOMException]",
            errorTag = "[object Error]",
            funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            nullTag = "[object Null]",
            objectTag = "[object Object]",
            promiseTag = "[object Promise]",
            proxyTag = "[object Proxy]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]",
            undefinedTag = "[object Undefined]",
            weakMapTag = "[object WeakMap]",
            weakSetTag = "[object WeakSet]";

          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";

          /** Used to match empty string literals in compiled template source. */
          var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

          /** Used to match HTML entities and HTML characters. */
          var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

          /** Used to match template delimiters. */
          var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;

          /** Used to match property names within property paths. */
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName =
              /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

          /** Used to match leading and trailing whitespace. */
          var reTrim = /^\s+|\s+$/g,
            reTrimStart = /^\s+/,
            reTrimEnd = /\s+$/;

          /** Used to match wrap detail comments. */
          var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;

          /** Used to match words composed of alphanumeric characters. */
          var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

          /** Used to match backslashes in property paths. */
          var reEscapeChar = /\\(\\)?/g;

          /**
           * Used to match
           * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
           */
          var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

          /** Used to match `RegExp` flags from their coerced string values. */
          var reFlags = /\w*$/;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Used to detect unsigned integer values. */
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          /** Used to match Latin Unicode letters (excluding mathematical operators). */
          var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

          /** Used to ensure capturing order of template delimiters. */
          var reNoMatch = /($^)/;

          /** Used to match unescaped characters in compiled string literals. */
          var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

          /** Used to compose unicode character classes. */
          var rsAstralRange = "\\ud800-\\udfff",
            rsComboMarksRange = "\\u0300-\\u036f",
            reComboHalfMarksRange = "\\ufe20-\\ufe2f",
            rsComboSymbolsRange = "\\u20d0-\\u20ff",
            rsComboRange =
              rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = "\\u2700-\\u27bf",
            rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff",
            rsMathOpRange = "\\xac\\xb1\\xd7\\xf7",
            rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
            rsPunctuationRange = "\\u2000-\\u206f",
            rsSpaceRange =
              " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
            rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde",
            rsVarRange = "\\ufe0e\\ufe0f",
            rsBreakRange =
              rsMathOpRange +
              rsNonCharRange +
              rsPunctuationRange +
              rsSpaceRange;

          /** Used to compose unicode capture groups. */
          var rsApos = "['\u2019]",
            rsAstral = "[" + rsAstralRange + "]",
            rsBreak = "[" + rsBreakRange + "]",
            rsCombo = "[" + rsComboRange + "]",
            rsDigits = "\\d+",
            rsDingbat = "[" + rsDingbatRange + "]",
            rsLower = "[" + rsLowerRange + "]",
            rsMisc =
              "[^" +
              rsAstralRange +
              rsBreakRange +
              rsDigits +
              rsDingbatRange +
              rsLowerRange +
              rsUpperRange +
              "]",
            rsFitz = "\\ud83c[\\udffb-\\udfff]",
            rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
            rsNonAstral = "[^" + rsAstralRange + "]",
            rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
            rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            rsUpper = "[" + rsUpperRange + "]",
            rsZWJ = "\\u200d";

          /** Used to compose unicode regexes. */
          var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")",
            rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")",
            rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?",
            rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?",
            reOptMod = rsModifier + "?",
            rsOptVar = "[" + rsVarRange + "]?",
            rsOptJoin =
              "(?:" +
              rsZWJ +
              "(?:" +
              [rsNonAstral, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsOptVar +
              reOptMod +
              ")*",
            rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
            rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji =
              "(?:" +
              [rsDingbat, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsSeq,
            rsSymbol =
              "(?:" +
              [
                rsNonAstral + rsCombo + "?",
                rsCombo,
                rsRegional,
                rsSurrPair,
                rsAstral,
              ].join("|") +
              ")";

          /** Used to match apostrophes. */
          var reApos = RegExp(rsApos, "g");

          /**
           * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
           * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
           */
          var reComboMark = RegExp(rsCombo, "g");

          /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
          var reUnicode = RegExp(
            rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq,
            "g"
          );

          /** Used to match complex or compound words. */
          var reUnicodeWord = RegExp(
            [
              rsUpper +
                "?" +
                rsLower +
                "+" +
                rsOptContrLower +
                "(?=" +
                [rsBreak, rsUpper, "$"].join("|") +
                ")",
              rsMiscUpper +
                "+" +
                rsOptContrUpper +
                "(?=" +
                [rsBreak, rsUpper + rsMiscLower, "$"].join("|") +
                ")",
              rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
              rsUpper + "+" + rsOptContrUpper,
              rsOrdUpper,
              rsOrdLower,
              rsDigits,
              rsEmoji,
            ].join("|"),
            "g"
          );

          /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
          var reHasUnicode = RegExp(
            "[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]"
          );

          /** Used to detect strings that need a more robust regexp to match words. */
          var reHasUnicodeWord =
            /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

          /** Used to assign default `context` object properties. */
          var contextProps = [
            "Array",
            "Buffer",
            "DataView",
            "Date",
            "Error",
            "Float32Array",
            "Float64Array",
            "Function",
            "Int8Array",
            "Int16Array",
            "Int32Array",
            "Map",
            "Math",
            "Object",
            "Promise",
            "RegExp",
            "Set",
            "String",
            "Symbol",
            "TypeError",
            "Uint8Array",
            "Uint8ClampedArray",
            "Uint16Array",
            "Uint32Array",
            "WeakMap",
            "_",
            "clearTimeout",
            "isFinite",
            "parseInt",
            "setTimeout",
          ];

          /** Used to make template sourceURLs easier to identify. */
          var templateCounter = -1;

          /** Used to identify `toStringTag` values of typed arrays. */
          var typedArrayTags = {};
          typedArrayTags[float32Tag] =
            typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] =
            typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] =
            typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] =
            typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] =
              true;
          typedArrayTags[argsTag] =
            typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] =
            typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] =
            typedArrayTags[dateTag] =
            typedArrayTags[errorTag] =
            typedArrayTags[funcTag] =
            typedArrayTags[mapTag] =
            typedArrayTags[numberTag] =
            typedArrayTags[objectTag] =
            typedArrayTags[regexpTag] =
            typedArrayTags[setTag] =
            typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] =
              false;

          /** Used to identify `toStringTag` values supported by `_.clone`. */
          var cloneableTags = {};
          cloneableTags[argsTag] =
            cloneableTags[arrayTag] =
            cloneableTags[arrayBufferTag] =
            cloneableTags[dataViewTag] =
            cloneableTags[boolTag] =
            cloneableTags[dateTag] =
            cloneableTags[float32Tag] =
            cloneableTags[float64Tag] =
            cloneableTags[int8Tag] =
            cloneableTags[int16Tag] =
            cloneableTags[int32Tag] =
            cloneableTags[mapTag] =
            cloneableTags[numberTag] =
            cloneableTags[objectTag] =
            cloneableTags[regexpTag] =
            cloneableTags[setTag] =
            cloneableTags[stringTag] =
            cloneableTags[symbolTag] =
            cloneableTags[uint8Tag] =
            cloneableTags[uint8ClampedTag] =
            cloneableTags[uint16Tag] =
            cloneableTags[uint32Tag] =
              true;
          cloneableTags[errorTag] =
            cloneableTags[funcTag] =
            cloneableTags[weakMapTag] =
              false;

          /** Used to map Latin Unicode letters to basic Latin letters. */
          var deburredLetters = {
            // Latin-1 Supplement block.
            "\xc0": "A",
            "\xc1": "A",
            "\xc2": "A",
            "\xc3": "A",
            "\xc4": "A",
            "\xc5": "A",
            "\xe0": "a",
            "\xe1": "a",
            "\xe2": "a",
            "\xe3": "a",
            "\xe4": "a",
            "\xe5": "a",
            "\xc7": "C",
            "\xe7": "c",
            "\xd0": "D",
            "\xf0": "d",
            "\xc8": "E",
            "\xc9": "E",
            "\xca": "E",
            "\xcb": "E",
            "\xe8": "e",
            "\xe9": "e",
            "\xea": "e",
            "\xeb": "e",
            "\xcc": "I",
            "\xcd": "I",
            "\xce": "I",
            "\xcf": "I",
            "\xec": "i",
            "\xed": "i",
            "\xee": "i",
            "\xef": "i",
            "\xd1": "N",
            "\xf1": "n",
            "\xd2": "O",
            "\xd3": "O",
            "\xd4": "O",
            "\xd5": "O",
            "\xd6": "O",
            "\xd8": "O",
            "\xf2": "o",
            "\xf3": "o",
            "\xf4": "o",
            "\xf5": "o",
            "\xf6": "o",
            "\xf8": "o",
            "\xd9": "U",
            "\xda": "U",
            "\xdb": "U",
            "\xdc": "U",
            "\xf9": "u",
            "\xfa": "u",
            "\xfb": "u",
            "\xfc": "u",
            "\xdd": "Y",
            "\xfd": "y",
            "\xff": "y",
            "\xc6": "Ae",
            "\xe6": "ae",
            "\xde": "Th",
            "\xfe": "th",
            "\xdf": "ss",
            // Latin Extended-A block.
            "\u0100": "A",
            "\u0102": "A",
            "\u0104": "A",
            "\u0101": "a",
            "\u0103": "a",
            "\u0105": "a",
            "\u0106": "C",
            "\u0108": "C",
            "\u010a": "C",
            "\u010c": "C",
            "\u0107": "c",
            "\u0109": "c",
            "\u010b": "c",
            "\u010d": "c",
            "\u010e": "D",
            "\u0110": "D",
            "\u010f": "d",
            "\u0111": "d",
            "\u0112": "E",
            "\u0114": "E",
            "\u0116": "E",
            "\u0118": "E",
            "\u011a": "E",
            "\u0113": "e",
            "\u0115": "e",
            "\u0117": "e",
            "\u0119": "e",
            "\u011b": "e",
            "\u011c": "G",
            "\u011e": "G",
            "\u0120": "G",
            "\u0122": "G",
            "\u011d": "g",
            "\u011f": "g",
            "\u0121": "g",
            "\u0123": "g",
            "\u0124": "H",
            "\u0126": "H",
            "\u0125": "h",
            "\u0127": "h",
            "\u0128": "I",
            "\u012a": "I",
            "\u012c": "I",
            "\u012e": "I",
            "\u0130": "I",
            "\u0129": "i",
            "\u012b": "i",
            "\u012d": "i",
            "\u012f": "i",
            "\u0131": "i",
            "\u0134": "J",
            "\u0135": "j",
            "\u0136": "K",
            "\u0137": "k",
            "\u0138": "k",
            "\u0139": "L",
            "\u013b": "L",
            "\u013d": "L",
            "\u013f": "L",
            "\u0141": "L",
            "\u013a": "l",
            "\u013c": "l",
            "\u013e": "l",
            "\u0140": "l",
            "\u0142": "l",
            "\u0143": "N",
            "\u0145": "N",
            "\u0147": "N",
            "\u014a": "N",
            "\u0144": "n",
            "\u0146": "n",
            "\u0148": "n",
            "\u014b": "n",
            "\u014c": "O",
            "\u014e": "O",
            "\u0150": "O",
            "\u014d": "o",
            "\u014f": "o",
            "\u0151": "o",
            "\u0154": "R",
            "\u0156": "R",
            "\u0158": "R",
            "\u0155": "r",
            "\u0157": "r",
            "\u0159": "r",
            "\u015a": "S",
            "\u015c": "S",
            "\u015e": "S",
            "\u0160": "S",
            "\u015b": "s",
            "\u015d": "s",
            "\u015f": "s",
            "\u0161": "s",
            "\u0162": "T",
            "\u0164": "T",
            "\u0166": "T",
            "\u0163": "t",
            "\u0165": "t",
            "\u0167": "t",
            "\u0168": "U",
            "\u016a": "U",
            "\u016c": "U",
            "\u016e": "U",
            "\u0170": "U",
            "\u0172": "U",
            "\u0169": "u",
            "\u016b": "u",
            "\u016d": "u",
            "\u016f": "u",
            "\u0171": "u",
            "\u0173": "u",
            "\u0174": "W",
            "\u0175": "w",
            "\u0176": "Y",
            "\u0177": "y",
            "\u0178": "Y",
            "\u0179": "Z",
            "\u017b": "Z",
            "\u017d": "Z",
            "\u017a": "z",
            "\u017c": "z",
            "\u017e": "z",
            "\u0132": "IJ",
            "\u0133": "ij",
            "\u0152": "Oe",
            "\u0153": "oe",
            "\u0149": "'n",
            "\u017f": "s",
          };

          /** Used to map characters to HTML entities. */
          var htmlEscapes = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
          };

          /** Used to map HTML entities to characters. */
          var htmlUnescapes = {
            "&amp;": "&",
            "&lt;": "<",
            "&gt;": ">",
            "&quot;": '"',
            "&#39;": "'",
          };

          /** Used to escape characters for inclusion in compiled string literals. */
          var stringEscapes = {
            "\\": "\\",
            "'": "'",
            "\n": "n",
            "\r": "r",
            "\u2028": "u2028",
            "\u2029": "u2029",
          };

          /** Built-in method references without a dependency on `root`. */
          var freeParseFloat = parseFloat,
            freeParseInt = parseInt;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal =
            typeof global == "object" &&
            global &&
            global.Object === Object &&
            global;

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          /** Detect free variable `exports`. */
          var freeExports = true && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule =
            freeExports &&
            typeof module == "object" &&
            module &&
            !module.nodeType &&
            module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Detect free variable `process` from Node.js. */
          var freeProcess = moduleExports && freeGlobal.process;

          /** Used to access faster Node.js helpers. */
          var nodeUtil = (function () {
            try {
              // Use `util.types` for Node.js 10+.
              var types =
                freeModule &&
                freeModule.require &&
                freeModule.require("util").types;

              if (types) {
                return types;
              }

              // Legacy `process.binding('util')` for Node.js < 10.
              return (
                freeProcess &&
                freeProcess.binding &&
                freeProcess.binding("util")
              );
            } catch (e) {}
          })();

          /* Node.js helper references. */
          var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

          /*--------------------------------------------------------------------------*/

          /**
           * A faster alternative to `Function#apply`, this function invokes `func`
           * with the `this` binding of `thisArg` and the arguments of `args`.
           *
           * @private
           * @param {Function} func The function to invoke.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} args The arguments to invoke `func` with.
           * @returns {*} Returns the result of `func`.
           */
          function apply(func, thisArg, args) {
            switch (args.length) {
              case 0:
                return func.call(thisArg);
              case 1:
                return func.call(thisArg, args[0]);
              case 2:
                return func.call(thisArg, args[0], args[1]);
              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
          }

          /**
           * A specialized version of `baseAggregator` for arrays.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */
          function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              var value = array[index];
              setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.forEach` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEach(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.forEachRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;

            while (length--) {
              if (iteratee(array[length], length, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.every` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           */
          function arrayEvery(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (!predicate(array[index], index, array)) {
                return false;
              }
            }
            return true;
          }

          /**
           * A specialized version of `_.filter` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function arrayFilter(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }

          /**
           * A specialized version of `_.includes` for arrays without support for
           * specifying an index to search from.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
          }

          /**
           * This function is like `arrayIncludes` except that it accepts a comparator.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludesWith(array, value, comparator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (comparator(value, array[index])) {
                return true;
              }
            }
            return false;
          }

          /**
           * A specialized version of `_.map` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function arrayMap(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }

          /**
           * Appends the elements of `values` to `array`.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to append.
           * @returns {Array} Returns `array`.
           */
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;

            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }

          /**
           * A specialized version of `_.reduce` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the first element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
              length = array == null ? 0 : array.length;

            if (initAccum && length) {
              accumulator = array[++index];
            }
            while (++index < length) {
              accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.reduceRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the last element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
              accumulator = array[--length];
            }
            while (length--) {
              accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.some` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function arraySome(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }

          /**
           * Gets the size of an ASCII `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          var asciiSize = baseProperty("length");

          /**
           * Converts an ASCII `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function asciiToArray(string) {
            return string.split("");
          }

          /**
           * Splits an ASCII `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function asciiWords(string) {
            return string.match(reAsciiWord) || [];
          }

          /**
           * The base implementation of methods like `_.findKey` and `_.findLastKey`,
           * without support for iteratee shorthands, which iterates over `collection`
           * using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the found element or its key, else `undefined`.
           */
          function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function (value, key, collection) {
              if (predicate(value, key, collection)) {
                result = key;
                return false;
              }
            });
            return result;
          }

          /**
           * The base implementation of `_.findIndex` and `_.findLastIndex` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {number} fromIndex The index to search from.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
              if (predicate(array[index], index, array)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOf(array, value, fromIndex) {
            return value === value
              ? strictIndexOf(array, value, fromIndex)
              : baseFindIndex(array, baseIsNaN, fromIndex);
          }

          /**
           * This function is like `baseIndexOf` except that it accepts a comparator.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (comparator(array[index], value)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.isNaN` without support for number objects.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           */
          function baseIsNaN(value) {
            return value !== value;
          }

          /**
           * The base implementation of `_.mean` and `_.meanBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the mean.
           */
          function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? baseSum(array, iteratee) / length : NAN;
          }

          /**
           * The base implementation of `_.property` without support for deep paths.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function baseProperty(key) {
            return function (object) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.propertyOf` without support for deep paths.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyOf(object) {
            return function (key) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.reduce` and `_.reduceRight`, without support
           * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} accumulator The initial value.
           * @param {boolean} initAccum Specify using the first or last element of
           *  `collection` as the initial value.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the accumulated value.
           */
          function baseReduce(
            collection,
            iteratee,
            accumulator,
            initAccum,
            eachFunc
          ) {
            eachFunc(collection, function (value, index, collection) {
              accumulator = initAccum
                ? ((initAccum = false), value)
                : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
          }

          /**
           * The base implementation of `_.sortBy` which uses `comparer` to define the
           * sort order of `array` and replaces criteria objects with their corresponding
           * values.
           *
           * @private
           * @param {Array} array The array to sort.
           * @param {Function} comparer The function to define sort order.
           * @returns {Array} Returns `array`.
           */
          function baseSortBy(array, comparer) {
            var length = array.length;

            array.sort(comparer);
            while (length--) {
              array[length] = array[length].value;
            }
            return array;
          }

          /**
           * The base implementation of `_.sum` and `_.sumBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the sum.
           */
          function baseSum(array, iteratee) {
            var result,
              index = -1,
              length = array.length;

            while (++index < length) {
              var current = iteratee(array[index]);
              if (current !== undefined) {
                result = result === undefined ? current : result + current;
              }
            }
            return result;
          }

          /**
           * The base implementation of `_.times` without support for iteratee shorthands
           * or max array length checks.
           *
           * @private
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           */
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);

            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }

          /**
           * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
           * of key-value pairs for `object` corresponding to the property names of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the key-value pairs.
           */
          function baseToPairs(object, props) {
            return arrayMap(props, function (key) {
              return [key, object[key]];
            });
          }

          /**
           * The base implementation of `_.unary` without support for storing metadata.
           *
           * @private
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           */
          function baseUnary(func) {
            return function (value) {
              return func(value);
            };
          }

          /**
           * The base implementation of `_.values` and `_.valuesIn` which creates an
           * array of `object` property values corresponding to the property names
           * of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the array of property values.
           */
          function baseValues(object, props) {
            return arrayMap(props, function (key) {
              return object[key];
            });
          }

          /**
           * Checks if a `cache` value for `key` exists.
           *
           * @private
           * @param {Object} cache The cache to query.
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function cacheHas(cache, key) {
            return cache.has(key);
          }

          /**
           * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the first unmatched string symbol.
           */
          function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1,
              length = strSymbols.length;

            while (
              ++index < length &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the last unmatched string symbol.
           */
          function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;

            while (
              index-- &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
          }

          /**
           * Gets the number of `placeholder` occurrences in `array`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} placeholder The placeholder to search for.
           * @returns {number} Returns the placeholder count.
           */
          function countHolders(array, placeholder) {
            var length = array.length,
              result = 0;

            while (length--) {
              if (array[length] === placeholder) {
                ++result;
              }
            }
            return result;
          }

          /**
           * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
           * letters to basic Latin letters.
           *
           * @private
           * @param {string} letter The matched letter to deburr.
           * @returns {string} Returns the deburred letter.
           */
          var deburrLetter = basePropertyOf(deburredLetters);

          /**
           * Used by `_.escape` to convert characters to HTML entities.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          var escapeHtmlChar = basePropertyOf(htmlEscapes);

          /**
           * Used by `_.template` to escape characters for inclusion in compiled string literals.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          function escapeStringChar(chr) {
            return "\\" + stringEscapes[chr];
          }

          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          /**
           * Checks if `string` contains Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a symbol is found, else `false`.
           */
          function hasUnicode(string) {
            return reHasUnicode.test(string);
          }

          /**
           * Checks if `string` contains a word composed of Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a word is found, else `false`.
           */
          function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
          }

          /**
           * Converts `iterator` to an array.
           *
           * @private
           * @param {Object} iterator The iterator to convert.
           * @returns {Array} Returns the converted array.
           */
          function iteratorToArray(iterator) {
            var data,
              result = [];

            while (!(data = iterator.next()).done) {
              result.push(data.value);
            }
            return result;
          }

          /**
           * Converts `map` to its key-value pairs.
           *
           * @private
           * @param {Object} map The map to convert.
           * @returns {Array} Returns the key-value pairs.
           */
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);

            map.forEach(function (value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          /**
           * Creates a unary function that invokes `func` with its argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function (arg) {
              return func(transform(arg));
            };
          }

          /**
           * Replaces all `placeholder` elements in `array` with an internal placeholder
           * and returns an array of their indexes.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {*} placeholder The placeholder to replace.
           * @returns {Array} Returns the new array of placeholder indexes.
           */
          function replaceHolders(array, placeholder) {
            var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
              }
            }
            return result;
          }

          /**
           * Converts `set` to an array of its values.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the values.
           */
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = value;
            });
            return result;
          }

          /**
           * Converts `set` to its value-value pairs.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the value-value pairs.
           */
          function setToPairs(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = [value, value];
            });
            return result;
          }

          /**
           * A specialized version of `_.indexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }
            return -1;
          }

          /**
           * A specialized version of `_.lastIndexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
              if (array[index] === value) {
                return index;
              }
            }
            return index;
          }

          /**
           * Gets the number of symbols in `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the string size.
           */
          function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
          }

          /**
           * Converts `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function stringToArray(string) {
            return hasUnicode(string)
              ? unicodeToArray(string)
              : asciiToArray(string);
          }

          /**
           * Used by `_.unescape` to convert HTML entities to characters.
           *
           * @private
           * @param {string} chr The matched character to unescape.
           * @returns {string} Returns the unescaped character.
           */
          var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

          /**
           * Gets the size of a Unicode `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          function unicodeSize(string) {
            var result = (reUnicode.lastIndex = 0);
            while (reUnicode.test(string)) {
              ++result;
            }
            return result;
          }

          /**
           * Converts a Unicode `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function unicodeToArray(string) {
            return string.match(reUnicode) || [];
          }

          /**
           * Splits a Unicode `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
          }

          /*--------------------------------------------------------------------------*/

          /**
           * Create a new pristine `lodash` function using the `context` object.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Util
           * @param {Object} [context=root] The context object.
           * @returns {Function} Returns a new `lodash` function.
           * @example
           *
           * _.mixin({ 'foo': _.constant('foo') });
           *
           * var lodash = _.runInContext();
           * lodash.mixin({ 'bar': lodash.constant('bar') });
           *
           * _.isFunction(_.foo);
           * // => true
           * _.isFunction(_.bar);
           * // => false
           *
           * lodash.isFunction(lodash.foo);
           * // => false
           * lodash.isFunction(lodash.bar);
           * // => true
           *
           * // Create a suped-up `defer` in Node.js.
           * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
           */
          var runInContext = function runInContext(context) {
            context =
              context == null
                ? root
                : _.defaults(
                    root.Object(),
                    context,
                    _.pick(root, contextProps)
                  );

            /** Built-in constructor references. */
            var Array = context.Array,
              Date = context.Date,
              Error = context.Error,
              Function = context.Function,
              Math = context.Math,
              Object = context.Object,
              RegExp = context.RegExp,
              String = context.String,
              TypeError = context.TypeError;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype,
              funcProto = Function.prototype,
              objectProto = Object.prototype;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = context["__core-js_shared__"];

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to generate unique IDs. */
            var idCounter = 0;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
              var uid = /[^.]+$/.exec(
                (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) ||
                  ""
              );
              return uid ? "Symbol(src)_1." + uid : "";
            })();

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp(
              "^" +
                funcToString
                  .call(hasOwnProperty)
                  .replace(reRegExpChar, "\\$&")
                  .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    "$1.*?"
                  ) +
                "$"
            );

            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined,
              Symbol = context.Symbol,
              Uint8Array = context.Uint8Array,
              allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
              getPrototype = overArg(Object.getPrototypeOf, Object),
              objectCreate = Object.create,
              propertyIsEnumerable = objectProto.propertyIsEnumerable,
              splice = arrayProto.splice,
              spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
              symIterator = Symbol ? Symbol.iterator : undefined,
              symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            var defineProperty = (function () {
              try {
                var func = getNative(Object, "defineProperty");
                func({}, "", {});
                return func;
              } catch (e) {}
            })();

            /** Mocked built-ins. */
            var ctxClearTimeout =
                context.clearTimeout !== root.clearTimeout &&
                context.clearTimeout,
              ctxNow = Date && Date.now !== root.Date.now && Date.now,
              ctxSetTimeout =
                context.setTimeout !== root.setTimeout && context.setTimeout;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
              nativeFloor = Math.floor,
              nativeGetSymbols = Object.getOwnPropertySymbols,
              nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
              nativeIsFinite = context.isFinite,
              nativeJoin = arrayProto.join,
              nativeKeys = overArg(Object.keys, Object),
              nativeMax = Math.max,
              nativeMin = Math.min,
              nativeNow = Date.now,
              nativeParseInt = context.parseInt,
              nativeRandom = Math.random,
              nativeReverse = arrayProto.reverse;

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, "DataView"),
              Map = getNative(context, "Map"),
              Promise = getNative(context, "Promise"),
              Set = getNative(context, "Set"),
              WeakMap = getNative(context, "WeakMap"),
              nativeCreate = getNative(Object, "create");

            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap();

            /** Used to lookup unminified function names. */
            var realNames = {};

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
              mapCtorString = toSource(Map),
              promiseCtorString = toSource(Promise),
              setCtorString = toSource(Set),
              weakMapCtorString = toSource(WeakMap);

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
              symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
              symbolToString = symbolProto ? symbolProto.toString : undefined;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
              if (
                isObjectLike(value) &&
                !isArray(value) &&
                !(value instanceof LazyWrapper)
              ) {
                if (value instanceof LodashWrapper) {
                  return value;
                }
                if (hasOwnProperty.call(value, "__wrapped__")) {
                  return wrapperClone(value);
                }
              }
              return new LodashWrapper(value);
            }

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
              function object() {}
              return function (proto) {
                if (!isObject(proto)) {
                  return {};
                }
                if (objectCreate) {
                  return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
              };
            })();

            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
              // No operation performed.
            }

            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__chain__ = !!chainAll;
              this.__index__ = 0;
              this.__values__ = undefined;
            }

            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {
              /**
               * Used to detect `data` property values to be HTML-escaped.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              escape: reEscape,

              /**
               * Used to detect code to be evaluated.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              evaluate: reEvaluate,

              /**
               * Used to detect `data` property values to inject.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              interpolate: reInterpolate,

              /**
               * Used to reference the data object in the template text.
               *
               * @memberOf _.templateSettings
               * @type {string}
               */
              variable: "",

              /**
               * Used to import variables into the compiled template.
               *
               * @memberOf _.templateSettings
               * @type {Object}
               */
              imports: {
                /**
                 * A reference to the `lodash` function.
                 *
                 * @memberOf _.templateSettings.imports
                 * @type {Function}
                 */
                _: lodash,
              },
            };

            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;

            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__dir__ = 1;
              this.__filtered__ = false;
              this.__iteratees__ = [];
              this.__takeCount__ = MAX_ARRAY_LENGTH;
              this.__views__ = [];
            }

            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
              var result = new LazyWrapper(this.__wrapped__);
              result.__actions__ = copyArray(this.__actions__);
              result.__dir__ = this.__dir__;
              result.__filtered__ = this.__filtered__;
              result.__iteratees__ = copyArray(this.__iteratees__);
              result.__takeCount__ = this.__takeCount__;
              result.__views__ = copyArray(this.__views__);
              return result;
            }

            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
              if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
              } else {
                result = this.clone();
                result.__dir__ *= -1;
              }
              return result;
            }

            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
              var array = this.__wrapped__.value(),
                dir = this.__dir__,
                isArr = isArray(array),
                isRight = dir < 0,
                arrLength = isArr ? array.length : 0,
                view = getView(0, arrLength, this.__views__),
                start = view.start,
                end = view.end,
                length = end - start,
                index = isRight ? end : start - 1,
                iteratees = this.__iteratees__,
                iterLength = iteratees.length,
                resIndex = 0,
                takeCount = nativeMin(length, this.__takeCount__);

              if (
                !isArr ||
                (!isRight && arrLength == length && takeCount == length)
              ) {
                return baseWrapperValue(array, this.__actions__);
              }
              var result = [];

              outer: while (length-- && resIndex < takeCount) {
                index += dir;

                var iterIndex = -1,
                  value = array[index];

                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex],
                    iteratee = data.iteratee,
                    type = data.type,
                    computed = iteratee(value);

                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result[resIndex++] = value;
              }
              return result;
            }

            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
              this.__data__ = nativeCreate ? nativeCreate(null) : {};
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
              var data = this.__data__;
              if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
              }
              return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
              var data = this.__data__;
              return nativeCreate
                ? data[key] !== undefined
                : hasOwnProperty.call(data, key);
            }

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] =
                nativeCreate && value === undefined ? HASH_UNDEFINED : value;
              return this;
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype["delete"] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }
              --this.size;
              return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              return index < 0 ? undefined : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
              return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype["delete"] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                hash: new Hash(),
                map: new (Map || ListCache)(),
                string: new Hash(),
              };
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
              var result = getMapData(this, key)["delete"](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
              return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
              return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
              var data = getMapData(this, key),
                size = data.size;

              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype["delete"] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
              var index = -1,
                length = values == null ? 0 : values.length;

              this.__data__ = new MapCache();
              while (++index < length) {
                this.add(values[index]);
              }
            }

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
              this.__data__.set(value, HASH_UNDEFINED);
              return this;
            }

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
              return this.__data__.has(value);
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
              var data = (this.__data__ = new ListCache(entries));
              this.size = data.size;
            }

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
              this.__data__ = new ListCache();
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
              var data = this.__data__,
                result = data["delete"](key);

              this.size = data.size;
              return result;
            }

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
              return this.__data__.get(key);
            }

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
              return this.__data__.has(key);
            }

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
              var data = this.__data__;
              if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                  pairs.push([key, value]);
                  this.size = ++data.size;
                  return this;
                }
                data = this.__data__ = new MapCache(pairs);
              }
              data.set(key, value);
              this.size = data.size;
              return this;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype["delete"] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
              var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

              for (var key in value) {
                if (
                  (inherited || hasOwnProperty.call(value, key)) &&
                  !(
                    skipIndexes &&
                    // Safari 9 has enumerable `arguments.length` in strict mode.
                    (key == "length" ||
                      // Node.js 0.10 has enumerable non-index properties on buffers.
                      (isBuff && (key == "offset" || key == "parent")) ||
                      // PhantomJS 2 has enumerable non-index properties on typed arrays.
                      (isType &&
                        (key == "buffer" ||
                          key == "byteLength" ||
                          key == "byteOffset")) ||
                      // Skip index properties.
                      isIndex(key, length))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
              var length = array.length;
              return length ? array[baseRandom(0, length - 1)] : undefined;
            }

            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
              return shuffleSelf(
                copyArray(array),
                baseClamp(n, 0, array.length)
              );
            }

            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
              return shuffleSelf(copyArray(array));
            }

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
              if (
                (value !== undefined && !eq(object[key], value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (
                !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
              var length = array.length;
              while (length--) {
                if (eq(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }

            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
              baseEach(collection, function (value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
              return object && copyObject(source, keys(source), object);
            }

            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
              return object && copyObject(source, keysIn(source), object);
            }

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
              if (key == "__proto__" && defineProperty) {
                defineProperty(object, key, {
                  configurable: true,
                  enumerable: true,
                  value: value,
                  writable: true,
                });
              } else {
                object[key] = value;
              }
            }

            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
              var index = -1,
                length = paths.length,
                result = Array(length),
                skip = object == null;

              while (++index < length) {
                result[index] = skip ? undefined : get(object, paths[index]);
              }
              return result;
            }

            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
              if (number === number) {
                if (upper !== undefined) {
                  number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                  number = number >= lower ? number : lower;
                }
              }
              return number;
            }

            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
              var result,
                isDeep = bitmask & CLONE_DEEP_FLAG,
                isFlat = bitmask & CLONE_FLAT_FLAG,
                isFull = bitmask & CLONE_SYMBOLS_FLAG;

              if (customizer) {
                result = object
                  ? customizer(value, key, object, stack)
                  : customizer(value);
              }
              if (result !== undefined) {
                return result;
              }
              if (!isObject(value)) {
                return value;
              }
              var isArr = isArray(value);
              if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                  return copyArray(value, result);
                }
              } else {
                var tag = getTag(value),
                  isFunc = tag == funcTag || tag == genTag;

                if (isBuffer(value)) {
                  return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                  result = isFlat || isFunc ? {} : initCloneObject(value);
                  if (!isDeep) {
                    return isFlat
                      ? copySymbolsIn(value, baseAssignIn(result, value))
                      : copySymbols(value, baseAssign(result, value));
                  }
                } else {
                  if (!cloneableTags[tag]) {
                    return object ? value : {};
                  }
                  result = initCloneByTag(value, tag, isDeep);
                }
              }
              // Check for circular references and return its corresponding clone.
              stack || (stack = new Stack());
              var stacked = stack.get(value);
              if (stacked) {
                return stacked;
              }
              stack.set(value, result);

              if (isSet(value)) {
                value.forEach(function (subValue) {
                  result.add(
                    baseClone(
                      subValue,
                      bitmask,
                      customizer,
                      subValue,
                      value,
                      stack
                    )
                  );
                });
              } else if (isMap(value)) {
                value.forEach(function (subValue, key) {
                  result.set(
                    key,
                    baseClone(subValue, bitmask, customizer, key, value, stack)
                  );
                });
              }

              var keysFunc = isFull
                ? isFlat
                  ? getAllKeysIn
                  : getAllKeys
                : isFlat
                ? keysIn
                : keys;

              var props = isArr ? undefined : keysFunc(value);
              arrayEach(props || value, function (subValue, key) {
                if (props) {
                  key = subValue;
                  subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(
                  result,
                  key,
                  baseClone(subValue, bitmask, customizer, key, value, stack)
                );
              });
              return result;
            }

            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
              var props = keys(source);
              return function (object) {
                return baseConformsTo(object, source, props);
              };
            }

            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
              var length = props.length;
              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (length--) {
                var key = props[length],
                  predicate = source[key],
                  value = object[key];

                if (
                  (value === undefined && !(key in object)) ||
                  !predicate(value)
                ) {
                  return false;
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return setTimeout(function () {
                func.apply(undefined, args);
              }, wait);
            }

            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                isCommon = true,
                length = array.length,
                result = [],
                valuesLength = values.length;

              if (!length) {
                return result;
              }
              if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
              }
              if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
              } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee == null ? value : iteratee(value);

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result.push(value);
                } else if (!includes(values, computed, comparator)) {
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);

            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
              var result = true;
              baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
              });
              return result;
            }

            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
              var index = -1,
                length = array.length;

              while (++index < length) {
                var value = array[index],
                  current = iteratee(value);

                if (
                  current != null &&
                  (computed === undefined
                    ? current === current && !isSymbol(current)
                    : comparator(current, computed))
                ) {
                  var computed = current,
                    result = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
              var length = array.length;

              start = toInteger(start);
              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end === undefined || end > length ? length : toInteger(end);
              if (end < 0) {
                end += length;
              }
              end = start > end ? 0 : toLength(end);
              while (start < end) {
                array[start++] = value;
              }
              return array;
            }

            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
              var result = [];
              baseEach(collection, function (value, index, collection) {
                if (predicate(value, index, collection)) {
                  result.push(value);
                }
              });
              return result;
            }

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
              var index = -1,
                length = array.length;

              predicate || (predicate = isFlattenable);
              result || (result = []);

              while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                  if (depth > 1) {
                    // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                  } else {
                    arrayPush(result, value);
                  }
                } else if (!isStrict) {
                  result[result.length] = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
              return object && baseFor(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
              return object && baseForRight(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
              return arrayFilter(props, function (key) {
                return isFunction(object[key]);
              });
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
              path = castPath(path, object);

              var index = 0,
                length = path.length;

              while (object != null && index < length) {
                object = object[toKey(path[index++])];
              }
              return index && index == length ? object : undefined;
            }

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
              var result = keysFunc(object);
              return isArray(object)
                ? result
                : arrayPush(result, symbolsFunc(object));
            }

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return symToStringTag && symToStringTag in Object(value)
                ? getRawTag(value)
                : objectToString(value);
            }

            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
              return value > other;
            }

            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
              return object != null && hasOwnProperty.call(object, key);
            }

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
              return object != null && key in Object(object);
            }

            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
              return (
                number >= nativeMin(start, end) &&
                number < nativeMax(start, end)
              );
            }

            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
              var includes = comparator ? arrayIncludesWith : arrayIncludes,
                length = arrays[0].length,
                othLength = arrays.length,
                othIndex = othLength,
                caches = Array(othLength),
                maxLength = Infinity,
                result = [];

              while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                  array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] =
                  !comparator &&
                  (iteratee || (length >= 120 && array.length >= 120))
                    ? new SetCache(othIndex && array)
                    : undefined;
              }
              array = arrays[0];

              var index = -1,
                seen = caches[0];

              outer: while (++index < length && result.length < maxLength) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (
                  !(seen
                    ? cacheHas(seen, computed)
                    : includes(result, computed, comparator))
                ) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (
                      !(cache
                        ? cacheHas(cache, computed)
                        : includes(arrays[othIndex], computed, comparator))
                    ) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
              baseForOwn(object, function (value, key, object) {
                setter(accumulator, iteratee(value), key, object);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
              path = castPath(path, object);
              object = parent(object, path);
              var func = object == null ? object : object[toKey(last(path))];
              return func == null ? undefined : apply(func, object, args);
            }

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
              return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
              return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }

            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
              return isObjectLike(value) && baseGetTag(value) == dateTag;
            }

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
              if (value === other) {
                return true;
              }
              if (
                value == null ||
                other == null ||
                (!isObjectLike(value) && !isObjectLike(other))
              ) {
                return value !== value && other !== other;
              }
              return baseIsEqualDeep(
                value,
                other,
                bitmask,
                customizer,
                baseIsEqual,
                stack
              );
            }

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);

              objTag = objTag == argsTag ? objectTag : objTag;
              othTag = othTag == argsTag ? objectTag : othTag;

              var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

              if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                  return false;
                }
                objIsArr = true;
                objIsObj = false;
              }
              if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object)
                  ? equalArrays(
                      object,
                      other,
                      bitmask,
                      customizer,
                      equalFunc,
                      stack
                    )
                  : equalByTag(
                      object,
                      other,
                      objTag,
                      bitmask,
                      customizer,
                      equalFunc,
                      stack
                    );
              }
              if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped =
                    objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                  othIsWrapped =
                    othIsObj && hasOwnProperty.call(other, "__wrapped__");

                if (objIsWrapped || othIsWrapped) {
                  var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                  stack || (stack = new Stack());
                  return equalFunc(
                    objUnwrapped,
                    othUnwrapped,
                    bitmask,
                    customizer,
                    stack
                  );
                }
              }
              if (!isSameTag) {
                return false;
              }
              stack || (stack = new Stack());
              return equalObjects(
                object,
                other,
                bitmask,
                customizer,
                equalFunc,
                stack
              );
            }

            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
              return isObjectLike(value) && getTag(value) == mapTag;
            }

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
              var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (index--) {
                var data = matchData[index];
                if (
                  noCustomizer && data[2]
                    ? data[1] !== object[data[0]]
                    : !(data[0] in object)
                ) {
                  return false;
                }
              }
              while (++index < length) {
                data = matchData[index];
                var key = data[0],
                  objValue = object[key],
                  srcValue = data[1];

                if (noCustomizer && data[2]) {
                  if (objValue === undefined && !(key in object)) {
                    return false;
                  }
                } else {
                  var stack = new Stack();
                  if (customizer) {
                    var result = customizer(
                      objValue,
                      srcValue,
                      key,
                      object,
                      source,
                      stack
                    );
                  }
                  if (
                    !(result === undefined
                      ? baseIsEqual(
                          srcValue,
                          objValue,
                          COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                          customizer,
                          stack
                        )
                      : result)
                  ) {
                    return false;
                  }
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
              if (!isObject(value) || isMasked(value)) {
                return false;
              }
              var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
              return pattern.test(toSource(value));
            }

            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
              return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }

            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
              return isObjectLike(value) && getTag(value) == setTag;
            }

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
              return (
                isObjectLike(value) &&
                isLength(value.length) &&
                !!typedArrayTags[baseGetTag(value)]
              );
            }

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
              // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
              // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
              if (typeof value == "function") {
                return value;
              }
              if (value == null) {
                return identity;
              }
              if (typeof value == "object") {
                return isArray(value)
                  ? baseMatchesProperty(value[0], value[1])
                  : baseMatches(value);
              }
              return property(value);
            }

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
              if (!isPrototype(object)) {
                return nativeKeys(object);
              }
              var result = [];
              for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != "constructor") {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
              if (!isObject(object)) {
                return nativeKeysIn(object);
              }
              var isProto = isPrototype(object),
                result = [];

              for (var key in object) {
                if (
                  !(
                    key == "constructor" &&
                    (isProto || !hasOwnProperty.call(object, key))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
              return value < other;
            }

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
              var index = -1,
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
              });
              return result;
            }

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
              var matchData = getMatchData(source);
              if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(
                  matchData[0][0],
                  matchData[0][1]
                );
              }
              return function (object) {
                return (
                  object === source || baseIsMatch(object, source, matchData)
                );
              };
            }

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
              if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
              }
              return function (object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue
                  ? hasIn(object, path)
                  : baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                    );
              };
            }

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
              if (object === source) {
                return;
              }
              baseFor(
                source,
                function (srcValue, key) {
                  stack || (stack = new Stack());
                  if (isObject(srcValue)) {
                    baseMergeDeep(
                      object,
                      source,
                      key,
                      srcIndex,
                      baseMerge,
                      customizer,
                      stack
                    );
                  } else {
                    var newValue = customizer
                      ? customizer(
                          safeGet(object, key),
                          srcValue,
                          key + "",
                          object,
                          source,
                          stack
                        )
                      : undefined;

                    if (newValue === undefined) {
                      newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                  }
                },
                keysIn
              );
            }

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(
              object,
              source,
              key,
              srcIndex,
              mergeFunc,
              customizer,
              stack
            ) {
              var objValue = safeGet(object, key),
                srcValue = safeGet(source, key),
                stacked = stack.get(srcValue);

              if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
              }
              var newValue = customizer
                ? customizer(
                    objValue,
                    srcValue,
                    key + "",
                    object,
                    source,
                    stack
                  )
                : undefined;

              var isCommon = newValue === undefined;

              if (isCommon) {
                var isArr = isArray(srcValue),
                  isBuff = !isArr && isBuffer(srcValue),
                  isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                  if (isArray(objValue)) {
                    newValue = objValue;
                  } else if (isArrayLikeObject(objValue)) {
                    newValue = copyArray(objValue);
                  } else if (isBuff) {
                    isCommon = false;
                    newValue = cloneBuffer(srcValue, true);
                  } else if (isTyped) {
                    isCommon = false;
                    newValue = cloneTypedArray(srcValue, true);
                  } else {
                    newValue = [];
                  }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                  newValue = objValue;
                  if (isArguments(objValue)) {
                    newValue = toPlainObject(objValue);
                  } else if (!isObject(objValue) || isFunction(objValue)) {
                    newValue = initCloneObject(srcValue);
                  }
                } else {
                  isCommon = false;
                }
              }
              if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
              }
              assignMergeValue(object, key, newValue);
            }

            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
              var length = array.length;
              if (!length) {
                return;
              }
              n += n < 0 ? length : 0;
              return isIndex(n, length) ? array[n] : undefined;
            }

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
              var index = -1;
              iteratees = arrayMap(
                iteratees.length ? iteratees : [identity],
                baseUnary(getIteratee())
              );

              var result = baseMap(
                collection,
                function (value, key, collection) {
                  var criteria = arrayMap(iteratees, function (iteratee) {
                    return iteratee(value);
                  });
                  return {
                    criteria: criteria,
                    index: ++index,
                    value: value,
                  };
                }
              );

              return baseSortBy(result, function (object, other) {
                return compareMultiple(object, other, orders);
              });
            }

            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
              return basePickBy(object, paths, function (value, path) {
                return hasIn(object, path);
              });
            }

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
              var index = -1,
                length = paths.length,
                result = {};

              while (++index < length) {
                var path = paths[index],
                  value = baseGet(object, path);

                if (predicate(value, path)) {
                  baseSet(result, castPath(path, object), value);
                }
              }
              return result;
            }

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
              return function (object) {
                return baseGet(object, path);
              };
            }

            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
              var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                index = -1,
                length = values.length,
                seen = array;

              if (array === values) {
                values = copyArray(values);
              }
              if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
              }
              while (++index < length) {
                var fromIndex = 0,
                  value = values[index],
                  computed = iteratee ? iteratee(value) : value;

                while (
                  (fromIndex = indexOf(seen, computed, fromIndex, comparator)) >
                  -1
                ) {
                  if (seen !== array) {
                    splice.call(seen, fromIndex, 1);
                  }
                  splice.call(array, fromIndex, 1);
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
              var length = array ? indexes.length : 0,
                lastIndex = length - 1;

              while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                  var previous = index;
                  if (isIndex(index)) {
                    splice.call(array, index, 1);
                  } else {
                    baseUnset(array, index);
                  }
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
              return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
              var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
              var result = "";
              if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
              }
              // Leverage the exponentiation by squaring algorithm for a faster repeat.
              // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
              do {
                if (n % 2) {
                  result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                  string += string;
                }
              } while (n);

              return result;
            }

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
              return setToString(overRest(func, start, identity), func + "");
            }

            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
              return arraySample(values(collection));
            }

            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
              var array = values(collection);
              return shuffleSelf(array, baseClamp(n, 0, array.length));
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
              if (!isObject(object)) {
                return object;
              }
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                lastIndex = length - 1,
                nested = object;

              while (nested != null && ++index < length) {
                var key = toKey(path[index]),
                  newValue = value;

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer
                    ? customizer(objValue, key, nested)
                    : undefined;
                  if (newValue === undefined) {
                    newValue = isObject(objValue)
                      ? objValue
                      : isIndex(path[index + 1])
                      ? []
                      : {};
                  }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }

            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap
              ? identity
              : function (func, data) {
                  metaMap.set(func, data);
                  return func;
                };

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty
              ? identity
              : function (func, string) {
                  return defineProperty(func, "toString", {
                    configurable: true,
                    enumerable: false,
                    value: constant(string),
                    writable: true,
                  });
                };

            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
              return shuffleSelf(values(collection));
            }

            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
              var index = -1,
                length = array.length;

              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end > length ? length : end;
              if (end < 0) {
                end += length;
              }
              length = start > end ? 0 : (end - start) >>> 0;
              start >>>= 0;

              var result = Array(length);
              while (++index < length) {
                result[index] = array[index + start];
              }
              return result;
            }

            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
              var result;

              baseEach(collection, function (value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
              });
              return !!result;
            }

            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
              var low = 0,
                high = array == null ? low : array.length;

              if (
                typeof value == "number" &&
                value === value &&
                high <= HALF_MAX_ARRAY_LENGTH
              ) {
                while (low < high) {
                  var mid = (low + high) >>> 1,
                    computed = array[mid];

                  if (
                    computed !== null &&
                    !isSymbol(computed) &&
                    (retHighest ? computed <= value : computed < value)
                  ) {
                    low = mid + 1;
                  } else {
                    high = mid;
                  }
                }
                return high;
              }
              return baseSortedIndexBy(array, value, identity, retHighest);
            }

            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
              value = iteratee(value);

              var low = 0,
                high = array == null ? 0 : array.length,
                valIsNaN = value !== value,
                valIsNull = value === null,
                valIsSymbol = isSymbol(value),
                valIsUndefined = value === undefined;

              while (low < high) {
                var mid = nativeFloor((low + high) / 2),
                  computed = iteratee(array[mid]),
                  othIsDefined = computed !== undefined,
                  othIsNull = computed === null,
                  othIsReflexive = computed === computed,
                  othIsSymbol = isSymbol(computed);

                if (valIsNaN) {
                  var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                  setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    !othIsNull &&
                    (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                  setLow = false;
                } else {
                  setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return nativeMin(high, MAX_ARRAY_INDEX);
            }

            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
              var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                if (!index || !eq(computed, seen)) {
                  var seen = computed;
                  result[resIndex++] = value === 0 ? 0 : value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              return +value;
            }

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == "string") {
                return value;
              }
              if (isArray(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + "";
              }
              if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : "";
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                length = array.length,
                isCommon = true,
                result = [],
                seen = result;

              if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
              } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                  return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache();
              } else {
                seen = iteratee ? [] : result;
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee) {
                    seen.push(computed);
                  }
                  result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                  if (seen !== result) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
              path = castPath(path, object);
              object = parent(object, path);
              return object == null || delete object[toKey(last(path))];
            }

            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
              return baseSet(
                object,
                path,
                updater(baseGet(object, path)),
                customizer
              );
            }

            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
              var length = array.length,
                index = fromRight ? length : -1;

              while (
                (fromRight ? index-- : ++index < length) &&
                predicate(array[index], index, array)
              ) {}

              return isDrop
                ? baseSlice(
                    array,
                    fromRight ? 0 : index,
                    fromRight ? index + 1 : length
                  )
                : baseSlice(
                    array,
                    fromRight ? index + 1 : 0,
                    fromRight ? length : index
                  );
            }

            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
              var result = value;
              if (result instanceof LazyWrapper) {
                result = result.value();
              }
              return arrayReduce(
                actions,
                function (result, action) {
                  return action.func.apply(
                    action.thisArg,
                    arrayPush([result], action.args)
                  );
                },
                result
              );
            }

            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
              var length = arrays.length;
              if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
              }
              var index = -1,
                result = Array(length);

              while (++index < length) {
                var array = arrays[index],
                  othIndex = -1;

                while (++othIndex < length) {
                  if (othIndex != index) {
                    result[index] = baseDifference(
                      result[index] || array,
                      arrays[othIndex],
                      iteratee,
                      comparator
                    );
                  }
                }
              }
              return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }

            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
              var index = -1,
                length = props.length,
                valsLength = values.length,
                result = {};

              while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
              }
              return result;
            }

            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
              return isArrayLikeObject(value) ? value : [];
            }

            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
              return typeof value == "function" ? value : identity;
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
              if (isArray(value)) {
                return value;
              }
              return isKey(value, object)
                ? [value]
                : stringToPath(toString(value));
            }

            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;

            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
              var length = array.length;
              end = end === undefined ? length : end;
              return !start && end >= length
                ? array
                : baseSlice(array, start, end);
            }

            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout =
              ctxClearTimeout ||
              function (id) {
                return root.clearTimeout(id);
              };

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
              if (isDeep) {
                return buffer.slice();
              }
              var length = buffer.length,
                result = allocUnsafe
                  ? allocUnsafe(length)
                  : new buffer.constructor(length);

              buffer.copy(result);
              return result;
            }

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
              var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
              new Uint8Array(result).set(new Uint8Array(arrayBuffer));
              return result;
            }

            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(dataView.buffer)
                : dataView.buffer;
              return new dataView.constructor(
                buffer,
                dataView.byteOffset,
                dataView.byteLength
              );
            }

            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
              var result = new regexp.constructor(
                regexp.source,
                reFlags.exec(regexp)
              );
              result.lastIndex = regexp.lastIndex;
              return result;
            }

            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
              return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(typedArray.buffer)
                : typedArray.buffer;
              return new typedArray.constructor(
                buffer,
                typedArray.byteOffset,
                typedArray.length
              );
            }

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
              if (value !== other) {
                var valIsDefined = value !== undefined,
                  valIsNull = value === null,
                  valIsReflexive = value === value,
                  valIsSymbol = isSymbol(value);

                var othIsDefined = other !== undefined,
                  othIsNull = other === null,
                  othIsReflexive = other === other,
                  othIsSymbol = isSymbol(other);

                if (
                  (!othIsNull &&
                    !othIsSymbol &&
                    !valIsSymbol &&
                    value > other) ||
                  (valIsSymbol &&
                    othIsDefined &&
                    othIsReflexive &&
                    !othIsNull &&
                    !othIsSymbol) ||
                  (valIsNull && othIsDefined && othIsReflexive) ||
                  (!valIsDefined && othIsReflexive) ||
                  !valIsReflexive
                ) {
                  return 1;
                }
                if (
                  (!valIsNull &&
                    !valIsSymbol &&
                    !othIsSymbol &&
                    value < other) ||
                  (othIsSymbol &&
                    valIsDefined &&
                    valIsReflexive &&
                    !valIsNull &&
                    !valIsSymbol) ||
                  (othIsNull && valIsDefined && valIsReflexive) ||
                  (!othIsDefined && valIsReflexive) ||
                  !othIsReflexive
                ) {
                  return -1;
                }
              }
              return 0;
            }

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
              var index = -1,
                objCriteria = object.criteria,
                othCriteria = other.criteria,
                length = objCriteria.length,
                ordersLength = orders.length;

              while (++index < length) {
                var result = compareAscending(
                  objCriteria[index],
                  othCriteria[index]
                );
                if (result) {
                  if (index >= ordersLength) {
                    return result;
                  }
                  var order = orders[index];
                  return result * (order == "desc" ? -1 : 1);
                }
              }
              // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
              // that causes it, under certain circumstances, to provide the same value for
              // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
              // for more details.
              //
              // This also ensures a stable sort in V8 and other engines.
              // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
              return object.index - other.index;
            }

            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersLength = holders.length,
                leftIndex = -1,
                leftLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(leftLength + rangeLength),
                isUncurried = !isCurried;

              while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
              }
              while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[holders[argsIndex]] = args[argsIndex];
                }
              }
              while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
              }
              return result;
            }

            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersIndex = -1,
                holdersLength = holders.length,
                rightIndex = -1,
                rightLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(rangeLength + rightLength),
                isUncurried = !isCurried;

              while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
              }
              var offset = argsIndex;
              while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
              }
              while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
              }
              return result;
            }

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
              var index = -1,
                length = source.length;

              array || (array = Array(length));
              while (++index < length) {
                array[index] = source[index];
              }
              return array;
            }

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
              var isNew = !object;
              object || (object = {});

              var index = -1,
                length = props.length;

              while (++index < length) {
                var key = props[index];

                var newValue = customizer
                  ? customizer(object[key], source[key], key, object, source)
                  : undefined;

                if (newValue === undefined) {
                  newValue = source[key];
                }
                if (isNew) {
                  baseAssignValue(object, key, newValue);
                } else {
                  assignValue(object, key, newValue);
                }
              }
              return object;
            }

            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
              return copyObject(source, getSymbols(source), object);
            }

            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
              return copyObject(source, getSymbolsIn(source), object);
            }

            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
              return function (collection, iteratee) {
                var func = isArray(collection)
                    ? arrayAggregator
                    : baseAggregator,
                  accumulator = initializer ? initializer() : {};

                return func(
                  collection,
                  setter,
                  getIteratee(iteratee, 2),
                  accumulator
                );
              };
            }

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
              return baseRest(function (object, sources) {
                var index = -1,
                  length = sources.length,
                  customizer = length > 1 ? sources[length - 1] : undefined,
                  guard = length > 2 ? sources[2] : undefined;

                customizer =
                  assigner.length > 3 && typeof customizer == "function"
                    ? (length--, customizer)
                    : undefined;

                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                  customizer = length < 3 ? undefined : customizer;
                  length = 1;
                }
                object = Object(object);
                while (++index < length) {
                  var source = sources[index];
                  if (source) {
                    assigner(object, source, index, customizer);
                  }
                }
                return object;
              });
            }

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
              return function (collection, iteratee) {
                if (collection == null) {
                  return collection;
                }
                if (!isArrayLike(collection)) {
                  return eachFunc(collection, iteratee);
                }
                var length = collection.length,
                  index = fromRight ? length : -1,
                  iterable = Object(collection);

                while (fromRight ? index-- : ++index < length) {
                  if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                  }
                }
                return collection;
              };
            }

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
              return function (object, iteratee, keysFunc) {
                var index = -1,
                  iterable = Object(object),
                  props = keysFunc(object),
                  length = props.length;

                while (length--) {
                  var key = props[fromRight ? length : ++index];
                  if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                  }
                }
                return object;
              };
            }

            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return fn.apply(isBind ? thisArg : this, arguments);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
              return function (string) {
                string = toString(string);

                var strSymbols = hasUnicode(string)
                  ? stringToArray(string)
                  : undefined;

                var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                var trailing = strSymbols
                  ? castSlice(strSymbols, 1).join("")
                  : string.slice(1);

                return chr[methodName]() + trailing;
              };
            }

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
              return function (string) {
                return arrayReduce(
                  words(deburr(string).replace(reApos, "")),
                  callback,
                  ""
                );
              };
            }

            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
              return function () {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return new Ctor();
                  case 1:
                    return new Ctor(args[0]);
                  case 2:
                    return new Ctor(args[0], args[1]);
                  case 3:
                    return new Ctor(args[0], args[1], args[2]);
                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                  case 5:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4]
                    );
                  case 6:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5]
                    );
                  case 7:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5],
                      args[6]
                    );
                }
                var thisBinding = baseCreate(Ctor.prototype),
                  result = Ctor.apply(thisBinding, args);

                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
              };
            }

            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
              var Ctor = createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length,
                  placeholder = getHolder(wrapper);

                while (index--) {
                  args[index] = arguments[index];
                }
                var holders =
                  length < 3 &&
                  args[0] !== placeholder &&
                  args[length - 1] !== placeholder
                    ? []
                    : replaceHolders(args, placeholder);

                length -= holders.length;
                if (length < arity) {
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    undefined,
                    args,
                    holders,
                    undefined,
                    undefined,
                    arity - length
                  );
                }
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return apply(fn, this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
              return function (collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                  var iteratee = getIteratee(predicate, 3);
                  collection = keys(collection);
                  predicate = function (key) {
                    return iteratee(iterable[key], key, iterable);
                  };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1
                  ? iterable[iteratee ? collection[index] : index]
                  : undefined;
              };
            }

            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
              return flatRest(function (funcs) {
                var length = funcs.length,
                  index = length,
                  prereq = LodashWrapper.prototype.thru;

                if (fromRight) {
                  funcs.reverse();
                }
                while (index--) {
                  var func = funcs[index];
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                    var wrapper = new LodashWrapper([], true);
                  }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                  func = funcs[index];

                  var funcName = getFuncName(func),
                    data = funcName == "wrapper" ? getData(func) : undefined;

                  if (
                    data &&
                    isLaziable(data[0]) &&
                    data[1] ==
                      (WRAP_ARY_FLAG |
                        WRAP_CURRY_FLAG |
                        WRAP_PARTIAL_FLAG |
                        WRAP_REARG_FLAG) &&
                    !data[4].length &&
                    data[9] == 1
                  ) {
                    wrapper = wrapper[getFuncName(data[0])].apply(
                      wrapper,
                      data[3]
                    );
                  } else {
                    wrapper =
                      func.length == 1 && isLaziable(func)
                        ? wrapper[funcName]()
                        : wrapper.thru(func);
                  }
                }
                return function () {
                  var args = arguments,
                    value = args[0];

                  if (wrapper && args.length == 1 && isArray(value)) {
                    return wrapper.plant(value).value();
                  }
                  var index = 0,
                    result = length ? funcs[index].apply(this, args) : value;

                  while (++index < length) {
                    result = funcs[index].call(this, result);
                  }
                  return result;
                };
              });
            }

            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary,
              arity
            ) {
              var isAry = bitmask & WRAP_ARY_FLAG,
                isBind = bitmask & WRAP_BIND_FLAG,
                isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                isFlip = bitmask & WRAP_FLIP_FLAG,
                Ctor = isBindKey ? undefined : createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length;

                while (index--) {
                  args[index] = arguments[index];
                }
                if (isCurried) {
                  var placeholder = getHolder(wrapper),
                    holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                  args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                  args = composeArgsRight(
                    args,
                    partialsRight,
                    holdersRight,
                    isCurried
                  );
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                  var newHolders = replaceHolders(args, placeholder);
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    thisArg,
                    args,
                    newHolders,
                    argPos,
                    ary,
                    arity - length
                  );
                }
                var thisBinding = isBind ? thisArg : this,
                  fn = isBindKey ? thisBinding[func] : func;

                length = args.length;
                if (argPos) {
                  args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                  args.reverse();
                }
                if (isAry && ary < length) {
                  args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                  fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
              return function (object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
              };
            }

            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
              return function (value, other) {
                var result;
                if (value === undefined && other === undefined) {
                  return defaultValue;
                }
                if (value !== undefined) {
                  result = value;
                }
                if (other !== undefined) {
                  if (result === undefined) {
                    return other;
                  }
                  if (typeof value == "string" || typeof other == "string") {
                    value = baseToString(value);
                    other = baseToString(other);
                  } else {
                    value = baseToNumber(value);
                    other = baseToNumber(other);
                  }
                  result = operator(value, other);
                }
                return result;
              };
            }

            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
              return flatRest(function (iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function (args) {
                  var thisArg = this;
                  return arrayFunc(iteratees, function (iteratee) {
                    return apply(iteratee, thisArg, args);
                  });
                });
              });
            }

            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
              chars = chars === undefined ? " " : baseToString(chars);

              var charsLength = chars.length;
              if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
              }
              var result = baseRepeat(
                chars,
                nativeCeil(length / stringSize(chars))
              );
              return hasUnicode(chars)
                ? castSlice(stringToArray(result), 0, length).join("")
                : result.slice(0, length);
            }

            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var argsIndex = -1,
                  argsLength = arguments.length,
                  leftIndex = -1,
                  leftLength = partials.length,
                  args = Array(leftLength + argsLength),
                  fn =
                    this && this !== root && this instanceof wrapper
                      ? Ctor
                      : func;

                while (++leftIndex < leftLength) {
                  args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                  args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
              return function (start, end, step) {
                if (
                  step &&
                  typeof step != "number" &&
                  isIterateeCall(start, end, step)
                ) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step =
                  step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }

            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
              return function (value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                  value = toNumber(value);
                  other = toNumber(other);
                }
                return operator(value, other);
              };
            }

            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(
              func,
              bitmask,
              wrapFunc,
              placeholder,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isCurry = bitmask & WRAP_CURRY_FLAG,
                newHolders = isCurry ? holders : undefined,
                newHoldersRight = isCurry ? undefined : holders,
                newPartials = isCurry ? partials : undefined,
                newPartialsRight = isCurry ? undefined : partials;

              bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
              bitmask &= ~(isCurry
                ? WRAP_PARTIAL_RIGHT_FLAG
                : WRAP_PARTIAL_FLAG);

              if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
              }
              var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity,
              ];

              var result = wrapFunc.apply(undefined, newData);
              if (isLaziable(func)) {
                setData(result, newData);
              }
              result.placeholder = placeholder;
              return setWrapToString(result, func, bitmask);
            }

            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
              var func = Math[methodName];
              return function (number, precision) {
                number = toNumber(number);
                precision =
                  precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                  // Shift with exponential notation to avoid floating-point issues.
                  // See [MDN](https://mdn.io/round#Examples) for more details.
                  var pair = (toString(number) + "e").split("e"),
                    value = func(pair[0] + "e" + (+pair[1] + precision));

                  pair = (toString(value) + "e").split("e");
                  return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
              };
            }

            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(
              Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
            )
              ? noop
              : function (values) {
                  return new Set(values);
                };

            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
              return function (object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                  return mapToArray(object);
                }
                if (tag == setTag) {
                  return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
              };
            }

            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
              if (!isBindKey && typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var length = partials ? partials.length : 0;
              if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
              }
              ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
              arity = arity === undefined ? arity : toInteger(arity);
              length -= holders ? holders.length : 0;

              if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials,
                  holdersRight = holders;

                partials = holders = undefined;
              }
              var data = isBindKey ? undefined : getData(func);

              var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity,
              ];

              if (data) {
                mergeData(newData, data);
              }
              func = newData[0];
              bitmask = newData[1];
              thisArg = newData[2];
              partials = newData[3];
              holders = newData[4];
              arity = newData[9] =
                newData[9] === undefined
                  ? isBindKey
                    ? 0
                    : func.length
                  : nativeMax(newData[9] - length, 0);

              if (
                !arity &&
                bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
              ) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
              }
              if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result = createBind(func, bitmask, thisArg);
              } else if (
                bitmask == WRAP_CURRY_FLAG ||
                bitmask == WRAP_CURRY_RIGHT_FLAG
              ) {
                result = createCurry(func, bitmask, arity);
              } else if (
                (bitmask == WRAP_PARTIAL_FLAG ||
                  bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                !holders.length
              ) {
                result = createPartial(func, bitmask, thisArg, partials);
              } else {
                result = createHybrid.apply(undefined, newData);
              }
              var setter = data ? baseSetData : setData;
              return setWrapToString(setter(result, newData), func, bitmask);
            }

            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
              if (
                objValue === undefined ||
                (eq(objValue, objectProto[key]) &&
                  !hasOwnProperty.call(object, key))
              ) {
                return srcValue;
              }
              return objValue;
            }

            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(
              objValue,
              srcValue,
              key,
              object,
              source,
              stack
            ) {
              if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(
                  objValue,
                  srcValue,
                  undefined,
                  customDefaultsMerge,
                  stack
                );
                stack["delete"](srcValue);
              }
              return objValue;
            }

            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
              return isPlainObject(value) ? undefined : value;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(
              array,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

              if (
                arrLength != othLength &&
                !(isPartial && othLength > arrLength)
              ) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(array);
              if (stacked && stack.get(other)) {
                return stacked == other;
              }
              var index = -1,
                result = true,
                seen =
                  bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

              stack.set(array, other);
              stack.set(other, array);

              // Ignore non-index properties.
              while (++index < arrLength) {
                var arrValue = array[index],
                  othValue = other[index];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(
                        arrValue,
                        othValue,
                        index,
                        array,
                        other,
                        stack
                      );
                }
                if (compared !== undefined) {
                  if (compared) {
                    continue;
                  }
                  result = false;
                  break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                  if (
                    !arraySome(other, function (othValue, othIndex) {
                      if (
                        !cacheHas(seen, othIndex) &&
                        (arrValue === othValue ||
                          equalFunc(
                            arrValue,
                            othValue,
                            bitmask,
                            customizer,
                            stack
                          ))
                      ) {
                        return seen.push(othIndex);
                      }
                    })
                  ) {
                    result = false;
                    break;
                  }
                } else if (
                  !(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                  )
                ) {
                  result = false;
                  break;
                }
              }
              stack["delete"](array);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(
              object,
              other,
              tag,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              switch (tag) {
                case dataViewTag:
                  if (
                    object.byteLength != other.byteLength ||
                    object.byteOffset != other.byteOffset
                  ) {
                    return false;
                  }
                  object = object.buffer;
                  other = other.buffer;

                case arrayBufferTag:
                  if (
                    object.byteLength != other.byteLength ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))
                  ) {
                    return false;
                  }
                  return true;

                case boolTag:
                case dateTag:
                case numberTag:
                  // Coerce booleans to `1` or `0` and dates to milliseconds.
                  // Invalid dates are coerced to `NaN`.
                  return eq(+object, +other);

                case errorTag:
                  return (
                    object.name == other.name && object.message == other.message
                  );

                case regexpTag:
                case stringTag:
                  // Coerce regexes to strings and treat strings, primitives and objects,
                  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                  // for more details.
                  return object == other + "";

                case mapTag:
                  var convert = mapToArray;

                case setTag:
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                  convert || (convert = setToArray);

                  if (object.size != other.size && !isPartial) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked) {
                    return stacked == other;
                  }
                  bitmask |= COMPARE_UNORDERED_FLAG;

                  // Recursively compare objects (susceptible to call stack limits).
                  stack.set(object, other);
                  var result = equalArrays(
                    convert(object),
                    convert(other),
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
                  stack["delete"](object);
                  return result;

                case symbolTag:
                  if (symbolValueOf) {
                    return (
                      symbolValueOf.call(object) == symbolValueOf.call(other)
                    );
                  }
              }
              return false;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

              if (objLength != othLength && !isPartial) {
                return false;
              }
              var index = objLength;
              while (index--) {
                var key = objProps[index];
                if (
                  !(isPartial ? key in other : hasOwnProperty.call(other, key))
                ) {
                  return false;
                }
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked && stack.get(other)) {
                return stacked == other;
              }
              var result = true;
              stack.set(object, other);
              stack.set(other, object);

              var skipCtor = isPartial;
              while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                  othValue = other[key];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
                }
                // Recursively compare objects (susceptible to call stack limits).
                if (
                  !(compared === undefined
                    ? objValue === othValue ||
                      equalFunc(objValue, othValue, bitmask, customizer, stack)
                    : compared)
                ) {
                  result = false;
                  break;
                }
                skipCtor || (skipCtor = key == "constructor");
              }
              if (result && !skipCtor) {
                var objCtor = object.constructor,
                  othCtor = other.constructor;

                // Non `Object` object instances with different constructors are not equal.
                if (
                  objCtor != othCtor &&
                  "constructor" in object &&
                  "constructor" in other &&
                  !(
                    typeof objCtor == "function" &&
                    objCtor instanceof objCtor &&
                    typeof othCtor == "function" &&
                    othCtor instanceof othCtor
                  )
                ) {
                  result = false;
                }
              }
              stack["delete"](object);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
              return setToString(overRest(func, undefined, flatten), func + "");
            }

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
              return baseGetAllKeys(object, keys, getSymbols);
            }

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
              return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap
              ? noop
              : function (func) {
                  return metaMap.get(func);
                };

            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
              var result = func.name + "",
                array = realNames[result],
                length = hasOwnProperty.call(realNames, result)
                  ? array.length
                  : 0;

              while (length--) {
                var data = array[length],
                  otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                  return data.name;
                }
              }
              return result;
            }

            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
              var object = hasOwnProperty.call(lodash, "placeholder")
                ? lodash
                : func;
              return object.placeholder;
            }

            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
              var result = lodash.iteratee || iteratee;
              result = result === iteratee ? baseIteratee : result;
              return arguments.length
                ? result(arguments[0], arguments[1])
                : result;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
              var data = map.__data__;
              return isKeyable(key)
                ? data[typeof key == "string" ? "string" : "hash"]
                : data.map;
            }

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
              var result = keys(object),
                length = result.length;

              while (length--) {
                var key = result[length],
                  value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
              }
              return result;
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
              var value = getValue(object, key);
              return baseIsNative(value) ? value : undefined;
            }

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
              var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

              try {
                value[symToStringTag] = undefined;
                var unmasked = true;
              } catch (e) {}

              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols
              ? stubArray
              : function (object) {
                  if (object == null) {
                    return [];
                  }
                  object = Object(object);
                  return arrayFilter(
                    nativeGetSymbols(object),
                    function (symbol) {
                      return propertyIsEnumerable.call(object, symbol);
                    }
                  );
                };

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols
              ? stubArray
              : function (object) {
                  var result = [];
                  while (object) {
                    arrayPush(result, getSymbols(object));
                    object = getPrototype(object);
                  }
                  return result;
                };

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if (
              (DataView &&
                getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
              (Map && getTag(new Map()) != mapTag) ||
              (Promise && getTag(Promise.resolve()) != promiseTag) ||
              (Set && getTag(new Set()) != setTag) ||
              (WeakMap && getTag(new WeakMap()) != weakMapTag)
            ) {
              getTag = function (value) {
                var result = baseGetTag(value),
                  Ctor = result == objectTag ? value.constructor : undefined,
                  ctorString = Ctor ? toSource(Ctor) : "";

                if (ctorString) {
                  switch (ctorString) {
                    case dataViewCtorString:
                      return dataViewTag;
                    case mapCtorString:
                      return mapTag;
                    case promiseCtorString:
                      return promiseTag;
                    case setCtorString:
                      return setTag;
                    case weakMapCtorString:
                      return weakMapTag;
                  }
                }
                return result;
              };
            }

            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
              var index = -1,
                length = transforms.length;

              while (++index < length) {
                var data = transforms[index],
                  size = data.size;

                switch (data.type) {
                  case "drop":
                    start += size;
                    break;
                  case "dropRight":
                    end -= size;
                    break;
                  case "take":
                    end = nativeMin(end, start + size);
                    break;
                  case "takeRight":
                    start = nativeMax(start, end - size);
                    break;
                }
              }
              return { start: start, end: end };
            }

            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
              var match = source.match(reWrapDetails);
              return match ? match[1].split(reSplitDetails) : [];
            }

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                result = false;

              while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                  break;
                }
                object = object[key];
              }
              if (result || ++index != length) {
                return result;
              }
              length = object == null ? 0 : object.length;
              return (
                !!length &&
                isLength(length) &&
                isIndex(key, length) &&
                (isArray(object) || isArguments(object))
              );
            }

            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
              var length = array.length,
                result = new array.constructor(length);

              // Add properties assigned by `RegExp#exec`.
              if (
                length &&
                typeof array[0] == "string" &&
                hasOwnProperty.call(array, "index")
              ) {
                result.index = array.index;
                result.input = array.input;
              }
              return result;
            }

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
              return typeof object.constructor == "function" &&
                !isPrototype(object)
                ? baseCreate(getPrototype(object))
                : {};
            }

            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
              var Ctor = object.constructor;
              switch (tag) {
                case arrayBufferTag:
                  return cloneArrayBuffer(object);

                case boolTag:
                case dateTag:
                  return new Ctor(+object);

                case dataViewTag:
                  return cloneDataView(object, isDeep);

                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                  return cloneTypedArray(object, isDeep);

                case mapTag:
                  return new Ctor();

                case numberTag:
                case stringTag:
                  return new Ctor(object);

                case regexpTag:
                  return cloneRegExp(object);

                case setTag:
                  return new Ctor();

                case symbolTag:
                  return cloneSymbol(object);
              }
            }

            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
              var length = details.length;
              if (!length) {
                return source;
              }
              var lastIndex = length - 1;
              details[lastIndex] =
                (length > 1 ? "& " : "") + details[lastIndex];
              details = details.join(length > 2 ? ", " : " ");
              return source.replace(
                reWrapComment,
                "{\n/* [wrapped with " + details + "] */\n"
              );
            }

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
              return (
                isArray(value) ||
                isArguments(value) ||
                !!(spreadableSymbol && value && value[spreadableSymbol])
              );
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;

              return (
                !!length &&
                (type == "number" ||
                  (type != "symbol" && reIsUint.test(value))) &&
                value > -1 &&
                value % 1 == 0 &&
                value < length
              );
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
              if (!isObject(object)) {
                return false;
              }
              var type = typeof index;
              if (
                type == "number"
                  ? isArrayLike(object) && isIndex(index, object.length)
                  : type == "string" && index in object
              ) {
                return eq(object[index], value);
              }
              return false;
            }

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
              if (isArray(value)) {
                return false;
              }
              var type = typeof value;
              if (
                type == "number" ||
                type == "symbol" ||
                type == "boolean" ||
                value == null ||
                isSymbol(value)
              ) {
                return true;
              }
              return (
                reIsPlainProp.test(value) ||
                !reIsDeepProp.test(value) ||
                (object != null && value in Object(object))
              );
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = typeof value;
              return type == "string" ||
                type == "number" ||
                type == "symbol" ||
                type == "boolean"
                ? value !== "__proto__"
                : value === null;
            }

            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
              var funcName = getFuncName(func),
                other = lodash[funcName];

              if (
                typeof other != "function" ||
                !(funcName in LazyWrapper.prototype)
              ) {
                return false;
              }
              if (func === other) {
                return true;
              }
              var data = getData(other);
              return !!data && func === data[0];
            }

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
              return !!maskSrcKey && maskSrcKey in func;
            }

            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
              var Ctor = value && value.constructor,
                proto =
                  (typeof Ctor == "function" && Ctor.prototype) || objectProto;

              return value === proto;
            }

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
              return value === value && !isObject(value);
            }

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
              return function (object) {
                if (object == null) {
                  return false;
                }
                return (
                  object[key] === srcValue &&
                  (srcValue !== undefined || key in Object(object))
                );
              };
            }

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
              var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });

              var cache = result.cache;
              return result;
            }

            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
              var bitmask = data[1],
                srcBitmask = source[1],
                newBitmask = bitmask | srcBitmask,
                isCommon =
                  newBitmask <
                  (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

              var isCombo =
                (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
                (srcBitmask == WRAP_ARY_FLAG &&
                  bitmask == WRAP_REARG_FLAG &&
                  data[7].length <= source[8]) ||
                (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                  source[7].length <= source[8] &&
                  bitmask == WRAP_CURRY_FLAG);

              // Exit early if metadata can't be merged.
              if (!(isCommon || isCombo)) {
                return data;
              }
              // Use source `thisArg` if available.
              if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |=
                  bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
              }
              // Compose partial arguments.
              var value = source[3];
              if (value) {
                var partials = data[3];
                data[3] = partials
                  ? composeArgs(partials, value, source[4])
                  : value;
                data[4] = partials
                  ? replaceHolders(data[3], PLACEHOLDER)
                  : source[4];
              }
              // Compose partial right arguments.
              value = source[5];
              if (value) {
                partials = data[5];
                data[5] = partials
                  ? composeArgsRight(partials, value, source[6])
                  : value;
                data[6] = partials
                  ? replaceHolders(data[5], PLACEHOLDER)
                  : source[6];
              }
              // Use source `argPos` if available.
              value = source[7];
              if (value) {
                data[7] = value;
              }
              // Use source `ary` if it's smaller.
              if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] =
                  data[8] == null ? source[8] : nativeMin(data[8], source[8]);
              }
              // Use source `arity` if one is not provided.
              if (data[9] == null) {
                data[9] = source[9];
              }
              // Use source `func` and merge bitmasks.
              data[0] = source[0];
              data[1] = newBitmask;

              return data;
            }

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
              var result = [];
              if (object != null) {
                for (var key in Object(object)) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
              return nativeObjectToString.call(value);
            }

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
              start = nativeMax(
                start === undefined ? func.length - 1 : start,
                0
              );
              return function () {
                var args = arguments,
                  index = -1,
                  length = nativeMax(args.length - start, 0),
                  array = Array(length);

                while (++index < length) {
                  array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                  otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
              };
            }

            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
              return path.length < 2
                ? object
                : baseGet(object, baseSlice(path, 0, -1));
            }

            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
              var arrLength = array.length,
                length = nativeMin(indexes.length, arrLength),
                oldArray = copyArray(array);

              while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength)
                  ? oldArray[index]
                  : undefined;
              }
              return array;
            }

            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
              if (key === "constructor" && typeof object[key] === "function") {
                return;
              }

              if (key == "__proto__") {
                return;
              }

              return object[key];
            }

            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);

            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout =
              ctxSetTimeout ||
              function (func, wait) {
                return root.setTimeout(func, wait);
              };

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
              var source = reference + "";
              return setToString(
                wrapper,
                insertWrapDetails(
                  source,
                  updateWrapDetails(getWrapDetails(source), bitmask)
                )
              );
            }

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
              var count = 0,
                lastCalled = 0;

              return function () {
                var stamp = nativeNow(),
                  remaining = HOT_SPAN - (stamp - lastCalled);

                lastCalled = stamp;
                if (remaining > 0) {
                  if (++count >= HOT_COUNT) {
                    return arguments[0];
                  }
                } else {
                  count = 0;
                }
                return func.apply(undefined, arguments);
              };
            }

            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
              var index = -1,
                length = array.length,
                lastIndex = length - 1;

              size = size === undefined ? length : size;
              while (++index < size) {
                var rand = baseRandom(index, lastIndex),
                  value = array[rand];

                array[rand] = array[index];
                array[index] = value;
              }
              array.length = size;
              return array;
            }

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
              var result = [];
              if (string.charCodeAt(0) === 46 /* . */) {
                result.push("");
              }
              string.replace(
                rePropName,
                function (match, number, quote, subString) {
                  result.push(
                    quote
                      ? subString.replace(reEscapeChar, "$1")
                      : number || match
                  );
                }
              );
              return result;
            });

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
              if (typeof value == "string" || isSymbol(value)) {
                return value;
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString.call(func);
                } catch (e) {}
                try {
                  return func + "";
                } catch (e) {}
              }
              return "";
            }

            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
              arrayEach(wrapFlags, function (pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                  details.push(value);
                }
              });
              return details.sort();
            }

            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
              if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
              }
              var result = new LodashWrapper(
                wrapper.__wrapped__,
                wrapper.__chain__
              );
              result.__actions__ = copyArray(wrapper.__actions__);
              result.__index__ = wrapper.__index__;
              result.__values__ = wrapper.__values__;
              return result;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
              if (
                guard ? isIterateeCall(array, size, guard) : size === undefined
              ) {
                size = 1;
              } else {
                size = nativeMax(toInteger(size), 0);
              }
              var length = array == null ? 0 : array.length;
              if (!length || size < 1) {
                return [];
              }
              var index = 0,
                resIndex = 0,
                result = Array(nativeCeil(length / size));

              while (index < length) {
                result[resIndex++] = baseSlice(array, index, (index += size));
              }
              return result;
            }

            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
              var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index];
                if (value) {
                  result[resIndex++] = value;
                }
              }
              return result;
            }

            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
              var length = arguments.length;
              if (!length) {
                return [];
              }
              var args = Array(length - 1),
                array = arguments[0],
                index = length;

              while (index--) {
                args[index - 1] = arguments[index];
              }
              return arrayPush(
                isArray(array) ? copyArray(array) : [array],
                baseFlatten(args, 1)
              );
            }

            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true)
                  )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function (array, values) {
              var iteratee = last(values);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true),
                    getIteratee(iteratee, 2)
                  )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function (array, values) {
              var comparator = last(values);
              if (isArrayLikeObject(comparator)) {
                comparator = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true),
                    undefined,
                    comparator
                  )
                : [];
            });

            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true, true)
                : [];
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true)
                : [];
            }

            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                start &&
                typeof start != "number" &&
                isIterateeCall(array, value, start)
              ) {
                start = 0;
                end = length;
              }
              return baseFill(array, value, start, end);
            }

            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index);
            }

            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length - 1;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  fromIndex < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return baseFindIndex(
                array,
                getIteratee(predicate, 3),
                index,
                true
              );
            }

            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, 1) : [];
            }

            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, INFINITY) : [];
            }

            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(array, depth);
            }

            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
              var index = -1,
                length = pairs == null ? 0 : pairs.length,
                result = {};

              while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
              }
              return result;
            }

            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
              return array && array.length ? array[0] : undefined;
            }

            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseIndexOf(array, value, index);
            }

            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 0, -1) : [];
            }

            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function (arrays) {
              var mapped = arrayMap(arrays, castArrayLikeObject);
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped)
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function (arrays) {
              var iteratee = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              if (iteratee === last(mapped)) {
                iteratee = undefined;
              } else {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, getIteratee(iteratee, 2))
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function (arrays) {
              var comparator = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              comparator =
                typeof comparator == "function" ? comparator : undefined;
              if (comparator) {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, undefined, comparator)
                : [];
            });

            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
              return array == null ? "" : nativeJoin.call(array, separator);
            }

            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
              var length = array == null ? 0 : array.length;
              return length ? array[length - 1] : undefined;
            }

            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  index < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return value === value
                ? strictLastIndexOf(array, value, index)
                : baseFindIndex(array, baseIsNaN, index, true);
            }

            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
              return array && array.length
                ? baseNth(array, toInteger(n))
                : undefined;
            }

            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);

            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
              return array && array.length && values && values.length
                ? basePullAll(array, values)
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, getIteratee(iteratee, 2))
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, undefined, comparator)
                : array;
            }

            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function (array, indexes) {
              var length = array == null ? 0 : array.length,
                result = baseAt(array, indexes);

              basePullAt(
                array,
                arrayMap(indexes, function (index) {
                  return isIndex(index, length) ? +index : index;
                }).sort(compareAscending)
              );

              return result;
            });

            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
              var result = [];
              if (!(array && array.length)) {
                return result;
              }
              var index = -1,
                indexes = [],
                length = array.length;

              predicate = getIteratee(predicate, 3);
              while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                  result.push(value);
                  indexes.push(index);
                }
              }
              basePullAt(array, indexes);
              return result;
            }

            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
              return array == null ? array : nativeReverse.call(array);
            }

            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                end &&
                typeof end != "number" &&
                isIterateeCall(array, start, end)
              ) {
                start = 0;
                end = length;
              } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
              }
              return baseSlice(array, start, end);
            }

            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
              return baseSortedIndex(array, value);
            }

            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
            }

            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
              return baseSortedIndex(array, value, true);
            }

            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(
                array,
                value,
                getIteratee(iteratee, 2),
                true
              );
            }

            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
              return array && array.length ? baseSortedUniq(array) : [];
            }

            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
              return array && array.length
                ? baseSortedUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 1, length) : [];
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
              if (!(array && array.length)) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), false, true)
                : [];
            }

            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3))
                : [];
            }

            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function (arrays) {
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });

            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                undefined,
                comparator
              );
            });

            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
              return array && array.length ? baseUniq(array) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
              return array && array.length
                ? baseUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return array && array.length
                ? baseUniq(array, undefined, comparator)
                : [];
            }

            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
              if (!(array && array.length)) {
                return [];
              }
              var length = 0;
              array = arrayFilter(array, function (group) {
                if (isArrayLikeObject(group)) {
                  length = nativeMax(group.length, length);
                  return true;
                }
              });
              return baseTimes(length, function (index) {
                return arrayMap(array, baseProperty(index));
              });
            }

            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
              if (!(array && array.length)) {
                return [];
              }
              var result = unzip(array);
              if (iteratee == null) {
                return result;
              }
              return arrayMap(result, function (group) {
                return apply(iteratee, undefined, group);
              });
            }

            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(array, values)
                : [];
            });

            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function (arrays) {
              return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });

            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                undefined,
                comparator
              );
            });

            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);

            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
              return baseZipObject(props || [], values || [], assignValue);
            }

            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
              return baseZipObject(props || [], values || [], baseSet);
            }

            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function (arrays) {
              var length = arrays.length,
                iteratee = length > 1 ? arrays[length - 1] : undefined;

              iteratee =
                typeof iteratee == "function"
                  ? (arrays.pop(), iteratee)
                  : undefined;
              return unzipWith(arrays, iteratee);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
              var result = lodash(value);
              result.__chain__ = true;
              return result;
            }

            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
              interceptor(value);
              return value;
            }

            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
              return interceptor(value);
            }

            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function (paths) {
              var length = paths.length,
                start = length ? paths[0] : 0,
                value = this.__wrapped__,
                interceptor = function (object) {
                  return baseAt(object, paths);
                };

              if (
                length > 1 ||
                this.__actions__.length ||
                !(value instanceof LazyWrapper) ||
                !isIndex(start)
              ) {
                return this.thru(interceptor);
              }
              value = value.slice(start, +start + (length ? 1 : 0));
              value.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined,
              });
              return new LodashWrapper(value, this.__chain__).thru(function (
                array
              ) {
                if (length && !array.length) {
                  array.push(undefined);
                }
                return array;
              });
            });

            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
              return chain(this);
            }

            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
              return new LodashWrapper(this.value(), this.__chain__);
            }

            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
              if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
              }
              var done = this.__index__ >= this.__values__.length,
                value = done ? undefined : this.__values__[this.__index__++];

              return { done: done, value: value };
            }

            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
              return this;
            }

            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
              var result,
                parent = this;

              while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                  previous.__wrapped__ = clone;
                } else {
                  result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
              }
              previous.__wrapped__ = value;
              return result;
            }

            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
              var value = this.__wrapped__;
              if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                  wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                  func: thru,
                  args: [reverse],
                  thisArg: undefined,
                });
                return new LodashWrapper(wrapped, this.__chain__);
              }
              return this.thru(reverse);
            }

            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
              return baseWrapperValue(this.__wrapped__, this.__actions__);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                ++result[key];
              } else {
                baseAssignValue(result, key, 1);
              }
            });

            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
              var func = isArray(collection) ? arrayEvery : baseEvery;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             */
            function filter(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);

            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);

            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), 1);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), INFINITY);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(map(collection, iteratee), depth);
            }

            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
              var func = isArray(collection) ? arrayEach : baseEach;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
              var func = isArray(collection) ? arrayEachRight : baseEachRight;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
              } else {
                baseAssignValue(result, key, [value]);
              }
            });

            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
              collection = isArrayLike(collection)
                ? collection
                : values(collection);
              fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

              var length = collection.length;
              if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
              }
              return isString(collection)
                ? fromIndex <= length &&
                    collection.indexOf(value, fromIndex) > -1
                : !!length && baseIndexOf(collection, value, fromIndex) > -1;
            }

            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function (collection, path, args) {
              var index = -1,
                isFunc = typeof path == "function",
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function (value) {
                result[++index] = isFunc
                  ? apply(path, value, args)
                  : baseInvoke(value, path, args);
              });
              return result;
            });

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function (result, value, key) {
              baseAssignValue(result, key, value);
            });

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
              var func = isArray(collection) ? arrayMap : baseMap;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
              if (collection == null) {
                return [];
              }
              if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
              }
              orders = guard ? undefined : orders;
              if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
              }
              return baseOrderBy(collection, iteratees, orders);
            }

            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(
              function (result, value, key) {
                result[key ? 0 : 1].push(value);
              },
              function () {
                return [[], []];
              }
            );

            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduce : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEach
              );
            }

            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduceRight : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEachRight
              );
            }

            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, negate(getIteratee(predicate, 3)));
            }

            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
              var func = isArray(collection) ? arraySample : baseSample;
              return func(collection);
            }

            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
              if (
                guard ? isIterateeCall(collection, n, guard) : n === undefined
              ) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              var func = isArray(collection) ? arraySampleSize : baseSampleSize;
              return func(collection, n);
            }

            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
              var func = isArray(collection) ? arrayShuffle : baseShuffle;
              return func(collection);
            }

            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
              if (collection == null) {
                return 0;
              }
              if (isArrayLike(collection)) {
                return isString(collection)
                  ? stringSize(collection)
                  : collection.length;
              }
              var tag = getTag(collection);
              if (tag == mapTag || tag == setTag) {
                return collection.size;
              }
              return baseKeys(collection).length;
            }

            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
              var func = isArray(collection) ? arraySome : baseSome;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
             */
            var sortBy = baseRest(function (collection, iteratees) {
              if (collection == null) {
                return [];
              }
              var length = iteratees.length;
              if (
                length > 1 &&
                isIterateeCall(collection, iteratees[0], iteratees[1])
              ) {
                iteratees = [];
              } else if (
                length > 2 &&
                isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
              ) {
                iteratees = [iteratees[0]];
              }
              return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now =
              ctxNow ||
              function () {
                return root.Date.now();
              };

            /*------------------------------------------------------------------------*/

            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n < 1) {
                  return func.apply(this, arguments);
                }
              };
            }

            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
              n = guard ? undefined : n;
              n = func && n == null ? func.length : n;
              return createWrap(
                func,
                WRAP_ARY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                n
              );
            }

            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
              var result;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n > 0) {
                  result = func.apply(this, arguments);
                }
                if (n <= 1) {
                  func = undefined;
                }
                return result;
              };
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function (func, thisArg, partials) {
              var bitmask = WRAP_BIND_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(func, bitmask, thisArg, partials, holders);
            });

            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function (object, key, partials) {
              var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(key, bitmask, object, partials, holders);
            });

            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curry.placeholder;
              return result;
            }

            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_RIGHT_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curryRight.placeholder;
              return result;
            }

            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
              var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing
                  ? nativeMax(toNumber(options.maxWait) || 0, wait)
                  : maxWait;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }

              function invokeFunc(time) {
                var args = lastArgs,
                  thisArg = lastThis;

                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
              }

              function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
              }

              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  timeWaiting = wait - timeSinceLastCall;

                return maxing
                  ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                  : timeWaiting;
              }

              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime;

                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return (
                  lastCallTime === undefined ||
                  timeSinceLastCall >= wait ||
                  timeSinceLastCall < 0 ||
                  (maxing && timeSinceLastInvoke >= maxWait)
                );
              }

              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
              }

              function trailingEdge(time) {
                timerId = undefined;

                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
              }

              function cancel() {
                if (timerId !== undefined) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
              }

              function flush() {
                return timerId === undefined ? result : trailingEdge(now());
              }

              function debounced() {
                var time = now(),
                  isInvoking = shouldInvoke(time);

                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;

                if (isInvoking) {
                  if (timerId === undefined) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    // Handle invocations in a tight loop.
                    clearTimeout(timerId);
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === undefined) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }

            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function (func, args) {
              return baseDelay(func, 1, args);
            });

            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function (func, wait, args) {
              return baseDelay(func, toNumber(wait) || 0, args);
            });

            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
              return createWrap(func, WRAP_FLIP_FLAG);
            }

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
              if (
                typeof func != "function" ||
                (resolver != null && typeof resolver != "function")
              ) {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var memoized = function () {
                var args = arguments,
                  key = resolver ? resolver.apply(this, args) : args[0],
                  cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };
              memoized.cache = new (memoize.Cache || MapCache)();
              return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
              if (typeof predicate != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return function () {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return !predicate.call(this);
                  case 1:
                    return !predicate.call(this, args[0]);
                  case 2:
                    return !predicate.call(this, args[0], args[1]);
                  case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
              };
            }

            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
              return before(2, func);
            }

            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function (func, transforms) {
              transforms =
                transforms.length == 1 && isArray(transforms[0])
                  ? arrayMap(transforms[0], baseUnary(getIteratee()))
                  : arrayMap(
                      baseFlatten(transforms, 1),
                      baseUnary(getIteratee())
                    );

              var funcsLength = transforms.length;
              return baseRest(function (args) {
                var index = -1,
                  length = nativeMin(args.length, funcsLength);

                while (++index < length) {
                  args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
              });
            });

            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partial));
              return createWrap(
                func,
                WRAP_PARTIAL_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partialRight));
              return createWrap(
                func,
                WRAP_PARTIAL_RIGHT_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function (func, indexes) {
              return createWrap(
                func,
                WRAP_REARG_FLAG,
                undefined,
                undefined,
                undefined,
                indexes
              );
            });

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start === undefined ? start : toInteger(start);
              return baseRest(func, start);
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start == null ? 0 : nativeMax(toInteger(start), 0);
              return baseRest(function (args) {
                var array = args[start],
                  otherArgs = castSlice(args, 0, start);

                if (array) {
                  arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
              });
            }

            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
              var leading = true,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                leading: leading,
                maxWait: wait,
                trailing: trailing,
              });
            }

            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
              return ary(func, 1);
            }

            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
              return partial(castFunction(wrapper), value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
              if (!arguments.length) {
                return [];
              }
              var value = arguments[0];
              return isArray(value) ? value : [value];
            }

            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
              return baseClone(value, CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(
                value,
                CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
                customizer
              );
            }

            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
              return (
                source == null || baseConformsTo(object, source, keys(source))
              );
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);

            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function (value, other) {
              return value >= other;
            });

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(
              (function () {
                return arguments;
              })()
            )
              ? baseIsArguments
              : function (value) {
                  return (
                    isObjectLike(value) &&
                    hasOwnProperty.call(value, "callee") &&
                    !propertyIsEnumerable.call(value, "callee")
                  );
                };

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer
              ? baseUnary(nodeIsArrayBuffer)
              : baseIsArrayBuffer;

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
              return (
                value != null && isLength(value.length) && !isFunction(value)
              );
            }

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
              return isObjectLike(value) && isArrayLike(value);
            }

            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
              return (
                value === true ||
                value === false ||
                (isObjectLike(value) && baseGetTag(value) == boolTag)
              );
            }

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
              return (
                isObjectLike(value) &&
                value.nodeType === 1 &&
                !isPlainObject(value)
              );
            }

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
              if (value == null) {
                return true;
              }
              if (
                isArrayLike(value) &&
                (isArray(value) ||
                  typeof value == "string" ||
                  typeof value.splice == "function" ||
                  isBuffer(value) ||
                  isTypedArray(value) ||
                  isArguments(value))
              ) {
                return !value.length;
              }
              var tag = getTag(value);
              if (tag == mapTag || tag == setTag) {
                return !value.size;
              }
              if (isPrototype(value)) {
                return !baseKeys(value).length;
              }
              for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                  return false;
                }
              }
              return true;
            }

            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
              return baseIsEqual(value, other);
            }

            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              var result = customizer ? customizer(value, other) : undefined;
              return result === undefined
                ? baseIsEqual(value, other, undefined, customizer)
                : !!result;
            }

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
              if (!isObjectLike(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return (
                tag == errorTag ||
                tag == domExcTag ||
                (typeof value.message == "string" &&
                  typeof value.name == "string" &&
                  !isPlainObject(value))
              );
            }

            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
              return typeof value == "number" && nativeIsFinite(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
              if (!isObject(value)) {
                return false;
              }
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.
              var tag = baseGetTag(value);
              return (
                tag == funcTag ||
                tag == genTag ||
                tag == asyncTag ||
                tag == proxyTag
              );
            }

            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
              return typeof value == "number" && value == toInteger(value);
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
              return (
                typeof value == "number" &&
                value > -1 &&
                value % 1 == 0 &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
              var type = typeof value;
              return value != null && (type == "object" || type == "function");
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && typeof value == "object";
            }

            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
              return (
                object === source ||
                baseIsMatch(object, source, getMatchData(source))
              );
            }

            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseIsMatch(
                object,
                source,
                getMatchData(source),
                customizer
              );
            }

            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
              // An `NaN` primitive is the only value that is not equal to itself.
              // Perform the `toStringTag` check first to avoid errors with some
              // ActiveX objects in IE.
              return isNumber(value) && value != +value;
            }

            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
              if (isMaskable(value)) {
                throw new Error(CORE_ERROR_TEXT);
              }
              return baseIsNative(value);
            }

            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
              return value === null;
            }

            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
              return value == null;
            }

            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
              return (
                typeof value == "number" ||
                (isObjectLike(value) && baseGetTag(value) == numberTag)
              );
            }

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
              if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
              }
              var proto = getPrototype(value);
              if (proto === null) {
                return true;
              }
              var Ctor =
                hasOwnProperty.call(proto, "constructor") && proto.constructor;
              return (
                typeof Ctor == "function" &&
                Ctor instanceof Ctor &&
                funcToString.call(Ctor) == objectCtorString
              );
            }

            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp
              ? baseUnary(nodeIsRegExp)
              : baseIsRegExp;

            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
              return (
                isInteger(value) &&
                value >= -MAX_SAFE_INTEGER &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
              return (
                typeof value == "string" ||
                (!isArray(value) &&
                  isObjectLike(value) &&
                  baseGetTag(value) == stringTag)
              );
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
              return (
                typeof value == "symbol" ||
                (isObjectLike(value) && baseGetTag(value) == symbolTag)
              );
            }

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray
              ? baseUnary(nodeIsTypedArray)
              : baseIsTypedArray;

            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
              return value === undefined;
            }

            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
              return isObjectLike(value) && getTag(value) == weakMapTag;
            }

            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
              return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }

            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);

            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function (value, other) {
              return value <= other;
            });

            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
              if (!value) {
                return [];
              }
              if (isArrayLike(value)) {
                return isString(value)
                  ? stringToArray(value)
                  : copyArray(value);
              }
              if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
              }
              var tag = getTag(value),
                func =
                  tag == mapTag
                    ? mapToArray
                    : tag == setTag
                    ? setToArray
                    : values;

              return func(value);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
              var result = toFinite(value),
                remainder = result % 1;

              return result === result
                ? remainder
                  ? result - remainder
                  : result
                : 0;
            }

            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
              return value
                ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH)
                : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other =
                  typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim, "");
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value)
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : reIsBadHex.test(value)
                ? NAN
                : +value;
            }

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
              return copyObject(value, keysIn(value));
            }

            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
              return value
                ? baseClamp(
                    toInteger(value),
                    -MAX_SAFE_INTEGER,
                    MAX_SAFE_INTEGER
                  )
                : value === 0
                ? value
                : 0;
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
              return value == null ? "" : baseToString(value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function (object, source) {
              if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
              }
              for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                  assignValue(object, key, source[key]);
                }
              }
            });

            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function (object, source) {
              copyObject(source, keysIn(source), object);
            });

            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keysIn(source), object, customizer);
            });

            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keys(source), object, customizer);
            });

            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);

            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
              var result = baseCreate(prototype);
              return properties == null
                ? result
                : baseAssign(result, properties);
            }

            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function (object, sources) {
              object = Object(object);

              var index = -1;
              var length = sources.length;
              var guard = length > 2 ? sources[2] : undefined;

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                length = 1;
              }

              while (++index < length) {
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;

                while (++propsIndex < propsLength) {
                  var key = props[propsIndex];
                  var value = object[key];

                  if (
                    value === undefined ||
                    (eq(value, objectProto[key]) &&
                      !hasOwnProperty.call(object, key))
                  ) {
                    object[key] = source[key];
                  }
                }
              }

              return object;
            });

            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function (args) {
              args.push(undefined, customDefaultsMerge);
              return apply(mergeWith, undefined, args);
            });

            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }

            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
              return baseFindKey(
                object,
                getIteratee(predicate, 3),
                baseForOwnRight
              );
            }

            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
              return object == null
                ? object
                : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
              return object == null
                ? object
                : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
              return object && baseForOwn(object, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
              return (
                object && baseForOwnRight(object, getIteratee(iteratee, 3))
              );
            }

            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
              return object == null ? [] : baseFunctions(object, keys(object));
            }

            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
              return object == null
                ? []
                : baseFunctions(object, keysIn(object));
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
              var result = object == null ? undefined : baseGet(object, path);
              return result === undefined ? defaultValue : result;
            }

            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
              return object != null && hasPath(object, path, baseHas);
            }

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
              return object != null && hasPath(object, path, baseHasIn);
            }

            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function (result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              result[value] = key;
            }, constant(identity));

            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function (result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
              } else {
                result[value] = [key];
              }
            }, getIteratee);

            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object)
                : baseKeys(object);
            }

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object, true)
                : baseKeysIn(object);
            }

            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
              });
              return result;
            }

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
              });
              return result;
            }

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
              baseMerge(object, source, srcIndex);
            });

            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              baseMerge(object, source, srcIndex, customizer);
            });

            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function (object, paths) {
              var result = {};
              if (object == null) {
                return result;
              }
              var isDeep = false;
              paths = arrayMap(paths, function (path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
              });
              copyObject(object, getAllKeysIn(object), result);
              if (isDeep) {
                result = baseClone(
                  result,
                  CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                  customOmitClone
                );
              }
              var length = paths.length;
              while (length--) {
                baseUnset(result, paths[length]);
              }
              return result;
            });

            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
              return pickBy(object, negate(getIteratee(predicate)));
            }

            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function (object, paths) {
              return object == null ? {} : basePick(object, paths);
            });

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
              if (object == null) {
                return {};
              }
              var props = arrayMap(getAllKeysIn(object), function (prop) {
                return [prop];
              });
              predicate = getIteratee(predicate);
              return basePickBy(object, props, function (value, path) {
                return predicate(value, path[0]);
              });
            }

            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
              path = castPath(path, object);

              var index = -1,
                length = path.length;

              // Ensure the loop is entered when path is empty.
              if (!length) {
                length = 1;
                object = undefined;
              }
              while (++index < length) {
                var value =
                  object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                  index = length;
                  value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
              }
              return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
              return object == null ? object : baseSet(object, path, value);
            }

            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseSet(object, path, value, customizer);
            }

            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);

            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
              var isArr = isArray(object),
                isArrLike = isArr || isBuffer(object) || isTypedArray(object);

              iteratee = getIteratee(iteratee, 4);
              if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                  accumulator = isArr ? new Ctor() : [];
                } else if (isObject(object)) {
                  accumulator = isFunction(Ctor)
                    ? baseCreate(getPrototype(object))
                    : {};
                } else {
                  accumulator = {};
                }
              }
              (isArrLike ? arrayEach : baseForOwn)(
                object,
                function (value, index, object) {
                  return iteratee(accumulator, value, index, object);
                }
              );
              return accumulator;
            }

            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
              return object == null ? true : baseUnset(object, path);
            }

            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater));
            }

            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater), customizer);
            }

            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
              return object == null ? [] : baseValues(object, keys(object));
            }

            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
              return object == null ? [] : baseValues(object, keysIn(object));
            }

            /*------------------------------------------------------------------------*/

            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
              if (upper === undefined) {
                upper = lower;
                lower = undefined;
              }
              if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
              }
              if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
              }
              return baseClamp(toNumber(number), lower, upper);
            }

            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
              start = toFinite(start);
              if (end === undefined) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              number = toNumber(number);
              return baseInRange(number, start, end);
            }

            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
              if (
                floating &&
                typeof floating != "boolean" &&
                isIterateeCall(lower, upper, floating)
              ) {
                upper = floating = undefined;
              }
              if (floating === undefined) {
                if (typeof upper == "boolean") {
                  floating = upper;
                  upper = undefined;
                } else if (typeof lower == "boolean") {
                  floating = lower;
                  lower = undefined;
                }
              }
              if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
              } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                  upper = lower;
                  lower = 0;
                } else {
                  upper = toFinite(upper);
                }
              }
              if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
              }
              if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(
                  lower +
                    rand *
                      (upper -
                        lower +
                        freeParseFloat("1e-" + ((rand + "").length - 1))),
                  upper
                );
              }
              return baseRandom(lower, upper);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function (result, word, index) {
              word = word.toLowerCase();
              return result + (index ? capitalize(word) : word);
            });

            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
              return upperFirst(toString(string).toLowerCase());
            }

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
              string = toString(string);
              return (
                string &&
                string.replace(reLatin, deburrLetter).replace(reComboMark, "")
              );
            }

            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
              string = toString(string);
              target = baseToString(target);

              var length = string.length;
              position =
                position === undefined
                  ? length
                  : baseClamp(toInteger(position), 0, length);

              var end = position;
              position -= target.length;
              return position >= 0 && string.slice(position, end) == target;
            }

            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
              string = toString(string);
              return string && reHasUnescapedHtml.test(string)
                ? string.replace(reUnescapedHtml, escapeHtmlChar)
                : string;
            }

            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
              string = toString(string);
              return string && reHasRegExpChar.test(string)
                ? string.replace(reRegExpChar, "\\$&")
                : string;
            }

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
              return result + (index ? "-" : "") + word.toLowerCase();
            });

            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + word.toLowerCase();
            });

            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst("toLowerCase");

            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              if (!length || strLength >= length) {
                return string;
              }
              var mid = (length - strLength) / 2;
              return (
                createPadding(nativeFloor(mid), chars) +
                string +
                createPadding(nativeCeil(mid), chars)
              );
            }

            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? string + createPadding(length - strLength, chars)
                : string;
            }

            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? createPadding(length - strLength, chars) + string
                : string;
            }

            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
              if (guard || radix == null) {
                radix = 0;
              } else if (radix) {
                radix = +radix;
              }
              return nativeParseInt(
                toString(string).replace(reTrimStart, ""),
                radix || 0
              );
            }

            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
              if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              return baseRepeat(toString(string), n);
            }

            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
              var args = arguments,
                string = toString(args[0]);

              return args.length < 3
                ? string
                : string.replace(args[1], args[2]);
            }

            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function (result, word, index) {
              return result + (index ? "_" : "") + word.toLowerCase();
            });

            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
              if (
                limit &&
                typeof limit != "number" &&
                isIterateeCall(string, separator, limit)
              ) {
                separator = limit = undefined;
              }
              limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
              if (!limit) {
                return [];
              }
              string = toString(string);
              if (
                string &&
                (typeof separator == "string" ||
                  (separator != null && !isRegExp(separator)))
              ) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                  return castSlice(stringToArray(string), 0, limit);
                }
              }
              return string.split(separator, limit);
            }

            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + upperFirst(word);
            });

            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
              string = toString(string);
              position =
                position == null
                  ? 0
                  : baseClamp(toInteger(position), 0, string.length);

              target = baseToString(target);
              return string.slice(position, position + target.length) == target;
            }

            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
              // Based on John Resig's `tmpl` implementation
              // (http://ejohn.org/blog/javascript-micro-templating/)
              // and Laura Doktorova's doT.js (https://github.com/olado/doT).
              var settings = lodash.templateSettings;

              if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
              }
              string = toString(string);
              options = assignInWith(
                {},
                options,
                settings,
                customDefaultsAssignIn
              );

              var imports = assignInWith(
                  {},
                  options.imports,
                  settings.imports,
                  customDefaultsAssignIn
                ),
                importsKeys = keys(imports),
                importsValues = baseValues(imports, importsKeys);

              var isEscaping,
                isEvaluating,
                index = 0,
                interpolate = options.interpolate || reNoMatch,
                source = "__p += '";

              // Compile the regexp to match each delimiter.
              var reDelimiters = RegExp(
                (options.escape || reNoMatch).source +
                  "|" +
                  interpolate.source +
                  "|" +
                  (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                    .source +
                  "|" +
                  (options.evaluate || reNoMatch).source +
                  "|$",
                "g"
              );

              // Use a sourceURL for easier debugging.
              // The sourceURL gets injected into the source that's eval-ed, so be careful
              // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
              // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
              var sourceURL =
                "//# sourceURL=" +
                (hasOwnProperty.call(options, "sourceURL")
                  ? (options.sourceURL + "").replace(/[\r\n]/g, " ")
                  : "lodash.templateSources[" + ++templateCounter + "]") +
                "\n";

              string.replace(
                reDelimiters,
                function (
                  match,
                  escapeValue,
                  interpolateValue,
                  esTemplateValue,
                  evaluateValue,
                  offset
                ) {
                  interpolateValue || (interpolateValue = esTemplateValue);

                  // Escape characters that can't be included in string literals.
                  source += string
                    .slice(index, offset)
                    .replace(reUnescapedString, escapeStringChar);

                  // Replace delimiters with snippets.
                  if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                  }
                  if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                  }
                  if (interpolateValue) {
                    source +=
                      "' +\n((__t = (" +
                      interpolateValue +
                      ")) == null ? '' : __t) +\n'";
                  }
                  index = offset + match.length;

                  // The JS engine embedded in Adobe products needs `match` returned in
                  // order to produce the correct `offset` value.
                  return match;
                }
              );

              source += "';\n";

              // If `variable` is not specified wrap a with-statement around the generated
              // code to add the data object to the top of the scope chain.
              // Like with sourceURL, we take care to not check the option's prototype,
              // as this configuration is a code injection vector.
              var variable =
                hasOwnProperty.call(options, "variable") && options.variable;
              if (!variable) {
                source = "with (obj) {\n" + source + "\n}\n";
              }
              // Cleanup code by stripping empty strings.
              source = (
                isEvaluating ? source.replace(reEmptyStringLeading, "") : source
              )
                .replace(reEmptyStringMiddle, "$1")
                .replace(reEmptyStringTrailing, "$1;");

              // Frame code as the function body.
              source =
                "function(" +
                (variable || "obj") +
                ") {\n" +
                (variable ? "" : "obj || (obj = {});\n") +
                "var __t, __p = ''" +
                (isEscaping ? ", __e = _.escape" : "") +
                (isEvaluating
                  ? ", __j = Array.prototype.join;\n" +
                    "function print() { __p += __j.call(arguments, '') }\n"
                  : ";\n") +
                source +
                "return __p\n}";

              var result = attempt(function () {
                return Function(
                  importsKeys,
                  sourceURL + "return " + source
                ).apply(undefined, importsValues);
              });

              // Provide the compiled function's source by its `toString` method or
              // the `source` property as a convenience for inlining compiled templates.
              result.source = source;
              if (isError(result)) {
                throw result;
              }
              return result;
            }

            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
              return toString(value).toLowerCase();
            }

            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
              return toString(value).toUpperCase();
            }

            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrim, "");
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                chrSymbols = stringToArray(chars),
                start = charsStartIndex(strSymbols, chrSymbols),
                end = charsEndIndex(strSymbols, chrSymbols) + 1;

              return castSlice(strSymbols, start, end).join("");
            }

            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrimEnd, "");
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

              return castSlice(strSymbols, 0, end).join("");
            }

            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrimStart, "");
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                start = charsStartIndex(strSymbols, stringToArray(chars));

              return castSlice(strSymbols, start).join("");
            }

            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
              var length = DEFAULT_TRUNC_LENGTH,
                omission = DEFAULT_TRUNC_OMISSION;

              if (isObject(options)) {
                var separator =
                  "separator" in options ? options.separator : separator;
                length =
                  "length" in options ? toInteger(options.length) : length;
                omission =
                  "omission" in options
                    ? baseToString(options.omission)
                    : omission;
              }
              string = toString(string);

              var strLength = string.length;
              if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
              }
              if (length >= strLength) {
                return string;
              }
              var end = length - stringSize(omission);
              if (end < 1) {
                return omission;
              }
              var result = strSymbols
                ? castSlice(strSymbols, 0, end).join("")
                : string.slice(0, end);

              if (separator === undefined) {
                return result + omission;
              }
              if (strSymbols) {
                end += result.length - end;
              }
              if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                  var match,
                    substring = result;

                  if (!separator.global) {
                    separator = RegExp(
                      separator.source,
                      toString(reFlags.exec(separator)) + "g"
                    );
                  }
                  separator.lastIndex = 0;
                  while ((match = separator.exec(substring))) {
                    var newEnd = match.index;
                  }
                  result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
              } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                  result = result.slice(0, index);
                }
              }
              return result + omission;
            }

            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
              string = toString(string);
              return string && reHasEscapedHtml.test(string)
                ? string.replace(reEscapedHtml, unescapeHtmlChar)
                : string;
            }

            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + word.toUpperCase();
            });

            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst("toUpperCase");

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
              string = toString(string);
              pattern = guard ? undefined : pattern;

              if (pattern === undefined) {
                return hasUnicodeWord(string)
                  ? unicodeWords(string)
                  : asciiWords(string);
              }
              return string.match(pattern) || [];
            }

            /*------------------------------------------------------------------------*/

            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function (func, args) {
              try {
                return apply(func, undefined, args);
              } catch (e) {
                return isError(e) ? e : new Error(e);
              }
            });

            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function (object, methodNames) {
              arrayEach(methodNames, function (key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
              });
              return object;
            });

            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
              var length = pairs == null ? 0 : pairs.length,
                toIteratee = getIteratee();

              pairs = !length
                ? []
                : arrayMap(pairs, function (pair) {
                    if (typeof pair[1] != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return [toIteratee(pair[0]), pair[1]];
                  });

              return baseRest(function (args) {
                var index = -1;
                while (++index < length) {
                  var pair = pairs[index];
                  if (apply(pair[0], this, args)) {
                    return apply(pair[1], this, args);
                  }
                }
              });
            }

            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
              return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
              return function () {
                return value;
              };
            }

            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
              return value == null || value !== value ? defaultValue : value;
            }

            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();

            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
              return value;
            }

            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
              return baseIteratee(
                typeof func == "function"
                  ? func
                  : baseClone(func, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
              return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             */
            function matchesProperty(path, srcValue) {
              return baseMatchesProperty(
                path,
                baseClone(srcValue, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function (path, args) {
              return function (object) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function (object, args) {
              return function (path) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
              var props = keys(source),
                methodNames = baseFunctions(source, props);

              if (
                options == null &&
                !(isObject(source) && (methodNames.length || !props.length))
              ) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
              }
              var chain =
                  !(isObject(options) && "chain" in options) || !!options.chain,
                isFunc = isFunction(object);

              arrayEach(methodNames, function (methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                  object.prototype[methodName] = function () {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                      var result = object(this.__wrapped__),
                        actions = (result.__actions__ = copyArray(
                          this.__actions__
                        ));

                      actions.push({
                        func: func,
                        args: arguments,
                        thisArg: object,
                      });
                      result.__chain__ = chainAll;
                      return result;
                    }
                    return func.apply(
                      object,
                      arrayPush([this.value()], arguments)
                    );
                  };
                }
              });

              return object;
            }

            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
              if (root._ === this) {
                root._ = oldDash;
              }
              return this;
            }

            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
              // No operation performed.
            }

            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
              n = toInteger(n);
              return baseRest(function (args) {
                return baseNth(args, n);
              });
            }

            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);

            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);

            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             */
            var overSome = createOver(arraySome);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
              return isKey(path)
                ? baseProperty(toKey(path))
                : basePropertyDeep(path);
            }

            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
              return function (path) {
                return object == null ? undefined : baseGet(object, path);
              };
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
              return [];
            }

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
              return false;
            }

            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
              return {};
            }

            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
              return "";
            }

            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
              return true;
            }

            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
              n = toInteger(n);
              if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
              }
              var index = MAX_ARRAY_LENGTH,
                length = nativeMin(n, MAX_ARRAY_LENGTH);

              iteratee = getIteratee(iteratee);
              n -= MAX_ARRAY_LENGTH;

              var result = baseTimes(length, iteratee);
              while (++index < n) {
                iteratee(index);
              }
              return result;
            }

            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
              if (isArray(value)) {
                return arrayMap(value, toKey);
              }
              return isSymbol(value)
                ? [value]
                : copyArray(stringToPath(toString(value)));
            }

            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
              var id = ++idCounter;
              return toString(prefix) + id;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function (augend, addend) {
              return augend + addend;
            }, 0);

            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound("ceil");

            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function (dividend, divisor) {
              return dividend / divisor;
            }, 1);

            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound("floor");

            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseGt)
                : undefined;
            }

            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                : undefined;
            }

            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
              return baseMean(array, identity);
            }

            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
              return baseMean(array, getIteratee(iteratee, 2));
            }

            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseLt)
                : undefined;
            }

            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                : undefined;
            }

            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function (
              multiplier,
              multiplicand
            ) {
              return multiplier * multiplicand;
            },
            1);

            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound("round");

            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function (minuend, subtrahend) {
              return minuend - subtrahend;
            }, 0);

            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
              return array && array.length ? baseSum(array, identity) : 0;
            }

            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
              return array && array.length
                ? baseSum(array, getIteratee(iteratee, 2))
                : 0;
            }

            /*------------------------------------------------------------------------*/

            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;

            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;

            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);

            /*------------------------------------------------------------------------*/

            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;

            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;

            mixin(
              lodash,
              (function () {
                var source = {};
                baseForOwn(lodash, function (func, methodName) {
                  if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                  }
                });
                return source;
              })(),
              { chain: false }
            );

            /*------------------------------------------------------------------------*/

            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;

            // Assign default placeholders.
            arrayEach(
              [
                "bind",
                "bindKey",
                "curry",
                "curryRight",
                "partial",
                "partialRight",
              ],
              function (methodName) {
                lodash[methodName].placeholder = lodash;
              }
            );

            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(["drop", "take"], function (methodName, index) {
              LazyWrapper.prototype[methodName] = function (n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                var result =
                  this.__filtered__ && !index
                    ? new LazyWrapper(this)
                    : this.clone();

                if (result.__filtered__) {
                  result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                  result.__views__.push({
                    size: nativeMin(n, MAX_ARRAY_LENGTH),
                    type: methodName + (result.__dir__ < 0 ? "Right" : ""),
                  });
                }
                return result;
              };

              LazyWrapper.prototype[methodName + "Right"] = function (n) {
                return this.reverse()[methodName](n).reverse();
              };
            });

            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(
              ["filter", "map", "takeWhile"],
              function (methodName, index) {
                var type = index + 1,
                  isFilter =
                    type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                LazyWrapper.prototype[methodName] = function (iteratee) {
                  var result = this.clone();
                  result.__iteratees__.push({
                    iteratee: getIteratee(iteratee, 3),
                    type: type,
                  });
                  result.__filtered__ = result.__filtered__ || isFilter;
                  return result;
                };
              }
            );

            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(["head", "last"], function (methodName, index) {
              var takeName = "take" + (index ? "Right" : "");

              LazyWrapper.prototype[methodName] = function () {
                return this[takeName](1).value()[0];
              };
            });

            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(["initial", "tail"], function (methodName, index) {
              var dropName = "drop" + (index ? "" : "Right");

              LazyWrapper.prototype[methodName] = function () {
                return this.__filtered__
                  ? new LazyWrapper(this)
                  : this[dropName](1);
              };
            });

            LazyWrapper.prototype.compact = function () {
              return this.filter(identity);
            };

            LazyWrapper.prototype.find = function (predicate) {
              return this.filter(predicate).head();
            };

            LazyWrapper.prototype.findLast = function (predicate) {
              return this.reverse().find(predicate);
            };

            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
              if (typeof path == "function") {
                return new LazyWrapper(this);
              }
              return this.map(function (value) {
                return baseInvoke(value, path, args);
              });
            });

            LazyWrapper.prototype.reject = function (predicate) {
              return this.filter(negate(getIteratee(predicate)));
            };

            LazyWrapper.prototype.slice = function (start, end) {
              start = toInteger(start);

              var result = this;
              if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
              }
              if (start < 0) {
                result = result.takeRight(-start);
              } else if (start) {
                result = result.drop(start);
              }
              if (end !== undefined) {
                end = toInteger(end);
                result =
                  end < 0 ? result.dropRight(-end) : result.take(end - start);
              }
              return result;
            };

            LazyWrapper.prototype.takeRightWhile = function (predicate) {
              return this.reverse().takeWhile(predicate).reverse();
            };

            LazyWrapper.prototype.toArray = function () {
              return this.take(MAX_ARRAY_LENGTH);
            };

            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                  methodName
                ),
                isTaker = /^(?:head|last)$/.test(methodName),
                lodashFunc =
                  lodash[
                    isTaker
                      ? "take" + (methodName == "last" ? "Right" : "")
                      : methodName
                  ],
                retUnwrapped = isTaker || /^find/.test(methodName);

              if (!lodashFunc) {
                return;
              }
              lodash.prototype[methodName] = function () {
                var value = this.__wrapped__,
                  args = isTaker ? [1] : arguments,
                  isLazy = value instanceof LazyWrapper,
                  iteratee = args[0],
                  useLazy = isLazy || isArray(value);

                var interceptor = function (value) {
                  var result = lodashFunc.apply(
                    lodash,
                    arrayPush([value], args)
                  );
                  return isTaker && chainAll ? result[0] : result;
                };

                if (
                  useLazy &&
                  checkIteratee &&
                  typeof iteratee == "function" &&
                  iteratee.length != 1
                ) {
                  // Avoid lazy use if the iteratee has a "length" value other than `1`.
                  isLazy = useLazy = false;
                }
                var chainAll = this.__chain__,
                  isHybrid = !!this.__actions__.length,
                  isUnwrapped = retUnwrapped && !chainAll,
                  onlyLazy = isLazy && !isHybrid;

                if (!retUnwrapped && useLazy) {
                  value = onlyLazy ? value : new LazyWrapper(this);
                  var result = func.apply(value, args);
                  result.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined,
                  });
                  return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                  return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped
                  ? isTaker
                    ? result.value()[0]
                    : result.value()
                  : result;
              };
            });

            // Add `Array` methods to `lodash.prototype`.
            arrayEach(
              ["pop", "push", "shift", "sort", "splice", "unshift"],
              function (methodName) {
                var func = arrayProto[methodName],
                  chainName = /^(?:push|sort|unshift)$/.test(methodName)
                    ? "tap"
                    : "thru",
                  retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                lodash.prototype[methodName] = function () {
                  var args = arguments;
                  if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                  }
                  return this[chainName](function (value) {
                    return func.apply(isArray(value) ? value : [], args);
                  });
                };
              }
            );

            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var lodashFunc = lodash[methodName];
              if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty.call(realNames, key)) {
                  realNames[key] = [];
                }
                realNames[key].push({
                  name: methodName,
                  func: lodashFunc,
                });
              }
            });

            realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
              {
                name: "wrapper",
                func: undefined,
              },
            ];

            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;

            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON =
              lodash.prototype.valueOf =
              lodash.prototype.value =
                wrapperValue;

            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;

            if (symIterator) {
              lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
          };

          /*--------------------------------------------------------------------------*/

          // Export lodash.
          var _ = runInContext();

          // Some AMD build optimizers, like r.js, check for condition patterns like:
          if (true) {
            // Expose Lodash on the global object to prevent errors when Lodash is
            // loaded by a script tag in the presence of an AMD loader.
            // See http://requirejs.org/docs/errors.html#mismatch for more details.
            // Use `_.noConflict` to remove Lodash from the global object.
            root._ = _;

            // Define as an anonymous module so, through path mapping, it can be
            // referenced as the "underscore" module.
            !((__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return _;
            }.call(exports, __webpack_require__, exports, module)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
          // Check for `exports` after `define` in case a build optimizer adds it.
          else {
          }
        }).call(this);

        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(9), __webpack_require__(30)(module));

      /***/
    },
    /* 8 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      function hasLeadingComments(token) {
        return token.leadingComments !== undefined;
      }

      function hasTrailingComments(token) {
        return token.trailingComments !== undefined;
      }

      function hasLeadingLineComments(token) {
        return (
          token.leadingComments !== undefined &&
          token.leadingComments.length !== 0 &&
          token.leadingComments[token.leadingComments.length - 1].tokenType
            .name === "LineComment"
        );
      }

      function hasTrailingLineComments(token) {
        return (
          token.trailingComments !== undefined &&
          token.trailingComments.length !== 0 &&
          token.trailingComments[token.trailingComments.length - 1].tokenType
            .name === "LineComment"
        );
      }

      function hasComments(token) {
        return hasLeadingComments(token) || hasTrailingComments(token);
      }

      module.exports = {
        hasComments,
        hasLeadingComments,
        hasLeadingLineComments,
        hasTrailingLineComments,
      };

      /***/
    },
    /* 9 */
    /***/ function (module, exports) {
      var g;

      // This works in non-strict mode
      g = (function () {
        return this;
      })();

      try {
        // This works if eval is allowed (see CSP)
        g = g || new Function("return this")();
      } catch (e) {
        // This works if the window reference is available
        if (typeof window === "object") g = window;
      }

      // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}

      module.exports = g;

      /***/
    },
    /* 10 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const JavaLexer = __webpack_require__(17);
      const JavaParser = __webpack_require__(20);
      const { attachComments, matchFormatterOffOnPairs } =
        __webpack_require__(13);

      const parser = new JavaParser();

      const BaseJavaCstVisitor = parser.getBaseCstVisitorConstructor();
      const BaseJavaCstVisitorWithDefaults =
        parser.getBaseCstVisitorConstructorWithDefaults();

      function parse(inputText, entryPoint = "compilationUnit") {
        // Lex
        const lexResult = JavaLexer.tokenize(inputText);

        if (lexResult.errors.length > 0) {
          const firstError = lexResult.errors[0];
          throw Error(
            "Sad sad panda, lexing errors detected in line: " +
              firstError.line +
              ", column: " +
              firstError.column +
              "!\n" +
              firstError.message
          );
        }

        parser.input = lexResult.tokens;
        parser.mostEnclosiveCstNodeByStartOffset = {};
        parser.mostEnclosiveCstNodeByEndOffset = {};

        parser.setOnOffCommentPairs(
          matchFormatterOffOnPairs(lexResult.groups.comments)
        );

        // Automatic CST created when parsing
        const cst = parser[entryPoint]();

        if (parser.errors.length > 0) {
          const error = parser.errors[0];
          throw Error(
            "Sad sad panda, parsing errors detected in line: " +
              error.token.startLine +
              ", column: " +
              error.token.startColumn +
              "!\n" +
              error.message +
              "!\n\t->" +
              error.context.ruleStack.join("\n\t->")
          );
        }

        attachComments(
          lexResult.tokens,
          lexResult.groups.comments,
          parser.mostEnclosiveCstNodeByStartOffset,
          parser.mostEnclosiveCstNodeByEndOffset
        );

        return cst;
      }

      module.exports = {
        parse,
        BaseJavaCstVisitor,
        BaseJavaCstVisitorWithDefaults,
      };

      /***/
    },
    /* 11 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { createToken: createTokenOrg, Lexer } = __webpack_require__(1);
      let chars;
      // A little mini DSL for easier lexer definition.
      const fragments = {};
      try {
        chars = __webpack_require__(18);
      } catch (e) {
        throw Error(
          "unicodesets.js file could not be found. Did you try to run the command: yarn run build ?"
        );
      }

      function inlineFragments(def) {
        let inlinedDef = def;
        Object.keys(fragments).forEach((prevFragmentName) => {
          const prevFragmentDef = fragments[prevFragmentName];
          const templateRegExp = new RegExp(`{{${prevFragmentName}}}`, "g");
          inlinedDef = inlinedDef.replace(templateRegExp, prevFragmentDef);
        });
        return inlinedDef;
      }

      function FRAGMENT(name, def) {
        fragments[name] = inlineFragments(def);
      }

      function MAKE_PATTERN(def, flags) {
        const inlinedDef = inlineFragments(def);
        return new RegExp(inlinedDef, flags);
      }

      // The order of fragments definitions is important
      FRAGMENT("Digits", "[0-9]([0-9_]*[0-9])?");
      FRAGMENT("ExponentPart", "[eE][+-]?{{Digits}}");
      FRAGMENT("HexDigit", "[0-9a-fA-F]");
      FRAGMENT("HexDigits", "{{HexDigit}}(({{HexDigit}}|'_')*{{HexDigit}})?");
      FRAGMENT("FloatTypeSuffix", "[fFdD]");
      FRAGMENT("LineTerminator", "(\\x0A|(\\x0D(\\x0A)?))");
      FRAGMENT("UnicodeMarker", "uu*");
      FRAGMENT("UnicodeEscape", "\\\\{{UnicodeMarker}}{{HexDigit}}{4}");
      FRAGMENT("RawInputCharacter", "\\\\{{UnicodeMarker}}[0-9a-fA-F]{4}");
      FRAGMENT(
        "UnicodeInputCharacter",
        "({{UnicodeEscape}}|{{RawInputCharacter}})"
      );
      FRAGMENT("OctalDigit", "[0-7]");
      FRAGMENT("ZeroToThree", "[0-3]");
      FRAGMENT(
        "OctalEscape",
        "\\\\({{OctalDigit}}|{{ZeroToThree}}?{{OctalDigit}}{2})"
      );
      FRAGMENT("EscapeSequence", "\\\\[btnfr\"'\\\\]|{{OctalEscape}}");
      // Not using InputCharacter terminology there because CR and LF are already captured in EscapeSequence
      FRAGMENT(
        "StringCharacter",
        "(?:(?:{{EscapeSequence}})|{{UnicodeInputCharacter}})"
      );

      function matchJavaIdentifier(text, startOffset) {
        let endOffset = startOffset;
        let charCode = text.codePointAt(endOffset);

        // We verifiy if the first character is from one of these categories
        // Corresponds to the isJavaIdentifierStart function from Java
        if (chars.firstIdentChar.has(charCode)) {
          endOffset++;
          // If we encounter a surrogate pair (something that is beyond 65535/FFFF)
          // We skip another offset because a surrogate pair is of length 2.
          if (charCode > 65535) {
            endOffset++;
          }
          charCode = text.codePointAt(endOffset);
        }

        // We verify if the remaining characters is from one of these categories
        // Corresponds to the isJavaIdentifierPart function from Java
        while (chars.restIdentChar.has(charCode)) {
          endOffset++;
          // See above.
          if (charCode > 65535) {
            endOffset++;
          }
          charCode = text.codePointAt(endOffset);
        }

        // No match, must return null to conform with the RegExp.prototype.exec signature
        if (endOffset === startOffset) {
          return null;
        }
        const matchedString = text.substring(startOffset, endOffset);
        // according to the RegExp.prototype.exec API the first item in the returned array must be the whole matched string.
        return [matchedString];
      }

      const Identifier = createTokenOrg({
        name: "Identifier",
        pattern: { exec: matchJavaIdentifier },
        line_breaks: false,
        start_chars_hint: Array.from(chars.firstIdentChar, (x) =>
          String.fromCharCode(x)
        ),
      });

      const allTokens = [];
      const tokenDictionary = {};

      function createToken(options) {
        // TODO create a test to check all the tokenbs have a label defined
        if (!options.label) {
          // simple token (e.g operator)
          if (typeof options.pattern === "string") {
            options.label = `'${options.pattern}'`;
          }
          // Complex token (e.g literal)
          else if (options.pattern instanceof RegExp) {
            options.label = `'${options.name}'`;
          }
        }

        const newTokenType = createTokenOrg(options);
        allTokens.push(newTokenType);
        tokenDictionary[options.name] = newTokenType;
        return newTokenType;
      }

      function createKeywordLikeToken(options) {
        // A keyword 'like' token uses the "longer_alt" config option
        // to resolve ambiguities, see: http://sap.github.io/chevrotain/docs/features/token_alternative_matches.html
        options.longer_alt = Identifier;
        return createToken(options);
      }

      // Token Categories
      // Used a Token Category to mark all restricted keywords.
      // This could be used in syntax highlights implementation.
      const RestrictedKeyword = createToken({
        name: "RestrictedKeyword",
        pattern: Lexer.NA,
      });

      // Used a Token Category to mark all keywords.
      // This could be used in syntax highlights implementation.
      const Keyword = createToken({
        name: "Keyword",
        pattern: Lexer.NA,
      });

      const AssignmentOperator = createToken({
        name: "AssignmentOperator",
        pattern: Lexer.NA,
      });

      const BinaryOperator = createToken({
        name: "BinaryOperator",
        pattern: Lexer.NA,
      });

      const UnaryPrefixOperator = createToken({
        name: "UnaryPrefixOperator",
        pattern: Lexer.NA,
      });
      const UnaryPrefixOperatorNotPlusMinus = createToken({
        name: "UnaryPrefixOperatorNotPlusMinus",
        pattern: Lexer.NA,
      });

      const UnarySuffixOperator = createToken({
        name: "UnarySuffixOperator",
        pattern: Lexer.NA,
      });

      // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.11
      const Separators = createToken({
        name: "Separators",
        pattern: Lexer.NA,
      });

      // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.6
      // Note [\\x09\\x20\\x0C] is equivalent to [\\t\\x20\\f] and that \\x20 represents
      // space character
      createToken({
        name: "WhiteSpace",
        pattern: MAKE_PATTERN("[\\x09\\x20\\x0C]|{{LineTerminator}}"),
        group: Lexer.SKIPPED,
      });
      createToken({
        name: "LineComment",
        pattern: /\/\/[^\n\r]*/,
        group: "comments",
      });
      createToken({
        name: "TraditionalComment",
        pattern: /\/\*([^*]|\*(?!\/))*\*\//,
        group: "comments",
      });
      createToken({
        name: "BinaryLiteral",
        pattern: /0[bB][01]([01_]*[01])?[lL]?/,
      });
      createToken({
        name: "FloatLiteral",
        pattern: MAKE_PATTERN(
          "{{Digits}}\\.({{Digits}})?({{ExponentPart}})?({{FloatTypeSuffix}})?|" +
            "\\.{{Digits}}({{ExponentPart}})?({{FloatTypeSuffix}})?|" +
            "{{Digits}}{{ExponentPart}}({{FloatTypeSuffix}})?|" +
            "{{Digits}}({{ExponentPart}})?{{FloatTypeSuffix}}"
        ),
      });
      createToken({
        name: "OctalLiteral",
        pattern: /0_*[0-7]([0-7_]*[0-7])?[lL]?/,
      });
      createToken({
        name: "HexFloatLiteral",
        pattern: MAKE_PATTERN(
          "0[xX]({{HexDigits}}\\.?|({{HexDigits}})?\\.{{HexDigits}})[pP][+-]?{{Digits}}[fFdD]?"
        ),
      });
      createToken({
        name: "HexLiteral",
        pattern: /0[xX][0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[lL]?/,
      });
      createToken({
        name: "DecimalLiteral",
        pattern: MAKE_PATTERN("(0|[1-9](_+{{Digits}}|({{Digits}})?))[lL]?"),
      });
      // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.10.4
      createToken({
        name: "CharLiteral",
        // Not using SingleCharacter Terminology because ' and \ are captured in EscapeSequence
        pattern: MAKE_PATTERN(
          "'(?:[^\\\\']|(?:(?:{{EscapeSequence}})|{{UnicodeInputCharacter}}))'"
        ),
      });
      createToken({
        name: "StringLiteral",
        pattern: MAKE_PATTERN('"(?:[^\\\\"]|{{StringCharacter}})*"'),
      });

      // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.9
      // TODO: how to handle the special rule (see spec above) for "requires" and "transitive"
      const restrictedKeywords = [
        "open",
        "module",
        "requires",
        "transitive",
        "exports",
        "opens",
        "to",
        "uses",
        "provides",
        "with",
      ];

      // By sorting the keywords in descending order we avoid ambiguities
      // of common prefixes.
      sortDescLength(restrictedKeywords).forEach((word) => {
        createKeywordLikeToken({
          name: word[0].toUpperCase() + word.substr(1),
          pattern: word,
          // restricted keywords can also be used as an Identifiers according to the spec.
          // TODO: inspect this causes no ambiguities
          categories: [Identifier, RestrictedKeyword],
        });
      });

      // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.9
      const keywords = [
        "abstract",
        "continue",
        "for",
        "new",
        "switch",
        "assert",
        "default",
        "if",
        "package",
        "synchronized",
        "boolean",
        "do",
        "goto",
        "private",
        "this",
        "break",
        "double",
        "implements",
        "protected",
        "throw",
        "byte",
        "else",
        "import",
        "public",
        "throws",
        "case",
        "enum",
        // "instanceof", // special handling for "instanceof" operator below
        "return",
        "transient",
        "catch",
        "extends",
        "int",
        "short",
        "try",
        "char",
        "final",
        "interface",
        "static",
        "void",
        "class",
        "finally",
        "long",
        "strictfp",
        "volatile",
        "const",
        "float",
        "native",
        "super",
        "while",
        ["_", "underscore"],
      ];

      sortDescLength(keywords).forEach((word) => {
        // For handling symbols keywords (underscore)
        const isPair = Array.isArray(word);
        const actualName = isPair ? word[1] : word;
        const actualPattern = isPair ? word[0] : word;

        const options = {
          name: actualName[0].toUpperCase() + actualName.substr(1),
          pattern: actualPattern,
          categories: Keyword,
        };

        if (isPair) {
          options.label = `'${actualName}'`;
        }
        createKeywordLikeToken(options);
      });

      createKeywordLikeToken({
        name: "Instanceof",
        pattern: "instanceof",
        categories: [Keyword, BinaryOperator],
      });

      createKeywordLikeToken({
        name: "Var",
        pattern: "var",
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-Keyword
        // "var is not a keyword, but rather an identifier with special meaning as the type of a local variable declaration"
        categories: Identifier,
      });
      createKeywordLikeToken({ name: "True", pattern: "true" });
      createKeywordLikeToken({ name: "False", pattern: "false" });
      createKeywordLikeToken({ name: "Null", pattern: "null" });

      // punctuation and symbols
      createToken({ name: "At", pattern: "@", categories: [Separators] });
      createToken({ name: "Arrow", pattern: "->" });
      createToken({
        name: "DotDotDot",
        pattern: "...",
        categories: [Separators],
      });
      createToken({
        name: "Dot",
        pattern: ".",
        categories: [Separators],
      });
      createToken({
        name: "Comma",
        pattern: ",",
        categories: [Separators],
      });
      createToken({
        name: "Semicolon",
        pattern: ";",
        categories: [Separators],
      });
      createToken({
        name: "ColonColon",
        pattern: "::",
        categories: [Separators],
      });
      createToken({ name: "Colon", pattern: ":" });
      createToken({ name: "QuestionMark", pattern: "?" });
      createToken({
        name: "LBrace",
        pattern: "(",
        categories: [Separators],
      });
      createToken({
        name: "RBrace",
        pattern: ")",
        categories: [Separators],
      });
      createToken({
        name: "LCurly",
        pattern: "{",
        categories: [Separators],
      });
      createToken({
        name: "RCurly",
        pattern: "}",
        categories: [Separators],
      });
      createToken({
        name: "LSquare",
        pattern: "[",
        categories: [Separators],
      });
      createToken({
        name: "RSquare",
        pattern: "]",
        categories: [Separators],
      });

      // prefix and suffix operators
      // must be defined before "-"
      createToken({
        name: "MinusMinus",
        pattern: "--",
        categories: [
          UnaryPrefixOperator,
          UnarySuffixOperator,
          UnaryPrefixOperatorNotPlusMinus,
        ],
      });
      // must be defined before "+"
      createToken({
        name: "PlusPlus",
        pattern: "++",
        categories: [
          UnaryPrefixOperator,
          UnarySuffixOperator,
          UnaryPrefixOperatorNotPlusMinus,
        ],
      });
      createToken({
        name: "Complement",
        pattern: "~",
        categories: [UnaryPrefixOperator, UnaryPrefixOperatorNotPlusMinus],
      });

      createToken({
        name: "LessEquals",
        pattern: "<=",
        categories: [BinaryOperator],
      });
      createToken({
        name: "LessLessEquals",
        pattern: "<<=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Less",
        pattern: "<",
        categories: [BinaryOperator],
      });
      createToken({
        name: "GreaterEquals",
        pattern: ">=",
        categories: [BinaryOperator],
      });
      createToken({
        name: "GreaterGreaterEquals",
        pattern: ">>=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "GreaterGreaterGreaterEquals",
        pattern: ">>>=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Greater",
        pattern: ">",
        categories: [BinaryOperator],
      });
      createToken({
        name: "EqualsEquals",
        pattern: "==",
        categories: [BinaryOperator],
      });
      createToken({
        name: "Equals",
        pattern: "=",
        categories: [BinaryOperator, AssignmentOperator],
      });
      createToken({
        name: "MinusEquals",
        pattern: "-=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Minus",
        pattern: "-",
        categories: [BinaryOperator, UnaryPrefixOperator],
      });
      createToken({
        name: "PlusEquals",
        pattern: "+=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Plus",
        pattern: "+",
        categories: [BinaryOperator, UnaryPrefixOperator],
      });
      createToken({
        name: "AndAnd",
        pattern: "&&",
        categories: [BinaryOperator],
      });
      createToken({
        name: "AndEquals",
        pattern: "&=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "And",
        pattern: "&",
        categories: [BinaryOperator],
      });
      createToken({
        name: "XorEquals",
        pattern: "^=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Xor",
        pattern: "^",
        categories: [BinaryOperator],
      });
      createToken({
        name: "NotEquals",
        pattern: "!=",
        categories: [BinaryOperator],
      });
      createToken({
        name: "OrOr",
        pattern: "||",
        categories: [BinaryOperator],
      });
      createToken({
        name: "OrEquals",
        pattern: "|=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Or",
        pattern: "|",
        categories: [BinaryOperator],
      });
      createToken({
        name: "MultiplyEquals",
        pattern: "*=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Star",
        pattern: "*",
        categories: [BinaryOperator],
      });
      createToken({
        name: "DivideEquals",
        pattern: "/=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Divide",
        pattern: "/",
        categories: [BinaryOperator],
      });
      createToken({
        name: "ModuloEquals",
        pattern: "%=",
        categories: [AssignmentOperator],
      });
      createToken({
        name: "Modulo",
        pattern: "%",
        categories: [BinaryOperator],
      });

      // must be defined after "!="
      createToken({
        name: "Not",
        pattern: "!",
        categories: [UnaryPrefixOperator, UnaryPrefixOperatorNotPlusMinus],
      });

      // Identifier must appear AFTER all the keywords to avoid ambiguities.
      // See: https://github.com/SAP/chevrotain/blob/master/examples/lexer/keywords_vs_identifiers/keywords_vs_identifiers.js
      allTokens.push(Identifier);
      tokenDictionary["Identifier"] = Identifier;

      function sortDescLength(arr) {
        // sort is not stable, but that will not affect the lexing results.
        return arr.sort((a, b) => {
          return b.length - a.length;
        });
      }
      module.exports = {
        allTokens,
        tokens: tokenDictionary,
      };

      /***/
    },
    /* 12 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */ (function (process) {
        /**
         * Should Parser / Lexer Validations be skipped?
         *
         * By default (productive mode) the validations would be skipped to reduce parser initialization time.
         * But during development flows (e.g testing/CI) they should be enabled to detect possible issues.
         *
         * @returns {boolean}
         */
        function getSkipValidations() {
          return (
            (process && // (not every runtime has a global `process` object
              process.env &&
              process.env["prettier-java-development-mode"] === "enabled") ===
            false
          );
        }

        module.exports = {
          getSkipValidations,
        };

        /* WEBPACK VAR INJECTION */
      }).call(this, __webpack_require__(19));

      /***/
    },
    /* 13 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const _ = __webpack_require__(7);

      /**
       * Search where is the position of the comment in the token array by
       * using dichotomic search.
       * @param {*} tokens ordered array of tokens
       * @param {*} comment comment token
       * @return the position of the token next to the comment
       */
      function findUpperBoundToken(tokens, comment) {
        let diff;
        let i;
        let current;

        let len = tokens.length;
        i = 0;

        while (len) {
          diff = len >>> 1;
          current = i + diff;
          if (tokens[current].startOffset > comment.startOffset) {
            len = diff;
          } else {
            i = current + 1;
            len -= diff + 1;
          }
        }
        return i;
      }

      function isPrettierIgnoreComment(comment) {
        return comment.image.match(
          /(\/\/(\s*)prettier-ignore(\s*))|(\/\*(\s*)prettier-ignore(\s*)\*\/)/gm
        );
      }

      function isFormatterOffOnComment(comment) {
        return comment.image.match(
          /(\/\/(\s*)@formatter:(off|on)(\s*))|(\/\*(\s*)@formatter:(off|on)(\s*)\*\/)/gm
        );
      }

      /**
       * Pre-processing of tokens in order to
       * complete the parser's mostEnclosiveCstNodeByStartOffset and mostEnclosiveCstNodeByEndOffset structures.
       *
       * @param {ITokens[]} tokens - array of tokens
       * @param {{[startOffset: number]: CSTNode}} mostEnclosiveCstNodeByStartOffset
       * @param {{[endOffset: number]: CSTNode}} mostEnclosiveCstNodeByEndOffset
       */
      function completeMostEnclosiveCSTNodeByOffset(
        tokens,
        mostEnclosiveCstNodeByStartOffset,
        mostEnclosiveCstNodeByEndOffset
      ) {
        tokens.forEach((token) => {
          if (
            mostEnclosiveCstNodeByStartOffset[token.startOffset] === undefined
          ) {
            mostEnclosiveCstNodeByStartOffset[token.startOffset] = token;
          }

          if (mostEnclosiveCstNodeByEndOffset[token.endOffset] === undefined) {
            mostEnclosiveCstNodeByEndOffset[token.endOffset] = token;
          }
        });
      }

      function extendRangeOffset(comments, tokens) {
        let position;
        comments.forEach((comment) => {
          position = findUpperBoundToken(tokens, comment);

          const extendedStartOffset =
            position - 1 < 0
              ? comment.startOffset
              : tokens[position - 1].endOffset;
          const extendedEndOffset =
            position == tokens.length
              ? comment.endOffset
              : tokens[position].startOffset;
          comment.extendedOffset = {
            startOffset: extendedStartOffset,
            endOffset: extendedEndOffset,
          };
        });
      }

      /**
       * Create two data structures we use to know at which offset a comment can be attached.
       * - commentsByExtendedStartOffset: map a comment by the endOffset of the previous token.
       * - commentsByExtendedEndOffset: map a comment by the startOffset of the next token
       *
       * @param {ITokens[]} tokens - array of tokens
       *
       * @return {{commentsByExtendedStartOffset: {[extendedStartOffset: number]: Comment[]}, commentsByExtendedEndOffset: {[extendedEndOffset: number]: Comment[]}}}
       */
      function mapCommentsByExtendedRange(comments) {
        const commentsByExtendedEndOffset = {};
        const commentsByExtendedStartOffset = {};

        comments.forEach((comment) => {
          const extendedStartOffset = comment.extendedOffset.startOffset;
          const extendedEndOffset = comment.extendedOffset.endOffset;

          if (commentsByExtendedEndOffset[extendedEndOffset] === undefined) {
            commentsByExtendedEndOffset[extendedEndOffset] = [comment];
          } else {
            commentsByExtendedEndOffset[extendedEndOffset].push(comment);
          }

          if (
            commentsByExtendedStartOffset[extendedStartOffset] === undefined
          ) {
            commentsByExtendedStartOffset[extendedStartOffset] = [comment];
          } else {
            commentsByExtendedStartOffset[extendedStartOffset].push(comment);
          }
        });

        return {
          commentsByExtendedEndOffset,
          commentsByExtendedStartOffset,
        };
      }

      /**
       * Determine if a comment should be attached as a trailing comment to a specific node.
       * A comment should be trailing if it is on the same line than the previous token and
       * not on the same line than the next token
       *
       * @param {*} comment
       * @param {CSTNode} node
       * @param {{[startOffset: number]: CSTNode}} mostEnclosiveCstNodeByStartOffset
       */
      function shouldAttachTrailingComments(
        comment,
        node,
        mostEnclosiveCstNodeByStartOffset
      ) {
        if (isPrettierIgnoreComment(comment)) {
          return false;
        }

        const nextNode =
          mostEnclosiveCstNodeByStartOffset[comment.extendedOffset.endOffset];

        // Last node of the file
        if (nextNode === undefined) {
          return true;
        }

        const nodeEndLine =
          node.location !== undefined ? node.location.endLine : node.endLine;

        if (comment.startLine !== nodeEndLine) {
          return false;
        }

        const nextNodeStartLine =
          nextNode.location !== undefined
            ? nextNode.location.startLine
            : nextNode.startLine;
        return comment.endLine !== nextNodeStartLine;
      }

      /**
       * Attach comments to the most enclosive CSTNode (node or token)
       *
       * @param {ITokens[]} tokens
       * @param {*} comments
       * @param {{[startOffset: number]: CSTNode}} mostEnclosiveCstNodeByStartOffset
       * @param {{[endOffset: number]: CSTNode}} mostEnclosiveCstNodeByEndOffset
       */
      function attachComments(
        tokens,
        comments,
        mostEnclosiveCstNodeByStartOffset,
        mostEnclosiveCstNodeByEndOffset
      ) {
        // Edge case: only comments in the file
        if (tokens.length === 0) {
          mostEnclosiveCstNodeByStartOffset[NaN].leadingComments = comments;
          return;
        }

        // Pre-processing phase to complete the data structures we need to attach
        // a comment to the right place
        completeMostEnclosiveCSTNodeByOffset(
          tokens,
          mostEnclosiveCstNodeByStartOffset,
          mostEnclosiveCstNodeByEndOffset
        );

        extendRangeOffset(comments, tokens);
        const { commentsByExtendedStartOffset, commentsByExtendedEndOffset } =
          mapCommentsByExtendedRange(comments);

        /*
    This set is here to ensure that we attach comments only once
    If a comment is attached to a node or token, we remove it from this set
  */
        const commentsToAttach = new Set(comments);

        // Attach comments as trailing comments if desirable
        Object.keys(mostEnclosiveCstNodeByEndOffset).forEach((endOffset) => {
          // We look if some comments is directly following this node/token
          if (commentsByExtendedStartOffset[endOffset] !== undefined) {
            const nodeTrailingComments = commentsByExtendedStartOffset[
              endOffset
            ].filter((comment) => {
              return (
                shouldAttachTrailingComments(
                  comment,
                  mostEnclosiveCstNodeByEndOffset[endOffset],
                  mostEnclosiveCstNodeByStartOffset
                ) && commentsToAttach.has(comment)
              );
            });

            if (nodeTrailingComments.length > 0) {
              mostEnclosiveCstNodeByEndOffset[endOffset].trailingComments =
                nodeTrailingComments;
            }

            nodeTrailingComments.forEach((comment) => {
              commentsToAttach.delete(comment);
            });
          }
        });

        // Attach rest of comments as leading comments
        Object.keys(mostEnclosiveCstNodeByStartOffset).forEach(
          (startOffset) => {
            // We look if some comments is directly preceding this node/token
            if (commentsByExtendedEndOffset[startOffset] !== undefined) {
              const nodeLeadingComments = commentsByExtendedEndOffset[
                startOffset
              ].filter((comment) => commentsToAttach.has(comment));

              if (nodeLeadingComments.length > 0) {
                mostEnclosiveCstNodeByStartOffset[startOffset].leadingComments =
                  nodeLeadingComments;
              }

              // prettier ignore support
              for (let i = 0; i < nodeLeadingComments.length; i++) {
                if (isPrettierIgnoreComment(nodeLeadingComments[i])) {
                  mostEnclosiveCstNodeByStartOffset[startOffset].ignore = true;
                  break;
                }
              }
            }
          }
        );
      }

      /**
       * Create pairs of formatter:off and formatter:on
       * @param comments
       * @returns pairs of formatter:off and formatter:on
       */
      function matchFormatterOffOnPairs(comments) {
        const onOffComments = comments.filter((comment) =>
          isFormatterOffOnComment(comment)
        );

        let isPreviousCommentOff = false;
        let isCurrentCommentOff = true;
        const pairs = [];
        let paired = {};
        onOffComments.forEach((comment) => {
          isCurrentCommentOff = comment.image.slice(-3) === "off";

          if (!isPreviousCommentOff) {
            if (isCurrentCommentOff) {
              paired.off = comment;
            }
          } else {
            if (!isCurrentCommentOff) {
              paired.on = comment;
              pairs.push(paired);
              paired = {};
            }
          }
          isPreviousCommentOff = isCurrentCommentOff;
        });

        if (onOffComments.length > 0 && isCurrentCommentOff) {
          paired.on = undefined;
          pairs.push(paired);
        }

        return pairs;
      }

      /**
       * Check if the node is between formatter:off and formatter:on and change his ignore state
       * @param node
       * @param commentPairs
       */
      function shouldNotFormat(node, commentPairs) {
        const matchingPair = _.findLast(
          commentPairs,
          (comment) => comment.off.endOffset < node.location.startOffset
        );
        if (
          matchingPair !== undefined &&
          (matchingPair.on === undefined ||
            matchingPair.on.startOffset > node.location.endOffset)
        ) {
          node.ignore = true;
        }
      }

      module.exports = {
        matchFormatterOffOnPairs,
        shouldNotFormat,
        attachComments,
      };

      /***/
    },
    /* 14 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const parse = __webpack_require__(16);
      const print = __webpack_require__(31);

      const languages = [
        {
          name: "Java",
          parsers: ["java"],
          group: "Java",
          tmScope: "text.html.vue", // FIXME
          aceMode: "html", // FIXME
          codemirrorMode: "clike",
          codemirrorMimeType: "text/x-java",
          extensions: [".java"],
          linguistLanguageId: 181,
          vscodeLanguageIds: ["java"],
        },
      ];

      function locStart(/* node */) {
        return -1;
      }

      function locEnd(/* node */) {
        return -1;
      }

      function hasPragma(/* text */) {
        return false;
      }

      const parsers = {
        java: {
          parse,
          astFormat: "java",
          locStart,
          locEnd,
          hasPragma,
        },
      };

      function canAttachComment(node) {
        return node.ast_type && node.ast_type !== "comment";
      }

      function printComment(commentPath) {
        const comment = commentPath.getValue();

        switch (comment.ast_type) {
          case "comment":
            return comment.value;
          default:
            throw new Error("Not a comment: " + JSON.stringify(comment));
        }
      }

      function clean(ast, newObj) {
        delete newObj.lineno;
        delete newObj.col_offset;
      }

      const printers = {
        java: {
          print,
          // hasPrettierIgnore,
          printComment,
          canAttachComment,
          massageAstNode: clean,
        },
      };

      module.exports = {
        languages,
        printers,
        parsers,
      };

      /***/
    },
    /* 15 */
    /***/ function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        "formatCode",
        function () {
          return formatCode;
        }
      );
      /* harmony import */ var prettier_standalone__WEBPACK_IMPORTED_MODULE_0__ =
        __webpack_require__(3);
      /* harmony import */ var prettier_standalone__WEBPACK_IMPORTED_MODULE_0___default =
        /*#__PURE__*/ __webpack_require__.n(
          prettier_standalone__WEBPACK_IMPORTED_MODULE_0__
        );
      /* harmony import */ var prettier_plugin_java__WEBPACK_IMPORTED_MODULE_1__ =
        __webpack_require__(14);
      /* harmony import */ var prettier_plugin_java__WEBPACK_IMPORTED_MODULE_1___default =
        /*#__PURE__*/ __webpack_require__.n(
          prettier_plugin_java__WEBPACK_IMPORTED_MODULE_1__
        );
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(
                target,
                key,
                Object.getOwnPropertyDescriptor(source, key)
              );
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      var formatCode = function formatCode(code, options) {
        var formattedCode = code;

        try {
          formattedCode =
            prettier_standalone__WEBPACK_IMPORTED_MODULE_0___default.a.format(
              code,
              _objectSpread(
                {
                  parser: "java",
                  plugins: [
                    prettier_plugin_java__WEBPACK_IMPORTED_MODULE_1___default.a,
                  ],
                },
                options
              )
            );
        } catch (e) {}

        return formattedCode;
      };

      /***/
    },
    /* 16 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const javaParser = __webpack_require__(10);

      function parse(text) {
        const cst = javaParser.parse(text);
        return cst;
      }

      module.exports = parse;

      /***/
    },
    /* 17 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const chevrotain = __webpack_require__(1);
      const { allTokens } = __webpack_require__(11);
      const { getSkipValidations } = __webpack_require__(12);

      const Lexer = chevrotain.Lexer;
      const JavaLexer = new Lexer(allTokens, {
        ensureOptimizations: true,
        skipValidations: getSkipValidations(),
      });

      module.exports = JavaLexer;

      /***/
    },
    /* 18 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";
      /*File generated with ../scripts/unicode.js using ../resources/Unicode/UnicodeData.txt.
       * As Java Identifiers may contains unicodes letters, this file defines two sets of unicode
       * characters, firstIdentChar used to help to determine if a character can be the first letter
       * of a JavaIdentifier and the other one (restIdentChar) to determine if it can be part of a
       * JavaIdentifier other than the first character.
       * Java uses the same file UnicodeData.txt as the unicode.js script to define the unicodes.
       * For more:
       *   https://github.com/jhipster/prettier-java/issues/116
       *   https://github.com/jhipster/prettier-java/pull/155
       */

      const addRanges = (set, rangesArr) => {
        for (let i = 0; i < rangesArr.length; i++) {
          const range = rangesArr[i];
          const start = range[0];
          const end = range[1];
          for (let codePoint = start; codePoint <= end; codePoint++) {
            set.add(codePoint);
          }
        }
      };
      const fic = new Set([
        181, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281,
        283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309,
        314, 316, 318, 320, 322, 324, 326, 331, 333, 335, 337, 339, 341, 343,
        345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371,
        373, 375, 378, 380, 387, 389, 392, 402, 405, 414, 417, 419, 421, 424,
        429, 432, 436, 438, 454, 457, 460, 462, 464, 466, 468, 470, 472, 474,
        479, 481, 483, 485, 487, 489, 491, 493, 499, 501, 505, 507, 509, 511,
        513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539,
        541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 572, 578, 583,
        585, 587, 589, 881, 883, 887, 912, 985, 987, 989, 991, 993, 995, 997,
        999, 1001, 1003, 1005, 1013, 1016, 1121, 1123, 1125, 1127, 1129, 1131,
        1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1163,
        1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187,
        1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211,
        1213, 1215, 1218, 1220, 1222, 1224, 1226, 1228, 1233, 1235, 1237, 1239,
        1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263,
        1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287,
        1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311,
        1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 7681, 7683, 7685, 7687,
        7689, 7691, 7693, 7695, 7697, 7699, 7701, 7703, 7705, 7707, 7709, 7711,
        7713, 7715, 7717, 7719, 7721, 7723, 7725, 7727, 7729, 7731, 7733, 7735,
        7737, 7739, 7741, 7743, 7745, 7747, 7749, 7751, 7753, 7755, 7757, 7759,
        7761, 7763, 7765, 7767, 7769, 7771, 7773, 7775, 7777, 7779, 7781, 7783,
        7785, 7787, 7789, 7791, 7793, 7795, 7797, 7799, 7801, 7803, 7805, 7807,
        7809, 7811, 7813, 7815, 7817, 7819, 7821, 7823, 7825, 7827, 7839, 7841,
        7843, 7845, 7847, 7849, 7851, 7853, 7855, 7857, 7859, 7861, 7863, 7865,
        7867, 7869, 7871, 7873, 7875, 7877, 7879, 7881, 7883, 7885, 7887, 7889,
        7891, 7893, 7895, 7897, 7899, 7901, 7903, 7905, 7907, 7909, 7911, 7913,
        7915, 7917, 7919, 7921, 7923, 7925, 7927, 7929, 7931, 7933, 8126, 8458,
        8467, 8495, 8500, 8505, 8526, 8580, 11361, 11368, 11370, 11372, 11377,
        11393, 11395, 11397, 11399, 11401, 11403, 11405, 11407, 11409, 11411,
        11413, 11415, 11417, 11419, 11421, 11423, 11425, 11427, 11429, 11431,
        11433, 11435, 11437, 11439, 11441, 11443, 11445, 11447, 11449, 11451,
        11453, 11455, 11457, 11459, 11461, 11463, 11465, 11467, 11469, 11471,
        11473, 11475, 11477, 11479, 11481, 11483, 11485, 11487, 11489, 11500,
        11502, 11507, 11559, 11565, 42561, 42563, 42565, 42567, 42569, 42571,
        42573, 42575, 42577, 42579, 42581, 42583, 42585, 42587, 42589, 42591,
        42593, 42595, 42597, 42599, 42601, 42603, 42605, 42625, 42627, 42629,
        42631, 42633, 42635, 42637, 42639, 42641, 42643, 42645, 42647, 42649,
        42651, 42787, 42789, 42791, 42793, 42795, 42797, 42803, 42805, 42807,
        42809, 42811, 42813, 42815, 42817, 42819, 42821, 42823, 42825, 42827,
        42829, 42831, 42833, 42835, 42837, 42839, 42841, 42843, 42845, 42847,
        42849, 42851, 42853, 42855, 42857, 42859, 42861, 42863, 42874, 42876,
        42879, 42881, 42883, 42885, 42887, 42892, 42894, 42897, 42903, 42905,
        42907, 42909, 42911, 42913, 42915, 42917, 42919, 42921, 42927, 42933,
        42935, 42937, 42939, 42941, 42943, 42947, 43002, 119995, 120779, 748,
        750, 884, 890, 1369, 1600, 2042, 2074, 2084, 2088, 2417, 3654, 3782,
        4348, 6103, 6211, 6823, 7544, 8305, 8319, 11631, 11823, 12293, 12347,
        40981, 42508, 42623, 42864, 42888, 43471, 43494, 43632, 43741, 65392,
        94179, 125259, 170, 186, 443, 660, 1749, 1791, 1808, 1969, 2365, 2384,
        2482, 2493, 2510, 2556, 2654, 2749, 2768, 2809, 2877, 2929, 2947, 2972,
        3024, 3133, 3200, 3261, 3294, 3389, 3406, 3517, 3716, 3749, 3773, 3840,
        4159, 4193, 4238, 4696, 4800, 6108, 6314, 7418, 12294, 12348, 12447,
        12543, 13312, 19968, 42606, 42895, 42999, 43259, 43642, 43697, 43712,
        43714, 43762, 44032, 64285, 64318, 67592, 67644, 68096, 69415, 69956,
        70006, 70106, 70108, 70280, 70461, 70480, 70751, 70855, 71236, 71352,
        71935, 72161, 72163, 72192, 72250, 72272, 72349, 72768, 73030, 73112,
        94032, 94208, 123214, 126500, 126503, 126521, 126523, 126530, 126535,
        126537, 126539, 126548, 126551, 126553, 126555, 126557, 126559, 126564,
        126590, 131072, 173824, 177984, 178208, 183984, 453, 456, 459, 498,
        8124, 8140, 8188, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276,
        278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304,
        306, 308, 310, 313, 315, 317, 319, 321, 323, 325, 327, 330, 332, 334,
        336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362,
        364, 366, 368, 370, 372, 374, 379, 381, 388, 418, 420, 425, 428, 437,
        444, 452, 455, 458, 461, 463, 465, 467, 469, 471, 473, 475, 478, 480,
        482, 484, 486, 488, 490, 492, 494, 497, 500, 506, 508, 510, 512, 514,
        516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542,
        544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 577, 584, 586, 588,
        590, 880, 882, 886, 895, 902, 908, 975, 984, 986, 988, 990, 992, 994,
        996, 998, 1000, 1002, 1004, 1006, 1012, 1015, 1120, 1122, 1124, 1126,
        1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150,
        1152, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182,
        1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206,
        1208, 1210, 1212, 1214, 1219, 1221, 1223, 1225, 1227, 1229, 1232, 1234,
        1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258,
        1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 1280, 1282,
        1284, 1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306,
        1308, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 4295, 4301,
        7680, 7682, 7684, 7686, 7688, 7690, 7692, 7694, 7696, 7698, 7700, 7702,
        7704, 7706, 7708, 7710, 7712, 7714, 7716, 7718, 7720, 7722, 7724, 7726,
        7728, 7730, 7732, 7734, 7736, 7738, 7740, 7742, 7744, 7746, 7748, 7750,
        7752, 7754, 7756, 7758, 7760, 7762, 7764, 7766, 7768, 7770, 7772, 7774,
        7776, 7778, 7780, 7782, 7784, 7786, 7788, 7790, 7792, 7794, 7796, 7798,
        7800, 7802, 7804, 7806, 7808, 7810, 7812, 7814, 7816, 7818, 7820, 7822,
        7824, 7826, 7828, 7838, 7840, 7842, 7844, 7846, 7848, 7850, 7852, 7854,
        7856, 7858, 7860, 7862, 7864, 7866, 7868, 7870, 7872, 7874, 7876, 7878,
        7880, 7882, 7884, 7886, 7888, 7890, 7892, 7894, 7896, 7898, 7900, 7902,
        7904, 7906, 7908, 7910, 7912, 7914, 7916, 7918, 7920, 7922, 7924, 7926,
        7928, 7930, 7932, 7934, 8025, 8027, 8029, 8031, 8450, 8455, 8469, 8484,
        8486, 8488, 8517, 8579, 11360, 11367, 11369, 11371, 11378, 11381, 11394,
        11396, 11398, 11400, 11402, 11404, 11406, 11408, 11410, 11412, 11414,
        11416, 11418, 11420, 11422, 11424, 11426, 11428, 11430, 11432, 11434,
        11436, 11438, 11440, 11442, 11444, 11446, 11448, 11450, 11452, 11454,
        11456, 11458, 11460, 11462, 11464, 11466, 11468, 11470, 11472, 11474,
        11476, 11478, 11480, 11482, 11484, 11486, 11488, 11490, 11499, 11501,
        11506, 42560, 42562, 42564, 42566, 42568, 42570, 42572, 42574, 42576,
        42578, 42580, 42582, 42584, 42586, 42588, 42590, 42592, 42594, 42596,
        42598, 42600, 42602, 42604, 42624, 42626, 42628, 42630, 42632, 42634,
        42636, 42638, 42640, 42642, 42644, 42646, 42648, 42650, 42786, 42788,
        42790, 42792, 42794, 42796, 42798, 42802, 42804, 42806, 42808, 42810,
        42812, 42814, 42816, 42818, 42820, 42822, 42824, 42826, 42828, 42830,
        42832, 42834, 42836, 42838, 42840, 42842, 42844, 42846, 42848, 42850,
        42852, 42854, 42856, 42858, 42860, 42862, 42873, 42875, 42880, 42882,
        42884, 42886, 42891, 42893, 42896, 42898, 42902, 42904, 42906, 42908,
        42910, 42912, 42914, 42916, 42918, 42920, 42934, 42936, 42938, 42940,
        42942, 42946, 119964, 119970, 120134, 120778, 12295, 66369, 66378, 36,
        1423, 1547, 2555, 2801, 3065, 3647, 6107, 43064, 65020, 65129, 65284,
        123647, 126128, 95, 8276, 65343,
      ]);
      const fic_a = [
        [97, 122],
        [223, 246],
        [248, 255],
        [311, 312],
        [328, 329],
        [382, 384],
        [396, 397],
        [409, 411],
        [426, 427],
        [441, 442],
        [445, 447],
        [476, 477],
        [495, 496],
        [563, 569],
        [575, 576],
        [591, 659],
        [661, 687],
        [891, 893],
        [940, 974],
        [976, 977],
        [981, 983],
        [1007, 1011],
        [1019, 1020],
        [1072, 1119],
        [1230, 1231],
        [1376, 1416],
        [4304, 4346],
        [4349, 4351],
        [5112, 5117],
        [7296, 7304],
        [7424, 7467],
        [7531, 7543],
        [7545, 7578],
        [7829, 7837],
        [7935, 7943],
        [7952, 7957],
        [7968, 7975],
        [7984, 7991],
        [8000, 8005],
        [8016, 8023],
        [8032, 8039],
        [8048, 8061],
        [8064, 8071],
        [8080, 8087],
        [8096, 8103],
        [8112, 8116],
        [8118, 8119],
        [8130, 8132],
        [8134, 8135],
        [8144, 8147],
        [8150, 8151],
        [8160, 8167],
        [8178, 8180],
        [8182, 8183],
        [8462, 8463],
        [8508, 8509],
        [8518, 8521],
        [11312, 11358],
        [11365, 11366],
        [11379, 11380],
        [11382, 11387],
        [11491, 11492],
        [11520, 11557],
        [42799, 42801],
        [42865, 42872],
        [42899, 42901],
        [43824, 43866],
        [43872, 43879],
        [43888, 43967],
        [64256, 64262],
        [64275, 64279],
        [65345, 65370],
        [66600, 66639],
        [66776, 66811],
        [68800, 68850],
        [71872, 71903],
        [93792, 93823],
        [119834, 119859],
        [119886, 119892],
        [119894, 119911],
        [119938, 119963],
        [119990, 119993],
        [119997, 120003],
        [120005, 120015],
        [120042, 120067],
        [120094, 120119],
        [120146, 120171],
        [120198, 120223],
        [120250, 120275],
        [120302, 120327],
        [120354, 120379],
        [120406, 120431],
        [120458, 120485],
        [120514, 120538],
        [120540, 120545],
        [120572, 120596],
        [120598, 120603],
        [120630, 120654],
        [120656, 120661],
        [120688, 120712],
        [120714, 120719],
        [120746, 120770],
        [120772, 120777],
        [125218, 125251],
        [688, 705],
        [710, 721],
        [736, 740],
        [1765, 1766],
        [2036, 2037],
        [7288, 7293],
        [7468, 7530],
        [7579, 7615],
        [8336, 8348],
        [11388, 11389],
        [12337, 12341],
        [12445, 12446],
        [12540, 12542],
        [42232, 42237],
        [42652, 42653],
        [42775, 42783],
        [43000, 43001],
        [43763, 43764],
        [43868, 43871],
        [65438, 65439],
        [92992, 92995],
        [94099, 94111],
        [94176, 94177],
        [123191, 123197],
        [13313, 19893],
        [19969, 40943],
        [44033, 55203],
        [94209, 100343],
        [131073, 173782],
        [173825, 177972],
        [177985, 178205],
        [178209, 183969],
        [183985, 191456],
        [448, 451],
        [1488, 1514],
        [1519, 1522],
        [1568, 1599],
        [1601, 1610],
        [1646, 1647],
        [1649, 1747],
        [1774, 1775],
        [1786, 1788],
        [1810, 1839],
        [1869, 1957],
        [1994, 2026],
        [2048, 2069],
        [2112, 2136],
        [2144, 2154],
        [2208, 2228],
        [2230, 2237],
        [2308, 2361],
        [2392, 2401],
        [2418, 2432],
        [2437, 2444],
        [2447, 2448],
        [2451, 2472],
        [2474, 2480],
        [2486, 2489],
        [2524, 2525],
        [2527, 2529],
        [2544, 2545],
        [2565, 2570],
        [2575, 2576],
        [2579, 2600],
        [2602, 2608],
        [2610, 2611],
        [2613, 2614],
        [2616, 2617],
        [2649, 2652],
        [2674, 2676],
        [2693, 2701],
        [2703, 2705],
        [2707, 2728],
        [2730, 2736],
        [2738, 2739],
        [2741, 2745],
        [2784, 2785],
        [2821, 2828],
        [2831, 2832],
        [2835, 2856],
        [2858, 2864],
        [2866, 2867],
        [2869, 2873],
        [2908, 2909],
        [2911, 2913],
        [2949, 2954],
        [2958, 2960],
        [2962, 2965],
        [2969, 2970],
        [2974, 2975],
        [2979, 2980],
        [2984, 2986],
        [2990, 3001],
        [3077, 3084],
        [3086, 3088],
        [3090, 3112],
        [3114, 3129],
        [3160, 3162],
        [3168, 3169],
        [3205, 3212],
        [3214, 3216],
        [3218, 3240],
        [3242, 3251],
        [3253, 3257],
        [3296, 3297],
        [3313, 3314],
        [3333, 3340],
        [3342, 3344],
        [3346, 3386],
        [3412, 3414],
        [3423, 3425],
        [3450, 3455],
        [3461, 3478],
        [3482, 3505],
        [3507, 3515],
        [3520, 3526],
        [3585, 3632],
        [3634, 3635],
        [3648, 3653],
        [3713, 3714],
        [3718, 3722],
        [3724, 3747],
        [3751, 3760],
        [3762, 3763],
        [3776, 3780],
        [3804, 3807],
        [3904, 3911],
        [3913, 3948],
        [3976, 3980],
        [4096, 4138],
        [4176, 4181],
        [4186, 4189],
        [4197, 4198],
        [4206, 4208],
        [4213, 4225],
        [4352, 4680],
        [4682, 4685],
        [4688, 4694],
        [4698, 4701],
        [4704, 4744],
        [4746, 4749],
        [4752, 4784],
        [4786, 4789],
        [4792, 4798],
        [4802, 4805],
        [4808, 4822],
        [4824, 4880],
        [4882, 4885],
        [4888, 4954],
        [4992, 5007],
        [5121, 5740],
        [5743, 5759],
        [5761, 5786],
        [5792, 5866],
        [5873, 5880],
        [5888, 5900],
        [5902, 5905],
        [5920, 5937],
        [5952, 5969],
        [5984, 5996],
        [5998, 6000],
        [6016, 6067],
        [6176, 6210],
        [6212, 6264],
        [6272, 6276],
        [6279, 6312],
        [6320, 6389],
        [6400, 6430],
        [6480, 6509],
        [6512, 6516],
        [6528, 6571],
        [6576, 6601],
        [6656, 6678],
        [6688, 6740],
        [6917, 6963],
        [6981, 6987],
        [7043, 7072],
        [7086, 7087],
        [7098, 7141],
        [7168, 7203],
        [7245, 7247],
        [7258, 7287],
        [7401, 7404],
        [7406, 7411],
        [7413, 7414],
        [8501, 8504],
        [11568, 11623],
        [11648, 11670],
        [11680, 11686],
        [11688, 11694],
        [11696, 11702],
        [11704, 11710],
        [11712, 11718],
        [11720, 11726],
        [11728, 11734],
        [11736, 11742],
        [12353, 12438],
        [12449, 12538],
        [12549, 12591],
        [12593, 12686],
        [12704, 12730],
        [12784, 12799],
        [40960, 40980],
        [40982, 42124],
        [42192, 42231],
        [42240, 42507],
        [42512, 42527],
        [42538, 42539],
        [42656, 42725],
        [43003, 43009],
        [43011, 43013],
        [43015, 43018],
        [43020, 43042],
        [43072, 43123],
        [43138, 43187],
        [43250, 43255],
        [43261, 43262],
        [43274, 43301],
        [43312, 43334],
        [43360, 43388],
        [43396, 43442],
        [43488, 43492],
        [43495, 43503],
        [43514, 43518],
        [43520, 43560],
        [43584, 43586],
        [43588, 43595],
        [43616, 43631],
        [43633, 43638],
        [43646, 43695],
        [43701, 43702],
        [43705, 43709],
        [43739, 43740],
        [43744, 43754],
        [43777, 43782],
        [43785, 43790],
        [43793, 43798],
        [43808, 43814],
        [43816, 43822],
        [43968, 44002],
        [55216, 55238],
        [55243, 55291],
        [63744, 64109],
        [64112, 64217],
        [64287, 64296],
        [64298, 64310],
        [64312, 64316],
        [64320, 64321],
        [64323, 64324],
        [64326, 64433],
        [64467, 64829],
        [64848, 64911],
        [64914, 64967],
        [65008, 65019],
        [65136, 65140],
        [65142, 65276],
        [65382, 65391],
        [65393, 65437],
        [65440, 65470],
        [65474, 65479],
        [65482, 65487],
        [65490, 65495],
        [65498, 65500],
        [65536, 65547],
        [65549, 65574],
        [65576, 65594],
        [65596, 65597],
        [65599, 65613],
        [65616, 65629],
        [65664, 65786],
        [66176, 66204],
        [66208, 66256],
        [66304, 66335],
        [66349, 66368],
        [66370, 66377],
        [66384, 66421],
        [66432, 66461],
        [66464, 66499],
        [66504, 66511],
        [66640, 66717],
        [66816, 66855],
        [66864, 66915],
        [67072, 67382],
        [67392, 67413],
        [67424, 67431],
        [67584, 67589],
        [67594, 67637],
        [67639, 67640],
        [67647, 67669],
        [67680, 67702],
        [67712, 67742],
        [67808, 67826],
        [67828, 67829],
        [67840, 67861],
        [67872, 67897],
        [67968, 68023],
        [68030, 68031],
        [68112, 68115],
        [68117, 68119],
        [68121, 68149],
        [68192, 68220],
        [68224, 68252],
        [68288, 68295],
        [68297, 68324],
        [68352, 68405],
        [68416, 68437],
        [68448, 68466],
        [68480, 68497],
        [68608, 68680],
        [68864, 68899],
        [69376, 69404],
        [69424, 69445],
        [69600, 69622],
        [69635, 69687],
        [69763, 69807],
        [69840, 69864],
        [69891, 69926],
        [69968, 70002],
        [70019, 70066],
        [70081, 70084],
        [70144, 70161],
        [70163, 70187],
        [70272, 70278],
        [70282, 70285],
        [70287, 70301],
        [70303, 70312],
        [70320, 70366],
        [70405, 70412],
        [70415, 70416],
        [70419, 70440],
        [70442, 70448],
        [70450, 70451],
        [70453, 70457],
        [70493, 70497],
        [70656, 70708],
        [70727, 70730],
        [70784, 70831],
        [70852, 70853],
        [71040, 71086],
        [71128, 71131],
        [71168, 71215],
        [71296, 71338],
        [71424, 71450],
        [71680, 71723],
        [72096, 72103],
        [72106, 72144],
        [72203, 72242],
        [72284, 72329],
        [72384, 72440],
        [72704, 72712],
        [72714, 72750],
        [72818, 72847],
        [72960, 72966],
        [72968, 72969],
        [72971, 73008],
        [73056, 73061],
        [73063, 73064],
        [73066, 73097],
        [73440, 73458],
        [73728, 74649],
        [74880, 75075],
        [77824, 78894],
        [82944, 83526],
        [92160, 92728],
        [92736, 92766],
        [92880, 92909],
        [92928, 92975],
        [93027, 93047],
        [93053, 93071],
        [93952, 94026],
        [100352, 101106],
        [110592, 110878],
        [110928, 110930],
        [110948, 110951],
        [110960, 111355],
        [113664, 113770],
        [113776, 113788],
        [113792, 113800],
        [113808, 113817],
        [123136, 123180],
        [123584, 123627],
        [124928, 125124],
        [126464, 126467],
        [126469, 126495],
        [126497, 126498],
        [126505, 126514],
        [126516, 126519],
        [126541, 126543],
        [126545, 126546],
        [126561, 126562],
        [126567, 126570],
        [126572, 126578],
        [126580, 126583],
        [126585, 126588],
        [126592, 126601],
        [126603, 126619],
        [126625, 126627],
        [126629, 126633],
        [126635, 126651],
        [194560, 195101],
        [8072, 8079],
        [8088, 8095],
        [8104, 8111],
        [65, 90],
        [192, 214],
        [216, 222],
        [376, 377],
        [385, 386],
        [390, 391],
        [393, 395],
        [398, 401],
        [403, 404],
        [406, 408],
        [412, 413],
        [415, 416],
        [422, 423],
        [430, 431],
        [433, 435],
        [439, 440],
        [502, 504],
        [570, 571],
        [573, 574],
        [579, 582],
        [904, 906],
        [910, 911],
        [913, 929],
        [931, 939],
        [978, 980],
        [1017, 1018],
        [1021, 1071],
        [1216, 1217],
        [1329, 1366],
        [4256, 4293],
        [5024, 5109],
        [7312, 7354],
        [7357, 7359],
        [7944, 7951],
        [7960, 7965],
        [7976, 7983],
        [7992, 7999],
        [8008, 8013],
        [8040, 8047],
        [8120, 8123],
        [8136, 8139],
        [8152, 8155],
        [8168, 8172],
        [8184, 8187],
        [8459, 8461],
        [8464, 8466],
        [8473, 8477],
        [8490, 8493],
        [8496, 8499],
        [8510, 8511],
        [11264, 11310],
        [11362, 11364],
        [11373, 11376],
        [11390, 11392],
        [42877, 42878],
        [42922, 42926],
        [42928, 42932],
        [42948, 42950],
        [65313, 65338],
        [66560, 66599],
        [66736, 66771],
        [68736, 68786],
        [71840, 71871],
        [93760, 93791],
        [119808, 119833],
        [119860, 119885],
        [119912, 119937],
        [119966, 119967],
        [119973, 119974],
        [119977, 119980],
        [119982, 119989],
        [120016, 120041],
        [120068, 120069],
        [120071, 120074],
        [120077, 120084],
        [120086, 120092],
        [120120, 120121],
        [120123, 120126],
        [120128, 120132],
        [120138, 120144],
        [120172, 120197],
        [120224, 120249],
        [120276, 120301],
        [120328, 120353],
        [120380, 120405],
        [120432, 120457],
        [120488, 120512],
        [120546, 120570],
        [120604, 120628],
        [120662, 120686],
        [120720, 120744],
        [125184, 125217],
        [5870, 5872],
        [8544, 8578],
        [8581, 8584],
        [12321, 12329],
        [12344, 12346],
        [42726, 42735],
        [65856, 65908],
        [66513, 66517],
        [74752, 74862],
        [162, 165],
        [2046, 2047],
        [2546, 2547],
        [8352, 8383],
        [65504, 65505],
        [65509, 65510],
        [73693, 73696],
        [8255, 8256],
        [65075, 65076],
        [65101, 65103],
      ];
      addRanges(fic, fic_a);
      const ricd = new Set([
        1471, 1479, 1648, 1809, 2045, 2362, 2364, 2381, 2433, 2492, 2509, 2558,
        2620, 2641, 2677, 2748, 2765, 2817, 2876, 2879, 2893, 2902, 2946, 3008,
        3021, 3072, 3076, 3201, 3260, 3263, 3270, 3405, 3530, 3542, 3633, 3761,
        3893, 3895, 3897, 4038, 4226, 4237, 4253, 6086, 6109, 6313, 6450, 6683,
        6742, 6752, 6754, 6783, 6964, 6972, 6978, 7142, 7149, 7405, 7412, 8417,
        11647, 42607, 43010, 43014, 43019, 43263, 43443, 43493, 43587, 43596,
        43644, 43696, 43713, 43766, 44005, 44008, 44013, 64286, 66045, 66272,
        68159, 69633, 70003, 70196, 70206, 70367, 70464, 70726, 70750, 70842,
        71229, 71339, 71341, 71351, 72160, 72263, 72767, 73018, 73031, 73109,
        73111, 94031, 121461, 121476, 173, 1564, 1757, 1807, 2274, 6158, 65279,
        69821, 69837, 917505,
      ]);
      const ricd_a = [
        [768, 879],
        [1155, 1159],
        [1425, 1469],
        [1473, 1474],
        [1476, 1477],
        [1552, 1562],
        [1611, 1631],
        [1750, 1756],
        [1759, 1764],
        [1767, 1768],
        [1770, 1773],
        [1840, 1866],
        [1958, 1968],
        [2027, 2035],
        [2070, 2073],
        [2075, 2083],
        [2085, 2087],
        [2089, 2093],
        [2137, 2139],
        [2259, 2273],
        [2275, 2306],
        [2369, 2376],
        [2385, 2391],
        [2402, 2403],
        [2497, 2500],
        [2530, 2531],
        [2561, 2562],
        [2625, 2626],
        [2631, 2632],
        [2635, 2637],
        [2672, 2673],
        [2689, 2690],
        [2753, 2757],
        [2759, 2760],
        [2786, 2787],
        [2810, 2815],
        [2881, 2884],
        [2914, 2915],
        [3134, 3136],
        [3142, 3144],
        [3146, 3149],
        [3157, 3158],
        [3170, 3171],
        [3276, 3277],
        [3298, 3299],
        [3328, 3329],
        [3387, 3388],
        [3393, 3396],
        [3426, 3427],
        [3538, 3540],
        [3636, 3642],
        [3655, 3662],
        [3764, 3772],
        [3784, 3789],
        [3864, 3865],
        [3953, 3966],
        [3968, 3972],
        [3974, 3975],
        [3981, 3991],
        [3993, 4028],
        [4141, 4144],
        [4146, 4151],
        [4153, 4154],
        [4157, 4158],
        [4184, 4185],
        [4190, 4192],
        [4209, 4212],
        [4229, 4230],
        [4957, 4959],
        [5906, 5908],
        [5938, 5940],
        [5970, 5971],
        [6002, 6003],
        [6068, 6069],
        [6071, 6077],
        [6089, 6099],
        [6155, 6157],
        [6277, 6278],
        [6432, 6434],
        [6439, 6440],
        [6457, 6459],
        [6679, 6680],
        [6744, 6750],
        [6757, 6764],
        [6771, 6780],
        [6832, 6845],
        [6912, 6915],
        [6966, 6970],
        [7019, 7027],
        [7040, 7041],
        [7074, 7077],
        [7080, 7081],
        [7083, 7085],
        [7144, 7145],
        [7151, 7153],
        [7212, 7219],
        [7222, 7223],
        [7376, 7378],
        [7380, 7392],
        [7394, 7400],
        [7416, 7417],
        [7616, 7673],
        [7675, 7679],
        [8400, 8412],
        [8421, 8432],
        [11503, 11505],
        [11744, 11775],
        [12330, 12333],
        [12441, 12442],
        [42612, 42621],
        [42654, 42655],
        [42736, 42737],
        [43045, 43046],
        [43204, 43205],
        [43232, 43249],
        [43302, 43309],
        [43335, 43345],
        [43392, 43394],
        [43446, 43449],
        [43452, 43453],
        [43561, 43566],
        [43569, 43570],
        [43573, 43574],
        [43698, 43700],
        [43703, 43704],
        [43710, 43711],
        [43756, 43757],
        [65024, 65039],
        [65056, 65071],
        [66422, 66426],
        [68097, 68099],
        [68101, 68102],
        [68108, 68111],
        [68152, 68154],
        [68325, 68326],
        [68900, 68903],
        [69446, 69456],
        [69688, 69702],
        [69759, 69761],
        [69811, 69814],
        [69817, 69818],
        [69888, 69890],
        [69927, 69931],
        [69933, 69940],
        [70016, 70017],
        [70070, 70078],
        [70089, 70092],
        [70191, 70193],
        [70198, 70199],
        [70371, 70378],
        [70400, 70401],
        [70459, 70460],
        [70502, 70508],
        [70512, 70516],
        [70712, 70719],
        [70722, 70724],
        [70835, 70840],
        [70847, 70848],
        [70850, 70851],
        [71090, 71093],
        [71100, 71101],
        [71103, 71104],
        [71132, 71133],
        [71219, 71226],
        [71231, 71232],
        [71344, 71349],
        [71453, 71455],
        [71458, 71461],
        [71463, 71467],
        [71727, 71735],
        [71737, 71738],
        [72148, 72151],
        [72154, 72155],
        [72193, 72202],
        [72243, 72248],
        [72251, 72254],
        [72273, 72278],
        [72281, 72283],
        [72330, 72342],
        [72344, 72345],
        [72752, 72758],
        [72760, 72765],
        [72850, 72871],
        [72874, 72880],
        [72882, 72883],
        [72885, 72886],
        [73009, 73014],
        [73020, 73021],
        [73023, 73029],
        [73104, 73105],
        [73459, 73460],
        [92912, 92916],
        [92976, 92982],
        [94095, 94098],
        [113821, 113822],
        [119143, 119145],
        [119163, 119170],
        [119173, 119179],
        [119210, 119213],
        [119362, 119364],
        [121344, 121398],
        [121403, 121452],
        [121499, 121503],
        [121505, 121519],
        [122880, 122886],
        [122888, 122904],
        [122907, 122913],
        [122915, 122916],
        [122918, 122922],
        [123184, 123190],
        [123628, 123631],
        [125136, 125142],
        [125252, 125258],
        [917760, 917999],
        [1536, 1541],
        [8203, 8207],
        [8234, 8238],
        [8288, 8292],
        [8294, 8303],
        [65529, 65531],
        [78896, 78904],
        [113824, 113827],
        [119155, 119162],
        [917536, 917631],
      ];
      addRanges(ricd, ricd_a);
      const mac_a = [
        [0, 8],
        [14, 27],
        [127, 159],
        [768, 879],
        [6832, 6911],
        [7616, 7679],
        [8400, 8447],
        [65056, 65071],
        [48, 57],
      ];
      addRanges(ricd, mac_a);
      const ric = new Set(
        (function* () {
          yield* fic;
          yield* ricd;
        })()
      );
      module.exports = {
        firstIdentChar: fic,
        restIdentChar: ric,
      };

      /***/
    },
    /* 19 */
    /***/ function (module, exports) {
      // shim for using process in browser
      var process = (module.exports = {});

      // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function () {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if (
          (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
          setTimeout
        ) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if (
          (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&
          clearTimeout
        ) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      // v8 likes predictible objects
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ""; // empty string to avoid regexp issues
      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error("process.binding is not supported");
      };

      process.cwd = function () {
        return "/";
      };
      process.chdir = function (dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function () {
        return 0;
      };

      /***/
    },
    /* 20 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { Parser, isRecognitionException } = __webpack_require__(1);
      const { allTokens, tokens: t } = __webpack_require__(11);
      const lexicalStructure = __webpack_require__(21);
      const typesValuesVariables = __webpack_require__(22);
      const names = __webpack_require__(23);
      const packagesModules = __webpack_require__(24);
      const classes = __webpack_require__(25);
      const interfaces = __webpack_require__(26);
      const arrays = __webpack_require__(27);
      const blocksStatements = __webpack_require__(28);
      const expressions = __webpack_require__(29);
      const { getSkipValidations } = __webpack_require__(12);
      const { shouldNotFormat } = __webpack_require__(13);

      /**
       * This parser attempts to strongly align with the specs style at:
       * -  https://docs.oracle.com/javase/specs/jls/se11/html/jls-19.html
       *
       * Deviations from the spec will be marked.
       *
       * Note that deviations from the spec do not mean deviations from Java Grammar.
       * Rather it means an **equivalent** grammar which was written differently, e.g:
       * - LL(k) vs LR(K)
       * - Left Recursions vs Repetitions
       * - NonTerminals combined together or divided to sub-NonTerminals
       * - ...
       *
       * A special type of spec deviations are the "super grammar" kind.
       * This means that the parser has been defined in such a way that it accept a
       * **strict superset** of the inputs the official grammar accepts.
       *
       * This technique is used to simplify the parser when narrowing the set
       * of accepted inputs can more easily be done in a post parsing phase.
       *
       * TODO: document guide lines for using back tracking
       *
       */
      class JavaParser extends Parser {
        constructor() {
          super(allTokens, {
            maxLookahead: 1,
            nodeLocationTracking: "full",
            // traceInitPerf: 2,
            skipValidations: getSkipValidations(),
          });

          const $ = this;

          this.mostEnclosiveCstNodeByStartOffset = {};
          this.mostEnclosiveCstNodeByEndOffset = {};

          // ---------------------
          // Productions from §3 (Lexical Structure)
          // ---------------------
          // TODO: move this rule to the correct file
          $.RULE("typeIdentifier", () => {
            // TODO: implement: Identifier but not var in the lexer
            $.CONSUME(t.Identifier);
          });

          // Include the productions from all "chapters".
          lexicalStructure.defineRules.call(this, $, t);
          typesValuesVariables.defineRules.call(this, $, t);
          names.defineRules.call(this, $, t);
          classes.defineRules.call(this, $, t);
          packagesModules.defineRules.call(this, $, t);
          interfaces.defineRules.call(this, $, t);
          arrays.defineRules.call(this, $, t);
          blocksStatements.defineRules.call(this, $, t);
          expressions.defineRules.call(this, $, t);

          this.firstForUnaryExpressionNotPlusMinus = [];
          this.performSelfAnalysis();
          this.firstForUnaryExpressionNotPlusMinus =
            expressions.computeFirstForUnaryExpressionNotPlusMinus.call(this);
        }

        cstPostNonTerminal(ruleCstResult, ruleName) {
          super.cstPostNonTerminal(ruleCstResult, ruleName);
          if (this.isBackTracking() === false) {
            this.mostEnclosiveCstNodeByStartOffset[
              ruleCstResult.location.startOffset
            ] = ruleCstResult;
            this.mostEnclosiveCstNodeByEndOffset[
              ruleCstResult.location.endOffset
            ] = ruleCstResult;

            shouldNotFormat(ruleCstResult, this.onOffCommentPairs);
          }
        }

        BACKTRACK_LOOKAHEAD(production, errValue = false) {
          return this.ACTION(() => {
            this.isBackTrackingStack.push(1);
            // TODO: "saveRecogState" does not handle the occurrence stack
            const orgState = this.saveRecogState();
            try {
              // hack to enable outputting none CST values from grammar rules.
              this.outputCst = false;
              return production.call(this);
            } catch (e) {
              if (isRecognitionException(e)) {
                return errValue;
              }
              throw e;
            } finally {
              this.outputCst = true;
              this.reloadRecogState(orgState);
              this.isBackTrackingStack.pop();
            }
          });
        }

        setOnOffCommentPairs(onOffCommentPairs) {
          this.onOffCommentPairs = onOffCommentPairs;
        }
      }

      module.exports = JavaParser;

      /***/
    },
    /* 21 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      function defineRules($, t) {
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-Literal
        $.RULE("literal", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.integerLiteral) },
            { ALT: () => $.SUBRULE($.floatingPointLiteral) },
            { ALT: () => $.SUBRULE($.booleanLiteral) },
            { ALT: () => $.CONSUME(t.CharLiteral) },
            { ALT: () => $.CONSUME(t.StringLiteral) },
            { ALT: () => $.CONSUME(t.Null) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-IntegerLiteral
        $.RULE("integerLiteral", () => {
          $.OR([
            { ALT: () => $.CONSUME(t.DecimalLiteral) },
            { ALT: () => $.CONSUME(t.HexLiteral) },
            { ALT: () => $.CONSUME(t.OctalLiteral) },
            { ALT: () => $.CONSUME(t.BinaryLiteral) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-FloatingPointLiteral
        $.RULE("floatingPointLiteral", () => {
          $.OR([
            { ALT: () => $.CONSUME(t.FloatLiteral) },
            { ALT: () => $.CONSUME(t.HexFloatLiteral) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-BooleanLiteral
        $.RULE("booleanLiteral", () => {
          $.OR([
            { ALT: () => $.CONSUME(t.True) },
            { ALT: () => $.CONSUME(t.False) },
          ]);
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 22 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { tokenMatcher } = __webpack_require__(1);

      function defineRules($, t) {
        // ---------------------
        // Productions from §4 (Types, Values, and Variables)
        // ---------------------

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-PrimitiveType
        $.RULE("primitiveType", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.OR([
            { ALT: () => $.SUBRULE($.numericType) },
            { ALT: () => $.CONSUME(t.Boolean) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-NumericType
        $.RULE("numericType", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.integralType) },
            { ALT: () => $.SUBRULE($.floatingPointType) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-IntegralType
        $.RULE("integralType", () => {
          $.OR([
            { ALT: () => $.CONSUME(t.Byte) },
            { ALT: () => $.CONSUME(t.Short) },
            { ALT: () => $.CONSUME(t.Int) },
            { ALT: () => $.CONSUME(t.Long) },
            { ALT: () => $.CONSUME(t.Char) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-FloatingPointType
        $.RULE("floatingPointType", () => {
          $.OR([
            { ALT: () => $.CONSUME(t.Float) },
            { ALT: () => $.CONSUME(t.Double) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-ReferenceType
        $.RULE("referenceType", () => {
          $.MANY(() => {
            // Spec Deviation: by extracting the common "annotation" prefix
            // we can avoid backtracking and thus improve performance.
            // Note that the annotation prefix is still present inside
            // "primitiveType" and "classOrInterfaceType"
            $.SUBRULE($.annotation);
          });
          // Spec Deviation: The array type "dims" suffix was extracted to this rule
          // to avoid backtracking for performance reasons.
          $.OR({
            DEF: [
              {
                ALT: () => {
                  $.SUBRULE($.primitiveType);
                  $.SUBRULE($.dims);
                },
              },
              {
                // Spec Deviation: "typeVariable" alternative is missing because
                //                 it is included in "classOrInterfaceType"
                ALT: () => {
                  $.SUBRULE($.classOrInterfaceType);
                  $.OPTION(() => {
                    $.SUBRULE2($.dims);
                  });
                },
              },
            ],
            IGNORE_AMBIGUITIES: true, // annotation prefix was extracted to remove ambiguities
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-ClassOrInterfaceType
        $.RULE("classOrInterfaceType", () => {
          // Spec Deviation: The spec says: "classType | interfaceType" but "interfaceType"
          //                 is not mentioned in the parser because it is identical to "classType"
          //                 The distinction is **semantic** not syntactic.
          $.SUBRULE($.classType);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-ClassType
        $.RULE("classType", () => {
          // Spec Deviation: Refactored left recursion and alternation to iterations
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.CONSUME(t.Identifier);
          $.OPTION(() => {
            $.SUBRULE($.typeArguments);
          });
          $.MANY2(() => {
            $.CONSUME(t.Dot);
            $.MANY3(() => {
              $.SUBRULE2($.annotation);
            });
            // TODO: Semantic Check: This Identifier cannot be "var"
            $.CONSUME2(t.Identifier);
            $.OPTION2({
              // To avoid confusion with "TypeArgumentsOrDiamond" rule
              // as we use the "classType" rule in the "identifyNewExpressionType"
              // optimized lookahead rule.
              GATE: () => tokenMatcher($.LA(2).tokenType, t.Greater) === false,
              DEF: () => {
                $.SUBRULE2($.typeArguments);
              },
            });
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-InterfaceType
        $.RULE("interfaceType", () => {
          $.SUBRULE($.classType);
        });

        $.RULE("typeVariable", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          // TODO: Semantic Check: This Identifier cannot be "var"
          $.CONSUME(t.Identifier);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-Dims
        $.RULE("dims", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.CONSUME(t.LSquare);
          $.CONSUME(t.RSquare);
          $.MANY2({
            GATE: () => $.BACKTRACK_LOOKAHEAD($.isDims),
            DEF: () => {
              $.MANY3(() => {
                $.SUBRULE2($.annotation);
              });
              $.CONSUME2(t.LSquare);
              $.CONSUME2(t.RSquare);
            },
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeParameter
        $.RULE("typeParameter", () => {
          $.MANY(() => {
            $.SUBRULE($.typeParameterModifier);
          });
          $.SUBRULE($.typeIdentifier);
          $.OPTION(() => {
            $.SUBRULE($.typeBound);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeParameterModifier
        $.RULE("typeParameterModifier", () => {
          $.SUBRULE($.annotation);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeBound
        $.RULE("typeBound", () => {
          $.CONSUME(t.Extends);
          // Spec Deviation: The alternative with "TypeVariable" is not specified
          //      because it's syntax is included in "classOrInterfaceType"
          $.SUBRULE($.classOrInterfaceType);
          $.MANY2(() => {
            $.SUBRULE($.additionalBound);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-AdditionalBound
        $.RULE("additionalBound", () => {
          $.CONSUME(t.And);
          $.SUBRULE($.interfaceType);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeArguments
        $.RULE("typeArguments", () => {
          $.CONSUME(t.Less);
          $.SUBRULE($.typeArgumentList);
          $.CONSUME(t.Greater);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeArgumentList
        $.RULE("typeArgumentList", () => {
          $.SUBRULE($.typeArgument);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.typeArgument);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-TypeArgument
        $.RULE("typeArgument", () => {
          // TODO: performance: evaluate flipping the order of alternatives
          $.OR([
            {
              GATE: $.BACKTRACK($.referenceType),
              ALT: () => $.SUBRULE($.referenceType),
            },
            { ALT: () => $.SUBRULE($.wildcard) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-Wildcard
        $.RULE("wildcard", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.CONSUME(t.QuestionMark);
          $.OPTION(() => {
            $.SUBRULE($.wildcardBounds);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-WildcardBounds
        $.RULE("wildcardBounds", () => {
          // TODO: consider in-lining suffix into the alternatives to match the spec more strongly
          $.OR([
            { ALT: () => $.CONSUME(t.Extends) },
            { ALT: () => $.CONSUME(t.Super) },
          ]);
          $.SUBRULE($.referenceType);
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 23 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { tokenMatcher } = __webpack_require__(1);
      function defineRules($, t) {
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-ModuleName
        $.RULE("moduleName", () => {
          $.CONSUME(t.Identifier);
          $.MANY(() => {
            $.CONSUME(t.Dot);
            $.CONSUME2(t.Identifier);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-PackageName
        $.RULE("packageName", () => {
          $.CONSUME(t.Identifier);
          $.MANY(() => {
            $.CONSUME(t.Dot);
            $.CONSUME2(t.Identifier);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-TypeName
        $.RULE("typeName", () => {
          // Spec Deviation: The last Identifier in a "typeName" may not be be "var"
          //                 But the parser does not check for that.
          // TODO: post parsing semantic check: last "Identifier" in a "typeName"
          //                                    cannot be the "var" keyword
          // TODO: option 2 implement "Not Var" Ident using token categories?
          $.CONSUME(t.Identifier);
          $.MANY(() => {
            $.CONSUME(t.Dot);
            $.CONSUME2(t.Identifier);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-ExpressionName
        $.RULE("expressionName", () => {
          // Spec Deviation: in-lined "ambiguousName" to be LL(K)
          $.CONSUME(t.Identifier);
          $.MANY({
            // expressionName could be called by "qualifiedExplicitConstructorInvocation"
            // in that case it may be followed by ".super" so we need to look two tokens
            // ahead.
            GATE: () => tokenMatcher(this.LA(2).tokenType, t.Identifier),
            DEF: () => {
              $.CONSUME(t.Dot);
              $.CONSUME2(t.Identifier);
            },
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-MethodName
        $.RULE("methodName", () => {
          $.CONSUME(t.Identifier);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-PackageOrTypeName
        $.RULE("packageOrTypeName", () => {
          $.CONSUME(t.Identifier);
          $.MANY({
            // In some contexts a "Dot Star" (.*) may appear
            // after a "packageOrTypeName", by default Chevrotain will
            // only look a single token ahead (Dot) to determine if another iteration
            // exists which will cause a parsing error for inputs such as:
            // "import a.b.c.*"
            GATE: () => tokenMatcher(this.LA(2).tokenType, t.Star) === false,
            DEF: () => {
              $.CONSUME(t.Dot);
              $.CONSUME2(t.Identifier);
            },
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html#jls-AmbiguousName
        $.RULE("ambiguousName", () => {
          $.CONSUME(t.Identifier);
          $.MANY(() => {
            $.CONSUME(t.Dot);
            $.CONSUME2(t.Identifier);
          });
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 24 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { isRecognitionException, tokenMatcher, EOF } =
        __webpack_require__(1);

      function defineRules($, t) {
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#CompilationUnit
        $.RULE("compilationUnit", () => {
          // custom optimized backtracking lookahead logic
          const isModule = $.BACKTRACK_LOOKAHEAD($.isModuleCompilationUnit);

          $.OR([
            {
              GATE: () => isModule === false,
              ALT: () => $.SUBRULE($.ordinaryCompilationUnit),
            },
            {
              ALT: () => $.SUBRULE($.modularCompilationUnit),
            },
          ]);
          // https://github.com/jhipster/prettier-java/pull/217
          $.CONSUME(EOF);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-OrdinaryCompilationUnit
        $.RULE("ordinaryCompilationUnit", () => {
          $.OPTION({
            GATE: $.BACKTRACK($.packageDeclaration),
            DEF: () => {
              $.SUBRULE($.packageDeclaration);
            },
          });
          $.MANY(() => {
            $.SUBRULE3($.importDeclaration);
          });
          $.MANY2(() => {
            $.SUBRULE($.typeDeclaration);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ModularCompilationUnit
        $.RULE("modularCompilationUnit", () => {
          $.MANY(() => {
            $.SUBRULE($.importDeclaration);
          });
          $.SUBRULE($.moduleDeclaration);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-PackageDeclaration
        $.RULE("packageDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.packageModifier);
          });
          $.CONSUME(t.Package);
          $.CONSUME(t.Identifier);
          $.MANY2(() => {
            $.CONSUME(t.Dot);
            $.CONSUME2(t.Identifier);
          });
          $.CONSUME2(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-PackageModifier
        $.RULE("packageModifier", () => {
          $.SUBRULE($.annotation);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ImportDeclaration
        $.RULE("importDeclaration", () => {
          // Spec Deviation: The spec defines four different kinds of import declarations.
          //                 Our grammar however combines those into a single rule due to difficulties
          //                 distinguishing between the alternatives due to unbound common prefix.
          // TODO: A post parsing step is required to align with the official specs.
          //       The Identifier "var" is not allowed in all positions and variations of the importDeclaration
          $.OR([
            {
              ALT: () => {
                $.CONSUME(t.Import);
                $.OPTION(() => {
                  $.CONSUME(t.Static);
                });
                $.SUBRULE($.packageOrTypeName);
                $.OPTION2(() => {
                  $.CONSUME(t.Dot);
                  $.CONSUME(t.Star);
                });
                $.CONSUME(t.Semicolon);
              },
            },
            // Spec Deviation: The spec do not allow empty statement in between imports.
            //                 However Java compiler consider empty statements valid, we chose
            //                 to support that case, thus deviate from the spec.
            //                 See here: https://github.com/jhipster/prettier-java/pull/158
            {
              ALT: () => $.SUBRULE($.emptyStatement),
            },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-TypeDeclaration
        $.RULE("typeDeclaration", () => {
          // TODO: consider extracting the prefix modifiers here to avoid backtracking
          const isClassDeclaration = this.BACKTRACK_LOOKAHEAD(
            $.isClassDeclaration
          );

          $.OR([
            {
              GATE: () => isClassDeclaration,
              ALT: () => $.SUBRULE($.classDeclaration),
            },
            { ALT: () => $.SUBRULE($.interfaceDeclaration) },
            { ALT: () => $.CONSUME(t.Semicolon) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ModuleDeclaration
        $.RULE("moduleDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.OPTION(() => {
            $.CONSUME(t.Open);
          });
          $.CONSUME(t.Module);
          $.CONSUME(t.Identifier);
          $.MANY2(() => {
            $.CONSUME(t.Dot);
            $.CONSUME2(t.Identifier);
          });
          $.CONSUME(t.LCurly);
          $.MANY3(() => {
            $.SUBRULE($.moduleDirective);
          });
          $.CONSUME(t.RCurly);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-ModuleDirective
        $.RULE("moduleDirective", () => {
          // Spec Deviation: Each of the alternatives of "moduleDirective" was extracted
          //                 to its own nonTerminal, to reduce verbosity.
          $.OR([
            { ALT: () => $.SUBRULE($.requiresModuleDirective) },
            { ALT: () => $.SUBRULE($.exportsModuleDirective) },
            { ALT: () => $.SUBRULE($.opensModuleDirective) },
            { ALT: () => $.SUBRULE($.usesModuleDirective) },
            { ALT: () => $.SUBRULE($.providesModuleDirective) },
          ]);
        });

        $.RULE("requiresModuleDirective", () => {
          // Spec Deviation: extracted from "moduleDirective"
          $.CONSUME(t.Requires);
          $.MANY({
            GATE: () => {
              /**
               * https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.9 -
               *   There is one exception: immediately to the right of the character sequence `requires` in the ModuleDirective production,
               *   the character sequence `transitive` is tokenized as a keyword unless it is followed by a separator,
               *   in which case it is tokenized as an identifier.
               */
              return (
                (tokenMatcher($.LA(1).tokenType, t.Transitive) &&
                  tokenMatcher($.LA(2).tokenType, t.Separators)) === false
              );
            },
            DEF: () => {
              $.SUBRULE($.requiresModifier);
            },
          });
          $.SUBRULE($.moduleName);
          $.CONSUME(t.Semicolon);
        });

        $.RULE("exportsModuleDirective", () => {
          // Spec Deviation: extracted from "moduleDirective"
          $.CONSUME(t.Exports);
          $.SUBRULE($.packageName);
          $.OPTION(() => {
            $.CONSUME(t.To);
            $.SUBRULE($.moduleName);
            $.MANY(() => {
              $.CONSUME(t.Comma);
              $.SUBRULE2($.moduleName);
            });
          });
          $.CONSUME(t.Semicolon);
        });

        $.RULE("opensModuleDirective", () => {
          // Spec Deviation: extracted from "moduleDirective"
          $.CONSUME(t.Opens);
          $.SUBRULE($.packageName);
          $.OPTION(() => {
            $.CONSUME(t.To);
            $.SUBRULE($.moduleName);
            $.MANY(() => {
              $.CONSUME(t.Comma);
              $.SUBRULE2($.moduleName);
            });
          });
          $.CONSUME(t.Semicolon);
        });

        $.RULE("usesModuleDirective", () => {
          // Spec Deviation: extracted from "moduleDirective"
          $.CONSUME(t.Uses);
          $.SUBRULE($.typeName);
          $.CONSUME(t.Semicolon);
        });

        $.RULE("providesModuleDirective", () => {
          // Spec Deviation: extracted from "moduleDirective"
          $.CONSUME(t.Provides);
          $.SUBRULE($.typeName);
          $.CONSUME(t.With);
          $.SUBRULE2($.typeName);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE3($.typeName);
          });
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-7.html#jls-RequiresModifier
        $.RULE("requiresModifier", () => {
          $.OR([
            { ALT: () => $.CONSUME(t.Transitive) },
            { ALT: () => $.CONSUME(t.Static) },
          ]);
        });

        $.RULE("isModuleCompilationUnit", () => {
          $.OPTION(() => {
            $.SUBRULE($.packageDeclaration);
            // TODO: this return must be outside the OPTION at the top level rule
            // a Java Module source code may not contain a package declaration.
            return false;
          });

          try {
            // the "{importDeclaration}" is a common prefix
            $.MANY(() => {
              $.SUBRULE2($.importDeclaration);
            });

            $.MANY2({
              // To avoid ambiguity with @interface ("AnnotationTypeDeclaration" vs "Annotaion")
              GATE: () =>
                (tokenMatcher($.LA(1).tokenType, t.At) &&
                  tokenMatcher($.LA(2).tokenType, t.Interface)) === false,
              DEF: () => {
                $.SUBRULE($.annotation);
              },
            });
          } catch (e) {
            // This means we had a syntax error in the imports or annotations
            // So we can't keep parsing deep enough to make the decision
            if (isRecognitionException(e)) {
              // TODO: add original syntax error?
              throw "Cannot Identify if the source code is an OrdinaryCompilationUnit or  ModularCompilationUnit";
            } else {
              throw e;
            }
          }

          const nextTokenType = this.LA(1).tokenType;
          return (
            tokenMatcher(nextTokenType, t.Open) ||
            tokenMatcher(nextTokenType, t.Module)
          );
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 25 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { isRecognitionException, tokenMatcher } = __webpack_require__(1);

      function defineRules($, t) {
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassDeclaration
        $.RULE("classDeclaration", () => {
          // Spec Deviation: extracted common "{classModifier}" prefix
          //      extraction is safe because there are no other references to
          //      "normalClassDeclaration" and "enumDeclaration"
          $.MANY(() => {
            $.SUBRULE($.classModifier);
          });
          $.OR([
            { ALT: () => $.SUBRULE($.normalClassDeclaration) },
            { ALT: () => $.SUBRULE($.enumDeclaration) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-NormalClassDeclaration
        $.RULE("normalClassDeclaration", () => {
          // Spec Deviation: extracted common "{classModifier}" to "classDeclaration"
          $.CONSUME(t.Class);
          $.SUBRULE($.typeIdentifier);
          $.OPTION(() => {
            $.SUBRULE($.typeParameters);
          });
          $.OPTION2(() => {
            $.SUBRULE($.superclass);
          });
          $.OPTION3(() => {
            $.SUBRULE($.superinterfaces);
          });
          $.SUBRULE($.classBody);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassModifier
        $.RULE("classModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Protected) },
            { ALT: () => $.CONSUME(t.Private) },
            { ALT: () => $.CONSUME(t.Abstract) },
            { ALT: () => $.CONSUME(t.Static) },
            { ALT: () => $.CONSUME(t.Final) },
            { ALT: () => $.CONSUME(t.Strictfp) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-TypeParameters
        $.RULE("typeParameters", () => {
          $.CONSUME(t.Less);
          $.SUBRULE($.typeParameterList);
          $.CONSUME(t.Greater);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-TypeParameterList
        $.RULE("typeParameterList", () => {
          $.SUBRULE($.typeParameter);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.typeParameter);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Superclass
        $.RULE("superclass", () => {
          $.CONSUME(t.Extends);
          $.SUBRULE($.classType);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Superinterfaces
        $.RULE("superinterfaces", () => {
          $.CONSUME(t.Implements);
          $.SUBRULE($.interfaceTypeList);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-InterfaceTypeList
        $.RULE("interfaceTypeList", () => {
          $.SUBRULE($.interfaceType);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.interfaceType);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassBody
        $.RULE("classBody", () => {
          $.CONSUME(t.LCurly);
          $.MANY(() => {
            $.SUBRULE($.classBodyDeclaration);
          });
          $.CONSUME(t.RCurly);
        });

        const classBodyTypes = {
          unknown: 0,
          fieldDeclaration: 1,
          methodDeclaration: 2,
          classDeclaration: 3,
          interfaceDeclaration: 4,
          semiColon: 5,
          instanceInitializer: 6,
          staticInitializer: 7,
          constructorDeclaration: 8,
        };

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassBodyDeclaration
        $.RULE("classBodyDeclaration", () => {
          const nextRuleType = $.BACKTRACK_LOOKAHEAD(
            $.identifyClassBodyDeclarationType
          );

          $.OR([
            {
              GATE: () =>
                nextRuleType >= classBodyTypes.fieldDeclaration &&
                nextRuleType <= classBodyTypes.semiColon,
              ALT: () =>
                $.SUBRULE($.classMemberDeclaration, {
                  ARGS: [nextRuleType],
                }),
            },
            // no gate needed for the initializers because these are LL(1) rules.
            { ALT: () => $.SUBRULE($.instanceInitializer) },
            { ALT: () => $.SUBRULE($.staticInitializer) },
            {
              GATE: () =>
                tokenMatcher(
                  nextRuleType,
                  classBodyTypes.constructorDeclaration
                ),
              ALT: () => $.SUBRULE($.constructorDeclaration),
            },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ClassMemberDeclaration
        $.RULE("classMemberDeclaration", (nextRuleType) => {
          $.OR([
            {
              GATE: () => nextRuleType === classBodyTypes.fieldDeclaration,
              ALT: () => $.SUBRULE($.fieldDeclaration),
            },
            {
              GATE: () => nextRuleType === classBodyTypes.methodDeclaration,
              ALT: () => $.SUBRULE($.methodDeclaration),
            },
            {
              GATE: () => nextRuleType === classBodyTypes.classDeclaration,
              ALT: () => $.SUBRULE($.classDeclaration),
            },
            {
              GATE: () => nextRuleType === classBodyTypes.interfaceDeclaration,
              ALT: () => $.SUBRULE($.interfaceDeclaration),
            },
            {
              // No GATE is needed as this is LL(1)
              ALT: () => $.CONSUME(t.Semicolon),
            },
          ]);
        });

        // // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FieldDeclaration
        $.RULE("fieldDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.fieldModifier);
          });
          $.SUBRULE($.unannType);
          $.SUBRULE($.variableDeclaratorList);
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FieldModifier
        $.RULE("fieldModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Protected) },
            { ALT: () => $.CONSUME(t.Private) },
            { ALT: () => $.CONSUME(t.Static) },
            { ALT: () => $.CONSUME(t.Final) },
            { ALT: () => $.CONSUME(t.Transient) },
            { ALT: () => $.CONSUME(t.Volatile) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableDeclaratorList
        $.RULE("variableDeclaratorList", () => {
          $.SUBRULE($.variableDeclarator);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.variableDeclarator);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableDeclarator
        $.RULE("variableDeclarator", () => {
          $.SUBRULE($.variableDeclaratorId);
          $.OPTION(() => {
            $.CONSUME(t.Equals);
            $.SUBRULE($.variableInitializer);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableDeclaratorId
        $.RULE("variableDeclaratorId", () => {
          $.CONSUME(t.Identifier);
          $.OPTION(() => {
            $.SUBRULE($.dims);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableInitializer
        $.RULE("variableInitializer", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.expression) },
            { ALT: () => $.SUBRULE($.arrayInitializer) },
          ]);
        });

        // // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannType
        $.RULE("unannType", () => {
          $.OR([
            // Spec Deviation: The array type "dims" suffix was extracted to this rule
            // to avoid backtracking for performance reasons.
            {
              ALT: () => {
                $.SUBRULE($.unannPrimitiveType);
                $.OPTION({
                  GATE: () => this.BACKTRACK_LOOKAHEAD($.isDims),
                  DEF: () => $.SUBRULE2($.dims),
                });
              },
            },
            { ALT: () => $.SUBRULE($.unannReferenceType) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannPrimitiveType
        $.RULE("unannPrimitiveType", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.numericType) },
            { ALT: () => $.CONSUME(t.Boolean) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannReferenceType
        $.RULE("unannReferenceType", () => {
          $.SUBRULE($.unannClassOrInterfaceType);
          $.OPTION({
            GATE: () => this.BACKTRACK_LOOKAHEAD($.isDims),
            DEF: () => $.SUBRULE2($.dims),
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannClassType
        $.RULE("unannClassOrInterfaceType", () => {
          // Spec Deviation: The spec says: "UnannClassType  | UnannInterfaceType" but "UnannInterfaceType"
          //                 is not mentioned in the parser because it is identical to "UnannClassType"
          //                 The distinction is **semantic** not syntactic.
          $.SUBRULE($.unannClassType);
        });

        $.RULE("unannClassType", () => {
          // Spec Deviation: Refactored left recursion and alternation to iterations
          $.CONSUME(t.Identifier);
          $.OPTION(() => {
            $.SUBRULE($.typeArguments);
          });
          $.MANY2(() => {
            $.CONSUME(t.Dot);
            $.MANY3(() => {
              $.SUBRULE2($.annotation);
            });
            // TODO: Semantic Check: This Identifier cannot be "var"
            $.CONSUME2(t.Identifier);
            $.OPTION2(() => {
              $.SUBRULE2($.typeArguments);
            });
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-UnannInterfaceType
        $.RULE("unannInterfaceType", () => {
          $.SUBRULE($.unannClassType);
        });

        $.RULE("unannTypeVariable", () => {
          // TODO: Semantic Check: This Identifier cannot be "var"
          // TODO: or define as token type?
          $.CONSUME(t.Identifier);
        });

        // // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodDeclaration
        $.RULE("methodDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.methodModifier);
          });
          $.SUBRULE($.methodHeader);
          $.SUBRULE($.methodBody);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodModifier
        $.RULE("methodModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Protected) },
            { ALT: () => $.CONSUME(t.Private) },
            { ALT: () => $.CONSUME(t.Abstract) },
            { ALT: () => $.CONSUME(t.Static) },
            { ALT: () => $.CONSUME(t.Final) },
            { ALT: () => $.CONSUME(t.Synchronized) },
            { ALT: () => $.CONSUME(t.Native) },
            { ALT: () => $.CONSUME(t.Strictfp) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodHeader
        $.RULE("methodHeader", () => {
          // Spec Deviation: extracted common prefix from both alternatives
          $.OPTION(() => {
            $.SUBRULE($.typeParameters);
            $.MANY(() => {
              $.SUBRULE($.annotation);
            });
          });
          $.SUBRULE($.result);
          $.SUBRULE($.methodDeclarator);
          $.OPTION2(() => {
            $.SUBRULE($.throws);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Result
        $.RULE("result", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.unannType) },
            { ALT: () => $.CONSUME(t.Void) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-MethodDeclarator
        $.RULE("methodDeclarator", () => {
          $.CONSUME(t.Identifier);
          $.CONSUME(t.LBrace);
          $.OPTION(() => {
            $.SUBRULE($.formalParameterList);
          });
          $.CONSUME(t.RBrace);
          $.OPTION2(() => {
            $.SUBRULE($.dims);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ReceiverParameter
        $.RULE("receiverParameter", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.SUBRULE($.unannType);
          $.OPTION(() => {
            $.CONSUME(t.Identifier);
            $.CONSUME(t.Dot);
          });
          $.CONSUME(t.This);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FormalParameterList
        $.RULE("formalParameterList", () => {
          $.SUBRULE($.formalParameter);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.formalParameter);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-FormalParameter
        $.RULE("formalParameter", () => {
          $.OR([
            // Spec Deviation: extracted to "variableParaRegularParameter"
            {
              GATE: $.BACKTRACK($.variableParaRegularParameter),
              ALT: () => $.SUBRULE($.variableParaRegularParameter),
            },
            { ALT: () => $.SUBRULE($.variableArityParameter) },
          ]);
        });

        // Spec Deviation: extracted from "formalParameter"
        $.RULE("variableParaRegularParameter", () => {
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.unannType);
          $.SUBRULE($.variableDeclaratorId);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableArityParameter
        $.RULE("variableArityParameter", () => {
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.unannType);
          $.MANY2(() => {
            $.SUBRULE($.annotation);
          });
          $.CONSUME(t.DotDotDot);
          $.CONSUME(t.Identifier);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-VariableModifier
        $.RULE("variableModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Final) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-Throws
        $.RULE("throws", () => {
          $.CONSUME(t.Throws);
          $.SUBRULE($.exceptionTypeList);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ExceptionTypeList
        $.RULE("exceptionTypeList", () => {
          $.SUBRULE($.exceptionType);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.exceptionType);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ExceptionType
        $.RULE("exceptionType", () => {
          // Spec Deviation: "typeVariable" alternative is missing because
          //                 it is contained in classType.
          $.SUBRULE($.classType);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-MethodBody
        $.RULE("methodBody", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.block) },
            { ALT: () => $.CONSUME(t.Semicolon) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-InstanceInitializer
        $.RULE("instanceInitializer", () => {
          $.SUBRULE($.block);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-StaticInitializer
        $.RULE("staticInitializer", () => {
          $.CONSUME(t.Static);
          $.SUBRULE($.block);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorDeclaration
        $.RULE("constructorDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.constructorModifier);
          });
          $.SUBRULE($.constructorDeclarator);
          $.OPTION(() => {
            $.SUBRULE($.throws);
          });
          $.SUBRULE($.constructorBody);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorModifier
        $.RULE("constructorModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Protected) },
            { ALT: () => $.CONSUME(t.Private) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorDeclarator
        $.RULE("constructorDeclarator", () => {
          $.OPTION(() => {
            $.SUBRULE($.typeParameters);
          });
          $.SUBRULE($.simpleTypeName);
          $.CONSUME(t.LBrace);
          $.OPTION2({
            // a "formalParameterList" and a "receiverParameter"
            // cannot be distinguished using fixed lookahead.
            GATE: $.BACKTRACK($.receiverParameter),
            DEF: () => {
              $.SUBRULE($.receiverParameter);
              $.CONSUME(t.Comma);
            },
          });
          $.OPTION3(() => {
            $.SUBRULE($.formalParameterList);
          });
          $.CONSUME(t.RBrace);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-SimpleTypeName
        $.RULE("simpleTypeName", () => {
          // TODO: implement: Identifier but not var
          $.CONSUME(t.Identifier);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ConstructorBody
        $.RULE("constructorBody", () => {
          $.CONSUME(t.LCurly);
          $.OPTION({
            GATE: $.BACKTRACK($.explicitConstructorInvocation),
            DEF: () => {
              $.SUBRULE($.explicitConstructorInvocation);
            },
          });
          $.OPTION2(() => {
            $.SUBRULE($.blockStatements);
          });
          $.CONSUME(t.RCurly);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-ExplicitConstructorInvocation
        $.RULE("explicitConstructorInvocation", () => {
          // Spec Deviation: split into two separate sub rules.
          $.OR([
            {
              ALT: () => $.SUBRULE($.unqualifiedExplicitConstructorInvocation),
            },
            {
              ALT: () => $.SUBRULE($.qualifiedExplicitConstructorInvocation),
            },
          ]);
        });

        $.RULE("unqualifiedExplicitConstructorInvocation", () => {
          $.OPTION(() => {
            $.SUBRULE($.typeArguments);
          });
          $.OR([
            {
              ALT: () => $.CONSUME(t.This),
            },
            {
              ALT: () => $.CONSUME(t.Super),
            },
          ]);
          $.CONSUME(t.LBrace);
          $.OPTION2(() => {
            $.SUBRULE($.argumentList);
          });
          $.CONSUME(t.RBrace);
          $.CONSUME(t.Semicolon);
        });

        $.RULE("qualifiedExplicitConstructorInvocation", () => {
          // Spec Deviation: According to the spec the prefix may be a "primary' as well,
          //                 however, most primary variants don't make sense here
          // TODO: discover which primary forms could be valid here
          //       and handle only those specific cases.
          //       It is best if we avoid referencing "primary" rule from
          //       outside the expressions rules as the expressions rules are not aligned
          //       to the spec style, so we want the smallest possible "external api"
          //       for the expressions rules.
          $.SUBRULE($.expressionName);
          $.CONSUME(t.Dot);
          $.OPTION(() => {
            $.SUBRULE($.typeArguments);
          });
          $.CONSUME(t.Super);
          $.CONSUME(t.LBrace);
          $.OPTION2(() => {
            $.SUBRULE($.argumentList);
          });
          $.CONSUME(t.RBrace);
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumDeclaration
        $.RULE("enumDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.classModifier);
          });
          $.CONSUME(t.Enum);
          $.SUBRULE($.typeIdentifier);
          $.OPTION(() => {
            $.SUBRULE($.superinterfaces);
          });
          $.SUBRULE($.enumBody);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumBody
        $.RULE("enumBody", () => {
          $.CONSUME(t.LCurly);
          $.OPTION(() => {
            $.SUBRULE($.enumConstantList);
          });
          $.OPTION2(() => {
            $.CONSUME(t.Comma);
          });
          $.OPTION3(() => {
            $.SUBRULE($.enumBodyDeclarations);
          });
          $.CONSUME(t.RCurly);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumConstantList
        $.RULE("enumConstantList", () => {
          $.SUBRULE($.enumConstant);
          $.MANY({
            GATE: () => {
              const nextToken = $.LA(2);
              return (
                tokenMatcher(nextToken, t.Identifier) ||
                tokenMatcher(nextToken, t.At)
              );
            },
            DEF: () => {
              $.CONSUME(t.Comma);
              $.SUBRULE2($.enumConstant);
            },
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumConstant
        $.RULE("enumConstant", () => {
          $.MANY(() => {
            $.SUBRULE($.enumConstantModifier);
          });
          $.CONSUME(t.Identifier);
          $.OPTION(() => {
            $.CONSUME(t.LBrace);
            $.OPTION2(() => {
              $.SUBRULE($.argumentList);
            });
            $.CONSUME(t.RBrace);
          });
          $.OPTION3(() => {
            $.SUBRULE($.classBody);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumConstantModifier
        $.RULE("enumConstantModifier", () => {
          $.SUBRULE($.annotation);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-EnumBodyDeclarations
        $.RULE("enumBodyDeclarations", () => {
          $.CONSUME(t.Semicolon);
          $.MANY(() => {
            $.SUBRULE($.classBodyDeclaration);
          });
        });

        $.RULE("isClassDeclaration", () => {
          let isEmptyTypeDeclaration = false;

          if (
            $.OPTION(() => {
              $.CONSUME(t.Semicolon);
            })
          ) {
            // an empty "TypeDeclaration"
            isEmptyTypeDeclaration = true;
          }

          try {
            // The {classModifier} is a super grammar of the "interfaceModifier"
            // So we must parse all the "{classModifier}" before we can distinguish
            // between the alternatives.
            $.MANY({
              GATE: () =>
                (tokenMatcher($.LA(1).tokenType, t.At) &&
                  tokenMatcher($.LA(2).tokenType, t.Interface)) === false,
              DEF: () => {
                $.SUBRULE($.classModifier);
              },
            });
          } catch (e) {
            if (isRecognitionException(e)) {
              // TODO: add original syntax error?
              throw "Cannot Identify if the <TypeDeclaration> is a <ClassDeclaration> or an <InterfaceDeclaration>";
            } else {
              throw e;
            }
          }

          if (isEmptyTypeDeclaration) {
            return false;
          }

          const nextTokenType = this.LA(1).tokenType;
          return (
            tokenMatcher(nextTokenType, t.Class) ||
            tokenMatcher(nextTokenType, t.Enum)
          );
        });

        $.RULE("identifyClassBodyDeclarationType", () => {
          try {
            let nextTokenType = this.LA(1).tokenType;
            let nextNextTokenType = this.LA(2).tokenType;

            switch (nextTokenType) {
              case t.Semicolon:
                return classBodyTypes.semiColon;
              case t.LCurly:
                return classBodyTypes.instanceInitializer;
              case t.Static:
                switch (nextNextTokenType) {
                  case t.LCurly:
                    return classBodyTypes.staticInitializer;
                }
            }

            // We have to look beyond the modifiers to distinguish between the declaration types.
            $.MANY({
              GATE: () =>
                (tokenMatcher($.LA(1).tokenType, t.At) &&
                  tokenMatcher($.LA(2).tokenType, t.Interface)) === false,
              DEF: () => {
                // This alternation includes all possible modifiers for all types of "ClassBodyDeclaration"
                // Certain combinations are syntactically invalid, this is **not** checked here,
                // Invalid combinations will cause a descriptive parsing error message to be
                // Created inside the relevant parsing rules **after** this lookahead
                // analysis.
                $.OR([
                  {
                    GATE: () =>
                      (tokenMatcher($.LA(1).tokenType, t.At) &&
                        tokenMatcher($.LA(2).tokenType, t.Interface)) === false,
                    ALT: () => $.SUBRULE($.annotation),
                  },
                  { ALT: () => $.CONSUME(t.Public) },
                  { ALT: () => $.CONSUME(t.Protected) },
                  { ALT: () => $.CONSUME(t.Private) },
                  { ALT: () => $.CONSUME(t.Abstract) },
                  { ALT: () => $.CONSUME(t.Static) },
                  { ALT: () => $.CONSUME(t.Final) },
                  { ALT: () => $.CONSUME(t.Transient) },
                  { ALT: () => $.CONSUME(t.Volatile) },
                  { ALT: () => $.CONSUME(t.Synchronized) },
                  { ALT: () => $.CONSUME(t.Native) },
                  { ALT: () => $.CONSUME(t.Strictfp) },
                ]);
              },
            });

            nextTokenType = this.LA(1).tokenType;
            nextNextTokenType = this.LA(2).tokenType;
            if (
              tokenMatcher(nextTokenType, t.Identifier) &&
              tokenMatcher(nextNextTokenType, t.LBrace)
            ) {
              return classBodyTypes.constructorDeclaration;
            }

            if (
              tokenMatcher(nextTokenType, t.Class) ||
              tokenMatcher(nextTokenType, t.Enum)
            ) {
              return classBodyTypes.classDeclaration;
            }

            if (
              tokenMatcher(nextTokenType, t.Interface) ||
              tokenMatcher(nextTokenType, t.At)
            ) {
              return classBodyTypes.interfaceDeclaration;
            }

            if (tokenMatcher(nextTokenType, t.Void)) {
              // method with result type "void"
              return classBodyTypes.methodDeclaration;
            }

            // Type Arguments common prefix
            if (tokenMatcher(nextTokenType, t.Less)) {
              this.SUBRULE($.typeParameters);
              const nextTokenType = this.LA(1).tokenType;
              const nextNextTokenType = this.LA(2).tokenType;
              // "<T> foo(" -> constructor
              if (
                tokenMatcher(nextTokenType, t.Identifier) &&
                tokenMatcher(nextNextTokenType, t.LBrace)
              ) {
                return classBodyTypes.constructorDeclaration;
              }
              // typeParameters can only appear in method or constructor
              // declarations, so if it is not a constructor it must be a method
              return classBodyTypes.methodDeclaration;
            }

            // Only field or method declarations may be valid at this point.
            // All other alternatives should have been attempted.
            // **both** start with "unannType"
            this.SUBRULE($.unannType);

            const nextToken = this.LA(1);
            nextNextTokenType = this.LA(2).tokenType;
            // "foo(..." --> look like method start
            if (
              tokenMatcher(nextToken, t.Identifier) &&
              tokenMatcher(nextNextTokenType, t.LBrace)
            ) {
              return classBodyTypes.methodDeclaration;
            }

            // a valid field
            // TODO: because we use token categories we should use tokenMatcher everywhere.
            if (tokenMatcher(nextToken, t.Identifier)) {
              return classBodyTypes.fieldDeclaration;
            }

            return classBodyTypes.unknown;
          } catch (e) {
            // TODO: add info from the original error
            throw Error("Cannot Identify the type of a <classBodyDeclaration>");
          }
        });

        $.RULE("isDims", () => {
          $.MANY($.annotation);
          return (
            tokenMatcher(this.LA(1).tokenType, t.LSquare) &&
            tokenMatcher(this.LA(2).tokenType, t.RSquare)
          );
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 26 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { tokenMatcher } = __webpack_require__(1);

      function defineRules($, t) {
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceDeclaration
        $.RULE("interfaceDeclaration", () => {
          // Spec Deviation: extracted the common "interfaceModifier" prefix to avoid backtracking.
          $.MANY({
            DEF: () => {
              $.SUBRULE($.interfaceModifier);
            },
            MAX_LOOKAHEAD: 2,
          });

          $.OR([
            { ALT: () => $.SUBRULE($.normalInterfaceDeclaration) },
            { ALT: () => $.SUBRULE($.annotationTypeDeclaration) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-NormalInterfaceDeclaration
        $.RULE("normalInterfaceDeclaration", () => {
          // Spec Deviation: The "interfaceModifier" prefix was extracted to the "interfaceDeclaration"
          $.CONSUME(t.Interface);
          $.SUBRULE($.typeIdentifier);
          $.OPTION(() => {
            $.SUBRULE($.typeParameters);
          });
          $.OPTION2(() => {
            $.SUBRULE($.extendsInterfaces);
          });
          $.SUBRULE($.interfaceBody);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceModifier
        $.RULE("interfaceModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Protected) },
            { ALT: () => $.CONSUME(t.Private) },
            { ALT: () => $.CONSUME(t.Abstract) },
            { ALT: () => $.CONSUME(t.Static) },
            { ALT: () => $.CONSUME(t.Strictfp) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ExtendsInterfaces
        $.RULE("extendsInterfaces", () => {
          $.CONSUME(t.Extends);
          $.SUBRULE($.interfaceTypeList);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceBody
        $.RULE("interfaceBody", () => {
          $.CONSUME(t.LCurly);
          $.MANY(() => {
            $.SUBRULE($.interfaceMemberDeclaration);
          });
          $.CONSUME(t.RCurly);
        });

        const InterfaceBodyTypes = {
          unknown: 0,
          constantDeclaration: 1,
          interfaceMethodDeclaration: 2,
          classDeclaration: 3,
          interfaceDeclaration: 4,
          semiColon: 5,
        };

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMemberDeclaration
        $.RULE("interfaceMemberDeclaration", () => {
          const detectedType = this.BACKTRACK_LOOKAHEAD(
            $.identifyInterfaceBodyDeclarationType
          );

          $.OR([
            {
              GATE: () =>
                detectedType === InterfaceBodyTypes.constantDeclaration,
              ALT: () => $.SUBRULE($.constantDeclaration),
            },
            {
              GATE: () =>
                detectedType === InterfaceBodyTypes.interfaceMethodDeclaration,
              ALT: () => $.SUBRULE($.interfaceMethodDeclaration),
            },
            {
              GATE: () => detectedType === InterfaceBodyTypes.classDeclaration,
              ALT: () => $.SUBRULE($.classDeclaration),
            },
            {
              GATE: () =>
                detectedType === InterfaceBodyTypes.interfaceDeclaration,
              ALT: () => $.SUBRULE($.interfaceDeclaration),
            },
            {
              // No GATE is needed as this is LL(1)
              ALT: () => $.CONSUME(t.Semicolon),
            },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ConstantDeclaration
        $.RULE("constantDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.constantModifier);
          });
          $.SUBRULE($.unannType);
          $.SUBRULE($.variableDeclaratorList);
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ConstantModifier
        $.RULE("constantModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Static) },
            { ALT: () => $.CONSUME(t.Final) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMethodDeclaration
        $.RULE("interfaceMethodDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.interfaceMethodModifier);
          });
          $.SUBRULE($.methodHeader);
          $.SUBRULE($.methodBody);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMethodModifier
        $.RULE("interfaceMethodModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Private) },
            { ALT: () => $.CONSUME(t.Abstract) },
            { ALT: () => $.CONSUME(t.Default) },
            { ALT: () => $.CONSUME(t.Static) },
            { ALT: () => $.CONSUME(t.Strictfp) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeDeclaration
        $.RULE("annotationTypeDeclaration", () => {
          // Spec Deviation: The "interfaceModifier" prefix was extracted to the "interfaceDeclaration"
          $.CONSUME(t.At);
          $.CONSUME(t.Interface);
          $.SUBRULE($.typeIdentifier);
          $.SUBRULE($.annotationTypeBody);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeBody
        $.RULE("annotationTypeBody", () => {
          $.CONSUME(t.LCurly);
          $.MANY(() => {
            $.SUBRULE($.annotationTypeMemberDeclaration);
          });
          $.CONSUME(t.RCurly);
        });

        const AnnotationBodyTypes = {
          unknown: 0,
          annotationTypeElementDeclaration: 2,
          constantDeclaration: 1,
          classDeclaration: 3,
          interfaceDeclaration: 4,
          semiColon: 5,
        };

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-InterfaceMemberDeclaration
        $.RULE("annotationTypeMemberDeclaration", () => {
          const detectedType = this.BACKTRACK_LOOKAHEAD(
            $.identifyAnnotationBodyDeclarationType
          );

          $.OR([
            {
              GATE: () =>
                detectedType ===
                AnnotationBodyTypes.annotationTypeElementDeclaration,
              ALT: () => $.SUBRULE($.annotationTypeElementDeclaration),
            },
            {
              GATE: () =>
                detectedType === AnnotationBodyTypes.constantDeclaration,
              ALT: () => $.SUBRULE($.constantDeclaration),
            },
            {
              GATE: () => detectedType === AnnotationBodyTypes.classDeclaration,
              ALT: () => $.SUBRULE($.classDeclaration),
            },
            {
              GATE: () =>
                detectedType === AnnotationBodyTypes.interfaceDeclaration,
              ALT: () => $.SUBRULE($.interfaceDeclaration),
            },
            {
              // No GATE is needed as this is LL(1)
              ALT: () => $.CONSUME(t.Semicolon),
            },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeElementDeclaration
        $.RULE("annotationTypeElementDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.annotationTypeElementModifier);
          });
          $.SUBRULE($.unannType);
          $.CONSUME(t.Identifier);
          $.CONSUME(t.LBrace);
          $.CONSUME(t.RBrace);
          $.OPTION(() => {
            $.SUBRULE($.dims);
          });
          $.OPTION2(() => {
            $.SUBRULE($.defaultValue);
          });
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-AnnotationTypeElementModifier
        $.RULE("annotationTypeElementModifier", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.annotation) },
            { ALT: () => $.CONSUME(t.Public) },
            { ALT: () => $.CONSUME(t.Abstract) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-DefaultValue
        $.RULE("defaultValue", () => {
          $.CONSUME(t.Default);
          $.SUBRULE($.elementValue);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-Annotation
        $.RULE("annotation", () => {
          // Spec Deviation: The common prefix for all three annotation types was extracted to this rule.
          // This was done to avoid the use of backtracking for performance reasons.
          $.CONSUME(t.At);
          $.SUBRULE($.typeName);

          // If this optional grammar was not invoked we have a markerAnnotation
          // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-MarkerAnnotation
          $.OPTION(() => {
            $.CONSUME(t.LBrace);
            $.OR({
              DEF: [
                // normal annotation - https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-NormalAnnotation
                {
                  ALT: () => $.SUBRULE($.elementValuePairList),
                },
                // Single Element Annotation - https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-SingleElementAnnotation
                {
                  ALT: () => $.SUBRULE($.elementValue),
                },
                {
                  ALT: () => {
                    /* empty normal annotation contents */
                  },
                },
              ],
              IGNORE_AMBIGUITIES: true,
              MAX_LOOKAHEAD: 2,
            });
            $.CONSUME(t.RBrace);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValuePairList
        $.RULE("elementValuePairList", () => {
          $.SUBRULE($.elementValuePair);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.elementValuePair);
          });
        });

        $.RULE("elementValuePair", () => {
          $.CONSUME(t.Identifier);
          $.CONSUME(t.Equals);
          $.SUBRULE($.elementValue);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValue
        $.RULE("elementValue", () => {
          const isSimpleElementValueAnnotation = this.BACKTRACK_LOOKAHEAD(
            $.isSimpleElementValueAnnotation
          );

          $.OR([
            // Spec Deviation: "conditionalExpression" replaced with "expression"
            // Because we cannot differentiate between the two using fixed lookahead.
            {
              GATE: () => isSimpleElementValueAnnotation === false,
              ALT: () => $.SUBRULE($.expression),
            },
            {
              ALT: () => $.SUBRULE($.elementValueArrayInitializer),
            },
            {
              GATE: () => isSimpleElementValueAnnotation === true,
              ALT: () => $.SUBRULE($.annotation),
            },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValueArrayInitializer
        $.RULE("elementValueArrayInitializer", () => {
          $.CONSUME(t.LCurly);
          $.OPTION(() => {
            $.SUBRULE($.elementValueList);
          });
          $.OPTION2(() => {
            $.CONSUME(t.Comma);
          });
          $.CONSUME(t.RCurly);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-ElementValueList
        $.RULE("elementValueList", () => {
          $.SUBRULE($.elementValue);
          $.MANY({
            GATE: () => tokenMatcher($.LA(2).tokenType, t.RCurly) === false,
            DEF: () => {
              $.CONSUME(t.Comma);
              $.SUBRULE2($.elementValue);
            },
          });
        });

        // ------------------------------------
        // Special optimized backtracking rules.
        // ------------------------------------
        $.RULE("identifyInterfaceBodyDeclarationType", () => {
          let nextTokenType = this.LA(1).tokenType;
          if (tokenMatcher(nextTokenType, t.Semicolon)) {
            return InterfaceBodyTypes.semiColon;
          }

          // We have to look beyond the modifiers to distinguish between the declaration types.
          $.MANY({
            // To avoid ambiguity with @interface ("AnnotationTypeDeclaration" vs "Annotaion")
            GATE: () =>
              (tokenMatcher($.LA(1).tokenType, t.At) &&
                tokenMatcher($.LA(2).tokenType, t.Interface)) === false,
            DEF: () => {
              // This alternation includes all possible modifiers for all types of "interfaceMemberDeclaration"
              // Certain combinations are syntactically invalid, this is **not** checked here,
              // Invalid combinations will cause a descriptive parsing error message to be
              // Created inside the relevant parsing rules **after** this lookahead
              // analysis.
              $.OR([
                { ALT: () => $.SUBRULE($.annotation) },
                { ALT: () => $.CONSUME(t.Public) },
                { ALT: () => $.CONSUME(t.Protected) },
                { ALT: () => $.CONSUME(t.Private) },
                { ALT: () => $.CONSUME(t.Static) },
                { ALT: () => $.CONSUME(t.Final) },
                { ALT: () => $.CONSUME(t.Abstract) },
                { ALT: () => $.CONSUME(t.Default) },
                { ALT: () => $.CONSUME(t.Strictfp) },
              ]);
            },
          });

          nextTokenType = this.LA(1).tokenType;
          if (
            tokenMatcher(nextTokenType, t.Class) ||
            tokenMatcher(nextTokenType, t.Enum)
          ) {
            return InterfaceBodyTypes.classDeclaration;
          }
          if (
            tokenMatcher(nextTokenType, t.Interface) ||
            tokenMatcher(nextTokenType, t.At)
          ) {
            return InterfaceBodyTypes.interfaceDeclaration;
          }
          if (
            tokenMatcher(nextTokenType, t.Void) ||
            tokenMatcher(nextTokenType, t.Less)
          ) {
            // method with result type "void"
            return InterfaceBodyTypes.interfaceMethodDeclaration;
          }

          // Only constant or interfaceMethod declarations may be valid at this point.
          // All other alternatives should have been attempted.
          // **both** start with "unannType"
          this.SUBRULE($.unannType);

          const nextToken = this.LA(1);
          const nextNextTokenType = this.LA(2).tokenType;
          // "foo(..." --> look like method start
          if (
            tokenMatcher(nextToken, t.Identifier) &&
            tokenMatcher(nextNextTokenType, t.LBrace)
          ) {
            return InterfaceBodyTypes.interfaceMethodDeclaration;
          }
          // a valid constant
          if (tokenMatcher(nextToken, t.Identifier)) {
            return InterfaceBodyTypes.constantDeclaration;
          }
          return InterfaceBodyTypes.unknown;
        });

        $.RULE("identifyAnnotationBodyDeclarationType", () => {
          let nextTokenType = this.LA(1).tokenType;
          if (tokenMatcher(nextTokenType, t.Semicolon)) {
            return AnnotationBodyTypes.semiColon;
          }

          // We have to look beyond the modifiers to distinguish between the declaration types.
          $.MANY({
            // To avoid ambiguity with @interface ("AnnotationTypeDeclaration" vs "Annotaion")
            GATE: () =>
              (tokenMatcher($.LA(1).tokenType, t.At) &&
                tokenMatcher($.LA(2).tokenType, t.Interface)) === false,
            DEF: () => {
              // This alternation includes all possible modifiers for all types of "annotationTypeMemberDeclaration"
              // Certain combinations are syntactically invalid, this is **not** checked here,
              // Invalid combinations will cause a descriptive parsing error message to be
              // Created inside the relevant parsing rules **after** this lookahead
              // analysis.
              $.OR([
                { ALT: () => $.SUBRULE($.annotation) },
                { ALT: () => $.CONSUME(t.Public) },
                { ALT: () => $.CONSUME(t.Protected) },
                { ALT: () => $.CONSUME(t.Private) },
                { ALT: () => $.CONSUME(t.Abstract) },
                { ALT: () => $.CONSUME(t.Static) },
                { ALT: () => $.CONSUME(t.Final) },
                { ALT: () => $.CONSUME(t.Strictfp) },
              ]);
            },
          });

          nextTokenType = this.LA(1).tokenType;
          if (
            tokenMatcher(nextTokenType, t.Class) ||
            tokenMatcher(nextTokenType, t.Enum)
          ) {
            return AnnotationBodyTypes.classDeclaration;
          }
          if (
            tokenMatcher(nextTokenType, t.Interface) ||
            tokenMatcher(nextTokenType, t.At)
          ) {
            return AnnotationBodyTypes.interfaceDeclaration;
          }

          // Only constant or annotationTypeElement declarations may be valid at this point.
          // All other alternatives should have been attempted.
          // **both** start with "unannType"
          this.SUBRULE($.unannType);

          nextTokenType = this.LA(1).tokenType;
          const nextNextTokenType = this.LA(2).tokenType;
          // "foo(..." --> look like annotationTypeElement start
          if (
            tokenMatcher(nextTokenType, t.Identifier) &&
            tokenMatcher(nextNextTokenType, t.LBrace)
          ) {
            return AnnotationBodyTypes.annotationTypeElementDeclaration;
          }
          // a valid constant
          if (tokenMatcher(nextTokenType, t.Identifier)) {
            return AnnotationBodyTypes.constantDeclaration;
          }
          return AnnotationBodyTypes.unknown;
        });

        $.RULE("isSimpleElementValueAnnotation", () => {
          $.SUBRULE($.annotation);
          const nextTokenType = this.LA(1).tokenType;
          switch (nextTokenType) {
            // annotation in "ElementValue" would be followed by one of those
            // any other TokenType would indicate it is an annotation in a "referenceType"
            // as part of a "methodReference" in "primary"
            case t.Comma:
            case t.Semicolon:
            case t.RCurly:
            case t.RBrace:
              return true;
            default:
              return false;
          }
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 27 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { tokenMatcher } = __webpack_require__(1);

      function defineRules($, t) {
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-10.html#jls-ArrayInitializer
        $.RULE("arrayInitializer", () => {
          $.CONSUME(t.LCurly);
          $.OPTION(() => {
            $.SUBRULE($.variableInitializerList);
          });
          $.OPTION2(() => {
            $.CONSUME(t.Comma);
          });
          $.CONSUME(t.RCurly);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-10.html#jls-VariableInitializerList
        $.RULE("variableInitializerList", () => {
          $.SUBRULE($.variableInitializer);
          $.MANY({
            // The optional last "Comma" of an "arrayInitializer"
            GATE: () => tokenMatcher(this.LA(2).tokenType, t.RCurly) === false,
            DEF: () => {
              $.CONSUME(t.Comma);
              $.SUBRULE2($.variableInitializer);
            },
          });
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 28 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { tokenMatcher } = __webpack_require__(1);

      // Spec Deviation: The "*NoShortIf" variations were removed as the ambiguity of
      //                 the dangling else is resolved by attaching an "else" block
      //                 to the nearest "if"
      function defineRules($, t) {
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Block
        $.RULE("block", () => {
          $.CONSUME(t.LCurly);
          $.OPTION(() => {
            $.SUBRULE($.blockStatements);
          });
          $.CONSUME(t.RCurly);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BlockStatements
        $.RULE("blockStatements", () => {
          $.SUBRULE($.blockStatement);
          $.MANY(() => {
            $.SUBRULE2($.blockStatement);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BlockStatement
        $.RULE("blockStatement", () => {
          const isLocalVariableDeclaration = this.BACKTRACK_LOOKAHEAD(
            $.isLocalVariableDeclaration
          );

          const isClassDeclaration = this.BACKTRACK_LOOKAHEAD(
            $.isClassDeclaration
          );

          $.OR([
            {
              GATE: () => isLocalVariableDeclaration,
              ALT: () => $.SUBRULE($.localVariableDeclarationStatement),
            },
            {
              GATE: () => isClassDeclaration,
              ALT: () => $.SUBRULE($.classDeclaration),
            },
            { ALT: () => $.SUBRULE($.statement) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LocalVariableDeclaration
        $.RULE("localVariableDeclarationStatement", () => {
          $.SUBRULE($.localVariableDeclaration);
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LocalVariableDeclaration
        $.RULE("localVariableDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.localVariableType);
          $.SUBRULE($.variableDeclaratorList);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LocalVariableType
        $.RULE("localVariableType", () => {
          $.OR({
            DEF: [
              { ALT: () => $.SUBRULE($.unannType) },
              { ALT: () => $.CONSUME(t.Var) },
            ],
            IGNORE_AMBIGUITIES: true,
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Statement
        $.RULE("statement", () => {
          $.OR({
            DEF: [
              {
                ALT: () => $.SUBRULE($.statementWithoutTrailingSubstatement),
              },
              { ALT: () => $.SUBRULE($.labeledStatement) },
              // Spec deviation: combined "IfThenStatement" and "IfThenElseStatement"
              { ALT: () => $.SUBRULE($.ifStatement) },
              { ALT: () => $.SUBRULE($.whileStatement) },
              { ALT: () => $.SUBRULE($.forStatement) },
            ],
            MAX_LOOKAHEAD: 2,
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-StatementWithoutTrailingSubstatement
        $.RULE("statementWithoutTrailingSubstatement", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.block) },
            { ALT: () => $.SUBRULE($.emptyStatement) },
            { ALT: () => $.SUBRULE($.expressionStatement) },
            { ALT: () => $.SUBRULE($.assertStatement) },
            { ALT: () => $.SUBRULE($.switchStatement) },
            { ALT: () => $.SUBRULE($.doStatement) },
            { ALT: () => $.SUBRULE($.breakStatement) },
            { ALT: () => $.SUBRULE($.continueStatement) },
            { ALT: () => $.SUBRULE($.returnStatement) },
            { ALT: () => $.SUBRULE($.synchronizedStatement) },
            { ALT: () => $.SUBRULE($.throwStatement) },
            { ALT: () => $.SUBRULE($.tryStatement) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-EmptyStatement
        $.RULE("emptyStatement", () => {
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-LabeledStatement
        $.RULE("labeledStatement", () => {
          $.CONSUME(t.Identifier);
          $.CONSUME(t.Colon);
          $.SUBRULE($.statement);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ExpressionStatement
        $.RULE("expressionStatement", () => {
          $.SUBRULE($.statementExpression);
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-StatementExpression
        $.RULE("statementExpression", () => {
          // Spec deviation: The many alternatives here were replaced with
          //                 the "expression" rule as it contains them all,
          //                 and distinguishing between the alternatives cannot be done
          //                 using a fixed lookahead.
          // TODO: verify the resulting expression is one of the valid alternatives?
          $.SUBRULE($.expression);
        });

        // Spec deviation: combined "IfThenStatement" and "IfThenElseStatement"
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-IfThenStatement
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-IfThenElseStatement
        $.RULE("ifStatement", () => {
          $.CONSUME(t.If);
          $.CONSUME(t.LBrace);
          $.SUBRULE($.expression);
          $.CONSUME(t.RBrace);
          $.SUBRULE($.statement);
          $.OPTION(() => {
            $.CONSUME(t.Else);
            $.SUBRULE2($.statement);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-AssertStatement
        $.RULE("assertStatement", () => {
          $.CONSUME(t.Assert);
          $.SUBRULE($.expression);
          $.OPTION(() => {
            $.CONSUME(t.Colon);
            $.SUBRULE2($.expression);
          });
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SwitchStatement
        $.RULE("switchStatement", () => {
          $.CONSUME(t.Switch);
          $.CONSUME(t.LBrace);
          $.SUBRULE($.expression);
          $.CONSUME(t.RBrace);
          $.SUBRULE($.switchBlock);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SwitchBlock
        $.RULE("switchBlock", () => {
          $.CONSUME(t.LCurly);
          $.MANY(() => {
            // Spec Deviation: refactored "switchBlock" for easy post-processing
            //                 each case and block together in the same rule.
            $.SUBRULE($.switchCase);
          });
          $.CONSUME(t.RCurly);
        });

        $.RULE("switchCase", () => {
          $.SUBRULE($.switchLabel);
          $.OPTION(() => {
            $.SUBRULE($.blockStatements);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SwitchLabel
        $.RULE("switchLabel", () => {
          $.OR([
            {
              ALT: () => {
                $.CONSUME(t.Case);
                $.SUBRULE($.constantExpression);
                $.CONSUME(t.Colon);
              },
            },
            // SPEC Deviation: the variant with "enumConstantName" was removed
            // as it can be matched by the "constantExpression" variant
            // the distinction is semantic not syntactic.
            {
              ALT: () => {
                $.CONSUME(t.Default);
                $.CONSUME3(t.Colon);
              },
            },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-EnumConstantName
        $.RULE("enumConstantName", () => {
          $.CONSUME(t.Identifier);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-WhileStatement
        $.RULE("whileStatement", () => {
          $.CONSUME(t.While);
          $.CONSUME(t.LBrace);
          $.SUBRULE($.expression);
          $.CONSUME(t.RBrace);
          $.SUBRULE($.statement);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-DoStatement
        $.RULE("doStatement", () => {
          $.CONSUME(t.Do);
          $.SUBRULE($.statement);
          $.CONSUME(t.While);
          $.CONSUME(t.LBrace);
          $.SUBRULE($.expression);
          $.CONSUME(t.RBrace);
          $.CONSUME(t.Semicolon);
        });
        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ForStatement
        $.RULE("forStatement", () => {
          $.OR([
            {
              GATE: () => this.BACKTRACK_LOOKAHEAD($.isBasicForStatement),
              ALT: () => $.SUBRULE($.basicForStatement),
            },
            { ALT: () => $.SUBRULE($.enhancedForStatement) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BasicForStatement
        $.RULE("basicForStatement", () => {
          $.CONSUME(t.For);
          $.CONSUME(t.LBrace);
          $.OPTION(() => {
            $.SUBRULE($.forInit);
          });
          $.CONSUME(t.Semicolon);
          $.OPTION2(() => {
            $.SUBRULE($.expression);
          });
          $.CONSUME2(t.Semicolon);
          $.OPTION3(() => {
            $.SUBRULE($.forUpdate);
          });
          $.CONSUME(t.RBrace);
          $.SUBRULE($.statement);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ForInit
        $.RULE("forInit", () => {
          $.OR([
            {
              GATE: () => $.BACKTRACK_LOOKAHEAD($.isLocalVariableDeclaration),
              ALT: () => $.SUBRULE($.localVariableDeclaration),
            },
            { ALT: () => $.SUBRULE($.statementExpressionList) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ForUpdate
        $.RULE("forUpdate", () => {
          $.SUBRULE($.statementExpressionList);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-StatementExpressionList
        $.RULE("statementExpressionList", () => {
          $.SUBRULE($.statementExpression);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.statementExpression);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-EnhancedForStatement
        $.RULE("enhancedForStatement", () => {
          $.CONSUME(t.For);
          $.CONSUME(t.LBrace);
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.localVariableType);
          $.SUBRULE($.variableDeclaratorId);
          $.CONSUME(t.Colon);
          $.SUBRULE($.expression);
          $.CONSUME(t.RBrace);
          $.SUBRULE($.statement);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-BreakStatement
        $.RULE("breakStatement", () => {
          $.CONSUME(t.Break);
          $.OPTION(() => {
            $.CONSUME(t.Identifier);
          });
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ContinueStatement
        $.RULE("continueStatement", () => {
          $.CONSUME(t.Continue);
          $.OPTION(() => {
            $.CONSUME(t.Identifier);
          });
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ReturnStatement
        $.RULE("returnStatement", () => {
          $.CONSUME(t.Return);
          $.OPTION(() => {
            $.SUBRULE($.expression);
          });
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ThrowStatement
        $.RULE("throwStatement", () => {
          $.CONSUME(t.Throw);
          $.SUBRULE($.expression);
          $.CONSUME(t.Semicolon);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-SynchronizedStatement
        $.RULE("synchronizedStatement", () => {
          $.CONSUME(t.Synchronized);
          $.CONSUME(t.LBrace);
          $.SUBRULE($.expression);
          $.CONSUME(t.RBrace);
          $.SUBRULE($.block);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-TryStatement
        $.RULE("tryStatement", () => {
          $.OR({
            DEF: [
              {
                ALT: () => {
                  $.CONSUME(t.Try);
                  $.SUBRULE($.block);
                  $.OR2([
                    {
                      ALT: () => {
                        $.SUBRULE($.catches);
                        $.OPTION(() => {
                          $.SUBRULE($.finally);
                        });
                      },
                    },
                    { ALT: () => $.SUBRULE2($.finally) },
                  ]);
                },
              },
              {
                ALT: () => $.SUBRULE($.tryWithResourcesStatement),
              },
            ],
            MAX_LOOKAHEAD: 2,
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Catches
        $.RULE("catches", () => {
          $.SUBRULE($.catchClause);
          $.MANY(() => {
            $.SUBRULE2($.catchClause);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-CatchClause
        $.RULE("catchClause", () => {
          $.CONSUME(t.Catch);
          $.CONSUME(t.LBrace);
          $.SUBRULE($.catchFormalParameter);
          $.CONSUME(t.RBrace);
          $.SUBRULE($.block);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-CatchFormalParameter
        $.RULE("catchFormalParameter", () => {
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.catchType);
          $.SUBRULE($.variableDeclaratorId);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-CatchType
        $.RULE("catchType", () => {
          $.SUBRULE($.unannClassType);
          $.MANY(() => {
            $.CONSUME(t.Or);
            $.SUBRULE2($.classType);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Finally
        $.RULE("finally", () => {
          $.CONSUME(t.Finally);
          $.SUBRULE($.block);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-TryWithResourcesStatement
        $.RULE("tryWithResourcesStatement", () => {
          $.CONSUME(t.Try);
          $.SUBRULE($.resourceSpecification);
          $.SUBRULE($.block);
          $.OPTION(() => {
            $.SUBRULE($.catches);
          });
          $.OPTION2(() => {
            $.SUBRULE($.finally);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ResourceSpecification
        $.RULE("resourceSpecification", () => {
          $.CONSUME(t.LBrace);
          $.SUBRULE($.resourceList);
          $.OPTION(() => {
            $.CONSUME(t.Semicolon);
          });
          $.CONSUME(t.RBrace);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-ResourceList
        $.RULE("resourceList", () => {
          $.SUBRULE($.resource);
          $.MANY({
            GATE: () => tokenMatcher($.LA(2).tokenType, t.RBrace) === false,
            DEF: () => {
              $.CONSUME(t.Semicolon);
              $.SUBRULE2($.resource);
            },
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-Resource
        $.RULE("resource", () => {
          $.OR([
            {
              GATE: $.BACKTRACK($.resourceInit),
              // Spec Deviation: extracted this alternative to "resourceInit"
              //                 to enable backtracking.
              ALT: () => $.SUBRULE($.resourceInit),
            },
            { ALT: () => $.SUBRULE($.variableAccess) },
          ]);
        });

        // Spec Deviation: extracted from "resource"
        $.RULE("resourceInit", () => {
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.localVariableType);
          $.CONSUME(t.Identifier);
          $.CONSUME(t.Equals);
          $.SUBRULE($.expression);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-VariableAccess
        $.RULE("variableAccess", () => {
          // Spec Deviation: both "expressionName" and "fieldAccess" can be parsed
          //                 by the "primary" rule
          // TODO: verify that the primary is a fieldAccess or an expressionName.
          $.SUBRULE($.primary);
        });

        // ------------------------------------
        // Special optimized backtracking rules.
        // ------------------------------------
        $.RULE("isBasicForStatement", () => {
          $.CONSUME(t.For);
          $.CONSUME(t.LBrace);
          $.OPTION(() => {
            $.SUBRULE($.forInit);
          });
          $.CONSUME(t.Semicolon);
          // consuming the first semiColon distinguishes between
          // "basic" and "enhanced" for statements
          return true;
        });

        $.RULE("isLocalVariableDeclaration", () => {
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.localVariableType);
          $.SUBRULE($.variableDeclaratorId);

          const nextTokenType = this.LA(1).tokenType;
          switch (nextTokenType) {
            // Int x;
            case t.Semicolon:
            // Int x, y, z;
            case t.Comma:
            // Int x = 5;
            case t.Equals:
              return true;
            default:
              return false;
          }
        });
      }

      module.exports = {
        defineRules,
      };

      /***/
    },
    /* 29 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { tokenMatcher } = __webpack_require__(1);
      function defineRules($, t) {
        $.RULE("constantExpression", () => {
          $.SUBRULE($.expression);
        });

        $.RULE("expression", () => {
          $.OR([
            {
              GATE: () => this.BACKTRACK_LOOKAHEAD($.isLambdaExpression),
              ALT: () => $.SUBRULE($.lambdaExpression),
            },
            { ALT: () => $.SUBRULE($.ternaryExpression) },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-LambdaExpression
        $.RULE("lambdaExpression", () => {
          $.SUBRULE($.lambdaParameters);
          $.CONSUME(t.Arrow);
          $.SUBRULE($.lambdaBody);
        });

        $.RULE("lambdaParameters", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.lambdaParametersWithBraces) },
            { ALT: () => $.CONSUME(t.Identifier) },
          ]);
        });

        $.RULE("lambdaParametersWithBraces", () => {
          $.CONSUME(t.LBrace);
          $.OPTION(() => {
            $.SUBRULE($.lambdaParameterList);
          });
          $.CONSUME(t.RBrace);
        });

        $.RULE("lambdaParameterList", () => {
          $.OR([
            {
              GATE: () => {
                const nextTokType = this.LA(1).tokenType;
                const nextNextTokType = this.LA(2).tokenType;
                return (
                  tokenMatcher(nextTokType, t.Identifier) &&
                  (tokenMatcher(nextNextTokType, t.RBrace) ||
                    tokenMatcher(nextNextTokType, t.Comma))
                );
              },
              ALT: () => $.SUBRULE($.inferredLambdaParameterList),
            },
            { ALT: () => $.SUBRULE($.explicitLambdaParameterList) },
          ]);
        });

        $.RULE("inferredLambdaParameterList", () => {
          $.CONSUME(t.Identifier);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.CONSUME2(t.Identifier);
          });
        });

        $.RULE("explicitLambdaParameterList", () => {
          $.SUBRULE($.lambdaParameter);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.lambdaParameter);
          });
        });

        $.RULE("lambdaParameter", () => {
          // TODO: performance, investigate the performance boost that could
          //       be gained by refactoring out the backtracking.
          $.OR([
            {
              GATE: $.BACKTRACK($.regularLambdaParameter),
              ALT: () => $.SUBRULE($.regularLambdaParameter),
            },
            { ALT: () => $.SUBRULE($.variableArityParameter) },
          ]);
        });

        $.RULE("regularLambdaParameter", () => {
          $.MANY(() => {
            $.SUBRULE($.variableModifier);
          });
          $.SUBRULE($.lambdaParameterType);
          $.SUBRULE($.variableDeclaratorId);
        });

        $.RULE("lambdaParameterType", () => {
          $.OR({
            DEF: [
              { ALT: () => $.SUBRULE($.unannType) },
              { ALT: () => $.CONSUME(t.Var) },
            ],
            IGNORE_AMBIGUITIES: true,
          });
        });

        $.RULE("lambdaBody", () => {
          $.OR([
            { ALT: () => $.SUBRULE($.expression) },
            { ALT: () => $.SUBRULE($.block) },
          ]);
        });

        $.RULE("ternaryExpression", () => {
          $.SUBRULE($.binaryExpression);
          $.OPTION(() => {
            $.CONSUME(t.QuestionMark);
            $.SUBRULE($.expression);
            $.CONSUME(t.Colon);
            // TODO: in the grammar this is limited to "lambdaExpression: or "conditionalExpression"
            $.SUBRULE2($.expression);
          });
        });

        $.RULE("binaryExpression", () => {
          $.SUBRULE($.unaryExpression);
          $.MANY(() => {
            $.OR({
              DEF: [
                {
                  ALT: () => {
                    $.CONSUME(t.Instanceof);
                    $.SUBRULE($.referenceType);
                  },
                },
                {
                  ALT: () => {
                    $.CONSUME(t.AssignmentOperator);
                    $.SUBRULE2($.expression);
                  },
                },
                // This is an example of why Java does not have a well designed grammar
                // See: https://manas.tech/blog/2008/10/12/why-java-generics-dont-have-problems-with-right-shift-operator.html
                // TODO: ensure the LT/GT sequences have no whitespace between each other.
                {
                  // TODO: this is a bug in Chevrotain lookahead calculation. the "BinaryOperator" token can match "Less" or "Greater"
                  //   as well, but because it is a **token Category** Chevrotain does not understand it need to looks two tokens ahead.
                  GATE: () =>
                    tokenMatcher($.LA(2).tokenType, t.Less) ||
                    tokenMatcher($.LA(2).tokenType, t.Greater),
                  ALT: () => {
                    $.OR2([
                      {
                        GATE: () =>
                          $.LA(1).startOffset + 1 === $.LA(2).startOffset,
                        ALT: () => {
                          $.CONSUME(t.Less);
                          $.CONSUME2(t.Less);
                        },
                      },
                      {
                        GATE: () =>
                          $.LA(1).startOffset + 1 === $.LA(2).startOffset,
                        ALT: () => {
                          $.CONSUME(t.Greater);
                          $.CONSUME2(t.Greater);
                          $.OPTION({
                            GATE: () =>
                              $.LA(0).startOffset + 1 === $.LA(1).startOffset,
                            DEF: () => $.CONSUME3(t.Greater),
                          });
                        },
                      },
                    ]);
                    $.SUBRULE2($.unaryExpression);
                  },
                },
                {
                  ALT: () => {
                    $.CONSUME(t.BinaryOperator);
                    $.SUBRULE3($.unaryExpression);
                  },
                },
              ],
              IGNORE_AMBIGUITIES: true, // the ambiguity between 1 and 4 options is resolved by the order (instanceOf is first)
            });
          });
        });

        $.RULE("unaryExpression", () => {
          $.MANY(() => {
            $.CONSUME(t.UnaryPrefixOperator);
          });
          $.SUBRULE($.primary);
          $.MANY2(() => {
            $.CONSUME(t.UnarySuffixOperator);
          });
        });

        $.RULE("unaryExpressionNotPlusMinus", () => {
          $.MANY(() => {
            $.CONSUME(t.UnaryPrefixOperatorNotPlusMinus);
          });
          $.SUBRULE($.primary);
          $.MANY2(() => {
            $.CONSUME(t.UnarySuffixOperator);
          });
        });

        $.RULE("primary", () => {
          $.SUBRULE($.primaryPrefix);
          $.MANY(() => {
            $.SUBRULE($.primarySuffix);
          });
        });

        $.RULE("primaryPrefix", () => {
          let isCastExpression = false;
          if (tokenMatcher($.LA(1).tokenType, t.LBrace)) {
            isCastExpression = this.BACKTRACK_LOOKAHEAD($.isCastExpression);
          }

          $.OR([
            { ALT: () => $.SUBRULE($.literal) },
            { ALT: () => $.CONSUME(t.This) },
            { ALT: () => $.CONSUME(t.Void) },
            // should be extracted to primitive type with optional dims suffix?
            { ALT: () => $.SUBRULE($.numericType) },
            { ALT: () => $.CONSUME(t.Boolean) },
            { ALT: () => $.SUBRULE($.fqnOrRefType) },
            {
              GATE: () => isCastExpression,
              ALT: () => $.SUBRULE($.castExpression),
            },
            { ALT: () => $.SUBRULE($.parenthesisExpression) },
            { ALT: () => $.SUBRULE($.newExpression) },
          ]);
        });

        $.RULE("primarySuffix", () => {
          $.OR({
            DEF: [
              {
                ALT: () => {
                  $.CONSUME(t.Dot);
                  $.OR2([
                    { ALT: () => $.CONSUME(t.This) },
                    {
                      ALT: () =>
                        $.SUBRULE($.unqualifiedClassInstanceCreationExpression),
                    },
                    {
                      ALT: () => {
                        $.OPTION(() => {
                          $.SUBRULE($.typeArguments);
                        });
                        $.CONSUME(t.Identifier);
                      },
                    },
                  ]);
                },
              },
              { ALT: () => $.SUBRULE($.methodInvocationSuffix) },
              { ALT: () => $.SUBRULE($.classLiteralSuffix) },
              { ALT: () => $.SUBRULE($.arrayAccessSuffix) },
              { ALT: () => $.SUBRULE($.methodReferenceSuffix) },
            ],
            MAX_LOOKAHEAD: 2,
          });
        });

        // See https://github.com/jhipster/prettier-java/pull/154 to understand
        // why fqnOrRefTypePart is split in two rules (First and Rest)
        $.RULE("fqnOrRefType", () => {
          $.SUBRULE($.fqnOrRefTypePartFirst);

          $.MANY2({
            // ".class" is a classLiteralSuffix
            GATE: () =>
              // avoids ambiguity with ".this" and ".new" which are parsed as a primary suffix.
              tokenMatcher(this.LA(2).tokenType, t.Class) === false &&
              tokenMatcher(this.LA(2).tokenType, t.This) === false &&
              tokenMatcher(this.LA(2).tokenType, t.New) === false,
            DEF: () => {
              $.CONSUME(t.Dot);
              $.SUBRULE2($.fqnOrRefTypePartRest);
            },
          });

          // in case of an arrayType
          $.OPTION({
            // it is not enough to check only the opening "[", we must avoid conflict with
            // arrayAccessSuffix
            GATE: () =>
              tokenMatcher($.LA(1).tokenType, t.At) ||
              tokenMatcher($.LA(2).tokenType, t.RSquare),
            DEF: () => {
              $.SUBRULE($.dims);
            },
          });
        });

        // TODO: validation:
        //       1. "annotation" cannot be mixed with "methodTypeArguments" or "Super".
        //       2. "methodTypeArguments" cannot be mixed with "classTypeArguments" or "annotation".
        //       3. "Super" cannot be mixed with "classTypeArguments" or "annotation".
        //       4. At most one "Super" may be used.
        //       5. "Super" may be last or one before last (last may also be first if there is only a single part).
        $.RULE("fqnOrRefTypePartRest", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });

          $.OPTION({
            NAME: "$methodTypeArguments",
            DEF: () => {
              $.SUBRULE2($.typeArguments);
            },
          });

          $.SUBRULE($.fqnOrRefTypePartCommon);
        });

        $.RULE("fqnOrRefTypePartCommon", () => {
          $.OR([
            { ALT: () => $.CONSUME(t.Identifier) },
            { ALT: () => $.CONSUME(t.Super) },
          ]);

          let isRefTypeInMethodRef = false;
          // Performance optimization, only perform this backtracking when a '<' is found
          // TODO: performance optimization evaluation: avoid doing this backtracking for every "<" encountered.
          //       we could do it once (using global state) per "fqnOrRefType"
          // We could do it only once for
          if (tokenMatcher($.LA(1).tokenType, t.Less)) {
            isRefTypeInMethodRef = this.BACKTRACK_LOOKAHEAD(
              $.isRefTypeInMethodRef
            );
          }

          $.OPTION2({
            NAME: "$classTypeArguments",
            // unrestricted typeArguments here would create an ambiguity with "LessThan" operator
            // e.g: "var x = a < b;"
            // The "<" would be parsed as the beginning of a "typeArguments"
            // and we will get an error: "expecting '>' but found: ';'"
            GATE: () => isRefTypeInMethodRef,
            DEF: () => {
              $.SUBRULE3($.typeArguments);
            },
          });
        });

        $.RULE("fqnOrRefTypePartFirst", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });

          $.SUBRULE($.fqnOrRefTypePartCommon);
        });

        $.RULE("parenthesisExpression", () => {
          $.CONSUME(t.LBrace);
          $.SUBRULE($.expression);
          $.CONSUME(t.RBrace);
        });

        $.RULE("castExpression", () => {
          $.OR([
            {
              // TODO: performance: can avoid backtracking again here, parent rule could have this information
              //       when it checks isCastExpression (refactor needed)
              GATE: () => this.BACKTRACK_LOOKAHEAD($.isPrimitiveCastExpression),
              ALT: () => $.SUBRULE($.primitiveCastExpression),
            },
            { ALT: () => $.SUBRULE($.referenceTypeCastExpression) },
          ]);
        });

        $.RULE("primitiveCastExpression", () => {
          $.CONSUME(t.LBrace);
          $.SUBRULE($.primitiveType);
          $.CONSUME(t.RBrace);
          $.SUBRULE($.unaryExpression);
        });

        $.RULE("referenceTypeCastExpression", () => {
          $.CONSUME(t.LBrace);
          $.SUBRULE($.referenceType);
          $.MANY(() => {
            $.SUBRULE($.additionalBound);
          });
          $.CONSUME(t.RBrace);
          $.OR([
            {
              GATE: () => this.BACKTRACK_LOOKAHEAD($.isLambdaExpression),
              ALT: () => $.SUBRULE($.lambdaExpression),
            },
            { ALT: () => $.SUBRULE($.unaryExpressionNotPlusMinus) },
          ]);
        });

        const newExpressionTypes = {
          arrayCreationExpression: 1,
          unqualifiedClassInstanceCreationExpression: 2,
        };
        $.RULE("newExpression", () => {
          const type = this.BACKTRACK_LOOKAHEAD($.identifyNewExpressionType);

          $.OR([
            {
              GATE: () => type === newExpressionTypes.arrayCreationExpression,
              ALT: () => $.SUBRULE($.arrayCreationExpression),
            },
            {
              GATE: () =>
                type ===
                newExpressionTypes.unqualifiedClassInstanceCreationExpression,
              ALT: () =>
                $.SUBRULE($.unqualifiedClassInstanceCreationExpression),
            },
          ]);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-UnqualifiedClassInstanceCreationExpression
        $.RULE("unqualifiedClassInstanceCreationExpression", () => {
          $.CONSUME(t.New);
          $.OPTION(() => {
            $.SUBRULE($.typeArguments);
          });
          $.SUBRULE($.classOrInterfaceTypeToInstantiate);
          $.CONSUME(t.LBrace);
          $.OPTION2(() => {
            $.SUBRULE($.argumentList);
          });
          $.CONSUME(t.RBrace);
          $.OPTION3(() => {
            $.SUBRULE($.classBody);
          });
        });

        $.RULE("classOrInterfaceTypeToInstantiate", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.CONSUME(t.Identifier);
          $.MANY2(() => {
            $.CONSUME(t.Dot);
            $.MANY3(() => {
              $.SUBRULE2($.annotation);
            });
            $.CONSUME2(t.Identifier);
          });
          $.OPTION(() => {
            $.SUBRULE($.typeArgumentsOrDiamond);
          });
        });

        $.RULE("typeArgumentsOrDiamond", () => {
          $.OR({
            DEF: [
              { ALT: () => $.SUBRULE($.diamond) },
              { ALT: () => $.SUBRULE($.typeArguments) },
            ],
            MAX_LOOKAHEAD: 2,
          });
        });

        $.RULE("diamond", () => {
          $.CONSUME(t.Less);
          $.CONSUME(t.Greater);
        });

        $.RULE("methodInvocationSuffix", () => {
          $.CONSUME(t.LBrace);
          $.OPTION2(() => {
            $.SUBRULE($.argumentList);
          });
          $.CONSUME(t.RBrace);
        });

        $.RULE("argumentList", () => {
          $.SUBRULE($.expression);
          $.MANY(() => {
            $.CONSUME(t.Comma);
            $.SUBRULE2($.expression);
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-15.10.1
        $.RULE("arrayCreationExpression", () => {
          $.CONSUME(t.New);
          $.OR([
            {
              GATE: $.BACKTRACK($.primitiveType),
              ALT: () => $.SUBRULE($.primitiveType),
            },
            { ALT: () => $.SUBRULE($.classOrInterfaceType) },
          ]);

          $.OR2([
            {
              GATE: $.BACKTRACK($.arrayCreationDefaultInitSuffix),
              ALT: () => $.SUBRULE($.arrayCreationDefaultInitSuffix),
            },
            {
              ALT: () => $.SUBRULE($.arrayCreationExplicitInitSuffix),
            },
          ]);
        });

        $.RULE("arrayCreationDefaultInitSuffix", () => {
          $.SUBRULE($.dimExprs);
          $.OPTION(() => {
            $.SUBRULE($.dims);
          });
        });

        $.RULE("arrayCreationExplicitInitSuffix", () => {
          $.SUBRULE($.dims);
          $.SUBRULE($.arrayInitializer);
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-DimExprs
        $.RULE("dimExprs", () => {
          $.SUBRULE($.dimExpr);
          $.MANY({
            // The GATE is to distinguish DimExpr from Dims :
            // the only difference between these two is the presence of an expression in the DimExpr
            // Example: If the GATE is not present double[3][] won't be parsed as the parser will try to parse "[]"
            // as a dimExpr instead of a dims
            GATE: () => tokenMatcher($.LA(2).tokenType, t.RSquare) === false,
            DEF: () => $.SUBRULE2($.dimExpr),
          });
        });

        // https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-DimExpr
        $.RULE("dimExpr", () => {
          $.MANY(() => {
            $.SUBRULE($.annotation);
          });
          $.CONSUME(t.LSquare);
          $.SUBRULE($.expression);
          $.CONSUME(t.RSquare);
        });

        $.RULE("classLiteralSuffix", () => {
          $.MANY(() => {
            $.CONSUME(t.LSquare);
            $.CONSUME(t.RSquare);
          });
          $.CONSUME(t.Dot);
          $.CONSUME(t.Class);
        });

        $.RULE("arrayAccessSuffix", () => {
          $.CONSUME(t.LSquare);
          $.SUBRULE($.expression);
          $.CONSUME(t.RSquare);
        });

        $.RULE("methodReferenceSuffix", () => {
          $.CONSUME(t.ColonColon);
          $.OPTION(() => {
            $.SUBRULE($.typeArguments);
          });

          $.OR([
            { ALT: () => $.CONSUME(t.Identifier) },
            // TODO: a constructor method reference ("new") can only be used
            //   in specific contexts, but perhaps this verification is best left
            //   for a semantic analysis phase
            { ALT: () => $.CONSUME(t.New) },
          ]);
        });

        // backtracking lookahead logic
        $.RULE("identifyNewExpressionType", () => {
          $.CONSUME(t.New);
          const firstTokenAfterNew = this.LA(1).tokenType;

          // not an array initialization due to the prefix "TypeArguments"
          if (tokenMatcher(firstTokenAfterNew, t.Less)) {
            return newExpressionTypes.unqualifiedClassInstanceCreationExpression;
          }

          try {
            $.SUBRULE($.classOrInterfaceTypeToInstantiate);
          } catch (e) {
            // if it is not a "classOrInterfaceTypeToInstantiate" then
            // (assuming a valid input) we are looking at an "arrayCreationExpression"
            return newExpressionTypes.arrayCreationExpression;
          }

          const firstTokenAfterClassType = this.LA(1).tokenType;
          if (tokenMatcher(firstTokenAfterClassType, t.LBrace)) {
            return newExpressionTypes.unqualifiedClassInstanceCreationExpression;
          }

          // The LBrace above is mandatory in "classInstanceCreation..." so
          // it must be an "arrayCreationExp" (if the input is valid)
          // TODO: upgrade the logic to return "unknown" type if at this
          //       point it does not match "arrayCreation" either.
          //   - This will provide a better error message to the user
          //     in case of invalid inputs
          return newExpressionTypes.arrayCreationExpression;
        });

        // Optimized backtracking, only scan ahead until the arrow("->").
        $.RULE("isLambdaExpression", () => {
          // TODO: this check of next two tokens is probably redundant as the normal lookahead should take care of this.
          const firstTokenType = this.LA(1).tokenType;
          const secondTokenType = this.LA(2).tokenType;
          // no parent lambda "x -> x * 2"
          if (
            tokenMatcher(firstTokenType, t.Identifier) &&
            tokenMatcher(secondTokenType, t.Arrow)
          ) {
            return true;
          }
          // Performance optimizations, fail fast if it is not a LBrace.
          else if (tokenMatcher(firstTokenType, t.LBrace)) {
            $.SUBRULE($.lambdaParametersWithBraces);
            const followedByArrow = tokenMatcher(this.LA(1).tokenType, t.Arrow);
            return followedByArrow;
          }
          return false;
        });

        $.RULE("isCastExpression", () => {
          if (this.BACKTRACK_LOOKAHEAD($.isPrimitiveCastExpression)) {
            return true;
          }
          return this.BACKTRACK_LOOKAHEAD($.isReferenceTypeCastExpression);
        });

        $.RULE("isPrimitiveCastExpression", () => {
          $.CONSUME(t.LBrace);
          $.SUBRULE($.primitiveType);
          // No dims so this is not a reference Type
          $.CONSUME(t.RBrace);
          return true;
        });

        $.RULE("isReferenceTypeCastExpression", () => {
          $.CONSUME(t.LBrace);
          $.SUBRULE($.referenceType);
          $.MANY(() => {
            $.SUBRULE($.additionalBound);
          });
          $.CONSUME(t.RBrace);
          const firstTokTypeAfterRBrace = this.LA(1).tokenType;

          return (
            this.firstForUnaryExpressionNotPlusMinus.find((tokType) =>
              tokenMatcher(firstTokTypeAfterRBrace, tokType)
            ) !== undefined
          );
        });

        $.RULE("isRefTypeInMethodRef", () => {
          let result = undefined;
          $.SUBRULE($.typeArguments);

          // arrayType
          const hasDims = $.OPTION(() => {
            $.SUBRULE($.dims);
          });

          const firstTokTypeAfterTypeArgs = this.LA(1).tokenType;
          if (tokenMatcher(firstTokTypeAfterTypeArgs, t.ColonColon)) {
            result = true;
          }
          // we must be at the end of a "referenceType" if "dims" were encountered
          // So there is not point to check farther
          else if (hasDims) {
            result = false;
          }

          // in the middle of a "classReferenceType"
          $.OPTION2(() => {
            $.CONSUME(t.Dot);
            $.SUBRULE($.classOrInterfaceType);
          });

          if (result !== undefined) {
            return result;
          }

          const firstTokTypeAfterRefType = this.LA(1).tokenType;
          return tokenMatcher(firstTokTypeAfterRefType, t.ColonColon);
        });
      }

      function computeFirstForUnaryExpressionNotPlusMinus() {
        const firstUnaryExpressionNotPlusMinus = this.computeContentAssist(
          "unaryExpressionNotPlusMinus",
          []
        );
        const nextTokTypes = firstUnaryExpressionNotPlusMinus.map(
          (x) => x.nextTokenType
        );
        // uniq
        return nextTokTypes.filter((v, i, a) => a.indexOf(v) === i);
      }

      module.exports = {
        defineRules,
        computeFirstForUnaryExpressionNotPlusMinus,
      };

      /***/
    },
    /* 30 */
    /***/ function (module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};
          module.paths = [];
          // module.parent = undefined by default
          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function () {
              return module.l;
            },
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function () {
              return module.i;
            },
          });
          module.webpackPolyfill = 1;
        }
        return module;
      };

      /***/
    },
    /* 31 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { createPrettierDoc } = __webpack_require__(32);

      // eslint-disable-next-line no-unused-vars
      function genericPrint(path, options, print) {
        const node = path.getValue();
        // console.log(node);
        // if (node.comments) {
        //   console.log(node.type, node.comments);
        // }

        // node["comments"] = [
        //   {
        //     ast_type: "comment",
        //     value: "// a",
        //     leading: false,
        //     trailing: true,
        //     printed: false
        //   },
        //   {
        //     ast_type: "comment",
        //     value: "// b",
        //     leading: true,
        //     trailing: false,
        //     printed: false
        //   }
        // ];

        return createPrettierDoc(node, options);
      }

      module.exports = genericPrint;

      /***/
    },
    /* 32 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { BaseJavaCstVisitor } = __webpack_require__(10);
      const { ArraysPrettierVisitor } = __webpack_require__(33);
      const { BlocksAndStatementPrettierVisitor } = __webpack_require__(34);
      const { ClassesPrettierVisitor } = __webpack_require__(35);
      const { ExpressionsPrettierVisitor } = __webpack_require__(36);
      const { InterfacesPrettierVisitor } = __webpack_require__(38);
      const { LexicalStructurePrettierVisitor } = __webpack_require__(39);
      const { NamesPrettierVisitor } = __webpack_require__(40);
      const { TypesValuesAndVariablesPrettierVisitor } =
        __webpack_require__(41);
      const { PackagesAndModulesPrettierVisitor } = __webpack_require__(42);
      const { printNodeWithComments } = __webpack_require__(2);

      class CstPrettierPrinter extends BaseJavaCstVisitor {
        constructor() {
          super();
          // TODO: can we ignore the optimized lookahead methods here?
          this.validateVisitor();

          // TODO: this methods should be defined on the prototype
          // defining as instance members **after** the validations to avoid
          // false positive errors on redundant methods
          this.mapVisit = (elements, params) => {
            if (elements === undefined) {
              // TODO: can optimize this by returning an immutable empty array singleton.
              return [];
            }

            return elements.map((element) => this.visit(element, params), this);
          };

          this.getSingle = function (ctx) {
            const ctxKeys = Object.keys(ctx);
            if (ctxKeys.length !== 1) {
              throw Error(
                `Expecting single key CST ctx but found: <${ctxKeys.length}> keys`
              );
            }
            const singleElementKey = ctxKeys[0];
            const singleElementValues = ctx[singleElementKey];

            if (singleElementValues.length !== 1) {
              throw Error(
                `Expecting single item in CST ctx key but found: <${singleElementValues.length}> items`
              );
            }

            return singleElementValues[0];
          };

          this.visitSingle = function (ctx, params) {
            const singleElement = this.getSingle(ctx);
            return this.visit(singleElement, params);
          };

          // hack to get a reference to the inherited visit method from
          // the prototype because we cannot user "super.visit" inside the function
          // below
          const orgVisit = this.visit;
          this.visit = function (ctx, inParam) {
            if (ctx === undefined) {
              // empty Doc
              return "";
            }

            const node = Array.isArray(ctx) ? ctx[0] : ctx;

            if (node.ignore) {
              try {
                const startOffset =
                  node.leadingComments !== undefined
                    ? node.leadingComments[0].startOffset
                    : node.location.startOffset;
                const endOffset =
                  node.trailingComments !== undefined
                    ? node.trailingComments[node.trailingComments.length - 1]
                        .endOffset
                    : node.location.endOffset;

                return this.prettierOptions.originalText.substring(
                  startOffset,
                  endOffset + 1
                );
              } catch (e) {
                throw Error(
                  e +
                    "\nThere might be a problem with prettier-ignore, please report an issue on https://github.com/jhipster/prettier-java/issues"
                );
              }
            }

            return printNodeWithComments(
              node,
              orgVisit.call(this, node, inParam)
            );
          };
        }
      }

      // Mixins for the win
      mixInMethods(
        ArraysPrettierVisitor,
        BlocksAndStatementPrettierVisitor,
        ClassesPrettierVisitor,
        ExpressionsPrettierVisitor,
        InterfacesPrettierVisitor,
        LexicalStructurePrettierVisitor,
        NamesPrettierVisitor,
        TypesValuesAndVariablesPrettierVisitor,
        PackagesAndModulesPrettierVisitor
      );

      function mixInMethods(...classesToMix) {
        classesToMix.forEach((from) => {
          const fromMethodsNames = Object.getOwnPropertyNames(from.prototype);
          const fromPureMethodsName = fromMethodsNames.filter(
            (methodName) => methodName !== "constructor"
          );
          fromPureMethodsName.forEach((methodName) => {
            CstPrettierPrinter.prototype[methodName] =
              from.prototype[methodName];
          });
        });
      }

      const prettyPrinter = new CstPrettierPrinter();

      // TODO: do we need the "path" and "print" arguments passed by prettier
      // see https://github.com/prettier/prettier/issues/5747
      function createPrettierDoc(cstNode, options) {
        prettyPrinter.prettierOptions = options;
        return prettyPrinter.visit(cstNode);
      }

      module.exports = {
        CstPrettierPrinter,
        createPrettierDoc,
      };

      /***/
    },
    /* 33 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { line } = __webpack_require__(3).doc.builders;
      const { rejectAndConcat, rejectAndJoinSeps, printArrayList } =
        __webpack_require__(4);

      class ArraysPrettierVisitor {
        arrayInitializer(ctx) {
          const optionalVariableInitializerList = this.visit(
            ctx.variableInitializerList
          );

          return printArrayList({
            list: optionalVariableInitializerList,
            extraComma: ctx.Comma,
            LCurly: ctx.LCurly[0],
            RCurly: ctx.RCurly[0],
            trailingComma: this.prettierOptions.trailingComma,
          });
        }

        variableInitializerList(ctx) {
          const variableInitializers = this.mapVisit(ctx.variableInitializer);
          const commas = ctx.Comma
            ? ctx.Comma.map((comma) => {
                return rejectAndConcat([comma, line]);
              })
            : [];

          return rejectAndJoinSeps(commas, variableInitializers);
        }
      }

      module.exports = {
        ArraysPrettierVisitor,
      };

      /***/
    },
    /* 34 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { line, softline, hardline } = __webpack_require__(3).doc.builders;
      const { group, indent, concat, join } = __webpack_require__(6);
      const { printTokenWithComments } = __webpack_require__(2);
      const { hasLeadingLineComments, hasTrailingLineComments } =
        __webpack_require__(8);
      const {
        displaySemicolon,
        rejectAndConcat,
        rejectAndJoin,
        rejectAndJoinSeps,
        getBlankLinesSeparator,
        rejectSeparators,
        putIntoBraces,
        isStatementEmptyStatement,
        sortModifiers,
      } = __webpack_require__(4);

      class BlocksAndStatementPrettierVisitor {
        block(ctx) {
          const blockStatements = this.visit(ctx.blockStatements);

          return putIntoBraces(
            blockStatements,
            hardline,
            ctx.LCurly[0],
            ctx.RCurly[0]
          );
        }

        blockStatements(ctx) {
          const blockStatement = this.mapVisit(ctx.blockStatement);

          const separators = rejectSeparators(
            getBlankLinesSeparator(ctx.blockStatement),
            blockStatement
          );

          return rejectAndJoinSeps(separators, blockStatement);
        }

        blockStatement(ctx) {
          return this.visitSingle(ctx);
        }

        localVariableDeclarationStatement(ctx) {
          const localVariableDeclaration = this.visit(
            ctx.localVariableDeclaration
          );
          return rejectAndConcat([localVariableDeclaration, ctx.Semicolon[0]]);
        }

        localVariableDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.variableModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const finalModifiers = this.mapVisit(modifiers[1]);

          const localVariableType = this.visit(ctx.localVariableType);
          const variableDeclaratorList = this.visit(ctx.variableDeclaratorList);
          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", finalModifiers),
              localVariableType,
              variableDeclaratorList,
            ]),
          ]);
        }

        localVariableType(ctx) {
          if (ctx.unannType) {
            return this.visitSingle(ctx);
          }

          return printTokenWithComments(this.getSingle(ctx));
        }

        statement(ctx, params) {
          // handling Labeled statements comments
          if (ctx.labeledStatement !== undefined) {
            const newLabelStatement = {
              ...ctx.labeledStatement[0],
            };
            const newColon = {
              ...ctx.labeledStatement[0].children.Colon[0],
            };
            const newStatement = {
              ...ctx.labeledStatement[0].children.statement[0],
            };

            const labeledStatementLeadingComments = [];

            if (newColon.trailingComments !== undefined) {
              labeledStatementLeadingComments.push(
                ...newColon.trailingComments
              );
              delete newColon.trailingComments;
            }

            if (newStatement.leadingComments !== undefined) {
              labeledStatementLeadingComments.push(
                ...newStatement.leadingComments
              );
              delete newStatement.leadingComments;
            }

            if (labeledStatementLeadingComments.length !== 0) {
              newLabelStatement.leadingComments =
                labeledStatementLeadingComments;
            }
            newLabelStatement.children.Colon[0] = newColon;
            newLabelStatement.children.statement[0] = newStatement;

            return this.visit([newLabelStatement]);
          }

          return this.visitSingle(ctx, params);
        }

        statementWithoutTrailingSubstatement(ctx, params) {
          return this.visitSingle(ctx, params);
        }

        emptyStatement(ctx, params) {
          return displaySemicolon(ctx.Semicolon[0], params);
        }

        labeledStatement(ctx) {
          const identifier = ctx.Identifier[0];
          const statement = this.visit(ctx.statement);

          return rejectAndJoin(ctx.Colon[0], [identifier, statement]);
        }

        expressionStatement(ctx) {
          const statementExpression = this.visit(ctx.statementExpression);
          return rejectAndConcat([statementExpression, ctx.Semicolon[0]]);
        }

        statementExpression(ctx) {
          return this.visitSingle(ctx);
        }

        ifStatement(ctx) {
          const expression = this.visit(ctx.expression);

          const ifStatement = this.visit(ctx.statement[0], {
            allowEmptyStatement: true,
          });
          const ifSeparator = isStatementEmptyStatement(ifStatement) ? "" : " ";

          let elsePart = "";
          if (ctx.Else !== undefined) {
            const elseStatement = this.visit(ctx.statement[1], {
              allowEmptyStatement: true,
            });
            const elseSeparator = isStatementEmptyStatement(elseStatement)
              ? ""
              : " ";

            const elseOnSameLine =
              hasTrailingLineComments(ctx.statement[0]) ||
              hasLeadingLineComments(ctx.Else[0])
                ? hardline
                : " ";

            elsePart = rejectAndJoin(elseSeparator, [
              concat([elseOnSameLine, ctx.Else[0]]),
              elseStatement,
            ]);
          }

          return rejectAndConcat([
            rejectAndJoin(" ", [
              ctx.If[0],
              concat([
                putIntoBraces(
                  expression,
                  softline,
                  ctx.LBrace[0],
                  ctx.RBrace[0]
                ),
                ifSeparator,
              ]),
            ]),
            ifStatement,
            elsePart,
          ]);
        }

        assertStatement(ctx) {
          const expressions = this.mapVisit(ctx.expression);
          const colon = ctx.Colon ? ctx.Colon[0] : ":";
          return rejectAndConcat([
            concat([ctx.Assert[0], " "]),
            rejectAndJoin(concat([" ", colon, " "]), expressions),
            ctx.Semicolon[0],
          ]);
        }

        switchStatement(ctx) {
          const expression = this.visit(ctx.expression);
          const switchBlock = this.visit(ctx.switchBlock);

          return rejectAndJoin(" ", [
            ctx.Switch[0],
            putIntoBraces(expression, softline, ctx.LBrace[0], ctx.RBrace[0]),
            switchBlock,
          ]);
        }

        switchBlock(ctx) {
          const switchCases = this.mapVisit(ctx.switchCase);

          return putIntoBraces(
            rejectAndJoin(hardline, switchCases),
            hardline,
            ctx.LCurly[0],
            ctx.RCurly[0]
          );
        }

        switchCase(ctx) {
          const switchLabel = this.visit(ctx.switchLabel);
          const blockStatements = this.visit(ctx.blockStatements);

          return indent(
            rejectAndJoin(hardline, [switchLabel, blockStatements])
          );
        }

        switchLabel(ctx) {
          if (ctx.Case) {
            const constantExpression = this.visit(ctx.constantExpression);
            return rejectAndConcat([
              concat([ctx.Case[0], " "]),
              constantExpression,
              ctx.Colon[0],
            ]);
          }

          return concat([ctx.Default[0], ctx.Colon[0]]);
        }

        enumConstantName(ctx) {
          return this.visitSingle(ctx);
        }

        whileStatement(ctx) {
          const expression = this.visit(ctx.expression);
          const statement = this.visit(ctx.statement[0], {
            allowEmptyStatement: true,
          });
          const statementSeparator = isStatementEmptyStatement(statement)
            ? ""
            : " ";

          return rejectAndJoin(" ", [
            ctx.While[0],
            rejectAndJoin(statementSeparator, [
              putIntoBraces(expression, softline, ctx.LBrace[0], ctx.RBrace[0]),
              statement,
            ]),
          ]);
        }

        doStatement(ctx) {
          const statement = this.visit(ctx.statement[0], {
            allowEmptyStatement: true,
          });
          const statementSeparator = isStatementEmptyStatement(statement)
            ? ""
            : " ";

          const expression = this.visit(ctx.expression);

          return rejectAndJoin(" ", [
            rejectAndJoin(statementSeparator, [ctx.Do[0], statement]),
            ctx.While[0],
            rejectAndConcat([
              putIntoBraces(expression, softline, ctx.LBrace[0], ctx.RBrace[0]),
              ctx.Semicolon[0],
            ]),
          ]);
        }

        forStatement(ctx) {
          return this.visitSingle(ctx);
        }

        basicForStatement(ctx) {
          const forInit = this.visit(ctx.forInit);
          const expression = this.visit(ctx.expression);
          const forUpdate = this.visit(ctx.forUpdate);
          const statement = this.visit(ctx.statement[0], {
            allowEmptyStatement: true,
          });
          const statementSeparator = isStatementEmptyStatement(statement)
            ? ""
            : " ";

          return rejectAndConcat([
            rejectAndJoin(" ", [
              ctx.For[0],
              putIntoBraces(
                rejectAndConcat([
                  forInit,
                  rejectAndJoin(line, [ctx.Semicolon[0], expression]),
                  rejectAndJoin(line, [ctx.Semicolon[1], forUpdate]),
                ]),
                softline,
                ctx.LBrace[0],
                ctx.RBrace[0]
              ),
            ]),
            statementSeparator,
            statement,
          ]);
        }

        forInit(ctx) {
          return this.visitSingle(ctx);
        }

        forUpdate(ctx) {
          return this.visitSingle(ctx);
        }

        statementExpressionList(ctx) {
          const statementExpressions = this.mapVisit(ctx.statementExpression);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => {
                return concat([printTokenWithComments(elt), " "]);
              })
            : [];
          return rejectAndJoinSeps(commas, statementExpressions);
        }

        enhancedForStatement(ctx) {
          const variableModifiers = this.mapVisit(ctx.variableModifier);
          const localVariableType = this.visit(ctx.localVariableType);
          const variableDeclaratorId = this.visit(ctx.variableDeclaratorId);
          const expression = this.visit(ctx.expression);
          const statement = this.visit(ctx.statement[0], {
            allowEmptyStatement: true,
          });
          const statementSeparator = isStatementEmptyStatement(statement)
            ? ""
            : " ";

          return rejectAndConcat([
            rejectAndJoin(" ", [ctx.For[0], ctx.LBrace[0]]),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", variableModifiers),
              localVariableType,
              variableDeclaratorId,
            ]),
            concat([" ", ctx.Colon[0], " "]),
            expression,
            concat([ctx.RBrace[0], statementSeparator]),
            statement,
          ]);
        }

        breakStatement(ctx) {
          if (ctx.Identifier) {
            const identifier = ctx.Identifier[0];
            return rejectAndConcat([
              concat([ctx.Break[0], " "]),
              identifier,
              ctx.Semicolon[0],
            ]);
          }

          return concat([ctx.Break[0], ctx.Semicolon[0]]);
        }

        continueStatement(ctx) {
          if (ctx.Identifier) {
            const identifier = ctx.Identifier[0];

            return rejectAndConcat([
              concat([ctx.Continue[0], " "]),
              identifier,
              ctx.Semicolon[0],
            ]);
          }

          return rejectAndConcat([ctx.Continue[0], ctx.Semicolon[0]]);
        }

        returnStatement(ctx) {
          if (ctx.expression) {
            const expression = this.visit(ctx.expression, {
              addParenthesisToWrapStatement: true,
            });

            return rejectAndConcat([
              concat([ctx.Return[0], " "]),
              expression,
              ctx.Semicolon[0],
            ]);
          }

          return rejectAndConcat([ctx.Return[0], ctx.Semicolon[0]]);
        }

        throwStatement(ctx) {
          const expression = this.visit(ctx.expression);

          return rejectAndConcat([
            concat([ctx.Throw[0], " "]),
            expression,
            ctx.Semicolon[0],
          ]);
        }

        synchronizedStatement(ctx) {
          const expression = this.visit(ctx.expression);
          const block = this.visit(ctx.block);

          return rejectAndConcat([
            join(" ", [
              ctx.Synchronized[0],
              concat([
                putIntoBraces(
                  expression,
                  softline,
                  ctx.LBrace[0],
                  ctx.RBrace[0]
                ),
                " ",
              ]),
            ]),
            block,
          ]);
        }

        tryStatement(ctx) {
          if (ctx.tryWithResourcesStatement) {
            return this.visit(ctx.tryWithResourcesStatement);
          }

          const block = this.visit(ctx.block);
          const catches = this.visit(ctx.catches);
          const finallyBlock = this.visit(ctx.finally);

          return rejectAndJoin(" ", [ctx.Try[0], block, catches, finallyBlock]);
        }

        catches(ctx) {
          const catchClauses = this.mapVisit(ctx.catchClause);
          return rejectAndJoin(" ", catchClauses);
        }

        catchClause(ctx) {
          const catchFormalParameter = this.visit(ctx.catchFormalParameter);
          const block = this.visit(ctx.block);

          return rejectAndConcat([
            group(
              rejectAndConcat([
                rejectAndJoin(" ", [ctx.Catch[0], ctx.LBrace[0]]),
                indent(rejectAndConcat([softline, catchFormalParameter])),
                softline,
                concat([ctx.RBrace[0], " "]),
              ])
            ),
            block,
          ]);
        }

        catchFormalParameter(ctx) {
          const variableModifiers = this.mapVisit(ctx.variableModifier);
          const catchType = this.visit(ctx.catchType);
          const variableDeclaratorId = this.visit(ctx.variableDeclaratorId);

          return rejectAndJoin(" ", [
            rejectAndJoin(" ", variableModifiers),
            catchType,
            variableDeclaratorId,
          ]);
        }

        catchType(ctx) {
          const unannClassType = this.visit(ctx.unannClassType);
          const classTypes = this.mapVisit(ctx.classType);
          const ors = ctx.Or
            ? ctx.Or.map((elt) => concat([line, elt, " "]))
            : [];

          return group(rejectAndJoinSeps(ors, [unannClassType, ...classTypes]));
        }

        finally(ctx) {
          const block = this.visit(ctx.block);

          return rejectAndJoin(" ", [ctx.Finally[0], block]);
        }

        tryWithResourcesStatement(ctx) {
          const resourceSpecification = this.visit(ctx.resourceSpecification);
          const block = this.visit(ctx.block);
          const catches = this.visit(ctx.catches);
          const finallyBlock = this.visit(ctx.finally);

          return rejectAndJoin(" ", [
            ctx.Try[0],
            resourceSpecification,
            block,
            catches,
            finallyBlock,
          ]);
        }

        resourceSpecification(ctx) {
          const resourceList = this.visit(ctx.resourceList);
          const optionalSemicolon = ctx.Semicolon ? ctx.Semicolon[0] : "";

          return putIntoBraces(
            rejectAndConcat([resourceList, optionalSemicolon]),
            softline,
            ctx.LBrace[0],
            ctx.RBrace[0]
          );
        }

        resourceList(ctx) {
          const resources = this.mapVisit(ctx.resource);
          const semicolons = ctx.Semicolon
            ? ctx.Semicolon.map((elt) => {
                return concat([elt, line]);
              })
            : [""];
          return rejectAndJoinSeps(semicolons, resources);
        }

        resource(ctx) {
          return this.visitSingle(ctx);
        }

        resourceInit(ctx) {
          const variableModifiers = this.mapVisit(ctx.variableModifier);
          const localVariableType = this.visit(ctx.localVariableType);
          const identifier = ctx.Identifier[0];
          const expression = this.visit(ctx.expression);

          return rejectAndJoin(" ", [
            rejectAndJoin(" ", variableModifiers),
            localVariableType,
            identifier,
            ctx.Equals[0],
            expression,
          ]);
        }

        variableAccess(ctx) {
          return this.visitSingle(ctx);
        }

        isBasicForStatement() {
          return "isBasicForStatement";
        }

        isLocalVariableDeclaration() {
          return "isLocalVariableDeclaration";
        }
      }

      module.exports = {
        BlocksAndStatementPrettierVisitor,
      };

      /***/
    },
    /* 35 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const _ = __webpack_require__(7);
      const { line, softline, hardline } = __webpack_require__(3).doc.builders;
      const {
        getBlankLinesSeparator,
        reject,
        rejectAndConcat,
        rejectAndJoin,
        sortClassTypeChildren,
        sortModifiers,
        rejectAndJoinSeps,
        displaySemicolon,
        putIntoBraces,
        getClassBodyDeclarationsSeparator,
        isStatementEmptyStatement,
      } = __webpack_require__(4);
      const { concat, join, group, indent } = __webpack_require__(6);
      const { printTokenWithComments } = __webpack_require__(2);
      const { hasLeadingLineComments } = __webpack_require__(8);

      class ClassesPrettierVisitor {
        classDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.classModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const classCST = ctx.normalClassDeclaration
            ? ctx.normalClassDeclaration
            : ctx.enumDeclaration;
          const classDoc = this.visit(classCST);

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [join(" ", otherModifiers), classDoc]),
          ]);
        }

        normalClassDeclaration(ctx) {
          const name = this.visit(ctx.typeIdentifier);
          const optionalTypeParams = this.visit(ctx.typeParameters);
          const optionalSuperClasses = this.visit(ctx.superclass);
          const optionalSuperInterfaces = this.visit(ctx.superinterfaces);
          const body = this.visit(ctx.classBody);

          let superClassesPart = "";
          if (optionalSuperClasses) {
            superClassesPart = indent(
              rejectAndConcat([line, optionalSuperClasses])
            );
          }

          let superInterfacesPart = "";
          if (optionalSuperInterfaces) {
            superInterfacesPart = indent(
              rejectAndConcat([line, optionalSuperInterfaces])
            );
          }

          return rejectAndJoin(" ", [
            group(
              rejectAndConcat([
                rejectAndJoin(" ", [ctx.Class[0], name]),
                optionalTypeParams,
                superClassesPart,
                superInterfacesPart,
              ])
            ),
            body,
          ]);
        }

        classModifier(ctx) {
          if (ctx.annotation) {
            return this.visit(ctx.annotation);
          }
          // public | protected | private | ...
          return printTokenWithComments(this.getSingle(ctx));
        }

        typeParameters(ctx) {
          const typeParameterList = this.visit(ctx.typeParameterList);

          return rejectAndConcat([
            ctx.Less[0],
            typeParameterList,
            ctx.Greater[0],
          ]);
        }

        typeParameterList(ctx) {
          const typeParameter = this.mapVisit(ctx.typeParameter);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, " "]))
            : [];

          return rejectAndJoinSeps(commas, typeParameter);
        }

        superclass(ctx) {
          return join(" ", [ctx.Extends[0], this.visit(ctx.classType)]);
        }

        superinterfaces(ctx) {
          const interfaceTypeList = this.visit(ctx.interfaceTypeList);

          return group(
            rejectAndConcat([
              ctx.Implements[0],
              indent(rejectAndConcat([line, interfaceTypeList])),
            ])
          );
        }

        interfaceTypeList(ctx) {
          const interfaceType = this.mapVisit(ctx.interfaceType);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];

          return group(rejectAndJoinSeps(commas, interfaceType));
        }

        classBody(ctx) {
          let content = "";
          if (ctx.classBodyDeclaration !== undefined) {
            const classBodyDeclsVisited = reject(
              this.mapVisit(ctx.classBodyDeclaration)
            );

            const separators = getClassBodyDeclarationsSeparator(
              ctx.classBodyDeclaration
            );

            content = rejectAndJoinSeps(separators, classBodyDeclsVisited);

            if (
              !(
                ctx.classBodyDeclaration[0].children.classMemberDeclaration !==
                  undefined &&
                (ctx.classBodyDeclaration[0].children.classMemberDeclaration[0]
                  .children.fieldDeclaration !== undefined ||
                  ctx.classBodyDeclaration[0].children.classMemberDeclaration[0]
                    .children.Semicolon !== undefined)
              )
            ) {
              content = rejectAndConcat([hardline, content]);
            }
          }

          return putIntoBraces(content, hardline, ctx.LCurly[0], ctx.RCurly[0]);
        }

        classBodyDeclaration(ctx) {
          return this.visitSingle(ctx);
        }

        classMemberDeclaration(ctx) {
          if (ctx.Semicolon) {
            return displaySemicolon(ctx.Semicolon[0]);
          }

          return this.visitSingle(ctx);
        }

        fieldDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.fieldModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const unannType = this.visit(ctx.unannType);
          const variableDeclaratorList = this.visit(ctx.variableDeclaratorList);

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", otherModifiers),
              unannType,
              concat([variableDeclaratorList, ctx.Semicolon[0]]),
            ]),
          ]);
        }

        fieldModifier(ctx) {
          if (ctx.annotation) {
            return this.visit(ctx.annotation);
          }
          // public | protected | private | ...
          return printTokenWithComments(this.getSingle(ctx));
        }

        variableDeclaratorList(ctx) {
          const variableDeclarators = this.mapVisit(ctx.variableDeclarator);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, " "]))
            : [];
          return rejectAndJoinSeps(commas, variableDeclarators);
        }

        variableDeclarator(ctx) {
          const variableDeclaratorId = this.visit(ctx.variableDeclaratorId);
          if (ctx.Equals) {
            const variableInitializer = this.visit(ctx.variableInitializer);

            if (hasLeadingLineComments(ctx.variableInitializer[0])) {
              return group(
                indent(
                  rejectAndJoin(hardline, [
                    rejectAndJoin(" ", [variableDeclaratorId, ctx.Equals[0]]),
                    variableInitializer,
                  ])
                )
              );
            }

            if (
              // Array Initialisation
              ctx.variableInitializer[0].children.arrayInitializer !==
                undefined ||
              // Lambda expression
              ctx.variableInitializer[0].children.expression[0].children
                .lambdaExpression !== undefined ||
              // Ternary Expression
              (ctx.variableInitializer[0].children.expression[0].children
                .ternaryExpression !== undefined &&
                ctx.variableInitializer[0].children.expression[0].children
                  .ternaryExpression[0].children.QuestionMark !== undefined)
            ) {
              return rejectAndJoin(" ", [
                variableDeclaratorId,
                ctx.Equals[0],
                variableInitializer,
              ]);
            }

            if (
              ctx.variableInitializer[0].children.expression[0].children
                .ternaryExpression !== undefined
            ) {
              const firstPrimary =
                ctx.variableInitializer[0].children.expression[0].children
                  .ternaryExpression[0].children.binaryExpression[0].children
                  .unaryExpression[0].children.primary[0];

              // Cast Expression
              if (
                firstPrimary.children.primaryPrefix[0].children
                  .castExpression !== undefined
              ) {
                return rejectAndJoin(" ", [
                  variableDeclaratorId,
                  ctx.Equals[0],
                  variableInitializer,
                ]);
              }

              // New Expression
              if (
                firstPrimary.children.primaryPrefix[0].children
                  .newExpression !== undefined
              ) {
                return rejectAndJoin(" ", [
                  variableDeclaratorId,
                  ctx.Equals[0],
                  variableInitializer,
                ]);
              }

              // Method Invocation
              const isMethodInvocation =
                firstPrimary.children.primarySuffix !== undefined &&
                firstPrimary.children.primarySuffix[0].children
                  .methodInvocationSuffix !== undefined;
              const isUniqueUnaryExpression =
                ctx.variableInitializer[0].children.expression[0].children
                  .ternaryExpression[0].children.binaryExpression[0].children
                  .unaryExpression.length === 1;

              const isUniqueMethodInvocation =
                isMethodInvocation && isUniqueUnaryExpression;
              if (isUniqueMethodInvocation) {
                return rejectAndJoin(" ", [
                  variableDeclaratorId,
                  ctx.Equals[0],
                  variableInitializer,
                ]);
              }
            }

            return group(
              indent(
                rejectAndJoin(line, [
                  rejectAndJoin(" ", [variableDeclaratorId, ctx.Equals[0]]),
                  variableInitializer,
                ])
              )
            );
          }
          return variableDeclaratorId;
        }

        variableDeclaratorId(ctx) {
          const identifier = ctx.Identifier[0];
          const dims = this.visit(ctx.dims);

          return rejectAndConcat([identifier, dims]);
        }

        variableInitializer(ctx) {
          return this.visitSingle(ctx);
        }

        unannType(ctx) {
          if (ctx.unannReferenceType !== undefined) {
            return this.visit(ctx.unannReferenceType);
          }

          const unannPrimitiveType = this.visit(ctx.unannPrimitiveType);
          const dims = this.visit(ctx.dims);

          return rejectAndConcat([unannPrimitiveType, dims]);
        }

        unannPrimitiveType(ctx) {
          if (ctx.numericType) {
            return this.visitSingle(ctx);
          }
          return printTokenWithComments(this.getSingle(ctx));
        }

        unannReferenceType(ctx) {
          const unannClassOrInterfaceType = this.visit(
            ctx.unannClassOrInterfaceType
          );
          const dims = this.visit(ctx.dims);

          return rejectAndConcat([unannClassOrInterfaceType, dims]);
        }

        unannClassOrInterfaceType(ctx) {
          return this.visit(ctx.unannClassType);
        }

        unannClassType(ctx) {
          const tokens = sortClassTypeChildren(
            ctx.annotation,
            ctx.typeArguments,
            ctx.Identifier
          );

          const segments = [];
          let currentSegment = [];

          _.forEach(tokens, (token, i) => {
            if (token.name === "typeArguments") {
              currentSegment.push(this.visit([token]));
              segments.push(rejectAndConcat(currentSegment));
              currentSegment = [];
            } else if (token.name === "annotation") {
              currentSegment.push(this.visit([token]));
            } else {
              currentSegment.push(token);
              if (
                (i + 1 < tokens.length &&
                  tokens[i + 1].name !== "typeArguments") ||
                i + 1 === tokens.length
              ) {
                segments.push(rejectAndConcat(currentSegment));
                currentSegment = [];
              }
            }
          });

          return rejectAndJoinSeps(ctx.Dot, segments);
        }

        unannInterfaceType(ctx) {
          return this.visit(ctx.unannClassType);
        }

        unannTypeVariable(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }

        methodDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.methodModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const header = this.visit(ctx.methodHeader);
          const body = this.visit(ctx.methodBody);

          const headerBodySeparator = isStatementEmptyStatement(body)
            ? ""
            : " ";

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", otherModifiers),
              rejectAndJoin(headerBodySeparator, [header, body]),
            ]),
          ]);
        }

        methodModifier(ctx) {
          if (ctx.annotation) {
            return this.visit(ctx.annotation);
          }
          // public | protected | private | Synchronized | ...
          return printTokenWithComments(this.getSingle(ctx));
        }

        methodHeader(ctx) {
          const typeParameters = this.visit(ctx.typeParameters);
          const annotations = this.mapVisit(ctx.annotation);
          const result = this.visit(ctx.result);
          const declarator = this.visit(ctx.methodDeclarator);
          const throws = this.visit(ctx.throws);

          let throwsPart = "";
          if (throws) {
            throwsPart = indent(rejectAndConcat([softline, throws]));
          }

          return group(
            concat([
              rejectAndJoin(" ", [
                typeParameters,
                rejectAndJoin(line, annotations),
                result,
                declarator,
                throwsPart,
              ]),
            ])
          );
        }

        result(ctx) {
          if (ctx.unannType) {
            return this.visit(ctx.unannType);
          }
          // void
          return printTokenWithComments(this.getSingle(ctx));
        }

        methodDeclarator(ctx) {
          const identifier = printTokenWithComments(ctx.Identifier[0]);
          const formalParameterList = this.visit(ctx.formalParameterList);
          const dims = this.visit(ctx.dims);

          return rejectAndConcat([
            identifier,
            putIntoBraces(
              formalParameterList,
              softline,
              ctx.LBrace[0],
              ctx.RBrace[0]
            ),
            dims,
          ]);
        }

        receiverParameter(ctx) {
          const annotations = this.mapVisit(ctx.annotation);
          const unannType = this.visit(ctx.unannType);
          const identifier = ctx.Identifier
            ? concat([ctx.Identifier[0], ctx.Dot[0]])
            : "";

          return rejectAndJoin("", [
            rejectAndJoin(" ", annotations),
            unannType,
            identifier,
            ctx.This[0],
          ]);
        }

        formalParameterList(ctx) {
          const formalParameter = this.mapVisit(ctx.formalParameter);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];
          return rejectAndJoinSeps(commas, formalParameter);
        }

        formalParameter(ctx) {
          return this.visitSingle(ctx);
        }

        variableParaRegularParameter(ctx) {
          const variableModifier = this.mapVisit(ctx.variableModifier);
          const unannType = this.visit(ctx.unannType);
          const variableDeclaratorId = this.visit(ctx.variableDeclaratorId);

          return rejectAndJoin(" ", [
            rejectAndJoin(" ", variableModifier),
            unannType,
            variableDeclaratorId,
          ]);
        }

        variableArityParameter(ctx) {
          const variableModifier = this.mapVisit(ctx.variableModifier);
          const unannType = this.visit(ctx.unannType);
          const annotations = this.mapVisit(ctx.annotation);
          const identifier = ctx.Identifier[0];

          const unannTypePrinted =
            ctx.annotation === undefined
              ? concat([unannType, ctx.DotDotDot[0]])
              : unannType;
          const annotationsPrinted =
            ctx.annotation === undefined
              ? annotations
              : concat([rejectAndJoin(" ", annotations), ctx.DotDotDot[0]]);

          return rejectAndJoin(" ", [
            join(" ", variableModifier),
            unannTypePrinted,
            annotationsPrinted,
            identifier,
          ]);
        }

        variableModifier(ctx) {
          if (ctx.annotation) {
            return this.visit(ctx.annotation);
          }
          return printTokenWithComments(this.getSingle(ctx));
        }

        throws(ctx) {
          const exceptionTypeList = this.visit(ctx.exceptionTypeList);
          return join(" ", [ctx.Throws[0], exceptionTypeList]);
        }

        exceptionTypeList(ctx) {
          const exceptionTypes = this.mapVisit(ctx.exceptionType);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, " "]))
            : [];
          return rejectAndJoinSeps(commas, exceptionTypes);
        }

        exceptionType(ctx) {
          return this.visitSingle(ctx);
        }

        methodBody(ctx) {
          if (ctx.block) {
            return this.visit(ctx.block);
          }

          return printTokenWithComments(this.getSingle(ctx));
        }

        instanceInitializer(ctx) {
          return this.visitSingle(ctx);
        }

        staticInitializer(ctx) {
          const block = this.visit(ctx.block);

          return join(" ", [ctx.Static[0], block]);
        }

        constructorDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.constructorModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const constructorDeclarator = this.visit(ctx.constructorDeclarator);
          const throws = this.visit(ctx.throws);
          const constructorBody = this.visit(ctx.constructorBody);

          let throwsPart = "";
          if (throws) {
            throwsPart = indent(rejectAndConcat([softline, throws]));
          }

          return rejectAndJoin(" ", [
            group(
              rejectAndJoin(hardline, [
                rejectAndJoin(hardline, firstAnnotations),
                rejectAndJoin(" ", [
                  join(" ", otherModifiers),
                  constructorDeclarator,
                  throwsPart,
                ]),
              ])
            ),
            constructorBody,
          ]);
        }

        constructorModifier(ctx) {
          if (ctx.annotation) {
            return this.visit(ctx.annotation);
          }
          // public | protected | private | Synchronized | ...
          return printTokenWithComments(this.getSingle(ctx));
        }

        constructorDeclarator(ctx) {
          const typeParameters = this.visit(ctx.typeParameters);
          const simpleTypeName = this.visit(ctx.simpleTypeName);
          const receiverParameter = this.visit(ctx.receiverParameter);
          const formalParameterList = this.visit(ctx.formalParameterList);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, " "]))
            : [];
          return rejectAndConcat([
            typeParameters,
            simpleTypeName,
            putIntoBraces(
              rejectAndJoinSeps(commas, [
                receiverParameter,
                formalParameterList,
              ]),
              softline,
              ctx.LBrace[0],
              ctx.RBrace[0]
            ),
          ]);
        }

        simpleTypeName(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }

        constructorBody(ctx) {
          const explicitConstructorInvocation = this.visit(
            ctx.explicitConstructorInvocation
          );

          const blockStatements = this.visit(ctx.blockStatements);

          return putIntoBraces(
            rejectAndJoin(hardline, [
              explicitConstructorInvocation,
              blockStatements,
            ]),
            hardline,
            ctx.LCurly[0],
            ctx.RCurly[0]
          );
        }

        explicitConstructorInvocation(ctx) {
          return this.visitSingle(ctx);
        }

        unqualifiedExplicitConstructorInvocation(ctx) {
          const typeArguments = this.visit(ctx.typeArguments);
          const keyWord = ctx.This ? ctx.This[0] : ctx.Super[0];
          const argumentList = this.visit(ctx.argumentList);
          return rejectAndConcat([
            typeArguments,
            keyWord,
            group(
              rejectAndConcat([
                putIntoBraces(
                  argumentList,
                  softline,
                  ctx.LBrace[0],
                  ctx.RBrace[0]
                ),
                ctx.Semicolon[0],
              ])
            ),
          ]);
        }

        qualifiedExplicitConstructorInvocation(ctx) {
          const expressionName = this.visit(ctx.expressionName);
          const typeArguments = this.visit(ctx.typeArguments);
          const argumentList = this.visit(ctx.argumentList);

          return rejectAndConcat([
            expressionName,
            ctx.Dot[0],
            typeArguments,
            ctx.Super[0],
            group(
              rejectAndConcat([
                putIntoBraces(
                  argumentList,
                  softline,
                  ctx.LBrace[0],
                  ctx.RBrace[0]
                ),
                ctx.Semicolon[0],
              ])
            ),
          ]);
        }

        enumDeclaration(ctx) {
          const classModifier = this.mapVisit(ctx.classModifier);
          const typeIdentifier = this.visit(ctx.typeIdentifier);
          const superinterfaces = this.visit(ctx.superinterfaces);
          const enumBody = this.visit(ctx.enumBody);

          return rejectAndJoin(" ", [
            join(" ", classModifier),
            ctx.Enum[0],
            typeIdentifier,
            superinterfaces,
            enumBody,
          ]);
        }

        enumBody(ctx) {
          const enumConstantList = this.visit(ctx.enumConstantList);
          const enumBodyDeclarations = this.visit(ctx.enumBodyDeclarations);

          let optionalComma;
          if (this.prettierOptions.trailingComma !== "none") {
            optionalComma = ctx.Comma ? ctx.Comma[0] : ",";
          } else {
            optionalComma = ctx.Comma ? { ...ctx.Comma[0], image: "" } : "";
          }

          return putIntoBraces(
            rejectAndConcat([
              enumConstantList,
              optionalComma,
              enumBodyDeclarations,
            ]),
            hardline,
            ctx.LCurly[0],
            ctx.RCurly[0]
          );
        }

        enumConstantList(ctx) {
          const enumConstants = this.mapVisit(ctx.enumConstant);

          const blankLineSeparators = getBlankLinesSeparator(ctx.enumConstant);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt, index) =>
                concat([elt, blankLineSeparators[index]])
              )
            : [];

          return group(rejectAndJoinSeps(commas, enumConstants));
        }

        enumConstant(ctx) {
          const modifiers = sortModifiers(ctx.enumConstantModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const identifier = ctx.Identifier[0];
          const argumentList = this.visit(ctx.argumentList);
          const classBody = this.visit(ctx.classBody);

          const optionnalBracesAndArgumentList = ctx.LBrace
            ? putIntoBraces(
                argumentList,
                softline,
                ctx.LBrace[0],
                ctx.RBrace[0]
              )
            : "";

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", otherModifiers),
              rejectAndConcat([identifier, optionnalBracesAndArgumentList]),
              classBody,
            ]),
          ]);
        }

        enumConstantModifier(ctx) {
          return this.visitSingle(ctx);
        }

        enumBodyDeclarations(ctx) {
          if (ctx.classBodyDeclaration !== undefined) {
            const classBodyDeclaration = this.mapVisit(
              ctx.classBodyDeclaration
            );

            const separators = getClassBodyDeclarationsSeparator(
              ctx.classBodyDeclaration
            );

            return rejectAndJoin(concat([hardline, hardline]), [
              ctx.Semicolon[0],
              rejectAndJoinSeps(separators, classBodyDeclaration),
            ]);
          }

          return { ...ctx.Semicolon[0], image: "" };
        }

        isClassDeclaration() {
          return "isClassDeclaration";
        }

        identifyClassBodyDeclarationType() {
          return "identifyClassBodyDeclarationType";
        }

        isDims() {
          return "isDims";
        }
      }

      module.exports = {
        ClassesPrettierVisitor,
      };

      /***/
    },
    /* 36 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const _ = __webpack_require__(7);
      const { ifBreak, line, softline } = __webpack_require__(3).doc.builders;
      const { concat, group, indent } = __webpack_require__(6);
      const { printTokenWithComments } = __webpack_require__(2);
      const { handleCommentsBinaryExpression } = __webpack_require__(37);
      const {
        matchCategory,
        rejectAndJoin,
        rejectAndConcat,
        sortAnnotationIdentifier,
        rejectAndJoinSeps,
        findDeepElementInPartsArray,
        isExplicitLambdaParameter,
        putIntoBraces,
        separateTokensIntoGroups,
        isShiftOperator,
        isUniqueMethodInvocation,
      } = __webpack_require__(4);

      class ExpressionsPrettierVisitor {
        constantExpression(ctx) {
          return this.visitSingle(ctx);
        }

        expression(ctx, params) {
          return this.visitSingle(ctx, params);
        }

        lambdaExpression(ctx) {
          const lambdaParameters = this.visit(ctx.lambdaParameters);
          const lambdaBody = this.visit(ctx.lambdaBody);

          const isLambdaBodyABlock =
            ctx.lambdaBody[0].children.block !== undefined;
          if (isLambdaBodyABlock) {
            return rejectAndJoin(" ", [
              lambdaParameters,
              ctx.Arrow[0],
              lambdaBody,
            ]);
          }

          return group(
            indent(
              rejectAndJoin(line, [
                rejectAndJoin(" ", [lambdaParameters, ctx.Arrow[0]]),
                lambdaBody,
              ])
            )
          );
        }

        lambdaParameters(ctx) {
          if (ctx.lambdaParametersWithBraces) {
            return this.visitSingle(ctx);
          }

          return printTokenWithComments(this.getSingle(ctx));
        }

        lambdaParametersWithBraces(ctx) {
          const lambdaParameterList = this.visit(ctx.lambdaParameterList);

          if (findDeepElementInPartsArray(lambdaParameterList, ",")) {
            return rejectAndConcat([
              ctx.LBrace[0],
              lambdaParameterList,
              ctx.RBrace[0],
            ]);
          }

          // removing braces when only no comments attached
          if (
            (ctx.LBrace &&
              ctx.RBrace &&
              (!lambdaParameterList || isExplicitLambdaParameter(ctx))) ||
            ctx.LBrace[0].leadingComments ||
            ctx.LBrace[0].trailingComments ||
            ctx.RBrace[0].leadingComments ||
            ctx.RBrace[0].trailingComments
          ) {
            return rejectAndConcat([
              ctx.LBrace[0],
              lambdaParameterList,
              ctx.RBrace[0],
            ]);
          }

          return lambdaParameterList;
        }

        lambdaParameterList(ctx) {
          return this.visitSingle(ctx);
        }

        inferredLambdaParameterList(ctx) {
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => {
                return concat([elt, " "]);
              })
            : [];

          return rejectAndJoinSeps(commas, ctx.Identifier);
        }

        explicitLambdaParameterList(ctx) {
          const lambdaParameter = this.mapVisit(ctx.lambdaParameter);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => {
                return concat([elt, " "]);
              })
            : [];
          return rejectAndJoinSeps(commas, lambdaParameter);
        }

        lambdaParameter(ctx) {
          return this.visitSingle(ctx);
        }

        regularLambdaParameter(ctx) {
          const variableModifier = this.mapVisit(ctx.variableModifier);
          const lambdaParameterType = this.visit(ctx.lambdaParameterType);
          const variableDeclaratorId = this.visit(ctx.variableDeclaratorId);

          return rejectAndJoin(" ", [
            rejectAndJoin(" ", variableModifier),
            lambdaParameterType,
            variableDeclaratorId,
          ]);
        }

        lambdaParameterType(ctx) {
          if (ctx.unannType) {
            return this.visitSingle(ctx);
          }
          return printTokenWithComments(this.getSingle(ctx));
        }

        lambdaBody(ctx) {
          return this.visitSingle(ctx);
        }

        ternaryExpression(ctx, params) {
          const binaryExpression = this.visit(ctx.binaryExpression, params);
          if (ctx.QuestionMark) {
            const expression1 = this.visit(ctx.expression[0]);
            const expression2 = this.visit(ctx.expression[1]);

            return indent(
              group(
                rejectAndConcat([
                  rejectAndJoin(line, [
                    binaryExpression,
                    rejectAndJoin(" ", [ctx.QuestionMark[0], expression1]),
                    rejectAndJoin(" ", [ctx.Colon[0], expression2]),
                  ]),
                ])
              )
            );
          }
          return binaryExpression;
        }

        binaryExpression(ctx, params) {
          handleCommentsBinaryExpression(ctx);

          const referenceType = this.mapVisit(ctx.referenceType);
          const expression = this.mapVisit(ctx.expression);
          const unaryExpression = this.mapVisit(ctx.unaryExpression);

          const { groupsOfOperator, sortedBinaryOperators } =
            separateTokensIntoGroups(ctx);
          const segmentsSplittedByBinaryOperator = [];
          let currentSegment = [];

          if (
            groupsOfOperator.length === 1 &&
            groupsOfOperator[0].length === 0
          ) {
            return unaryExpression.shift();
          }

          groupsOfOperator.forEach((subgroup) => {
            currentSegment = [unaryExpression.shift()];
            for (let i = 0; i < subgroup.length; i++) {
              const token = subgroup[i];
              const shiftOperator = isShiftOperator(subgroup, i);
              if (token.tokenType.name === "Instanceof") {
                currentSegment.push(
                  rejectAndJoin(" ", [ctx.Instanceof[0], referenceType.shift()])
                );
              } else if (matchCategory(token, "'AssignmentOperator'")) {
                currentSegment.push(
                  indent(rejectAndJoin(line, [token, expression.shift()]))
                );
              } else if (
                shiftOperator === "leftShift" ||
                shiftOperator === "rightShift"
              ) {
                currentSegment.push(
                  rejectAndJoin(" ", [
                    rejectAndConcat([token, subgroup[i + 1]]),
                    unaryExpression.shift(),
                  ])
                );
                i++;
              } else if (shiftOperator === "doubleRightShift") {
                currentSegment.push(
                  rejectAndJoin(" ", [
                    rejectAndConcat([token, subgroup[i + 1], subgroup[i + 2]]),
                    unaryExpression.shift(),
                  ])
                );
                i += 2;
              } else if (matchCategory(token, "'BinaryOperator'")) {
                currentSegment.push(
                  rejectAndJoin(line, [token, unaryExpression.shift()])
                );
              }
            }
            segmentsSplittedByBinaryOperator.push(
              group(rejectAndJoin(" ", currentSegment))
            );
          });

          if (params !== undefined && params.addParenthesisToWrapStatement) {
            return group(
              concat([
                ifBreak("(", ""),
                indent(
                  concat([
                    softline,
                    group(
                      rejectAndJoinSeps(
                        sortedBinaryOperators.map((elt) =>
                          concat([" ", elt, line])
                        ),
                        segmentsSplittedByBinaryOperator
                      )
                    ),
                  ])
                ),
                softline,
                ifBreak(")"),
              ])
            );
          }

          return group(
            rejectAndJoinSeps(
              sortedBinaryOperators.map((elt) => concat([" ", elt, line])),
              segmentsSplittedByBinaryOperator
            )
          );
        }

        unaryExpression(ctx) {
          const unaryPrefixOperator = ctx.UnaryPrefixOperator
            ? ctx.UnaryPrefixOperator
            : [];
          const primary = this.visit(ctx.primary);
          const unarySuffixOperator = ctx.UnarySuffixOperator
            ? ctx.UnarySuffixOperator
            : [];
          return rejectAndConcat([
            rejectAndConcat(unaryPrefixOperator),
            primary,
            rejectAndConcat(unarySuffixOperator),
          ]);
        }

        unaryExpressionNotPlusMinus(ctx) {
          const unaryPrefixOperatorNotPlusMinus =
            ctx.unaryPrefixOperatorNotPlusMinus
              ? rejectAndJoin(" ", ctx.unaryPrefixOperatorNotPlusMinus)
              : "";

          const primary = this.visit(ctx.primary);
          const unarySuffixOperator = ctx.unarySuffixOperator
            ? rejectAndJoin(" ", ctx.unarySuffixOperator)
            : "";

          return rejectAndJoin(" ", [
            unaryPrefixOperatorNotPlusMinus,
            primary,
            unarySuffixOperator,
          ]);
        }

        primary(ctx) {
          const countMethodInvocation = isUniqueMethodInvocation(
            ctx.primarySuffix
          );

          const primaryPrefix = this.visit(ctx.primaryPrefix, {
            shouldBreakBeforeFirstMethodInvocation: countMethodInvocation > 1,
          });
          const primarySuffixes = this.mapVisit(ctx.primarySuffix);

          const suffixes = [];

          if (ctx.primarySuffix !== undefined) {
            if (
              ctx.primarySuffix[0].children.Dot !== undefined &&
              ctx.primaryPrefix[0].children.newExpression !== undefined
            ) {
              suffixes.push(softline);
            }
            suffixes.push(primarySuffixes[0]);

            for (let i = 1; i < primarySuffixes.length; i++) {
              if (
                ctx.primarySuffix[i].children.Dot !== undefined &&
                ctx.primarySuffix[i - 1].children.methodInvocationSuffix !==
                  undefined
              ) {
                suffixes.push(softline);
              }
              suffixes.push(primarySuffixes[i]);
            }

            if (countMethodInvocation === 1) {
              return group(
                rejectAndConcat([
                  primaryPrefix,
                  suffixes[0],
                  indent(rejectAndConcat(suffixes.slice(1))),
                ])
              );
            }
          }

          return group(
            rejectAndConcat([primaryPrefix, indent(rejectAndConcat(suffixes))])
          );
        }

        primaryPrefix(ctx, params) {
          if (ctx.This || ctx.Void || ctx.Boolean) {
            return printTokenWithComments(this.getSingle(ctx));
          }

          return this.visitSingle(ctx, params);
        }

        primarySuffix(ctx) {
          if (ctx.Dot) {
            if (ctx.This) {
              return rejectAndConcat([ctx.Dot[0], ctx.This[0]]);
            } else if (ctx.Identifier) {
              const typeArguments = this.visit(ctx.typeArguments);
              return rejectAndConcat([
                ctx.Dot[0],
                typeArguments,
                ctx.Identifier[0],
              ]);
            }

            const unqualifiedClassInstanceCreationExpression = this.visit(
              ctx.unqualifiedClassInstanceCreationExpression
            );
            return rejectAndConcat([
              ctx.Dot[0],
              unqualifiedClassInstanceCreationExpression,
            ]);
          }
          return this.visitSingle(ctx);
        }

        fqnOrRefType(ctx, params) {
          const fqnOrRefTypePartFirst = this.visit(ctx.fqnOrRefTypePartFirst);
          const fqnOrRefTypePartRest = this.mapVisit(ctx.fqnOrRefTypePartRest);
          const dims = this.visit(ctx.dims);
          const dots = ctx.Dot ? ctx.Dot : [];

          if (
            params !== undefined &&
            params.shouldBreakBeforeFirstMethodInvocation === true
          ) {
            return rejectAndConcat([
              indent(
                rejectAndJoin(concat([softline, dots[0]]), [
                  fqnOrRefTypePartFirst,
                  rejectAndJoinSeps(dots.slice(1), fqnOrRefTypePartRest),
                  dims,
                ])
              ),
            ]);
          }

          return rejectAndConcat([
            rejectAndJoinSeps(dots, [
              fqnOrRefTypePartFirst,
              ...fqnOrRefTypePartRest,
            ]),
            dims,
          ]);
        }

        fqnOrRefTypePartFirst(ctx) {
          const annotation = this.mapVisit(ctx.annotation);
          const fqnOrRefTypeCommon = this.visit(ctx.fqnOrRefTypePartCommon);

          return rejectAndJoin(" ", [
            rejectAndJoin(" ", annotation),
            fqnOrRefTypeCommon,
          ]);
        }

        fqnOrRefTypePartRest(ctx) {
          const annotation = this.mapVisit(ctx.annotation);
          const fqnOrRefTypeCommon = this.visit(ctx.fqnOrRefTypePartCommon);

          let fqnOrRefTypePart$methodTypeArguments = "";
          if (
            ctx.$methodTypeArguments &&
            ctx.$methodTypeArguments[0].children &&
            ctx.$methodTypeArguments[0].children.typeArguments
          ) {
            fqnOrRefTypePart$methodTypeArguments = this.visit(
              ctx.$methodTypeArguments
            );
          }

          return rejectAndJoin(" ", [
            rejectAndJoin(" ", annotation),
            rejectAndConcat([
              fqnOrRefTypePart$methodTypeArguments,
              fqnOrRefTypeCommon,
            ]),
          ]);
        }

        fqnOrRefTypePartCommon(ctx) {
          let keyWord = null;
          if (ctx.Identifier) {
            keyWord = ctx.Identifier[0];
          } else {
            keyWord = ctx.Super[0];
          }

          let fqnOrRefTypePart$classTypeArguments = "";
          if (
            ctx.$classTypeArguments &&
            ctx.$classTypeArguments[0].children &&
            ctx.$classTypeArguments[0].children.typeArguments
          ) {
            fqnOrRefTypePart$classTypeArguments = this.visit(
              ctx.$classTypeArguments
            );
          }

          return rejectAndConcat([
            keyWord,
            fqnOrRefTypePart$classTypeArguments,
          ]);
        }

        fqnOrRefTypePartRest$methodTypeArguments(ctx) {
          return this.visitSingle(ctx);
        }

        fqnOrRefTypePartCommon$classTypeArguments(ctx) {
          return this.visitSingle(ctx);
        }

        parenthesisExpression(ctx) {
          const expression = this.visit(ctx.expression);
          return putIntoBraces(
            expression,
            softline,
            ctx.LBrace[0],
            ctx.RBrace[0]
          );
        }

        castExpression(ctx) {
          return this.visitSingle(ctx);
        }

        primitiveCastExpression(ctx) {
          const primitiveType = this.visit(ctx.primitiveType);
          const unaryExpression = this.visit(ctx.unaryExpression);
          return rejectAndJoin(" ", [
            rejectAndConcat([ctx.LBrace[0], primitiveType, ctx.RBrace[0]]),
            unaryExpression,
          ]);
        }

        referenceTypeCastExpression(ctx) {
          const referenceType = this.visit(ctx.referenceType);
          const additionalBound = this.mapVisit(ctx.additionalBound);

          const expression = ctx.lambdaExpression
            ? this.visit(ctx.lambdaExpression)
            : this.visit(ctx.unaryExpressionNotPlusMinus);

          return rejectAndJoin(" ", [
            rejectAndConcat([ctx.LBrace[0], referenceType, ctx.RBrace[0]]),
            additionalBound,
            expression,
          ]);
        }

        newExpression(ctx) {
          return this.visitSingle(ctx);
        }

        unqualifiedClassInstanceCreationExpression(ctx) {
          const typeArguments = this.visit(ctx.typeArguments);
          const classOrInterfaceTypeToInstantiate = this.visit(
            ctx.classOrInterfaceTypeToInstantiate
          );
          const argumentList = this.visit(ctx.argumentList);
          const classBody = this.visit(ctx.classBody);

          return rejectAndJoin(" ", [
            ctx.New[0],
            rejectAndConcat([
              typeArguments,
              classOrInterfaceTypeToInstantiate,
              putIntoBraces(
                argumentList,
                softline,
                ctx.LBrace[0],
                ctx.RBrace[0]
              ),
            ]),
            classBody,
          ]);
        }

        classOrInterfaceTypeToInstantiate(ctx) {
          const tokens = sortAnnotationIdentifier(
            ctx.annotation,
            ctx.Identifier
          );

          const segments = [];
          let currentSegment = [];

          _.forEach(tokens, (token) => {
            if (token.name) {
              currentSegment.push(this.visit([token]));
            } else {
              currentSegment.push(token);
              segments.push(rejectAndJoin(" ", currentSegment));
              currentSegment = [];
            }
          });

          const typeArgumentsOrDiamond = this.visit(ctx.typeArgumentsOrDiamond);
          const dots = ctx.Dot ? ctx.Dot : [];
          return rejectAndConcat([
            rejectAndJoinSeps(dots, segments),
            typeArgumentsOrDiamond,
          ]);
        }

        typeArgumentsOrDiamond(ctx) {
          return this.visitSingle(ctx);
        }

        diamond(ctx) {
          return concat([ctx.Less[0], ctx.Greater[0]]);
        }

        methodInvocationSuffix(ctx) {
          if (ctx.argumentList === undefined) {
            return rejectAndConcat([ctx.LBrace[0], ctx.RBrace[0]]);
          }

          const argumentList = this.visit(ctx.argumentList);
          return putIntoBraces(
            argumentList,
            softline,
            ctx.LBrace[0],
            ctx.RBrace[0]
          );
        }

        argumentList(ctx) {
          const expressions = this.mapVisit(ctx.expression);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];
          return rejectAndJoinSeps(commas, expressions);
        }

        arrayCreationExpression(ctx) {
          const type = ctx.primitiveType
            ? this.visit(ctx.primitiveType)
            : this.visit(ctx.classOrInterfaceType);
          const suffix = ctx.arrayCreationDefaultInitSuffix
            ? this.visit(ctx.arrayCreationDefaultInitSuffix)
            : this.visit(ctx.arrayCreationExplicitInitSuffix);

          return rejectAndConcat([concat([ctx.New[0], " "]), type, suffix]);
        }

        arrayCreationDefaultInitSuffix(ctx) {
          const dimExprs = this.visit(ctx.dimExprs);
          const dims = this.visit(ctx.dims);
          return rejectAndConcat([dimExprs, dims]);
        }

        arrayCreationExplicitInitSuffix(ctx) {
          const dims = this.visit(ctx.dims);
          const arrayInitializer = this.visit(ctx.arrayInitializer);

          return rejectAndJoin(" ", [dims, arrayInitializer]);
        }

        dimExprs(ctx) {
          const dimExpr = this.mapVisit(ctx.dimExpr);
          return rejectAndConcat(dimExpr);
        }

        dimExpr(ctx) {
          const annotations = this.mapVisit(ctx.annotation);
          const expression = this.visit(ctx.expression);

          return rejectAndJoin(" ", [
            rejectAndJoin(" ", annotations),
            rejectAndConcat([ctx.LSquare[0], expression, ctx.RSquare[0]]),
          ]);
        }

        classLiteralSuffix(ctx) {
          const squares = [];
          if (ctx.LSquare) {
            for (let i = 0; i < ctx.LSquare.length; i++) {
              squares.push(concat([ctx.LSquare[i], ctx.RSquare[i]]));
            }
          }
          return rejectAndConcat([...squares, ctx.Dot[0], ctx.Class[0]]);
        }

        arrayAccessSuffix(ctx) {
          const expression = this.visit(ctx.expression);
          return rejectAndConcat([ctx.LSquare[0], expression, ctx.RSquare[0]]);
        }

        methodReferenceSuffix(ctx) {
          const typeArguments = this.visit(ctx.typeArguments);
          const identifierOrNew = ctx.New ? ctx.New[0] : ctx.Identifier[0];
          return rejectAndConcat([
            ctx.ColonColon[0],
            typeArguments,
            identifierOrNew,
          ]);
        }

        identifyNewExpressionType() {
          return "identifyNewExpressionType";
        }

        isLambdaExpression() {
          return "isLambdaExpression";
        }

        isCastExpression() {
          return "isCastExpression";
        }

        isPrimitiveCastExpression() {
          return "isPrimitiveCastExpression";
        }

        isReferenceTypeCastExpression() {
          return "isReferenceTypeCastExpression";
        }

        isRefTypeInMethodRef() {
          return "isRefTypeInMethodRef";
        }
      }

      module.exports = {
        ExpressionsPrettierVisitor,
      };

      /***/
    },
    /* 37 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { hasLeadingComments } = __webpack_require__(8);

      function handleCommentsBinaryExpression(ctx) {
        let unaryExpressionIndex = 1;
        if (ctx.BinaryOperator !== undefined) {
          ctx.BinaryOperator.forEach((binaryOperator) => {
            if (hasLeadingComments(binaryOperator)) {
              while (
                ctx.unaryExpression[unaryExpressionIndex].location.startOffset <
                binaryOperator.endOffset
              ) {
                unaryExpressionIndex++;
              }

              // Adapt the position of the operator and its leading comments
              const shiftUp =
                binaryOperator.leadingComments[0].startLine -
                1 -
                ctx.BinaryOperator.startLine;

              if (
                binaryOperator.startLine !==
                ctx.unaryExpression[unaryExpressionIndex].location.startLine
              ) {
                binaryOperator.leadingComments.forEach((comment) => {
                  comment.startLine += 1;
                  comment.endLine += 1;
                });
              }
              binaryOperator.startLine += shiftUp;
              binaryOperator.endLine += shiftUp;

              // Assign the leading comments & trailing comments of the binaryOperator
              // to the following unaryExpression as leading comments
              ctx.unaryExpression[unaryExpressionIndex].leadingComments =
                ctx.unaryExpression[unaryExpressionIndex].leadingComments || [];
              ctx.unaryExpression[unaryExpressionIndex].leadingComments.unshift(
                ...binaryOperator.leadingComments
              );
              delete binaryOperator.leadingComments;
            }
          });
        }
      }

      module.exports = {
        handleCommentsBinaryExpression,
      };

      /***/
    },
    /* 38 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { line, softline, hardline } = __webpack_require__(3).doc.builders;
      const { concat, group, indent } = __webpack_require__(6);
      const { printTokenWithComments } = __webpack_require__(2);
      const {
        rejectAndConcat,
        rejectAndJoin,
        sortModifiers,
        rejectAndJoinSeps,
        getInterfaceBodyDeclarationsSeparator,
        putIntoBraces,
        displaySemicolon,
        isStatementEmptyStatement,
        printArrayList,
      } = __webpack_require__(4);

      class InterfacesPrettierVisitor {
        interfaceDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.interfaceModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const declaration = ctx.normalInterfaceDeclaration
            ? this.visit(ctx.normalInterfaceDeclaration)
            : this.visit(ctx.annotationTypeDeclaration);

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", otherModifiers),
              declaration,
            ]),
          ]);
        }

        normalInterfaceDeclaration(ctx) {
          const typeIdentifier = this.visit(ctx.typeIdentifier);
          const typeParameters = this.visit(ctx.typeParameters);
          const extendsInterfaces = this.visit(ctx.extendsInterfaces);
          const interfaceBody = this.visit(ctx.interfaceBody);

          let extendsInterfacesPart = "";
          if (extendsInterfaces) {
            extendsInterfacesPart = indent(
              rejectAndConcat([softline, extendsInterfaces])
            );
          }

          return rejectAndJoin(" ", [
            group(
              rejectAndJoin(" ", [
                ctx.Interface[0],
                concat([typeIdentifier, typeParameters]),
                extendsInterfacesPart,
              ])
            ),
            interfaceBody,
          ]);
        }

        interfaceModifier(ctx) {
          if (ctx.annotation) {
            return this.visitSingle(ctx);
          }
          return printTokenWithComments(this.getSingle(ctx));
        }

        extendsInterfaces(ctx) {
          const interfaceTypeList = this.visit(ctx.interfaceTypeList);

          return group(
            rejectAndConcat([
              ctx.Extends[0],
              indent(rejectAndConcat([line, interfaceTypeList])),
            ])
          );
        }

        interfaceBody(ctx) {
          let joinedInterfaceMemberDeclaration = "";

          if (ctx.interfaceMemberDeclaration !== undefined) {
            const interfaceMemberDeclaration = this.mapVisit(
              ctx.interfaceMemberDeclaration
            );

            const separators = getInterfaceBodyDeclarationsSeparator(
              ctx.interfaceMemberDeclaration
            );

            joinedInterfaceMemberDeclaration = rejectAndJoinSeps(
              separators,
              interfaceMemberDeclaration
            );
          }
          return putIntoBraces(
            joinedInterfaceMemberDeclaration,
            hardline,
            ctx.LCurly[0],
            ctx.RCurly[0]
          );
        }

        interfaceMemberDeclaration(ctx) {
          if (ctx.Semicolon) {
            return displaySemicolon(ctx.Semicolon[0]);
          }
          return this.visitSingle(ctx);
        }

        constantDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.constantModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const unannType = this.visit(ctx.unannType);
          const variableDeclaratorList = this.visit(ctx.variableDeclaratorList);

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", otherModifiers),
              unannType,
              rejectAndConcat([variableDeclaratorList, ctx.Semicolon[0]]),
            ]),
          ]);
        }

        constantModifier(ctx) {
          if (ctx.annotation) {
            return this.visitSingle(ctx);
          }
          return printTokenWithComments(this.getSingle(ctx));
        }

        interfaceMethodDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.interfaceMethodModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const methodHeader = this.visit(ctx.methodHeader);
          const methodBody = this.visit(ctx.methodBody);
          const separator = isStatementEmptyStatement(methodBody) ? "" : " ";

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", otherModifiers),
              rejectAndJoin(separator, [methodHeader, methodBody]),
            ]),
          ]);
        }

        interfaceMethodModifier(ctx) {
          if (ctx.annotation) {
            return this.visitSingle(ctx);
          }
          return printTokenWithComments(this.getSingle(ctx));
        }

        annotationTypeDeclaration(ctx) {
          const typeIdentifier = this.visit(ctx.typeIdentifier);
          const annotationTypeBody = this.visit(ctx.annotationTypeBody);

          return rejectAndJoin(" ", [
            concat([ctx.At[0], ctx.Interface[0]]),
            typeIdentifier,
            annotationTypeBody,
          ]);
        }

        annotationTypeBody(ctx) {
          const annotationTypeMemberDeclaration = this.mapVisit(
            ctx.annotationTypeMemberDeclaration
          );

          return rejectAndJoin(line, [
            indent(
              rejectAndJoin(line, [
                ctx.LCurly[0],
                rejectAndJoin(
                  concat([line, line]),
                  annotationTypeMemberDeclaration
                ),
              ])
            ),
            ctx.RCurly[0],
          ]);
        }

        annotationTypeMemberDeclaration(ctx) {
          if (ctx.Semicolon) {
            return printTokenWithComments(this.getSingle(ctx));
          }
          return this.visitSingle(ctx);
        }

        annotationTypeElementDeclaration(ctx) {
          const modifiers = sortModifiers(ctx.annotationTypeElementModifier);
          const firstAnnotations = this.mapVisit(modifiers[0]);
          const otherModifiers = this.mapVisit(modifiers[1]);

          const unannType = this.visit(ctx.unannType);
          const identifier = ctx.Identifier[0];
          const dims = this.visit(ctx.dims);
          const defaultValue = ctx.defaultValue
            ? concat([" ", this.visit(ctx.defaultValue)])
            : "";

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, firstAnnotations),
            rejectAndJoin(" ", [
              rejectAndJoin(" ", otherModifiers),
              unannType,
              rejectAndConcat([
                identifier,
                concat([ctx.LBrace[0], ctx.RBrace[0]]),
                dims,
                defaultValue,
                ctx.Semicolon[0],
              ]),
            ]),
          ]);
        }

        annotationTypeElementModifier(ctx) {
          if (ctx.annotation) {
            return this.visitSingle(ctx);
          }
          return printTokenWithComments(this.getSingle(ctx));
        }

        defaultValue(ctx) {
          const elementValue = this.visit(ctx.elementValue);

          return rejectAndJoin(" ", [ctx.Default[0], elementValue]);
        }

        annotation(ctx) {
          const fqn = this.visit(ctx.typeName);

          let annoArgs = "";
          if (ctx.LBrace) {
            if (ctx.elementValuePairList) {
              annoArgs = putIntoBraces(
                this.visit(ctx.elementValuePairList),
                softline,
                ctx.LBrace[0],
                ctx.RBrace[0]
              );
            } else if (ctx.elementValue) {
              annoArgs = putIntoBraces(
                this.visit(ctx.elementValue),
                softline,
                ctx.LBrace[0],
                ctx.RBrace[0]
              );
            }
          }

          return group(rejectAndConcat([ctx.At[0], fqn, annoArgs]));
        }

        elementValuePairList(ctx) {
          const elementValuePairs = this.mapVisit(ctx.elementValuePair);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];

          return rejectAndJoinSeps(commas, elementValuePairs);
        }

        elementValuePair(ctx) {
          const identifier = ctx.Identifier[0];
          const elementValue = this.visit(ctx.elementValue);

          return rejectAndJoin(" ", [identifier, ctx.Equals[0], elementValue]);
        }

        elementValue(ctx) {
          return this.visitSingle(ctx);
        }

        elementValueArrayInitializer(ctx) {
          const elementValueList = this.visit(ctx.elementValueList);

          return printArrayList({
            list: elementValueList,
            extraComma: ctx.Comma,
            LCurly: ctx.LCurly[0],
            RCurly: ctx.RCurly[0],
            trailingComma: this.prettierOptions.trailingComma,
          });
        }

        elementValueList(ctx) {
          const elementValues = this.mapVisit(ctx.elementValue);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];

          return group(
            rejectAndConcat([rejectAndJoinSeps(commas, elementValues)])
          );
        }

        identifyInterfaceBodyDeclarationType() {
          return "identifyInterfaceBodyDeclarationType";
        }

        identifyAnnotationBodyDeclarationType() {
          return "identifyAnnotationBodyDeclarationType";
        }

        isSimpleElementValueAnnotation() {
          return "isSimpleElementValueAnnotation";
        }
      }

      module.exports = {
        InterfacesPrettierVisitor,
      };

      /***/
    },
    /* 39 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { printTokenWithComments } = __webpack_require__(2);

      class LexicalStructurePrettierVisitor {
        literal(ctx) {
          if (ctx.CharLiteral || ctx.StringLiteral || ctx.Null) {
            return printTokenWithComments(this.getSingle(ctx));
          }
          return this.visitSingle(ctx);
        }

        integerLiteral(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }

        floatingPointLiteral(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }

        booleanLiteral(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }
      }

      module.exports = {
        LexicalStructurePrettierVisitor,
      };

      /***/
    },
    /* 40 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { buildFqn } = __webpack_require__(4);
      const { printTokenWithComments } = __webpack_require__(2);

      class NamesPrettierVisitor {
        typeIdentifier(ctx) {
          return printTokenWithComments(ctx.Identifier[0]);
        }

        moduleName(ctx) {
          return buildFqn(ctx.Identifier, ctx.Dot);
        }

        packageName(ctx) {
          return buildFqn(ctx.Identifier, ctx.Dot);
        }

        typeName(ctx) {
          return buildFqn(ctx.Identifier, ctx.Dot);
        }

        expressionName(ctx) {
          return buildFqn(ctx.Identifier, ctx.Dot);
        }

        methodName(ctx) {
          return printTokenWithComments(ctx.Identifier[0]);
        }

        packageOrTypeName(ctx) {
          return buildFqn(ctx.Identifier, ctx.Dot);
        }

        ambiguousName(ctx) {
          return buildFqn(ctx.Identifier, ctx.Dot);
        }
      }

      module.exports = {
        NamesPrettierVisitor,
      };

      /***/
    },
    /* 41 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const _ = __webpack_require__(7);

      const { concat, join } = __webpack_require__(6);
      const { printTokenWithComments } = __webpack_require__(2);
      const {
        rejectAndJoin,
        rejectAndConcat,
        sortClassTypeChildren,
        rejectAndJoinSeps,
      } = __webpack_require__(4);

      class TypesValuesAndVariablesPrettierVisitor {
        primitiveType(ctx) {
          const annotations = this.mapVisit(ctx.annotation);
          const type = ctx.numericType
            ? this.visit(ctx.numericType)
            : this.getSingle(ctx);

          return rejectAndJoin(" ", [join(" ", annotations), type]);
        }

        numericType(ctx) {
          return this.visitSingle(ctx);
        }

        integralType(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }

        floatingPointType(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }

        referenceType(ctx) {
          const annotations = this.mapVisit(ctx.annotation);

          const type = ctx.primitiveType
            ? this.visit(ctx.primitiveType)
            : this.visit(ctx.classOrInterfaceType);

          const dims = this.visit(ctx.dims);

          return rejectAndJoin(" ", [
            join(" ", annotations),
            concat([type, dims]),
          ]);
        }

        classOrInterfaceType(ctx) {
          return this.visitSingle(ctx);
        }

        classType(ctx) {
          const tokens = sortClassTypeChildren(
            ctx.annotation,
            ctx.typeArguments,
            ctx.Identifier
          );

          const segments = [];
          let currentSegment = [];

          _.forEach(tokens, (token, i) => {
            if (token.name === "typeArguments") {
              currentSegment.push(this.visit([token]));
              segments.push(rejectAndConcat(currentSegment));
              currentSegment = [];
            } else if (token.name === "annotation") {
              currentSegment.push(this.visit([token]));
            } else {
              currentSegment.push(token);
              if (
                (i + 1 < tokens.length &&
                  tokens[i + 1].name !== "typeArguments") ||
                i + 1 === tokens.length
              ) {
                segments.push(rejectAndConcat(currentSegment));
                currentSegment = [];
              }
            }
          });

          return rejectAndJoinSeps(ctx.Dot, segments);
        }

        interfaceType(ctx) {
          return this.visitSingle(ctx);
        }

        typeVariable(ctx) {
          const annotations = this.mapVisit(ctx.annotation);
          const identifier = this.getSingle(ctx);

          return rejectAndJoin(" ", [join(" ", annotations), identifier]);
        }

        dims(ctx) {
          let tokens = [...ctx.LSquare];

          if (ctx.annotation) {
            tokens = [...tokens, ...ctx.annotation];
          }

          tokens = tokens.sort((a, b) => {
            const startOffset1 = a.name
              ? a.children.At[0].startOffset
              : a.startOffset;
            const startOffset2 = b.name
              ? b.children.At[0].startOffset
              : b.startOffset;
            return startOffset1 - startOffset2;
          });

          const segments = [];
          let currentSegment = [];

          _.forEach(tokens, (token) => {
            if (token.name === "annotation") {
              currentSegment.push(this.visit([token]));
            } else {
              segments.push(
                rejectAndConcat([
                  rejectAndJoin(" ", currentSegment),
                  concat([ctx.LSquare[0], ctx.RSquare[0]]),
                ])
              );
              currentSegment = [];
            }
          });

          return rejectAndConcat(segments);
        }

        typeParameter(ctx) {
          const typeParameterModifiers = this.mapVisit(
            ctx.typeParameterModifier
          );

          const typeIdentifier = this.visit(ctx.typeIdentifier);
          const typeBound = this.visit(ctx.typeBound);

          return rejectAndJoin(" ", [
            join(" ", typeParameterModifiers),
            typeIdentifier,
            typeBound,
          ]);
        }

        typeParameterModifier(ctx) {
          return this.visitSingle(ctx);
        }

        typeBound(ctx) {
          const classOrInterfaceType = this.visit(ctx.classOrInterfaceType);
          const additionalBound = this.mapVisit(ctx.additionalBound);

          return rejectAndJoin(" ", [
            ctx.Extends[0],
            classOrInterfaceType,
            join(" ", additionalBound),
          ]);
        }

        additionalBound(ctx) {
          const interfaceType = this.visit(ctx.interfaceType);

          return join(" ", [ctx.And[0], interfaceType]);
        }

        typeArguments(ctx) {
          const typeArgumentList = this.visit(ctx.typeArgumentList);

          return rejectAndConcat([
            ctx.Less[0],
            typeArgumentList,
            ctx.Greater[0],
          ]);
        }

        typeArgumentList(ctx) {
          const typeArguments = this.mapVisit(ctx.typeArgument);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, " "]))
            : [];
          return rejectAndJoinSeps(commas, typeArguments);
        }

        typeArgument(ctx) {
          return this.visitSingle(ctx);
        }

        wildcard(ctx) {
          const annotations = this.mapVisit(ctx.annotation);
          const wildcardBounds = this.visit(ctx.wildcardBounds);

          return rejectAndJoin(" ", [
            join(" ", annotations),
            ctx.QuestionMark[0],
            wildcardBounds,
          ]);
        }

        wildcardBounds(ctx) {
          const keyWord = ctx.Extends ? ctx.Extends[0] : ctx.Super[0];
          const referenceType = this.visit(ctx.referenceType);
          return join(" ", [keyWord, referenceType]);
        }
      }

      module.exports = {
        TypesValuesAndVariablesPrettierVisitor,
      };

      /***/
    },
    /* 42 */
    /***/ function (module, exports, __webpack_require__) {
      "use strict";

      const { line, hardline, indent, group } =
        __webpack_require__(3).doc.builders;
      const { concat, join } = __webpack_require__(6);
      const { printTokenWithComments } = __webpack_require__(2);
      const {
        buildFqn,
        rejectAndJoin,
        rejectAndConcat,
        rejectAndJoinSeps,
        displaySemicolon,
        putIntoBraces,
        getBlankLinesSeparator,
        sortImports,
      } = __webpack_require__(4);

      class PackagesAndModulesPrettierVisitor {
        compilationUnit(ctx) {
          const compilationUnit =
            ctx.ordinaryCompilationUnit || ctx.modularCompilationUnit;

          return concat([this.visit(compilationUnit[0]), line]);
        }

        ordinaryCompilationUnit(ctx) {
          const packageDecl = this.visit(ctx.packageDeclaration);

          const sortedImportsDecl = sortImports(ctx.importDeclaration);
          const nonStaticImports = this.mapVisit(
            sortedImportsDecl.nonStaticImports
          );
          const staticImports = this.mapVisit(sortedImportsDecl.staticImports);

          const typesDecl = this.mapVisit(ctx.typeDeclaration);
          // TODO: utility to add item+line (or multiple lines) but only if an item exists
          return rejectAndConcat([
            rejectAndJoin(concat([hardline, hardline]), [
              packageDecl,
              rejectAndJoin(hardline, staticImports),
              rejectAndJoin(hardline, nonStaticImports),
              rejectAndJoin(concat([hardline, hardline]), typesDecl),
            ]),
          ]);
        }

        modularCompilationUnit(ctx) {
          const sortedImportsDecl = sortImports(ctx.importDeclaration);
          const nonStaticImports = this.mapVisit(
            sortedImportsDecl.nonStaticImports
          );
          const staticImports = this.mapVisit(sortedImportsDecl.staticImports);

          const moduleDeclaration = this.visit(ctx.moduleDeclaration);

          return rejectAndConcat([
            rejectAndJoin(concat([hardline, hardline]), [
              rejectAndJoin(hardline, staticImports),
              rejectAndJoin(hardline, nonStaticImports),
              moduleDeclaration,
            ]),
          ]);
        }

        packageDeclaration(ctx) {
          const modifiers = this.mapVisit(ctx.packageModifier);
          const name = buildFqn(ctx.Identifier, ctx.Dot);

          return rejectAndJoin(hardline, [
            rejectAndJoin(hardline, modifiers),
            concat([ctx.Package[0], " ", name, ctx.Semicolon[0]]),
          ]);
        }

        packageModifier(ctx) {
          return this.visitSingle(ctx);
        }

        importDeclaration(ctx) {
          if (ctx.emptyStatement !== undefined) {
            return this.visit(ctx.emptyStatement);
          }

          const optionalStatic = ctx.Static ? ctx.Static[0] : "";
          const packageOrTypeName = this.visit(ctx.packageOrTypeName);

          const optionalDotStar = ctx.Dot
            ? concat([ctx.Dot[0], ctx.Star[0]])
            : "";

          return rejectAndJoin(" ", [
            ctx.Import[0],
            optionalStatic,
            rejectAndConcat([
              packageOrTypeName,
              optionalDotStar,
              ctx.Semicolon[0],
            ]),
          ]);
        }

        typeDeclaration(ctx) {
          if (ctx.Semicolon) {
            return displaySemicolon(ctx.Semicolon[0]);
          }
          return this.visitSingle(ctx);
        }

        moduleDeclaration(ctx) {
          const annotations = this.mapVisit(ctx.annotation);
          const optionalOpen = ctx.Open ? ctx.Open[0] : "";
          const name = buildFqn(ctx.Identifier, ctx.Dot);
          const moduleDirectives = this.mapVisit(ctx.moduleDirective);

          const content = rejectAndJoinSeps(
            getBlankLinesSeparator(ctx.moduleDirective),
            moduleDirectives
          );

          return rejectAndJoin(" ", [
            join(" ", annotations),
            optionalOpen,
            ctx.Module[0],
            name,
            putIntoBraces(content, hardline, ctx.LCurly[0], ctx.RCurly[0]),
          ]);
        }

        moduleDirective(ctx) {
          return this.visitSingle(ctx);
        }

        requiresModuleDirective(ctx) {
          const modifiers = this.mapVisit(ctx.requiresModifier);
          const moduleName = this.visit(ctx.moduleName);

          return rejectAndJoin(" ", [
            ctx.Requires[0],
            join(" ", modifiers),
            concat([moduleName, ctx.Semicolon[0]]),
          ]);
        }

        exportsModuleDirective(ctx) {
          const packageName = this.visit(ctx.packageName);
          const to = ctx.To ? ctx.To[0] : "";
          const moduleNames = this.mapVisit(ctx.moduleName);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];

          return group(
            rejectAndConcat([
              indent(
                rejectAndJoin(line, [
                  rejectAndJoin(" ", [ctx.Exports[0], packageName]),
                  group(
                    indent(
                      rejectAndJoin(line, [
                        to,
                        rejectAndJoinSeps(commas, moduleNames),
                      ])
                    )
                  ),
                ])
              ),
              ctx.Semicolon[0],
            ])
          );
        }

        opensModuleDirective(ctx) {
          const packageName = this.visit(ctx.packageName);
          const to = ctx.To ? ctx.To[0] : "";
          const moduleNames = this.mapVisit(ctx.moduleName);
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];

          return group(
            rejectAndConcat([
              indent(
                rejectAndJoin(line, [
                  rejectAndJoin(" ", [ctx.Opens[0], packageName]),
                  group(
                    indent(
                      rejectAndJoin(line, [
                        to,
                        rejectAndJoinSeps(commas, moduleNames),
                      ])
                    )
                  ),
                ])
              ),
              ctx.Semicolon[0],
            ])
          );
        }

        usesModuleDirective(ctx) {
          const typeName = this.visit(ctx.typeName);

          return rejectAndConcat([
            concat([ctx.Uses[0], " "]),
            typeName,
            ctx.Semicolon[0],
          ]);
        }

        providesModuleDirective(ctx) {
          const firstTypeName = this.visit(ctx.typeName[0]);
          const otherTypeNames = this.mapVisit(ctx.typeName.slice(1));
          const commas = ctx.Comma
            ? ctx.Comma.map((elt) => concat([elt, line]))
            : [];

          return group(
            rejectAndConcat([
              indent(
                rejectAndJoin(line, [
                  rejectAndJoin(" ", [ctx.Provides[0], firstTypeName]),
                  group(
                    indent(
                      rejectAndJoin(line, [
                        ctx.With[0],
                        rejectAndJoinSeps(commas, otherTypeNames),
                      ])
                    )
                  ),
                ])
              ),
              ctx.Semicolon[0],
            ])
          );
        }

        requiresModifier(ctx) {
          return printTokenWithComments(this.getSingle(ctx));
        }

        isModuleCompilationUnit() {
          return "isModuleCompilationUnit";
        }
      }

      module.exports = {
        PackagesAndModulesPrettierVisitor,
      };

      /***/
    },
    /******/
  ]
);

export default prettierFormat_formatCode;
